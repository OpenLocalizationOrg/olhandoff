<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="zh-cn" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">2f9b56da71d2b73859043cc145bf84f1972e92d7</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: CFB3601D-3459-465F-80E2-520F57B88F62</source>
          <target xml:space="preserve">ms.assetid: CFB3601D-3459-465F-80E2-520F57B88F62</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Create a "Hello, world" app (JS)</source>
          <target xml:space="preserve">title: Create a "Hello, world" app (JS)</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">description: This tutorial teaches you how to use JavaScript and HTML to create a simple &amp;\#0034;Hello, world&amp;\#0034; app that targets the Universal Windows Platform (UWP) on Windows 10.</source>
          <target xml:space="preserve">description: This tutorial teaches you how to use JavaScript and HTML to create a simple &amp;\#0034;Hello, world&amp;\#0034; app that targets the Universal Windows Platform (UWP) on Windows 10.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Create a "Hello, world" app (JS)</source>
          <target xml:space="preserve">Create a "Hello, world" app (JS)</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">This tutorial teaches you how to use JavaScript and HTML to create a simple "Hello, world" app that targets the Universal Windows Platform (UWP) on Windows 10.</source>
          <target xml:space="preserve">This tutorial teaches you how to use JavaScript and HTML to create a simple "Hello, world" app that targets the Universal Windows Platform (UWP) on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">With a single project in Microsoft Visual Studio, you can build an app that runs on any Windows 10 device.</source>
          <target xml:space="preserve">With a single project in Microsoft Visual Studio, you can build an app that runs on any Windows 10 device.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Here we focus on creating an app that runs equally well on desktop and mobile devices.</source>
          <target xml:space="preserve">Here we focus on creating an app that runs equally well on desktop and mobile devices.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>   This tutorial is for use with Microsoft Visual Studio 2015 and Windows 10.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important</pc>   This tutorial is for use with Microsoft Visual Studio 2015 and Windows 10.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">It won't work correctly with earlier versions.</source>
          <target xml:space="preserve">It won't work correctly with earlier versions.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Here you'll learn how to:</source>
          <target xml:space="preserve">Here you'll learn how to:</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">Create a new project</source>
          <target xml:space="preserve">Create a new project</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Add HTML content to your start page</source>
          <target xml:space="preserve">Add HTML content to your start page</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Handle touch, pen, and mouse input</source>
          <target xml:space="preserve">Handle touch, pen, and mouse input</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Run the project on the local desktop and on the phone emulator in Visual Studio.</source>
          <target xml:space="preserve">Run the project on the local desktop and on the phone emulator in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Create your own custom styles</source>
          <target xml:space="preserve">Create your own custom styles</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">Use a Windows Library for JavaScript control</source>
          <target xml:space="preserve">Use a Windows Library for JavaScript control</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Before you start...</source>
          <target xml:space="preserve">Before you start...</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">We're going to jump right into the steps you use to create a simple universal app.</source>
          <target xml:space="preserve">We're going to jump right into the steps you use to create a simple universal app.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://dev.windows.com/whats-new-windows-10-dev-preview)</data>
          <data id="id3">[</data>
          <data id="id4">](whats-a-uwp.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">So we strongly recommend that you read and understand the overview information in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's new in Windows 10</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">What's a Universal Windows app</pc> before you start this tutorial.</source>
          <target xml:space="preserve">So we strongly recommend that you read and understand the overview information in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">What's new in Windows 10</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">What's a Universal Windows app</pc> before you start this tutorial.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">To complete this tutorial, you need Windows 10 and Visual Studio 2015.</source>
          <target xml:space="preserve">To complete this tutorial, you need Windows 10 and Visual Studio 2015.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](get-set-up.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get set up</pc> for more info.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get set up</pc> for more info.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">We also assume you're using the default window layout in Visual Studio.</source>
          <target xml:space="preserve">We also assume you're using the default window layout in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you change the default layout, you can reset it in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Window</pc> menu by using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reset Window Layout</pc> command.</source>
          <target xml:space="preserve">If you change the default layout, you can reset it in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Window</pc> menu by using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reset Window Layout</pc> command.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">Step 1: Create a new project in Visual Studio</source>
          <target xml:space="preserve">Step 1: Create a new project in Visual Studio</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">`HelloWorld`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Let's create a new app named <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">Let's create a new app named <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Here's how:</source>
          <target xml:space="preserve">Here's how:</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Launch Visual Studio 2015.</source>
          <target xml:space="preserve">Launch Visual Studio 2015.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">The Visual Studio 2015 start screen appears.</source>
          <target xml:space="preserve">The Visual Studio 2015 start screen appears.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">(From now on, we'll refer to Visual Studio 2015 simply as Visual Studio .)</source>
          <target xml:space="preserve">(From now on, we'll refer to Visual Studio 2015 simply as Visual Studio .)</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File</pc> menu, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Project</pc>.</source>
          <target xml:space="preserve">On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File</pc> menu, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Project</pc>.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog appears.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New Project</pc> dialog appears.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">The left pane of the dialog lets you pick the type of templates to display.</source>
          <target xml:space="preserve">The left pane of the dialog lets you pick the type of templates to display.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the left pane, expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Installed &gt; Templates &gt; JavaScript &gt; Windows</pc>, then pick the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Universal</pc> template group.</source>
          <target xml:space="preserve">In the left pane, expand <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Installed &gt; Templates &gt; JavaScript &gt; Windows</pc>, then pick the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Universal</pc> template group.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">The dialog's center pane displays a list of project templates for Universal Windows Platform (UWP) apps.</source>
          <target xml:space="preserve">The dialog's center pane displays a list of project templates for Universal Windows Platform (UWP) apps.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">The New Project window</source>
          <target xml:space="preserve">The New Project window</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For this tutorial, we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App</pc> template.</source>
          <target xml:space="preserve">For this tutorial, we use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App</pc> template.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">This template creates a minimal UWP app that compiles and runs, but contains no user interface controls or data.</source>
          <target xml:space="preserve">This template creates a minimal UWP app that compiles and runs, but contains no user interface controls or data.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">You add controls and data to the app over the course of this tutorials.</source>
          <target xml:space="preserve">You add controls and data to the app over the course of this tutorials.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the center pane, select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (Universal Windows)</pc> template.</source>
          <target xml:space="preserve">In the center pane, select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App (Universal Windows)</pc> template.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App</pc> template creates a minimal UWP app that compiles and runs, but contains no user-interface controls or data.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App</pc> template creates a minimal UWP app that compiles and runs, but contains no user-interface controls or data.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">You add controls to the app over the course of this tutorial.</source>
          <target xml:space="preserve">You add controls to the app over the course of this tutorial.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> text box, type "HelloWorld".</source>
          <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> text box, type "HelloWorld".</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> to create the project.</source>
          <target xml:space="preserve">Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> to create the project.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Visual Studio creates your project and displays it in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>.</source>
          <target xml:space="preserve">Visual Studio creates your project and displays it in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">Visual Studio Solution Explorer for the HelloWorld project</source>
          <target xml:space="preserve">Visual Studio Solution Explorer for the HelloWorld project</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Although the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App</pc> is a minimal template, it still contains a handful of files:</source>
          <target xml:space="preserve">Although the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank App</pc> is a minimal template, it still contains a handful of files:</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">A manifest file (package.appxmanifest) that describes your app (its name, description, tile, start page, splash screen, and so on) and lists the files that your app contains.</source>
          <target xml:space="preserve">A manifest file (package.appxmanifest) that describes your app (its name, description, tile, start page, splash screen, and so on) and lists the files that your app contains.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">A set of logo images (images/Square150x150Logo.scale-200.png, images/Square44x44Logo.scale-200.png, and images/Wide310x150Logo.scale-200.png)to display in the start menu.</source>
          <target xml:space="preserve">A set of logo images (images/Square150x150Logo.scale-200.png, images/Square44x44Logo.scale-200.png, and images/Wide310x150Logo.scale-200.png)to display in the start menu.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">An image (images/StoreLogo.png) to represent your app in the Windows Store.</source>
          <target xml:space="preserve">An image (images/StoreLogo.png) to represent your app in the Windows Store.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">A splash screen (images/SplashScreen.scale-200.png) to show when your app starts.</source>
          <target xml:space="preserve">A splash screen (images/SplashScreen.scale-200.png) to show when your app starts.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">A start page (default.html) and an accompanying JavaScript file (default.js) that run when your app starts.</source>
          <target xml:space="preserve">A start page (default.html) and an accompanying JavaScript file (default.js) that run when your app starts.</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To view and edit the files, double-click the file in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>.</source>
          <target xml:space="preserve">To view and edit the files, double-click the file in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution Explorer</pc>.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">These files are essential to all UWP apps using JavaScript.</source>
          <target xml:space="preserve">These files are essential to all UWP apps using JavaScript.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">Any project that you create in Visual Studio contains them.</source>
          <target xml:space="preserve">Any project that you create in Visual Studio contains them.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">Step 2: Launch the app</source>
          <target xml:space="preserve">Step 2: Launch the app</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">At this point, you've created a very simple app.</source>
          <target xml:space="preserve">At this point, you've created a very simple app.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">This is a good time to build, deploy, and launch your app and see what it looks like.</source>
          <target xml:space="preserve">This is a good time to build, deploy, and launch your app and see what it looks like.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">You can debug your app on the local machine, in a simulator or emulator, or on a remote device.</source>
          <target xml:space="preserve">You can debug your app on the local machine, in a simulator or emulator, or on a remote device.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">Here's the target device menu in Visual Studio.</source>
          <target xml:space="preserve">Here's the target device menu in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">Drop-down list of device targets for debugging your app</source>
          <target xml:space="preserve">Drop-down list of device targets for debugging your app</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">Start the app on a Desktop device</source>
          <target xml:space="preserve">Start the app on a Desktop device</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">By default, the app runs on the local machine.</source>
          <target xml:space="preserve">By default, the app runs on the local machine.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">The target device menu provides several options for debugging your app on devices from the desktop device family.</source>
          <target xml:space="preserve">The target device menu provides several options for debugging your app on devices from the desktop device family.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">Simulator</source>
          <target xml:space="preserve">Simulator</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">Local Machine</source>
          <target xml:space="preserve">Local Machine</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">Remote Machine</source>
          <target xml:space="preserve">Remote Machine</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">To start debugging on the local machine</source>
          <target xml:space="preserve">To start debugging on the local machine</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">![</data>
          <data id="id2">](images/startdebug-full.png)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the target device menu (<ph dataRef="id1" id="ph1" />Start debugging menu<ph dataRef="id2" id="ph2" />) on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Standard</pc> toolbar, make sure that <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Local Machine</pc> is selected.</source>
          <target xml:space="preserve">In the target device menu (<ph dataRef="id1" id="ph1" />Start debugging menu<ph dataRef="id2" id="ph2" />) on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Standard</pc> toolbar, make sure that <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Local Machine</pc> is selected.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">(It's the default selection.)</source>
          <target xml:space="preserve">(It's the default selection.)</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">![</data>
          <data id="id4">](images/startdebug-sm.png)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> button (<ph dataRef="id3" id="ph1" />Start debugging button<ph dataRef="id4" id="ph2" />) on the toolbar.</source>
          <target xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> button (<ph dataRef="id3" id="ph1" />Start debugging button<ph dataRef="id4" id="ph2" />) on the toolbar.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">–or–</source>
          <target xml:space="preserve">–or–</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Debugging</pc>.</source>
          <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Debugging</pc>.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">–or–</source>
          <target xml:space="preserve">–or–</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">Press F5.</source>
          <target xml:space="preserve">Press F5.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">The app opens in a window, and a default splash screen appears first.</source>
          <target xml:space="preserve">The app opens in a window, and a default splash screen appears first.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">The splash screen is defined by an image (SplashScreen.png) and a background color (specified in your app's manifest file).</source>
          <target xml:space="preserve">The splash screen is defined by an image (SplashScreen.png) and a background color (specified in your app's manifest file).</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">The splash screen disappears, and then your app appears.</source>
          <target xml:space="preserve">The splash screen disappears, and then your app appears.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">It contains a black screen with the text "Content goes here".</source>
          <target xml:space="preserve">It contains a black screen with the text "Content goes here".</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">The HelloWorld app on a PC</source>
          <target xml:space="preserve">The HelloWorld app on a PC</target>
        </segment>
      </unit>
      <unit id="180">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Press the Windows key to open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu, then show all apps.</source>
          <target xml:space="preserve">Press the Windows key to open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu, then show all apps.</target>
        </segment>
      </unit>
      <unit id="181">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Notice that deploying the app locally adds its tile to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu.</source>
          <target xml:space="preserve">Notice that deploying the app locally adds its tile to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu.</target>
        </segment>
      </unit>
      <unit id="182">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To run the app again (not in debugging mode), tap or click its tile in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu.</source>
          <target xml:space="preserve">To run the app again (not in debugging mode), tap or click its tile in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">It doesn't do much—yet—but congratulations, you've built your first UWP app!</source>
          <target xml:space="preserve">It doesn't do much—yet—but congratulations, you've built your first UWP app!</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">To stop debugging</source>
          <target xml:space="preserve">To stop debugging</target>
        </segment>
      </unit>
      <unit id="185">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">![</data>
          <data id="id4">](images/stopdebug.png)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stop Debugging</pc> button (<ph dataRef="id3" id="ph1" />Stop debugging button<ph dataRef="id4" id="ph2" />) in the toolbar.</source>
          <target xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stop Debugging</pc> button (<ph dataRef="id3" id="ph1" />Stop debugging button<ph dataRef="id4" id="ph2" />) in the toolbar.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">–or–</source>
          <target xml:space="preserve">–or–</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Stop debugging</pc>.</source>
          <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Stop debugging</pc>.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source xml:space="preserve">–or–</source>
          <target xml:space="preserve">–or–</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">Close the app window.</source>
          <target xml:space="preserve">Close the app window.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source xml:space="preserve">Start the app on a mobile device emulator</source>
          <target xml:space="preserve">Start the app on a mobile device emulator</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.</source>
          <target xml:space="preserve">Your app runs on any Windows 10 device, so let’s see how it looks on a Windows Phone.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.</source>
          <target xml:space="preserve">In addition to the options to debug on a desktop device, Visual Studio provides options for deploying and debugging your app on a physical mobile device connected to the computer, or on a mobile device emulator.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source xml:space="preserve">You can choose among emulators for devices with different memory and display configurations.</source>
          <target xml:space="preserve">You can choose among emulators for devices with different memory and display configurations.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">Device</source>
          <target xml:space="preserve">Device</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source xml:space="preserve">Emulator</source>
          <target xml:space="preserve">Emulator</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">WVGA 4 inch 512MB</source>
          <target xml:space="preserve">WVGA 4 inch 512MB</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">Emulator</source>
          <target xml:space="preserve">Emulator</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">WVGA 4 inch 1GB</source>
          <target xml:space="preserve">WVGA 4 inch 1GB</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">etc... (Various emulators in other configurations)</source>
          <target xml:space="preserve">etc... (Various emulators in other configurations)</target>
        </segment>
      </unit>
      <unit id="200">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">It's a good idea to test your app on a device with a small screen and limited memory, so use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc> option.</source>
          <target xml:space="preserve">It's a good idea to test your app on a device with a small screen and limited memory, so use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc> option.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">To start debugging on a mobile device emulator</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">To start debugging on a mobile device emulator</pc>
					</target>
        </segment>
      </unit>
      <unit id="202">
        <originalData>
          <data id="id1">![</data>
          <data id="id2">](images/startdebug-full.png)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the target device menu (<ph dataRef="id1" id="ph1" />Start debugging menu<ph dataRef="id2" id="ph2" />) on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Standard</pc> toolbar, pick <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc>.</source>
          <target xml:space="preserve">In the target device menu (<ph dataRef="id1" id="ph1" />Start debugging menu<ph dataRef="id2" id="ph2" />) on the <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Standard</pc> toolbar, pick <pc dataRefEnd="id6" dataRefStart="id5" id="p2">Emulator 10.0.10240.0 WVGA 4 inch 512MB</pc>.</target>
        </segment>
      </unit>
      <unit id="203">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">![</data>
          <data id="id4">](images/startdebug-sm.png)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> button (<ph dataRef="id3" id="ph1" />Start debugging button<ph dataRef="id4" id="ph2" />) in the toolbar.</source>
          <target xml:space="preserve">Click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start Debugging</pc> button (<ph dataRef="id3" id="ph1" />Start debugging button<ph dataRef="id4" id="ph2" />) in the toolbar.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">–or–</source>
          <target xml:space="preserve">–or–</target>
        </segment>
      </unit>
      <unit id="205">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Debugging</pc>.</source>
          <target xml:space="preserve">From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Debug</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start Debugging</pc>.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">Visual Studio starts the selected emulator and then deploys and starts your app.</source>
          <target xml:space="preserve">Visual Studio starts the selected emulator and then deploys and starts your app.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source xml:space="preserve">On the mobile device emulator, the app looks like this.</source>
          <target xml:space="preserve">On the mobile device emulator, the app looks like this.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">Initial app screen on mobile device</source>
          <target xml:space="preserve">Initial app screen on mobile device</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source xml:space="preserve">Step 3: Modify your start page</source>
          <target xml:space="preserve">Step 3: Modify your start page</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source xml:space="preserve">One of the files that Visual Studio created for you is default.html, your app's start page.</source>
          <target xml:space="preserve">One of the files that Visual Studio created for you is default.html, your app's start page.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source xml:space="preserve">When the app runs, it displays the content of its start page.</source>
          <target xml:space="preserve">When the app runs, it displays the content of its start page.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source xml:space="preserve">The start page also contains references to the app's code files and style sheets.</source>
          <target xml:space="preserve">The start page also contains references to the app's code files and style sheets.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source xml:space="preserve">Here's the start page that Visual Studio created for you:</source>
          <target xml:space="preserve">Here's the start page that Visual Studio created for you:</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source xml:space="preserve">Let's add some new content to your default.html file.</source>
          <target xml:space="preserve">Let's add some new content to your default.html file.</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh453011)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Just as you would add content to any other HTML file, you add your content inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">body</pc></pc> element.</source>
          <target xml:space="preserve">Just as you would add content to any other HTML file, you add your content inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">body</pc></pc> element.</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh465380)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can use HTML5 elements to create your app (with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">few exceptions</pc>).</source>
          <target xml:space="preserve">You can use HTML5 elements to create your app (with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">few exceptions</pc>).</target>
        </segment>
      </unit>
      <unit id="217">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh441078)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh453431)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/Hh453017)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/Hh453133)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
          <data id="id17">[</data>
          <data id="id18">](https://msdn.microsoft.com/library/windows/apps/Hh466114)</data>
          <data id="id19">**</data>
          <data id="id20">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">That means you can use HTML5 elements like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">h1</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">p</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">button</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">div</pc></pc>, and <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">img</pc></pc>.</source>
          <target xml:space="preserve">That means you can use HTML5 elements like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">h1</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">p</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">button</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">div</pc></pc>, and <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">img</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source xml:space="preserve">To modify your start page</source>
          <target xml:space="preserve">To modify your start page</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh453011)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh453271)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/Hh453017)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/Hh453133)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Replace the existing content in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">body</pc></pc> element with a first-level heading that says "Hello, world!", some text that asks the user's name, an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">input</pc></pc> element to accept the user's name, a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">button</pc></pc>, and a <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">div</pc></pc> element.</source>
          <target xml:space="preserve">Replace the existing content in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">body</pc></pc> element with a first-level heading that says "Hello, world!", some text that asks the user's name, an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">input</pc></pc> element to accept the user's name, a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">button</pc></pc>, and a <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">div</pc></pc> element.</target>
        </segment>
      </unit>
      <unit id="220">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Assign IDs to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">input</pc>, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">button</pc>, and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">div</pc>.</source>
          <target xml:space="preserve">Assign IDs to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">input</pc>, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">button</pc>, and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">div</pc>.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source xml:space="preserve">Run the app on the local machine.</source>
          <target xml:space="preserve">Run the app on the local machine.</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source xml:space="preserve">It look like this.</source>
          <target xml:space="preserve">It look like this.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source xml:space="preserve">The HelloWorld app with new content</source>
          <target xml:space="preserve">The HelloWorld app with new content</target>
        </segment>
      </unit>
      <unit id="224">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh453271)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh453017)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can type in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">input</pc></pc> element, but right now, clicking the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">button</pc></pc> doesn't do anything.</source>
          <target xml:space="preserve">You can type in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">input</pc></pc> element, but right now, clicking the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">button</pc></pc> doesn't do anything.</target>
        </segment>
      </unit>
      <unit id="225">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Some objects, such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">button</pc>, can send messages when certain events occur.</source>
          <target xml:space="preserve">Some objects, such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">button</pc>, can send messages when certain events occur.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source xml:space="preserve">These event messages give you the opportunity to take some action in response to the event.</source>
          <target xml:space="preserve">These event messages give you the opportunity to take some action in response to the event.</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source xml:space="preserve">You put code to respond to the event in an event handler method.</source>
          <target xml:space="preserve">You put code to respond to the event in an event handler method.</target>
        </segment>
      </unit>
      <unit id="228">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh453017)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the next steps, we create an event handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">button</pc></pc> that displays a personalized greeting.</source>
          <target xml:space="preserve">In the next steps, we create an event handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">button</pc></pc> that displays a personalized greeting.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source xml:space="preserve">We add our event handler code to our default.js file.</source>
          <target xml:space="preserve">We add our event handler code to our default.js file.</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source xml:space="preserve">Step 4: Create an event handler</source>
          <target xml:space="preserve">Step 4: Create an event handler</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source xml:space="preserve">When we created our new project, Visual Studio created a /js/default.js file for us.</source>
          <target xml:space="preserve">When we created our new project, Visual Studio created a /js/default.js file for us.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source xml:space="preserve">This file contains code for handling your app's life cycle.</source>
          <target xml:space="preserve">This file contains code for handling your app's life cycle.</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source xml:space="preserve">It's also where you write additional code that provides interactivity for your default.html file.</source>
          <target xml:space="preserve">It's also where you write additional code that provides interactivity for your default.html file.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source xml:space="preserve">Open the default.js file.</source>
          <target xml:space="preserve">Open the default.js file.</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source xml:space="preserve">Before we start adding our own code, let's take a look at the first and the last few lines of code in the file:</source>
          <target xml:space="preserve">Before we start adding our own code, let's take a look at the first and the last few lines of code in the file:</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source xml:space="preserve">You might be wondering what's going on here.</source>
          <target xml:space="preserve">You might be wondering what's going on here.</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source xml:space="preserve">These lines of code wrap the rest of the default.js code in a self-executing anonymous function.</source>
          <target xml:space="preserve">These lines of code wrap the rest of the default.js code in a self-executing anonymous function.</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source xml:space="preserve">A self-executing anonymous function makes it easier to avoid naming conflicts or situations where you accidently modify a value that you didn't intend to modify.</source>
          <target xml:space="preserve">A self-executing anonymous function makes it easier to avoid naming conflicts or situations where you accidently modify a value that you didn't intend to modify.</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source xml:space="preserve">It also keeps unnecessary identifiers out of the global namespace, which helps performance.</source>
          <target xml:space="preserve">It also keeps unnecessary identifiers out of the global namespace, which helps performance.</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source xml:space="preserve">It looks a little strange, but it's a good programming practice.</source>
          <target xml:space="preserve">It looks a little strange, but it's a good programming practice.</target>
        </segment>
      </unit>
      <unit id="241">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/br230269.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The next line of code turns on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">strict mode</pc> for your JavaScript code.</source>
          <target xml:space="preserve">The next line of code turns on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">strict mode</pc> for your JavaScript code.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source xml:space="preserve">Strict mode provides additional error checking for your code.</source>
          <target xml:space="preserve">Strict mode provides additional error checking for your code.</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source xml:space="preserve">For example, it prevents you from using implicitly declared variables or assigning a value to a read-only property.</source>
          <target xml:space="preserve">For example, it prevents you from using implicitly declared variables or assigning a value to a read-only property.</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source xml:space="preserve">Take a look at the rest of the code in default.js.</source>
          <target xml:space="preserve">Take a look at the rest of the code in default.js.</target>
        </segment>
      </unit>
      <unit id="245">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR212679)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR229839)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">It handles your app's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">activated</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">checkpoint</pc></pc> events.</source>
          <target xml:space="preserve">It handles your app's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">activated</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">checkpoint</pc></pc> events.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source xml:space="preserve">We go into more detail about these events later.</source>
          <target xml:space="preserve">We go into more detail about these events later.</target>
        </segment>
      </unit>
      <unit id="247">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For now, just know that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">activated</pc> event fires when your app starts.</source>
          <target xml:space="preserve">For now, just know that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">activated</pc> event fires when your app starts.</target>
        </segment>
      </unit>
      <unit id="248">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh453017)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Let's define an event handler for your <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">button</pc></pc>.</source>
          <target xml:space="preserve">Let's define an event handler for your <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">button</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="249">
        <originalData>
          <data id="id1">`nameInput`</data>
          <data id="id2">[</data>
          <data id="id3">](https://msdn.microsoft.com/library/windows/apps/Hh453271)</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">`greetingOutput`</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/Hh453133)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Our new event handler gets the user's name from the <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">input</pc></pc> control and uses it to output a greeting to the <ph dataRef="id6" id="ph2" /> <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><pc dataRefEnd="id10" dataRefStart="id9" id="p4">div</pc></pc> element that you created in the last section.</source>
          <target xml:space="preserve">Our new event handler gets the user's name from the <ph dataRef="id1" id="ph1" /> <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">input</pc></pc> control and uses it to output a greeting to the <ph dataRef="id6" id="ph2" /> <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><pc dataRefEnd="id10" dataRefStart="id9" id="p4">div</pc></pc> element that you created in the last section.</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source xml:space="preserve">Using events that work for touch, mouse, and pen input</source>
          <target xml:space="preserve">Using events that work for touch, mouse, and pen input</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source xml:space="preserve">In a UWP app, you don’t need to worry about the differences between touch, mouse, and other forms of pointer input.</source>
          <target xml:space="preserve">In a UWP app, you don’t need to worry about the differences between touch, mouse, and other forms of pointer input.</target>
        </segment>
      </unit>
      <unit id="252">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh441312)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can just use events that you know, like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">click</pc></pc>, and they work for all forms of input.</source>
          <target xml:space="preserve">You can just use events that you know, like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">click</pc></pc>, and they work for all forms of input.</target>
        </segment>
      </unit>
      <unit id="253">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>   Your app can also use the new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MSPointer\*</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MSGesture\*</pc> events, which work for touch, mouse, and pen input and can provide additional info about the device that triggered the event.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>   Your app can also use the new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MSPointer\*</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">MSGesture\*</pc> events, which work for touch, mouse, and pen input and can provide additional info about the device that triggered the event.</target>
        </segment>
      </unit>
      <unit id="254">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh700412)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Hh761498)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Responding to user interaction</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Gestures, manipulations, and interactions</pc>.</source>
          <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Responding to user interaction</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Gestures, manipulations, and interactions</pc>.</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source xml:space="preserve">Let's go ahead and create the event handler.</source>
          <target xml:space="preserve">Let's go ahead and create the event handler.</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source xml:space="preserve">To create the event handler</source>
          <target xml:space="preserve">To create the event handler</target>
        </segment>
      </unit>
      <unit id="257">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR229839)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR229705)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/Hh441312)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">`buttonClickHandler`</data>
          <data id="id14">`eventInfo`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In default.js, after the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">app.oncheckpoint</pc></pc> event handler and before the call to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">app.start</pc></pc>, create a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">click</pc></pc> event handler function named <ph dataRef="id13" id="ph1" /> that takes a single parameter named <ph dataRef="id14" id="ph2" />.</source>
          <target xml:space="preserve">In default.js, after the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">app.oncheckpoint</pc></pc> event handler and before the call to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">app.start</pc></pc>, create a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">click</pc></pc> event handler function named <ph dataRef="id13" id="ph1" /> that takes a single parameter named <ph dataRef="id14" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source xml:space="preserve">You added your event handler to default.js.</source>
          <target xml:space="preserve">You added your event handler to default.js.</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source xml:space="preserve">Now you need to register it.</source>
          <target xml:space="preserve">Now you need to register it.</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source xml:space="preserve">Step 5: Register the event handler when your app launches</source>
          <target xml:space="preserve">Step 5: Register the event handler when your app launches</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source xml:space="preserve">The only thing we need to do now is register the event handler with the button.</source>
          <target xml:space="preserve">The only thing we need to do now is register the event handler with the button.</target>
        </segment>
      </unit>
      <unit id="262">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh441145)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The recommended way to register an event handler is to call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">addEventListener</pc></pc> from our code.</source>
          <target xml:space="preserve">The recommended way to register an event handler is to call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">addEventListener</pc></pc> from our code.</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source xml:space="preserve">A good place to register the event handler is when our app is activated.</source>
          <target xml:space="preserve">A good place to register the event handler is when our app is activated.</target>
        </segment>
      </unit>
      <unit id="264">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR212679)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Fortunately, Visual Studio generated some code for us in our default.js file that handles our app's activation: the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">app.onactivated</pc></pc> event handler.</source>
          <target xml:space="preserve">Fortunately, Visual Studio generated some code for us in our default.js file that handles our app's activation: the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">app.onactivated</pc></pc> event handler.</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source xml:space="preserve">Let's take a look at this code.</source>
          <target xml:space="preserve">Let's take a look at this code.</target>
        </segment>
      </unit>
      <unit id="266">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR212679)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">onactivated</pc></pc> handler, the code checks to see what type of activation occurred.</source>
          <target xml:space="preserve">Inside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">onactivated</pc></pc> handler, the code checks to see what type of activation occurred.</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source xml:space="preserve">There are many different types of activations.</source>
          <target xml:space="preserve">There are many different types of activations.</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source xml:space="preserve">For example, your app is activated when the user launches your app and when the user wants to open a file that is associated with your app.</source>
          <target xml:space="preserve">For example, your app is activated when the user launches your app and when the user wants to open a file that is associated with your app.</target>
        </segment>
      </unit>
      <unit id="269">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt243287)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">(For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App lifecycle</pc>.)</source>
          <target xml:space="preserve">(For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">App lifecycle</pc>.)</target>
        </segment>
      </unit>
      <unit id="270">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR224693)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">We're interested in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">launch</pc></pc> activation.</source>
          <target xml:space="preserve">We're interested in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">launch</pc></pc> activation.</target>
        </segment>
      </unit>
      <unit id="271">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">An app is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">launched</pc> whenever it is not running and then a user activates it.</source>
          <target xml:space="preserve">An app is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">launched</pc> whenever it is not running and then a user activates it.</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source xml:space="preserve">If the activation is a launch activation, the code checks to see how the app was shut down the last time it ran.</source>
          <target xml:space="preserve">If the activation is a launch activation, the code checks to see how the app was shut down the last time it ran.</target>
        </segment>
      </unit>
      <unit id="273">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh440975)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Then it calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc>.</source>
          <target xml:space="preserve">Then it calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="274">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh440975)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">It calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc> regardless of whether the app had been shut down in the past or whether this is the very first time it's being launched.</source>
          <target xml:space="preserve">It calls <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc> regardless of whether the app had been shut down in the past or whether this is the very first time it's being launched.</target>
        </segment>
      </unit>
      <unit id="275">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/JJ215609)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.UI.processAll</pc> is enclosed in a call to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">setPromise</pc></pc> method, which makes sure the splash screen isn't taken down until the app's page is ready.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.UI.processAll</pc> is enclosed in a call to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">setPromise</pc></pc> method, which makes sure the splash screen isn't taken down until the app's page is ready.</target>
        </segment>
      </unit>
      <unit id="276">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Hh440975)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>   The <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">WinJS.UI.processAll</pc></pc> function scans your default.html file for WinJS controls and initializes them.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>   The <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">WinJS.UI.processAll</pc></pc> function scans your default.html file for WinJS controls and initializes them.</target>
        </segment>
      </unit>
      <unit id="277">
        <segment state="initial">
          <source xml:space="preserve">So far, we haven't added any of these controls, but it's a good idea to leave this code in case you want to add them later.</source>
          <target xml:space="preserve">So far, we haven't added any of these controls, but it's a good idea to leave this code in case you want to add them later.</target>
        </segment>
      </unit>
      <unit id="278">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh440975)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A good place to register event handlers for non-WinJS controls is just after the call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc>.</source>
          <target xml:space="preserve">A good place to register event handlers for non-WinJS controls is just after the call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="279">
        <segment state="initial">
          <source xml:space="preserve">To register your event handler</source>
          <target xml:space="preserve">To register your event handler</target>
        </segment>
      </unit>
      <unit id="280">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR212679)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">`helloButton`</data>
          <data id="id6">[</data>
          <data id="id7">](https://msdn.microsoft.com/library/windows/apps/Hh441145)</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">[</data>
          <data id="id11">](https://msdn.microsoft.com/library/windows/apps/Hh441312)</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">onactivated</pc></pc> event handler in default.js, retrieve <ph dataRef="id5" id="ph1" /> and use <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">addEventListener</pc></pc> to register our event handler for the <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">click</pc></pc> event.</source>
          <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">onactivated</pc></pc> event handler in default.js, retrieve <ph dataRef="id5" id="ph1" /> and use <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">addEventListener</pc></pc> to register our event handler for the <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">click</pc></pc> event.</target>
        </segment>
      </unit>
      <unit id="281">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh440975)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Add this code after the call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc>.</source>
          <target xml:space="preserve">Add this code after the call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="282">
        <segment state="initial">
          <source xml:space="preserve">Here's the complete code for our updated default.js file:</source>
          <target xml:space="preserve">Here's the complete code for our updated default.js file:</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source xml:space="preserve">Run the app.</source>
          <target xml:space="preserve">Run the app.</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source xml:space="preserve">When you enter your name in the text box and click the button, the app displays a personalized greeting.</source>
          <target xml:space="preserve">When you enter your name in the text box and click the button, the app displays a personalized greeting.</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source xml:space="preserve">Here's how it looks on the local machine and in the emulator.</source>
          <target xml:space="preserve">Here's how it looks on the local machine and in the emulator.</target>
        </segment>
      </unit>
      <unit id="286">
        <segment state="initial">
          <source xml:space="preserve">A personalized greeting from the HelloWorld app</source>
          <target xml:space="preserve">A personalized greeting from the HelloWorld app</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source xml:space="preserve">A personalized greeting from the HelloWorld app</source>
          <target xml:space="preserve">A personalized greeting from the HelloWorld app</target>
        </segment>
      </unit>
      <unit id="288">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Hh441145)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/Hh441312)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/apps/Hh780660)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   If you're curious as to why we use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">addEventListener</pc></pc> to register our event in code rather than setting the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">onclick</pc></pc> event in our HTML, see <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Coding basic apps</pc> for a detailed explanation.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   If you're curious as to why we use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">addEventListener</pc></pc> to register our event in code rather than setting the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">onclick</pc></pc> event in our HTML, see <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Coding basic apps</pc> for a detailed explanation.</target>
        </segment>
      </unit>
      <unit id="289">
        <segment state="initial">
          <source xml:space="preserve">Step 6: Add a Windows Library for JavaScript control</source>
          <target xml:space="preserve">Step 6: Add a Windows Library for JavaScript control</target>
        </segment>
      </unit>
      <unit id="290">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211681)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR211711)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR211837)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/BR211895)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In addition to standard HTML controls, your app can use any of the controls in the Windows Library for JavaScript, such as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.DatePicker</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.UI.FlipView</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">WinjS.UI.ListView</pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">WinJS.UI.Rating</pc></pc> controls.</source>
          <target xml:space="preserve">In addition to standard HTML controls, your app can use any of the controls in the Windows Library for JavaScript, such as the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.DatePicker</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.UI.FlipView</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">WinjS.UI.ListView</pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">WinJS.UI.Rating</pc></pc> controls.</target>
        </segment>
      </unit>
      <unit id="291">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211895)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">`&lt;rating /&gt;`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Unlike HTML controls, WinJS controls don't have dedicated markup elements: you can't create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control by adding a <ph dataRef="id5" id="ph1" /> element, for example.</source>
          <target xml:space="preserve">Unlike HTML controls, WinJS controls don't have dedicated markup elements: you can't create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control by adding a <ph dataRef="id5" id="ph1" /> element, for example.</target>
        </segment>
      </unit>
      <unit id="292">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh453133)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh440969)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To add a WinJS control, you create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">div</pc></pc> element and use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">data-win-control</pc></pc> attribute to specify the type of control you want.</source>
          <target xml:space="preserve">To add a WinJS control, you create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">div</pc></pc> element and use the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">data-win-control</pc></pc> attribute to specify the type of control you want.</target>
        </segment>
      </unit>
      <unit id="293">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rating</pc> control, you set the attribute to "WinJS.UI.Rating".</source>
          <target xml:space="preserve">To add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rating</pc> control, you set the attribute to "WinJS.UI.Rating".</target>
        </segment>
      </unit>
      <unit id="294">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211895)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Let's add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control to your app.</source>
          <target xml:space="preserve">Let's add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control to your app.</target>
        </segment>
      </unit>
      <unit id="295">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh453321)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR211895)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">`greetingOutput`</data>
          <data id="id10">[</data>
          <data id="id11">](https://msdn.microsoft.com/library/windows/apps/Hh453133)</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In your default.html file, add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">label</pc></pc> and a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Rating</pc></pc> control after the <ph dataRef="id9" id="ph1" /> <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">div</pc></pc>.</source>
          <target xml:space="preserve">In your default.html file, add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">label</pc></pc> and a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Rating</pc></pc> control after the <ph dataRef="id9" id="ph1" /> <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">div</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="296">
        <segment state="initial">
          <source xml:space="preserve">Run the app on the local machine.</source>
          <target xml:space="preserve">Run the app on the local machine.</target>
        </segment>
      </unit>
      <unit id="297">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211895)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Notice the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control.</source>
          <target xml:space="preserve">Notice the new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control.</target>
        </segment>
      </unit>
      <unit id="298">
        <segment state="initial">
          <source xml:space="preserve">The Hello, world app, with a Windows Library for JavaScript control</source>
          <target xml:space="preserve">The Hello, world app, with a Windows Library for JavaScript control</target>
        </segment>
      </unit>
      <unit id="299">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211895)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Right now, clicking the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control changes the rating, but it doesn't do anything else.</source>
          <target xml:space="preserve">Right now, clicking the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control changes the rating, but it doesn't do anything else.</target>
        </segment>
      </unit>
      <unit id="300">
        <segment state="initial">
          <source xml:space="preserve">Let's use an event handler to do something when the user changes the rating.</source>
          <target xml:space="preserve">Let's use an event handler to do something when the user changes the rating.</target>
        </segment>
      </unit>
      <unit id="301">
        <segment state="initial">
          <source xml:space="preserve">Step 7: Register an event handler for a Windows Library for JavaScript control</source>
          <target xml:space="preserve">Step 7: Register an event handler for a Windows Library for JavaScript control</target>
        </segment>
      </unit>
      <unit id="302">
        <segment state="initial">
          <source xml:space="preserve">Registering an event handler for a WinJS control is a little different than registering an event handler for a standard HTML control.</source>
          <target xml:space="preserve">Registering an event handler for a WinJS control is a little different than registering an event handler for a standard HTML control.</target>
        </segment>
      </unit>
      <unit id="303">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR212679)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh440975)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Earlier, we mentioned that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">onactivated</pc></pc> event handler calls <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.UI.processAll</pc></pc> method to initialize WinJS in your markup.</source>
          <target xml:space="preserve">Earlier, we mentioned that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">onactivated</pc></pc> event handler calls <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.UI.processAll</pc></pc> method to initialize WinJS in your markup.</target>
        </segment>
      </unit>
      <unit id="304">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/JJ215609)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.UI.processAll</pc> is enclosed in a call to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">setPromise</pc></pc> method.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.UI.processAll</pc> is enclosed in a call to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">setPromise</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="305">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211895)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh440975)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> were a standard HTML control, you could add your event handler after this call to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.UI.processAll</pc></pc>.</source>
          <target xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> were a standard HTML control, you could add your event handler after this call to <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.UI.processAll</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="306">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">But it's a little more complicated for a WinJS control like our <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rating</pc>.</source>
          <target xml:space="preserve">But it's a little more complicated for a WinJS control like our <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rating</pc>.</target>
        </segment>
      </unit>
      <unit id="307">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Because <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.UI.processAll</pc> creates the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc> control for us, we can't add the event handler to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Rating</pc> until after <pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.UI.processAll</pc> has finished its processing.</source>
          <target xml:space="preserve">Because <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.UI.processAll</pc> creates the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc> control for us, we can't add the event handler to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Rating</pc> until after <pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.UI.processAll</pc> has finished its processing.</target>
        </segment>
      </unit>
      <unit id="308">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh440975)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR211895)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc> were a typical method, we could register the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Rating</pc></pc> event handler right after we call it.</source>
          <target xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc> were a typical method, we could register the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Rating</pc></pc> event handler right after we call it.</target>
        </segment>
      </unit>
      <unit id="309">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">But the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.UI.processAll</pc> method is asynchronous, so any code that follows it might run before <pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc> completes.</source>
          <target xml:space="preserve">But the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinJS.UI.processAll</pc> method is asynchronous, so any code that follows it might run before <pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc> completes.</target>
        </segment>
      </unit>
      <unit id="310">
        <segment state="initial">
          <source xml:space="preserve">So, what do we do?</source>
          <target xml:space="preserve">So, what do we do?</target>
        </segment>
      </unit>
      <unit id="311">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211867)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">We use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Promise</pc></pc> object to receive notification when <pc dataRefEnd="id6" dataRefStart="id5" id="p3">WinJS.UI.processAll</pc> completes.</source>
          <target xml:space="preserve">We use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Promise</pc></pc> object to receive notification when <pc dataRefEnd="id6" dataRefStart="id5" id="p3">WinJS.UI.processAll</pc> completes.</target>
        </segment>
      </unit>
      <unit id="312">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh440975)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR211867)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Like all asynchronous WinJS methods, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc> returns a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Promise</pc></pc> object.</source>
          <target xml:space="preserve">Like all asynchronous WinJS methods, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.processAll</pc></pc> returns a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Promise</pc></pc> object.</target>
        </segment>
      </unit>
      <unit id="313">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Promise</pc> is a "promise" that something will happen in the future; when that thing happens, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Promise</pc> is said to have completed.</source>
          <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Promise</pc> is a "promise" that something will happen in the future; when that thing happens, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Promise</pc> is said to have completed.</target>
        </segment>
      </unit>
      <unit id="314">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211867)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR229728)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Promise</pc>
						</pc> objects have a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">then</pc></pc> method that takes a "completed" function as a parameter.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Promise</pc>
						</pc> objects have a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">then</pc></pc> method that takes a "completed" function as a parameter.</target>
        </segment>
      </unit>
      <unit id="315">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Promise</pc> calls this function when it completes.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Promise</pc> calls this function when it completes.</target>
        </segment>
      </unit>
      <unit id="316">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211867)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR229728)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/Hh440975)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">By adding your code to a "completed" function and passing it to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Promise</pc></pc> object's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">then</pc></pc> method, you can be sure your code executes after <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">WinJS.UI.processAll</pc></pc> is complete.</source>
          <target xml:space="preserve">By adding your code to a "completed" function and passing it to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Promise</pc></pc> object's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">then</pc></pc> method, you can be sure your code executes after <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">WinJS.UI.processAll</pc></pc> is complete.</target>
        </segment>
      </unit>
      <unit id="317">
        <segment state="initial">
          <source xml:space="preserve">Let's output the rating value when the user selects a rating.</source>
          <target xml:space="preserve">Let's output the rating value when the user selects a rating.</target>
        </segment>
      </unit>
      <unit id="318">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh453133)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In your default.html file, create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">div</pc></pc> element to display the rating value and give it the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">id</pc> "ratingOutput".</source>
          <target xml:space="preserve">In your default.html file, create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">div</pc></pc> element to display the rating value and give it the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">id</pc> "ratingOutput".</target>
        </segment>
      </unit>
      <unit id="319">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211895)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR211891)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">`ratingChanged`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In our default.js file, create an event handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">change</pc></pc> event named <ph dataRef="id9" id="ph1" />.</source>
          <target xml:space="preserve">In our default.js file, create an event handler for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control's <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">change</pc></pc> event named <ph dataRef="id9" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="320">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh465776)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">eventInfo</pc></pc> parameter contains a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">detail.tentativeRating</pc> property that provides the new user rating.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">eventInfo</pc></pc> parameter contains a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">detail.tentativeRating</pc> property that provides the new user rating.</target>
        </segment>
      </unit>
      <unit id="321">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh453133)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Retrieve this value and display it in the output <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">div</pc></pc>.</source>
          <target xml:space="preserve">Retrieve this value and display it in the output <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">div</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="322">
        <segment state="initial">
          <source xml:space="preserve">Run the app.</source>
          <target xml:space="preserve">Run the app.</target>
        </segment>
      </unit>
      <unit id="323">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR211895)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When you select a rating value, it outputs the numeric value below the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control.</source>
          <target xml:space="preserve">When you select a rating value, it outputs the numeric value below the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rating</pc></pc> control.</target>
        </segment>
      </unit>
      <unit id="324">
        <segment state="initial">
          <source xml:space="preserve">The completed Hello world app on a PC</source>
          <target xml:space="preserve">The completed Hello world app on a PC</target>
        </segment>
      </unit>
      <unit id="325">
        <segment state="initial">
          <source xml:space="preserve">The completed Hello world app on a phone</source>
          <target xml:space="preserve">The completed Hello world app on a phone</target>
        </segment>
      </unit>
      <unit id="326">
        <segment state="initial">
          <source xml:space="preserve">Summary</source>
          <target xml:space="preserve">Summary</target>
        </segment>
      </unit>
      <unit id="327">
        <segment state="initial">
          <source xml:space="preserve">Congratulations, you've created your first app for Windows 10 and the UWP using JavaScript and HTML!</source>
          <target xml:space="preserve">Congratulations, you've created your first app for Windows 10 and the UWP using JavaScript and HTML!</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>