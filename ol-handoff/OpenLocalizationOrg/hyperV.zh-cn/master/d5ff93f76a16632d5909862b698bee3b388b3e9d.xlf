<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="markdown" tool-id="caps" product-name="n/a" product-version="n/a" build-num="n/a">
    <header>
      <tool tool-id="caps" tool-name="CAPS" tool-version="2.0" tool-company="Microsoft" />
    </header>
    <body>
      <group extype="metadata">
        <group id="1">
          <trans-unit id="1" translate="yes" xml:space="preserve">
            <source>testmdarticle</source>
            <target state="new">testmdarticle</target>
            <context-group>
              <context context-type="x-metadataname">name</context>
            </context-group>
          </trans-unit>
        </group>
      </group>
      <group extype="content">
        <group id="2">
          <trans-unit id="2" translate="yes" xml:space="preserve">
            <source>Step 8: Experiment with Windows PowerShell</source>
            <target state="new">Step 8: Experiment with Windows PowerShell</target>
          </trans-unit>
        </group>
        <group id="3">
          <trans-unit id="3" translate="yes" xml:space="preserve">
            <source>Now that you have walked through the basics of deploying Hyper-V, creating virtual machines and managing these virtual machines, let’s explore how you can automate many of these activities with PowerShell.</source>
            <target state="new">Now that you have walked through the basics of deploying Hyper-V, creating virtual machines and managing these virtual machines, let’s explore how you can automate many of these activities with PowerShell.</target>
          </trans-unit>
        </group>
        <group id="4">
          <trans-unit id="4" translate="yes" xml:space="preserve">
            <source>Return a list of Hyper-V commands</source>
            <target state="new">Return a list of Hyper-V commands</target>
          </trans-unit>
        </group>
        <group id="5">
          <trans-unit id="5" translate="yes" xml:space="preserve">
            <source>Click on the Windows start button, type </source>
            <target state="new">Click on the Windows start button, type </target>
          </trans-unit>
        </group>
        <group id="6">
          <trans-unit id="6" translate="yes" xml:space="preserve">
            <source>PowerShell</source>
            <target state="new">PowerShell</target>
          </trans-unit>
        </group>
        <group id="7">
          <trans-unit id="7" translate="yes" xml:space="preserve">
            <source>.</source>
            <target state="new">.</target>
          </trans-unit>
        </group>
        <group id="8">
          <trans-unit id="8" translate="yes" xml:space="preserve">
            <source>Run the following command to display a searchable list of PowerShell commands available with the Hyper-V PowerShell Module.</source>
            <target state="new">Run the following command to display a searchable list of PowerShell commands available with the Hyper-V PowerShell Module.</target>
          </trans-unit>
        </group>
        <group id="9">
          <trans-unit id="9" translate="yes" xml:space="preserve">
            <source>```powershell
get-command –module hyper-v | out-gridview</source>
            <target state="new">```powershell
get-command –module hyper-v | out-gridview</target>
          </trans-unit>
        </group>
        <group id="10">
          <trans-unit id="10" translate="yes" xml:space="preserve">
            <source> The output shows you how to structure the command, what the required and optional parameters are, and the aliases that you can use.</source>
            <target state="new"> The output shows you how to structure the command, what the required and optional parameters are, and the aliases that you can use.</target>
          </trans-unit>
        </group>
        <group id="11">
          <trans-unit id="11" translate="yes" xml:space="preserve">
            <source>Return a list of virtual machines</source>
            <target state="new">Return a list of virtual machines</target>
          </trans-unit>
        </group>
        <group id="12">
          <trans-unit id="12" translate="yes" xml:space="preserve">
            <source>Use the </source>
            <target state="new">Use the </target>
          </trans-unit>
        </group>
        <group id="13">
          <trans-unit id="13" translate="yes" xml:space="preserve">
            <source> command to return a list of virtual machines.</source>
            <target state="new"> command to return a list of virtual machines.</target>
          </trans-unit>
        </group>
        <group id="14">
          <trans-unit id="14" translate="yes" xml:space="preserve">
            <source>In PowerShell, run the following command:</source>
            <target state="new">In PowerShell, run the following command:</target>
          </trans-unit>
        </group>
        <group id="15">
          <trans-unit id="15" translate="yes" xml:space="preserve">
            <source>
This displays something like this:</source>
            <target state="new">
This displays something like this:</target>
          </trans-unit>
        </group>
        <group id="16">
          <trans-unit id="16" translate="yes" xml:space="preserve">
            <source>To return a list of only powered on virtual machines add a filter to the </source>
            <target state="new">To return a list of only powered on virtual machines add a filter to the </target>
          </trans-unit>
        </group>
        <group id="17">
          <trans-unit id="17" translate="yes" xml:space="preserve">
            <source> command.</source>
            <target state="new"> command.</target>
          </trans-unit>
        </group>
        <group id="18">
          <trans-unit id="18" translate="yes" xml:space="preserve">
            <source>A filter can be added by using the where-object command.</source>
            <target state="new">A filter can be added by using the where-object command.</target>
          </trans-unit>
        </group>
        <group id="19">
          <trans-unit id="19" translate="yes" xml:space="preserve">
            <source>For more information on filtering see the </source>
            <target state="new">For more information on filtering see the </target>
          </trans-unit>
        </group>
        <group id="20">
          <trans-unit id="20" translate="yes" xml:space="preserve">
            <source>Using the Where-Object</source>
            <target state="new">Using the Where-Object</target>
          </trans-unit>
        </group>
        <group id="21">
          <trans-unit id="21" translate="yes" xml:space="preserve">
            <source> documentation.</source>
            <target state="new"> documentation.</target>
          </trans-unit>
        </group>
        <group id="22">
          <trans-unit id="22" translate="yes" xml:space="preserve">
            <source>```powershell
get-vm | where {$_.State –eq ‘Running’}</source>
            <target state="new">```powershell
get-vm | where {$_.State –eq ‘Running’}</target>
          </trans-unit>
        </group>
        <group id="23">
          <trans-unit id="23" translate="yes" xml:space="preserve">
            <source>Start and shut down virtual machines</source>
            <target state="new">Start and shut down virtual machines</target>
          </trans-unit>
        </group>
        <group id="24">
          <trans-unit id="24" translate="yes" xml:space="preserve">
            <source>To start a particular virtual machine, run the following command with name of the virtual machine:</source>
            <target state="new">To start a particular virtual machine, run the following command with name of the virtual machine:</target>
          </trans-unit>
        </group>
        <group id="25">
          <trans-unit id="25" translate="yes" xml:space="preserve">
            <source>```powershell
Start-vm –Name virtual machine name</source>
            <target state="new">```powershell
Start-vm –Name virtual machine name</target>
          </trans-unit>
        </group>
        <group id="26">
          <trans-unit id="26" translate="yes" xml:space="preserve">
            <source>To shut down all running virtual machines, run this:</source>
            <target state="new">To shut down all running virtual machines, run this:</target>
          </trans-unit>
        </group>
        <group id="27">
          <trans-unit id="27" translate="yes" xml:space="preserve">
            <source>```powershell
get-vm | where {$_.State –eq ‘Running’} | stop-vm</source>
            <target state="new">```powershell
get-vm | where {$_.State –eq ‘Running’} | stop-vm</target>
          </trans-unit>
        </group>
        <group id="28">
          <trans-unit id="28" translate="yes" xml:space="preserve">
            <source>For example, here is a checkpoint with the name DEMOCP:</source>
            <target state="new">For example, here is a checkpoint with the name DEMOCP:</target>
          </trans-unit>
        </group>
        <group id="29">
          <trans-unit id="29" translate="yes" xml:space="preserve">
            <source>Create a new virtual machine</source>
            <target state="new">Create a new virtual machine</target>
          </trans-unit>
        </group>
        <group id="30">
          <trans-unit id="30" translate="yes" xml:space="preserve">
            <source>The following example shows how to create a new virtual machine in the PowerShell Integrated Scripting Environment (ISE).</source>
            <target state="new">The following example shows how to create a new virtual machine in the PowerShell Integrated Scripting Environment (ISE).</target>
          </trans-unit>
        </group>
        <group id="31">
          <trans-unit id="31" translate="yes" xml:space="preserve">
            <source>This is a simple example and could be expanded on to include additional PowerShell features and more advanced VM deployments.</source>
            <target state="new">This is a simple example and could be expanded on to include additional PowerShell features and more advanced VM deployments.</target>
          </trans-unit>
        </group>
        <group id="32">
          <trans-unit id="32" translate="yes" xml:space="preserve">
            <source>To open the PowerShell ISE click on start, type </source>
            <target state="new">To open the PowerShell ISE click on start, type </target>
          </trans-unit>
        </group>
        <group id="33">
          <trans-unit id="33" translate="yes" xml:space="preserve">
            <source>PowerShell ISE</source>
            <target state="new">PowerShell ISE</target>
          </trans-unit>
        </group>
        <group id="34">
          <trans-unit id="34" translate="yes" xml:space="preserve">
            <source>.</source>
            <target state="new">.</target>
          </trans-unit>
        </group>
        <group id="35">
          <trans-unit id="35" translate="yes" xml:space="preserve">
            <source>Run the following code to create a virtual machine.</source>
            <target state="new">Run the following code to create a virtual machine.</target>
          </trans-unit>
        </group>
        <group id="36">
          <trans-unit id="36" translate="yes" xml:space="preserve">
            <source>See the </source>
            <target state="new">See the </target>
          </trans-unit>
        </group>
        <group id="37">
          <trans-unit id="37" translate="yes" xml:space="preserve">
            <source>New-VM</source>
            <target state="new">New-VM</target>
          </trans-unit>
        </group>
        <group id="38">
          <trans-unit id="38" translate="yes" xml:space="preserve">
            <source> documentation for detailed information on the New-VM command.</source>
            <target state="new"> documentation for detailed information on the New-VM command.</target>
          </trans-unit>
        </group>
        <group id="39">
          <trans-unit id="39" translate="yes" xml:space="preserve">
            <source>```powershell
$VMName = "VMNAME"</source>
            <target state="new">```powershell
$VMName = "VMNAME"</target>
          </trans-unit>
        </group>
        <group id="40">
          <trans-unit id="40" translate="yes" xml:space="preserve">
            <source>$VM = @{
 Name = $VMName 
 MemoryStartupBytes = 2147483648
 Generation = 2
 NewVHDPath = "C:\Virtual Machines\$VMName\$VMName.vhdx"
 NewVHDSizeBytes = 53687091200
 BootDevice = "VHD"
 Path = "C:\Virtual Machines\$VMName "
 SwitchName = (get-vmswitch).Name[0]
}</source>
            <target state="new">$VM = @{
 Name = $VMName 
 MemoryStartupBytes = 2147483648
 Generation = 2
 NewVHDPath = "C:\Virtual Machines\$VMName\$VMName.vhdx"
 NewVHDSizeBytes = 53687091200
 BootDevice = "VHD"
 Path = "C:\Virtual Machines\$VMName "
 SwitchName = (get-vmswitch).Name[0]
}</target>
          </trans-unit>
        </group>
        <group id="41">
          <trans-unit id="41" translate="yes" xml:space="preserve">
            <source>New-VM @VM
```</source>
            <target state="new">New-VM @VM
```</target>
          </trans-unit>
        </group>
        <group id="42">
          <trans-unit id="42" translate="yes" xml:space="preserve">
            <source>Wrap up and References</source>
            <target state="new">Wrap up and References</target>
          </trans-unit>
        </group>
        <group id="43">
          <trans-unit id="43" translate="yes" xml:space="preserve">
            <source>This document has shown some simple steps to explorer the Hyper-V PowerShell module as well as some sample scenarios.</source>
            <target state="new">This document has shown some simple steps to explorer the Hyper-V PowerShell module as well as some sample scenarios.</target>
          </trans-unit>
        </group>
        <group id="44">
          <trans-unit id="44" translate="yes" xml:space="preserve">
            <source>For more information on the Hyper-V PowerShell module, see the </source>
            <target state="new">For more information on the Hyper-V PowerShell module, see the </target>
          </trans-unit>
        </group>
        <group id="45">
          <trans-unit id="45" translate="yes" xml:space="preserve">
            <source>Hyper-V Cmdlets in Windows PowerShell reference</source>
            <target state="new">Hyper-V Cmdlets in Windows PowerShell reference</target>
          </trans-unit>
        </group>
        <group id="46">
          <trans-unit id="46" translate="yes" xml:space="preserve">
            <source>.</source>
            <target state="new">.</target>
          </trans-unit>
        </group>
      </group>
    </body>
  </file>
</xliff>