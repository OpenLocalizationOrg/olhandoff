<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="es-es">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a9225b180b1df05d803b0ba2f23be237d7176f4d</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-708c90d" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ms.ContentId: 4981828d-1a08-4d8c-a99d-874a926a153f</source>
          <target state="new">ms.ContentId: 4981828d-1a08-4d8c-a99d-874a926a153f</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>title: PowerShell to Docker Comparison</source>
          <target state="new">title: PowerShell to Docker Comparison</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>PowerShell to Docker comparison for managing Windows Server Containers</source>
          <target state="new">PowerShell to Docker comparison for managing Windows Server Containers</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are many ways to manage Windows Server Containers using both in-box Windows tools (PowerShell, in this preview) and Open Source management tools such as Docker.</source>
          <target state="new">There are many ways to manage Windows Server Containers using both in-box Windows tools (PowerShell, in this preview) and Open Source management tools such as Docker.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Guides outlining both individually available here:</source>
          <target state="new">Guides outlining both individually available here:</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Manage Windows Server Containers with Docker</source>
          <target state="new">Manage Windows Server Containers with Docker</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Manage Windows Server Containers with PowerShell</source>
          <target state="new">Manage Windows Server Containers with PowerShell</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This page is a more in depth reference comparing the Docker tools and PowerShell management tools.</source>
          <target state="new">This page is a more in depth reference comparing the Docker tools and PowerShell management tools.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>PowerShell for containers versus Hyper-V VMs</source>
          <target state="new">PowerShell for containers versus Hyper-V VMs</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can create, run, and interact with Windows Server Containers using PowerShell cmdlets.</source>
          <target state="new">You can create, run, and interact with Windows Server Containers using PowerShell cmdlets.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Everything you need to get going is available in-box.</source>
          <target state="new">Everything you need to get going is available in-box.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you’ve used Hyper-V PowerShell, the design of the cmdlets should be pretty familiar to you.</source>
          <target state="new">If you’ve used Hyper-V PowerShell, the design of the cmdlets should be pretty familiar to you.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A lot of the workflow is similar to how you’d manage a virtual machine using the Hyper-V module.</source>
          <target state="new">A lot of the workflow is similar to how you’d manage a virtual machine using the Hyper-V module.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instead of <ph id="ph1">`New-VM`</ph>, <ph id="ph2">`Get-VM`</ph>, <ph id="ph3">`Start-VM`</ph>, <ph id="ph4">`Stop-VM`</ph>, you have <ph id="ph5">`New-Container`</ph>, <ph id="ph6">`Get-Container`</ph>, <ph id="ph7">`Start-Container`</ph>, <ph id="ph8">`Stop-Container`</ph>.</source>
          <target state="new">Instead of <ph id="ph1">`New-VM`</ph>, <ph id="ph2">`Get-VM`</ph>, <ph id="ph3">`Start-VM`</ph>, <ph id="ph4">`Stop-VM`</ph>, you have <ph id="ph5">`New-Container`</ph>, <ph id="ph6">`Get-Container`</ph>, <ph id="ph7">`Start-Container`</ph>, <ph id="ph8">`Stop-Container`</ph>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are quite a few container-specific cmdlets and parameters, but the general lifecycle and management of a Windows container looks roughly like that of a Hyper-V VM.</source>
          <target state="new">There are quite a few container-specific cmdlets and parameters, but the general lifecycle and management of a Windows container looks roughly like that of a Hyper-V VM.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>How does PowerShell management compare to Docker?</source>
          <target state="new">How does PowerShell management compare to Docker?</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Containers PowerShell cmdlets expose an API that isn’t quite the same as Docker's; as a general rule, the cmdlets are more granular in operation.</source>
          <target state="new">The Containers PowerShell cmdlets expose an API that isn’t quite the same as Docker's; as a general rule, the cmdlets are more granular in operation.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Some Docker commands have pretty straightforward parallels in PowerShell:</source>
          <target state="new">Some Docker commands have pretty straightforward parallels in PowerShell:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Docker command</source>
          <target state="new">Docker command</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>PowerShell Cmdlet</source>
          <target state="new">PowerShell Cmdlet</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The PowerShell cmdlets are not an exact perfect parity, and there are a fair number of commands that we’re not providing PowerShell replacements for* (notably <ph id="ph1">`docker build`</ph> and <ph id="ph2">`docker cp`</ph>).</source>
          <target state="new">The PowerShell cmdlets are not an exact perfect parity, and there are a fair number of commands that we’re not providing PowerShell replacements for* (notably <ph id="ph1">`docker build`</ph> and <ph id="ph2">`docker cp`</ph>).</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>But what might leap out at you is that there’s no single one-line replacement for <ph id="ph1">`docker run`</ph>.</source>
          <target state="new">But what might leap out at you is that there’s no single one-line replacement for <ph id="ph1">`docker run`</ph>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>\* Subject to change.</source>
          <target state="new">\* Subject to change.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>But I need docker run!</source>
          <target state="new">But I need docker run!</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>What’s going on?</source>
          <target state="new">What’s going on?</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>We’re doing a couple things here to provide a slightly more familiar interaction model for users who know their way around PowerShell already.</source>
          <target state="new">We’re doing a couple things here to provide a slightly more familiar interaction model for users who know their way around PowerShell already.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Of course, if you’re used to the way docker operates, this will be a bit of a mental shift.</source>
          <target state="new">Of course, if you’re used to the way docker operates, this will be a bit of a mental shift.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The lifecycle of a container in the PowerShell model is slightly different.</source>
          <target state="new">The lifecycle of a container in the PowerShell model is slightly different.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the Containers PowerShell module, we expose the more granular operations of <ph id="ph1">`New-Container`</ph> (which creates a new container that’s stopped) and <ph id="ph2">`Start-Container`</ph>.</source>
          <target state="new">In the Containers PowerShell module, we expose the more granular operations of <ph id="ph1">`New-Container`</ph> (which creates a new container that’s stopped) and <ph id="ph2">`Start-Container`</ph>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In between creating and starting the container, you can also configure the container’s settings; for TP3, the only other configuration we’re planning to expose is the ability to set the network connection for the container.</source>
          <target state="new">In between creating and starting the container, you can also configure the container’s settings; for TP3, the only other configuration we’re planning to expose is the ability to set the network connection for the container.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>using the (Add/Remove/Connect/Disconnect/Get/Set)-ContainerNetworkAdapter cmdlets.</source>
          <target state="new">using the (Add/Remove/Connect/Disconnect/Get/Set)-ContainerNetworkAdapter cmdlets.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can’t currently pass a command to be run inside the container on start.</source>
          <target state="new">You can’t currently pass a command to be run inside the container on start.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, you can still get an interactive PowerShell session to a running container using <ph id="ph1">`Enter-PSSession -ContainerId &lt;ID of a running container&gt;`</ph>, and you can execute a command inside a running container using <ph id="ph2">`Invoke-Command -ContainerId &lt;container id&gt; -ScriptBlock { code to run inside the container }`</ph> or <ph id="ph3">`Invoke-Command -ContainerId &lt;container id&gt; -FilePath &lt;path to script&gt;`</ph>.</source>
          <target state="new">However, you can still get an interactive PowerShell session to a running container using <ph id="ph1">`Enter-PSSession -ContainerId &lt;ID of a running container&gt;`</ph>, and you can execute a command inside a running container using <ph id="ph2">`Invoke-Command -ContainerId &lt;container id&gt; -ScriptBlock { code to run inside the container }`</ph> or <ph id="ph3">`Invoke-Command -ContainerId &lt;container id&gt; -FilePath &lt;path to script&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Both of these commands allow the optional <ph id="ph1">`-RunAsAdministrator`</ph> flag for high privilige actions.</source>
          <target state="new">Both of these commands allow the optional <ph id="ph1">`-RunAsAdministrator`</ph> flag for high privilige actions.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Caveats and known issues</source>
          <target state="new">Caveats and known issues</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Right now, the Containers cmdlets have no knowledge about any containers or images created through Docker, and Docker does not know anything about containers and images created through the PowerShell.</source>
          <target state="new">Right now, the Containers cmdlets have no knowledge about any containers or images created through Docker, and Docker does not know anything about containers and images created through the PowerShell.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you created it in Docker, manage it with Docker; if you created it through PowerShell, manage it through PowerShell.</source>
          <target state="new">If you created it in Docker, manage it with Docker; if you created it through PowerShell, manage it through PowerShell.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>We have quite a bit of work we'd like to do to improve the end user experience -- better error messages, better progress reporting, invalid event strings, and so forth.</source>
          <target state="new">We have quite a bit of work we'd like to do to improve the end user experience -- better error messages, better progress reporting, invalid event strings, and so forth.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you happen to run into a situation where you wish you were getting more or better info, please feel free to send suggestions to the forums.</source>
          <target state="new">If you happen to run into a situation where you wish you were getting more or better info, please feel free to send suggestions to the forums.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A quick runthrough</source>
          <target state="new">A quick runthrough</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Here is a walk through of some common workflows.</source>
          <target state="new">Here is a walk through of some common workflows.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This assumes you've installed an OS container image named "ServerDatacenterCore" and created a virtual switch named "Virtual Switch" (using New-VMSwitch).</source>
          <target state="new">This assumes you've installed an OS container image named "ServerDatacenterCore" and created a virtual switch named "Virtual Switch" (using New-VMSwitch).</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Build your own sample</source>
          <target state="new">Build your own sample</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can see all the Containers cmdlets using <ph id="ph1">`Get-Command -Module Containers`</ph>.</source>
          <target state="new">You can see all the Containers cmdlets using <ph id="ph1">`Get-Command -Module Containers`</ph>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>There are several other cmdlets that are not described here, which we'll leave to you to learn about on your own.</source>
          <target state="new">There are several other cmdlets that are not described here, which we'll leave to you to learn about on your own.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This won't return the <ph id="ph1">`Enter-PSSession`</ph> and <ph id="ph2">`Invoke-Command`</ph> cmdlets, which are part of core PowerShell.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> This won't return the <ph id="ph1">`Enter-PSSession`</ph> and <ph id="ph2">`Invoke-Command`</ph> cmdlets, which are part of core PowerShell.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can also get help about any cmdlet using <ph id="ph1">`Get-Help [cmdlet name]`</ph>, or equivalently <ph id="ph2">`[cmdlet name] -?`</ph>.</source>
          <target state="new">You can also get help about any cmdlet using <ph id="ph1">`Get-Help [cmdlet name]`</ph>, or equivalently <ph id="ph2">`[cmdlet name] -?`</ph>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Today, the help output is auto-generated and just tells you the syntax for commands; we will be adding further documentation as we get closer to finalizing the cmdlet design.</source>
          <target state="new">Today, the help output is auto-generated and just tells you the syntax for commands; we will be adding further documentation as we get closer to finalizing the cmdlet design.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A nicer way to discover the syntax is the PowerShell ISE, which you may not have looked at before if you haven't used PowerShell very much.</source>
          <target state="new">A nicer way to discover the syntax is the PowerShell ISE, which you may not have looked at before if you haven't used PowerShell very much.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you're running on a SKU that permits it, try starting the ISE, opening the Commands pane, and choosing the "Containers" module, which will show you a graphical representation of the cmdlets and their parameter sets.</source>
          <target state="new">If you're running on a SKU that permits it, try starting the ISE, opening the Commands pane, and choosing the "Containers" module, which will show you a graphical representation of the cmdlets and their parameter sets.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>PS: Just to prove it can be done, here's a PowerShell function that composes some of the cmdlets we've seen already into an ersatz <ph id="ph1">`docker run`</ph>.</source>
          <target state="new">PS: Just to prove it can be done, here's a PowerShell function that composes some of the cmdlets we've seen already into an ersatz <ph id="ph1">`docker run`</ph>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>(To be clear, this is a proof of concept, not under active development.)</source>
          <target state="new">(To be clear, this is a proof of concept, not under active development.)</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Docker</source>
          <target state="new">Docker</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Windows Server Containers can be managed with Docker commands.</source>
          <target state="new">Windows Server Containers can be managed with Docker commands.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>While Windows containers should be comparable to their Linux counterparts and have the same management experience through Docker, there are some Docker commands that simply don't make sense with a Windows container.</source>
          <target state="new">While Windows containers should be comparable to their Linux counterparts and have the same management experience through Docker, there are some Docker commands that simply don't make sense with a Windows container.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Others simply haven't been tested (we're getting there).</source>
          <target state="new">Others simply haven't been tested (we're getting there).</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In an effort to not duplicate the API documentation available in Docker, here is a link to their management APIs.</source>
          <target state="new">In an effort to not duplicate the API documentation available in Docker, here is a link to their management APIs.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Their walkthroughs are fantastic.</source>
          <target state="new">Their walkthroughs are fantastic.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>We're tracking things that do and don't work in the Docker APIs in our Work in Progress document.</source>
          <target state="new">We're tracking things that do and don't work in the Docker APIs in our Work in Progress document.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>