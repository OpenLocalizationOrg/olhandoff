<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">afdeb64341edcb977dadab00a0dc705e79c60809</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">WebSockets</source>
            <target xml:space="preserve">WebSockets</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="104">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Important APIs</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Important APIs</pc>
						</target>
          </segment>
        </unit>
        <unit id="105">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="105">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocket**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocket**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="106">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="106">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StreamWebSocket**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StreamWebSocket**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">WebSockets provide a mechanism for fast, secure two-way communication between a client and a server over the web using HTTP(S).</source>
            <target xml:space="preserve">WebSockets provide a mechanism for fast, secure two-way communication between a client and a server over the web using HTTP(S).</target>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source xml:space="preserve">Under the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">WebSocket Protocol</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, data is transferred immediately over a full-duplex single socket connection, allowing messages to be sent and received from both endpoints in real time.</source>
            <target xml:space="preserve">Under the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">WebSocket Protocol</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, data is transferred immediately over a full-duplex single socket connection, allowing messages to be sent and received from both endpoints in real time.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">WebSockets are ideal for use in real-time gaming where instant social network notifications and up-to-date displays of information (game statistics ) need to be secure and use fast data transfer.</source>
            <target xml:space="preserve">WebSockets are ideal for use in real-time gaming where instant social network notifications and up-to-date displays of information (game statistics ) need to be secure and use fast data transfer.</target>
          </segment>
        </unit>
        <unit id="110">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="110">
            <source xml:space="preserve">Universal Windows Platform (UWP) developers can use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> classes to connect with servers that support the Websocket protocol.</source>
            <target xml:space="preserve">Universal Windows Platform (UWP) developers can use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> classes to connect with servers that support the Websocket protocol.</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">MessageWebSocket</source>
            <target xml:space="preserve">MessageWebSocket</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">StreamWebSocket</source>
            <target xml:space="preserve">StreamWebSocket</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">Suitable for typical scenarios where messages are not extremely large.</source>
            <target xml:space="preserve">Suitable for typical scenarios where messages are not extremely large.</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">Suitable for scenarios in which large files (such as photos or videos) are being transferred.</source>
            <target xml:space="preserve">Suitable for scenarios in which large files (such as photos or videos) are being transferred.</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">Enables notification that an entire WebSocket message has been received.</source>
            <target xml:space="preserve">Enables notification that an entire WebSocket message has been received.</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">Allows sections of a message to be read with each read operation.</source>
            <target xml:space="preserve">Allows sections of a message to be read with each read operation.</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">Supports both UTF-8 and binary messages.</source>
            <target xml:space="preserve">Supports both UTF-8 and binary messages.</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">Supports only binary messages.</source>
            <target xml:space="preserve">Supports only binary messages.</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">Similar to a UDP or datagram socket.</source>
            <target xml:space="preserve">Similar to a UDP or datagram socket.</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">Similar to a TCP or stream socket.</source>
            <target xml:space="preserve">Similar to a TCP or stream socket.</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">In most cases you'll want to use a secure WebSocket connection to encrypt data sent and received.</source>
            <target xml:space="preserve">In most cases you'll want to use a secure WebSocket connection to encrypt data sent and received.</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">This will also increase the chances that your connection will succeed, as many proxies will reject unencrypted WebSocket connections.</source>
            <target xml:space="preserve">This will also increase the chances that your connection will succeed, as many proxies will reject unencrypted WebSocket connections.</target>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source xml:space="preserve">The WebSocket protocol defines the following two URI schemes.</source>
            <target xml:space="preserve">The WebSocket protocol defines the following two URI schemes.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">ws: - use for unencrypted connections.</source>
            <target xml:space="preserve">ws: - use for unencrypted connections.</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">wss: - use for secure connections that should be encrypted.</source>
            <target xml:space="preserve">wss: - use for secure connections that should be encrypted.</target>
          </segment>
        </unit>
        <unit id="126">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="126">
            <source xml:space="preserve">To encrypt a WebSocket connection, use the wss: URI scheme, for example, <pc dataRefEnd="id2" dataRefStart="id1" id="2">wss://www.contoso.com/mywebservice</pc>.</source>
            <target xml:space="preserve">To encrypt a WebSocket connection, use the wss: URI scheme, for example, <pc dataRefEnd="id2" dataRefStart="id1" id="2">wss://www.contoso.com/mywebservice</pc>.</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">Using MessageWebSocket</source>
            <target xml:space="preserve">Using MessageWebSocket</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> allows sections of a message to be read with each read operation.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> allows sections of a message to be read with each read operation.</target>
          </segment>
        </unit>
        <unit id="129">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="129">
            <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">MessageWebSocket</pc> is typically used in scenarios where messages are not extremely large.</source>
            <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">MessageWebSocket</pc> is typically used in scenarios where messages are not extremely large.</target>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source xml:space="preserve">Both UTF-8 and binary files are supported.</source>
            <target xml:space="preserve">Both UTF-8 and binary files are supported.</target>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source xml:space="preserve">The code in this section creates a new <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, connects to a WebSocket server, and sends data to the server.</source>
            <target xml:space="preserve">The code in this section creates a new <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, connects to a WebSocket server, and sends data to the server.</target>
          </segment>
        </unit>
        <unit id="132">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="132">
            <source xml:space="preserve">Once a successful connection is established, the app waits for the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket.MessageReceived**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event to be triggered, indicating that data was received.</source>
            <target xml:space="preserve">Once a successful connection is established, the app waits for the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket.MessageReceived**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event to be triggered, indicating that data was received.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">This sample uses the WebSocket.org echo server, a service which simply echoes back to the sender any string sent to it.</source>
            <target xml:space="preserve">This sample uses the WebSocket.org echo server, a service which simply echoes back to the sender any string sent to it.</target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">By using the "wss:" protocol specifier, this sample uses a secure connection to send and receive messages.</source>
            <target xml:space="preserve">By using the "wss:" protocol specifier, this sample uses a secure connection to send and receive messages.</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source xml:space="preserve">Once you have initialized the WebSocket connection, your code must perform the following activities to properly send and receive data.</source>
            <target xml:space="preserve">Once you have initialized the WebSocket connection, your code must perform the following activities to properly send and receive data.</target>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source xml:space="preserve">Implement a callback for the MessageWebSocket.MessageReceived event</source>
            <target xml:space="preserve">Implement a callback for the MessageWebSocket.MessageReceived event</target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">Before establishing a connection and sending data with a WebSocket, your app needs to register an event callback to receive notification when data is received.</source>
            <target xml:space="preserve">Before establishing a connection and sending data with a WebSocket, your app needs to register an event callback to receive notification when data is received.</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">When the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket.MessageReceived**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event occurs, the registered callback is called and receives data from <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MessageWebSocketMessageReceivedEventArgs**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">When the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket.MessageReceived**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event occurs, the registered callback is called and receives data from <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MessageWebSocketMessageReceivedEventArgs**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="140">
          <segment state="initial" id="140">
            <source xml:space="preserve">This example is written with the assumption that the messages being sent are in UTF-8 format.</source>
            <target xml:space="preserve">This example is written with the assumption that the messages being sent are in UTF-8 format.</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">The following sample function receives a string from a connected WebSocket server and prints the string to the debugger output window.</source>
            <target xml:space="preserve">The following sample function receives a string from a connected WebSocket server and prints the string to the debugger output window.</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source xml:space="preserve">Implement a callback for the MessageWebSocket.Closed event</source>
            <target xml:space="preserve">Implement a callback for the MessageWebSocket.Closed event</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">Before establishing a connection and sending data with a WebSocket, your app needs to register an event callback to receive notification when the WebSocket is closed by the WebSocket server.</source>
            <target xml:space="preserve">Before establishing a connection and sending data with a WebSocket, your app needs to register an event callback to receive notification when the WebSocket is closed by the WebSocket server.</target>
          </segment>
        </unit>
        <unit id="145">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="145">
            <source xml:space="preserve">When the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket.Closed**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event occurs, the registered callback is called to indicate the connection was closed by the WebSocket server.</source>
            <target xml:space="preserve">When the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket.Closed**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event occurs, the registered callback is called to indicate the connection was closed by the WebSocket server.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">Send a message on a WebSocket</source>
            <target xml:space="preserve">Send a message on a WebSocket</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">Once a connection is established, the WebSocket client can send data to the server.</source>
            <target xml:space="preserve">Once a connection is established, the WebSocket client can send data to the server.</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataWriter.StoreAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method returns a parameter that maps to an unsigned int.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataWriter.StoreAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method returns a parameter that maps to an unsigned int.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">This changes how we define the task to send the message compared with the task to make the connection.</source>
            <target xml:space="preserve">This changes how we define the task to send the message compared with the task to make the connection.</target>
          </segment>
        </unit>
        <unit id="151">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="151">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When you create a new DataWriter object using the MessageWebSocket's OutputStream, the DataWriter takes ownership of the OutputStream, and will deallocate the Outputstream when the DataWriter goes out of scope.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When you create a new DataWriter object using the MessageWebSocket's OutputStream, the DataWriter takes ownership of the OutputStream, and will deallocate the Outputstream when the DataWriter goes out of scope.</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">This causes any subsequent attempts to use the OutputStream to fail with an HRESULT value of 0x80000013.</source>
            <target xml:space="preserve">This causes any subsequent attempts to use the OutputStream to fail with an HRESULT value of 0x80000013.</target>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source xml:space="preserve">To avoid deallocating the OutputStream, this code calls the DataWriter's DetachStream method, which returns ownership of the stream to the WebSocket object.</source>
            <target xml:space="preserve">To avoid deallocating the OutputStream, this code calls the DataWriter's DetachStream method, which returns ownership of the stream to the WebSocket object.</target>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source xml:space="preserve">The following function sends the given string to a connected WebSocket, and prints a verification message in the debugger output window.</source>
            <target xml:space="preserve">The following function sends the given string to a connected WebSocket, and prints a verification message in the debugger output window.</target>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source xml:space="preserve">Using advanced controls with WebSockets</source>
            <target xml:space="preserve">Using advanced controls with WebSockets</target>
          </segment>
        </unit>
        <unit id="157">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="157">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocket**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> follow the same model for using advanced controls.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocket**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> follow the same model for using advanced controls.</target>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source xml:space="preserve">Corresponding with each of the above primary classes are related classes to access advanced controls.</source>
            <target xml:space="preserve">Corresponding with each of the above primary classes are related classes to access advanced controls.</target>
          </segment>
        </unit>
        <unit id="159">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="159">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocketControl**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> provides socket control data on a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> object.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocketControl**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> provides socket control data on a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> object.</target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StreamWebSocketControl**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> provides socket control data on a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> object.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StreamWebSocketControl**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> provides socket control data on a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> object.</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">The basic model to use advanced controls is the same for both types of WebSockets.</source>
            <target xml:space="preserve">The basic model to use advanced controls is the same for both types of WebSockets.</target>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source xml:space="preserve">The following discussion uses a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> as an example, but the same process can be used with a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The following discussion uses a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> as an example, but the same process can be used with a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="163">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="163">
            <source xml:space="preserve">Create the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object.</source>
            <target xml:space="preserve">Create the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object.</target>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket.Control**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property to retrieve the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamWebSocketControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instance associated with this <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> object.</source>
            <target xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket.Control**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property to retrieve the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamWebSocketControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instance associated with this <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> object.</target>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source xml:space="preserve">Get or set properties on the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocketControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instance to get or set specific advanced controls.</source>
            <target xml:space="preserve">Get or set properties on the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocketControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instance to get or set specific advanced controls.</target>
          </segment>
        </unit>
        <unit id="166">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="166">
            <source xml:space="preserve">Both <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> impose requirements on when advanced controls can be set.</source>
            <target xml:space="preserve">Both <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> impose requirements on when advanced controls can be set.</target>
          </segment>
        </unit>
        <unit id="167">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="167">
            <source xml:space="preserve">For all advanced controls on the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, the app must always set the property before issuing a Connect operation.</source>
            <target xml:space="preserve">For all advanced controls on the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, the app must always set the property before issuing a Connect operation.</target>
          </segment>
        </unit>
        <unit id="168">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="168">
            <source xml:space="preserve">Because of this requirement, it is best practice to set all control properties immediately after creating the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamWebSocket</pc> object.</source>
            <target xml:space="preserve">Because of this requirement, it is best practice to set all control properties immediately after creating the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamWebSocket</pc> object.</target>
          </segment>
        </unit>
        <unit id="169">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="169">
            <source xml:space="preserve">Do not try to set a control property after the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket.ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method has been called.</source>
            <target xml:space="preserve">Do not try to set a control property after the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket.ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method has been called.</target>
          </segment>
        </unit>
        <unit id="170">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="170">
            <source xml:space="preserve">For all of the advanced controls on the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> except the message type, you must set the property before issuing a Connect operation.</source>
            <target xml:space="preserve">For all of the advanced controls on the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> except the message type, you must set the property before issuing a Connect operation.</target>
          </segment>
        </unit>
        <unit id="171">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="171">
            <source xml:space="preserve">It is best practice to set all control properties immediately after creating the <pc dataRefEnd="id2" dataRefStart="id1" id="2">MessageWebSocket</pc> object.</source>
            <target xml:space="preserve">It is best practice to set all control properties immediately after creating the <pc dataRefEnd="id2" dataRefStart="id1" id="2">MessageWebSocket</pc> object.</target>
          </segment>
        </unit>
        <unit id="172">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="172">
            <source xml:space="preserve">Except for the message type, do not attempt to change a control property after <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket.ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> has been called.</source>
            <target xml:space="preserve">Except for the message type, do not attempt to change a control property after <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket.ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> has been called.</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">WebSocket information classes</source>
            <target xml:space="preserve">WebSocket information classes</target>
          </segment>
        </unit>
        <unit id="174">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="174">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocket**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> each have a corresponding class that provides additional information about a WebSocket instance.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocket**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> each have a corresponding class that provides additional information about a WebSocket instance.</target>
          </segment>
        </unit>
        <unit id="175">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="175">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocketInformation**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> provides information about a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>, and you retrieve an instance of the information class using the <pc dataRefEnd="id14" dataRefStart="id13" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**MessageWebSocket.Information**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> property.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocketInformation**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> provides information about a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>, and you retrieve an instance of the information class using the <pc dataRefEnd="id14" dataRefStart="id13" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**MessageWebSocket.Information**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> property.</target>
          </segment>
        </unit>
        <unit id="176">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="176">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StreamWebSocketInformation**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> provides information about a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>, and you retrieve an instance of the information class using the <pc dataRefEnd="id14" dataRefStart="id13" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**StreamWebSocket.Information**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> property.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StreamWebSocketInformation**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> provides information about a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>, and you retrieve an instance of the information class using the <pc dataRefEnd="id14" dataRefStart="id13" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**StreamWebSocket.Information**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> property.</target>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source xml:space="preserve">Note that all of the properties on both Information classes are read-only, and that you can retrieve current information at any time during the lifetime of a web socket object.</source>
            <target xml:space="preserve">Note that all of the properties on both Information classes are read-only, and that you can retrieve current information at any time during the lifetime of a web socket object.</target>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source xml:space="preserve">Handling network exceptions</source>
            <target xml:space="preserve">Handling network exceptions</target>
          </segment>
        </unit>
        <unit id="179">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;strong&gt;</data>
            <data id="id14">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="179">
            <source xml:space="preserve">An error encountered on a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> operation is returned as an <pc dataRefEnd="id14" dataRefStart="id13" id="6">HRESULT</pc> value.</source>
            <target xml:space="preserve">An error encountered on a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> operation is returned as an <pc dataRefEnd="id14" dataRefStart="id13" id="6">HRESULT</pc> value.</target>
          </segment>
        </unit>
        <unit id="180">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="180">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WebSocketError.GetStatus**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method is used to convert a network error from a WebSocket operation to a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**WebErrorStatus**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> enumeration value.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**WebSocketError.GetStatus**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method is used to convert a network error from a WebSocket operation to a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**WebErrorStatus**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> enumeration value.</target>
          </segment>
        </unit>
        <unit id="181">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="181">
            <source xml:space="preserve">Most of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">WebErrorStatus</pc> enumeration values correspond to an error returned by the native HTTP client operation.</source>
            <target xml:space="preserve">Most of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">WebErrorStatus</pc> enumeration values correspond to an error returned by the native HTTP client operation.</target>
          </segment>
        </unit>
        <unit id="182">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="182">
            <source xml:space="preserve">Your app can filter on specific <pc dataRefEnd="id2" dataRefStart="id1" id="2">WebErrorStatus</pc> enumeration values to modify app behavior depending on the cause of the exception.</source>
            <target xml:space="preserve">Your app can filter on specific <pc dataRefEnd="id2" dataRefStart="id1" id="2">WebErrorStatus</pc> enumeration values to modify app behavior depending on the cause of the exception.</target>
          </segment>
        </unit>
        <unit id="183">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="183">
            <source xml:space="preserve">For parameter validation errors, an app can also use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> from the exception to learn more detailed information on the error that caused the exception.</source>
            <target xml:space="preserve">For parameter validation errors, an app can also use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> from the exception to learn more detailed information on the error that caused the exception.</target>
          </segment>
        </unit>
        <unit id="184">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="184">
            <source xml:space="preserve">Possible <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> values are listed in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Winerror.h</pc> header file.</source>
            <target xml:space="preserve">Possible <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> values are listed in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Winerror.h</pc> header file.</target>
          </segment>
        </unit>
        <unit id="185">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="185">
            <source xml:space="preserve">For most parameter validation errors, the <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> returned is <pc dataRefEnd="id4" dataRefStart="id3" id="4">E\_INVALIDARG</pc>.</source>
            <target xml:space="preserve">For most parameter validation errors, the <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> returned is <pc dataRefEnd="id4" dataRefStart="id3" id="4">E\_INVALIDARG</pc>.</target>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source xml:space="preserve">Setting timeouts on WebSocket operations</source>
            <target xml:space="preserve">Setting timeouts on WebSocket operations</target>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source xml:space="preserve">The MessageWebSocket and StreamWebSocket classes uses an internal system service to send WebSocket client requests and receive responses from a server.</source>
            <target xml:space="preserve">The MessageWebSocket and StreamWebSocket classes uses an internal system service to send WebSocket client requests and receive responses from a server.</target>
          </segment>
        </unit>
        <unit id="188">
          <segment state="initial" id="188">
            <source xml:space="preserve">The default timeout value used for a WebSocket connect operation is 60 seconds.</source>
            <target xml:space="preserve">The default timeout value used for a WebSocket connect operation is 60 seconds.</target>
          </segment>
        </unit>
        <unit id="189">
          <segment state="initial" id="189">
            <source xml:space="preserve">If the HTTP server that supports WebSockets is temporarily down or blocked by a network outage and the server doesn't or can't respond to the WebSocket connection request, the internal system service waits the default 60 seconds before it returns an error which causes an exception to be thrown on the WebSocket ConnectAsync method.</source>
            <target xml:space="preserve">If the HTTP server that supports WebSockets is temporarily down or blocked by a network outage and the server doesn't or can't respond to the WebSocket connection request, the internal system service waits the default 60 seconds before it returns an error which causes an exception to be thrown on the WebSocket ConnectAsync method.</target>
          </segment>
        </unit>
        <unit id="190">
          <segment state="initial" id="190">
            <source xml:space="preserve">If the name query for an HTTP server name in the URI returns multiple IP addresses for the name, the internal system service tries up to 5 IP addresses for the site each with a default timeout of 60 seconds before it fails.</source>
            <target xml:space="preserve">If the name query for an HTTP server name in the URI returns multiple IP addresses for the name, the internal system service tries up to 5 IP addresses for the site each with a default timeout of 60 seconds before it fails.</target>
          </segment>
        </unit>
        <unit id="191">
          <segment state="initial" id="191">
            <source xml:space="preserve">An app making a WebSocket connection request could wait several minutes trying to connect to multiple IP addresses before an error is returned and an exception is thrown.</source>
            <target xml:space="preserve">An app making a WebSocket connection request could wait several minutes trying to connect to multiple IP addresses before an error is returned and an exception is thrown.</target>
          </segment>
        </unit>
        <unit id="192">
          <segment state="initial" id="192">
            <source xml:space="preserve">This behavior could appear to the user as if the app stopped working.</source>
            <target xml:space="preserve">This behavior could appear to the user as if the app stopped working.</target>
          </segment>
        </unit>
        <unit id="193">
          <segment state="initial" id="193">
            <source xml:space="preserve">The default timeout used for send and receive operations after a WebSocket connection has been established is 30 seconds.</source>
            <target xml:space="preserve">The default timeout used for send and receive operations after a WebSocket connection has been established is 30 seconds.</target>
          </segment>
        </unit>
        <unit id="194">
          <segment state="initial" id="194">
            <source xml:space="preserve">To make your app more responsive and minimize these issues, it can set a shorter timeout on connection requests so that the operation fails due to timeout sooner than from the default settings.</source>
            <target xml:space="preserve">To make your app more responsive and minimize these issues, it can set a shorter timeout on connection requests so that the operation fails due to timeout sooner than from the default settings.</target>
          </segment>
        </unit>
        <unit id="195">
          <segment state="initial" id="195">
            <source xml:space="preserve">You set timeouts similarly for both StreamWebSockets and MessageWebSockets.</source>
            <target xml:space="preserve">You set timeouts similarly for both StreamWebSockets and MessageWebSockets.</target>
          </segment>
        </unit>
        <unit id="196">
          <segment state="initial" id="196">
            <source xml:space="preserve">The following example shows how to set a timeout on StreamWebSocket, but the process is similar for a MessageWebSocket.</source>
            <target xml:space="preserve">The following example shows how to set a timeout on StreamWebSocket, but the process is similar for a MessageWebSocket.</target>
          </segment>
        </unit>
        <unit id="197">
          <segment state="initial" id="197">
            <source xml:space="preserve">Create a task that completes after a specified delay using a timer.</source>
            <target xml:space="preserve">Create a task that completes after a specified delay using a timer.</target>
          </segment>
        </unit>
        <unit id="198">
          <segment state="initial" id="198">
            <source xml:space="preserve">Create a task for the WebSocket operation with a cancellation\_token\_source to support cancellation.</source>
            <target xml:space="preserve">Create a task for the WebSocket operation with a cancellation\_token\_source to support cancellation.</target>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source xml:space="preserve">If the task with the specified timeout delay completes before the WebSocket connect operation, cancel the task for the WebSocket operation.</source>
            <target xml:space="preserve">If the task with the specified timeout delay completes before the WebSocket connect operation, cancel the task for the WebSocket operation.</target>
          </segment>
        </unit>
        <unit id="200">
          <segment state="initial" id="200">
            <source xml:space="preserve">The following example creates one task that completes after a specified delay, and creates a second task that cancels after a specified delay.</source>
            <target xml:space="preserve">The following example creates one task that completes after a specified delay, and creates a second task that cancels after a specified delay.</target>
          </segment>
        </unit>
        <unit id="201">
          <segment state="initial" id="201">
            <source xml:space="preserve">These classes can be used with StreamWebSocket and MessageWebSocket when trying to establish a connection to set a specific timeout.</source>
            <target xml:space="preserve">These classes can be used with StreamWebSocket and MessageWebSocket when trying to establish a connection to set a specific timeout.</target>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source xml:space="preserve">An example usage would be calling the StreamWebSocket.ConnectAsync method in a task with a cancellation\_token\_source that supports cancellation.</source>
            <target xml:space="preserve">An example usage would be calling the StreamWebSocket.ConnectAsync method in a task with a cancellation\_token\_source that supports cancellation.</target>
          </segment>
        </unit>
        <unit id="203">
          <segment state="initial" id="203">
            <source xml:space="preserve">If timeout completes first, then the cancellation\_token\_source is used to cancel the task for the WebSocket connect operation.</source>
            <target xml:space="preserve">If timeout completes first, then the cancellation\_token\_source is used to cancel the task for the WebSocket connect operation.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>