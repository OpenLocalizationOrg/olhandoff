<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">a8c0c6842ba7b9c67fd946a851ad4367d0b27267</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Data binding in depth</source>
            <target xml:space="preserve">Data binding in depth</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="104">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">* Important APIs *</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">* Important APIs *</pc>
						</target>
          </segment>
        </unit>
        <unit id="105">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="105">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Binding class**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Binding class**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="106">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="106">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DataContext**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DataContext**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="107">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="107">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**INotifyPropertyChanged**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**INotifyPropertyChanged**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  This topic describes data binding features in detail.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  This topic describes data binding features in detail.</target>
          </segment>
        </unit>
        <unit id="109">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="109">
            <source xml:space="preserve">For a short, practical introduction, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Data binding overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For a short, practical introduction, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Data binding overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</source>
            <target xml:space="preserve">Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">Data binding allows you to separate the concern of data from the concern of UI, and that results in a simpler conceptual model as well as better readability, testability, and maintainability of your app.</source>
            <target xml:space="preserve">Data binding allows you to separate the concern of data from the concern of UI, and that results in a simpler conceptual model as well as better readability, testability, and maintainability of your app.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">You can use data binding to simply display values from a data source when the UI is first shown, but not to respond to changes in those values.</source>
            <target xml:space="preserve">You can use data binding to simply display values from a data source when the UI is first shown, but not to respond to changes in those values.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">This is called one-time binding, and it works well for data whose values don't change during run-time.</source>
            <target xml:space="preserve">This is called one-time binding, and it works well for data whose values don't change during run-time.</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">Additionally, you can choose to "observe" the values and to update the UI when they change.</source>
            <target xml:space="preserve">Additionally, you can choose to "observe" the values and to update the UI when they change.</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">This is called one-way binding, and it works well for read-only data.</source>
            <target xml:space="preserve">This is called one-way binding, and it works well for read-only data.</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">Ultimately, you can choose to both observe and update, so that changes that the user makes to values in the UI are automatically pushed back into the data source.</source>
            <target xml:space="preserve">Ultimately, you can choose to both observe and update, so that changes that the user makes to values in the UI are automatically pushed back into the data source.</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">This is called two-way binding, and it works well for read-write data.</source>
            <target xml:space="preserve">This is called two-way binding, and it works well for read-write data.</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">Here are some examples.</source>
            <target xml:space="preserve">Here are some examples.</target>
          </segment>
        </unit>
        <unit id="119">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="119">
            <source xml:space="preserve">You could use one-time binding to bind an <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Image**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to the current user's photo.</source>
            <target xml:space="preserve">You could use one-time binding to bind an <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Image**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to the current user's photo.</target>
          </segment>
        </unit>
        <unit id="120">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="120">
            <source xml:space="preserve">You could use one-way binding to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to a collection of real-time news articles grouped by newspaper section.</source>
            <target xml:space="preserve">You could use one-way binding to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to a collection of real-time news articles grouped by newspaper section.</target>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source xml:space="preserve">You could use two-way binding to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to a customer's name in a form.</source>
            <target xml:space="preserve">You could use two-way binding to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to a customer's name in a form.</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">There are two kinds of binding, and they're both typically declared in UI markup.</source>
            <target xml:space="preserve">There are two kinds of binding, and they're both typically declared in UI markup.</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">You can choose to use either the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">You can choose to use either the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">And you can even use a mixture of the two in the same app—even on the same UI element.</source>
            <target xml:space="preserve">And you can even use a mixture of the two in the same app—even on the same UI element.</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">{x:Bind} is new for Windows 10 and it has better performance.</source>
            <target xml:space="preserve">{x:Bind} is new for Windows 10 and it has better performance.</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">{Binding} has more features.</source>
            <target xml:space="preserve">{Binding} has more features.</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">All the details described in this topic apply to both kinds of binding unless we explicitly say otherwise.</source>
            <target xml:space="preserve">All the details described in this topic apply to both kinds of binding unless we explicitly say otherwise.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Sample apps that demonstrate {x:Bind}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Sample apps that demonstrate {x:Bind}</pc>
						</target>
          </segment>
        </unit>
        <unit id="129">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="129">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">{x:Bind} sample</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">{x:Bind} sample</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">QuizGame</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">QuizGame</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">XAML UI Basics sample</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">XAML UI Basics sample</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="132">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="132">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Sample apps that demonstrate {Binding}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Sample apps that demonstrate {Binding}</pc>
						</target>
          </segment>
        </unit>
        <unit id="133">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="133">
            <source xml:space="preserve">Download the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> app.</source>
            <target xml:space="preserve">Download the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> app.</target>
          </segment>
        </unit>
        <unit id="134">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="134">
            <source xml:space="preserve">Download the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> app.</source>
            <target xml:space="preserve">Download the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> app.</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">Every binding involves these pieces</source>
            <target xml:space="preserve">Every binding involves these pieces</target>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">binding source</pc>.</source>
            <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">binding source</pc>.</target>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source xml:space="preserve">This is the source of the data for the binding, and it can be an instance of any class that has members whose values you want to display in your UI.</source>
            <target xml:space="preserve">This is the source of the data for the binding, and it can be an instance of any class that has members whose values you want to display in your UI.</target>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">binding target</pc>.</source>
            <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">binding target</pc>.</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">This is a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> of the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**FrameworkElement**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> in your UI that displays the data.</source>
            <target xml:space="preserve">This is a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> of the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**FrameworkElement**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> in your UI that displays the data.</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">binding object</pc>.</source>
            <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2">binding object</pc>.</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">This is the piece that transfers data values from the source to the target, and optionally from the target back to the source.</source>
            <target xml:space="preserve">This is the piece that transfers data values from the source to the target, and optionally from the target back to the source.</target>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source xml:space="preserve">The binding object is created at XAML load time from your <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> markup extension.</source>
            <target xml:space="preserve">The binding object is created at XAML load time from your <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> markup extension.</target>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source xml:space="preserve">In the following sections, we'll take a closer look at the binding source, the binding target, and the binding object.</source>
            <target xml:space="preserve">In the following sections, we'll take a closer look at the binding source, the binding target, and the binding object.</target>
          </segment>
        </unit>
        <unit id="144">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="144">
            <source xml:space="preserve">And we'll link the sections together with the example of binding a button's content to a string property named <pc dataRefEnd="id2" dataRefStart="id1" id="2">NextButtonText</pc>, which belongs to a class named <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostViewModel</pc>.</source>
            <target xml:space="preserve">And we'll link the sections together with the example of binding a button's content to a string property named <pc dataRefEnd="id2" dataRefStart="id1" id="2">NextButtonText</pc>, which belongs to a class named <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostViewModel</pc>.</target>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source xml:space="preserve">Binding source</source>
            <target xml:space="preserve">Binding source</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">Here's a very rudimentary implementation of a class that we could use as a binding source.</source>
            <target xml:space="preserve">Here's a very rudimentary implementation of a class that we could use as a binding source.</target>
          </segment>
        </unit>
        <unit id="147">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="147">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  If you're using <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> with Visual C++ component extensions (C++/CX) then you'll need to add the <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**BindableAttribute**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> attribute to your binding source class.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  If you're using <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> with Visual C++ component extensions (C++/CX) then you'll need to add the <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**BindableAttribute**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> attribute to your binding source class.</target>
          </segment>
        </unit>
        <unit id="148">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="148">
            <source xml:space="preserve">If you're using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> then you don't need that attribute.</source>
            <target xml:space="preserve">If you're using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> then you don't need that attribute.</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Adding a details view</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for a code snippet.</source>
            <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Adding a details view</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for a code snippet.</target>
          </segment>
        </unit>
        <unit id="150">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="150">
            <source xml:space="preserve">That implementation of <pc dataRefEnd="id2" dataRefStart="id1" id="2">HostViewModel</pc>, and its property <pc dataRefEnd="id4" dataRefStart="id3" id="4">NextButtonText</pc>, are only appropriate for one-time binding.</source>
            <target xml:space="preserve">That implementation of <pc dataRefEnd="id2" dataRefStart="id1" id="2">HostViewModel</pc>, and its property <pc dataRefEnd="id4" dataRefStart="id3" id="4">NextButtonText</pc>, are only appropriate for one-time binding.</target>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source xml:space="preserve">But one-way and two-way bindings are extremely common, and in those kinds of binding the UI automatically updates in response to changes in the data values of the binding source.</source>
            <target xml:space="preserve">But one-way and two-way bindings are extremely common, and in those kinds of binding the UI automatically updates in response to changes in the data values of the binding source.</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">In order for those kinds of binding to work correctly, you need to make your binding source "observable" to the binding object.</source>
            <target xml:space="preserve">In order for those kinds of binding to work correctly, you need to make your binding source "observable" to the binding object.</target>
          </segment>
        </unit>
        <unit id="153">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="153">
            <source xml:space="preserve">So in our example, if we want to one-way or two-way bind to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">NextButtonText</pc> property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object.</source>
            <target xml:space="preserve">So in our example, if we want to one-way or two-way bind to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">NextButtonText</pc> property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object.</target>
          </segment>
        </unit>
        <unit id="154">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="154">
            <source xml:space="preserve">One way of doing that is to derive the class that represents your binding source from <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and expose a data value through a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">One way of doing that is to derive the class that represents your binding source from <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyObject**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and expose a data value through a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DependencyProperty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="155">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="155">
            <source xml:space="preserve">That's how a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**FrameworkElement**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> becomes observable.</source>
            <target xml:space="preserve">That's how a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**FrameworkElement**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> becomes observable.</target>
          </segment>
        </unit>
        <unit id="156">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="156">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">FrameworkElements</pc> are good binding sources right out of the box.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">FrameworkElements</pc> are good binding sources right out of the box.</target>
          </segment>
        </unit>
        <unit id="157">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="157">
            <source xml:space="preserve">A more lightweight way of making a class observable—and a necessary one for classes that already have a base class—is to implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**System.ComponentModel.INotifyPropertyChanged**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">A more lightweight way of making a class observable—and a necessary one for classes that already have a base class—is to implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**System.ComponentModel.INotifyPropertyChanged**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="158">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="158">
            <source xml:space="preserve">This really just involves implementing a single event named <pc dataRefEnd="id2" dataRefStart="id1" id="2">PropertyChanged</pc>.</source>
            <target xml:space="preserve">This really just involves implementing a single event named <pc dataRefEnd="id2" dataRefStart="id1" id="2">PropertyChanged</pc>.</target>
          </segment>
        </unit>
        <unit id="159">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="159">
            <source xml:space="preserve">An example using <pc dataRefEnd="id2" dataRefStart="id1" id="2">HostViewModel</pc> is below.</source>
            <target xml:space="preserve">An example using <pc dataRefEnd="id2" dataRefStart="id1" id="2">HostViewModel</pc> is below.</target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id15">&lt;link&gt;</data>
            <data id="id16">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  For C++/CX, you implement <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**Windows::UI::Xaml::Data::INotifyPropertyChanged**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>, and the binding source class must either have the <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**BindableAttribute**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> or implement <pc dataRefEnd="id16" dataRefStart="id15" id="7CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="7CapsExtId2">**ICustomPropertyProvider**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="7CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  For C++/CX, you implement <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**Windows::UI::Xaml::Data::INotifyPropertyChanged**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>, and the binding source class must either have the <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**BindableAttribute**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> or implement <pc dataRefEnd="id16" dataRefStart="id15" id="7CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="7CapsExtId2">**ICustomPropertyProvider**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="7CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="161">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="161">
            <source xml:space="preserve">Now the <pc dataRefEnd="id2" dataRefStart="id1" id="2">NextButtonText</pc> property is observable.</source>
            <target xml:space="preserve">Now the <pc dataRefEnd="id2" dataRefStart="id1" id="2">NextButtonText</pc> property is observable.</target>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source xml:space="preserve">When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">PropertyChanged</pc> event.</source>
            <target xml:space="preserve">When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">PropertyChanged</pc> event.</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">When that event is raised, the binding object's handler receives an argument containing the name of the property that has changed.</source>
            <target xml:space="preserve">When that event is raised, the binding object's handler receives an argument containing the name of the property that has changed.</target>
          </segment>
        </unit>
        <unit id="164">
          <segment state="initial" id="164">
            <source xml:space="preserve">That's how the binding object knows which property's value to go and read again.</source>
            <target xml:space="preserve">That's how the binding object knows which property's value to go and read again.</target>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source xml:space="preserve">So that you don't have to implement the pattern shown above multiple times, you can just derive from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BindableBase</pc> bass class that you'll find in the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">QuizGame</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> sample (in the "Common" folder).</source>
            <target xml:space="preserve">So that you don't have to implement the pattern shown above multiple times, you can just derive from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BindableBase</pc> bass class that you'll find in the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">QuizGame</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> sample (in the "Common" folder).</target>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source xml:space="preserve">Here's an example of how that looks.</source>
            <target xml:space="preserve">Here's an example of how that looks.</target>
          </segment>
        </unit>
        <unit id="167">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="167">
            <source xml:space="preserve">Raising the <pc dataRefEnd="id2" dataRefStart="id1" id="2">PropertyChanged</pc> event with an argument of <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**String.Empty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="6">null</pc> indicates that all non-indexer properties on the object should be re-read.</source>
            <target xml:space="preserve">Raising the <pc dataRefEnd="id2" dataRefStart="id1" id="2">PropertyChanged</pc> event with an argument of <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**String.Empty**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="6">null</pc> indicates that all non-indexer properties on the object should be re-read.</target>
          </segment>
        </unit>
        <unit id="168">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="168">
            <source xml:space="preserve">You can raise the event to indicate that indexer properties on the object have changed by using an argument of "Item\[<pc dataRefEnd="id2" dataRefStart="id1" id="2">indexer</pc>\]" for specific indexers (where <pc dataRefEnd="id4" dataRefStart="id3" id="4">indexer</pc> is the index value), or a value of "Item\[\]" for all indexers.</source>
            <target xml:space="preserve">You can raise the event to indicate that indexer properties on the object have changed by using an argument of "Item\[<pc dataRefEnd="id2" dataRefStart="id1" id="2">indexer</pc>\]" for specific indexers (where <pc dataRefEnd="id4" dataRefStart="id3" id="4">indexer</pc> is the index value), or a value of "Item\[\]" for all indexers.</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">A binding source can be treated either as a single object whose properties contain data, or as a collection of objects.</source>
            <target xml:space="preserve">A binding source can be treated either as a single object whose properties contain data, or as a collection of objects.</target>
          </segment>
        </unit>
        <unit id="170">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="170">
            <source xml:space="preserve">In C\# and Visual Basic code, you can one-time bind to an object that implements <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**List(Of T)**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to display a collection that does not change at run-time.</source>
            <target xml:space="preserve">In C\# and Visual Basic code, you can one-time bind to an object that implements <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**List(Of T)**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to display a collection that does not change at run-time.</target>
          </segment>
        </unit>
        <unit id="171">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="171">
            <source xml:space="preserve">For an observable collection (observing when items are added to and removed from the collection), one-way bind to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ObservableCollection(Of T)**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instead.</source>
            <target xml:space="preserve">For an observable collection (observing when items are added to and removed from the collection), one-way bind to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ObservableCollection(Of T)**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instead.</target>
          </segment>
        </unit>
        <unit id="172">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="172">
            <source xml:space="preserve">In C++ code, you can bind to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Vector&lt;T&gt;**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for both observable and non-observable collections.</source>
            <target xml:space="preserve">In C++ code, you can bind to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Vector&lt;T&gt;**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for both observable and non-observable collections.</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">To bind to your own collection classes, use the guidance in the following table.</source>
            <target xml:space="preserve">To bind to your own collection classes, use the guidance in the following table.</target>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source xml:space="preserve">Scenario</source>
            <target xml:space="preserve">Scenario</target>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source xml:space="preserve">C\# and VB (CLR)</source>
            <target xml:space="preserve">C\# and VB (CLR)</target>
          </segment>
        </unit>
        <unit id="176">
          <segment state="initial" id="176">
            <source xml:space="preserve">C++/CX</source>
            <target xml:space="preserve">C++/CX</target>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source xml:space="preserve">Bind to an object.</source>
            <target xml:space="preserve">Bind to an object.</target>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source xml:space="preserve">Can be any object.</source>
            <target xml:space="preserve">Can be any object.</target>
          </segment>
        </unit>
        <unit id="179">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="179">
            <source xml:space="preserve">Object must have <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**BindableAttribute**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or implement <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ICustomPropertyProvider**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Object must have <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**BindableAttribute**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or implement <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ICustomPropertyProvider**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="180">
          <segment state="initial" id="180">
            <source xml:space="preserve">Get property change updates from a bound object.</source>
            <target xml:space="preserve">Get property change updates from a bound object.</target>
          </segment>
        </unit>
        <unit id="181">
          <segment state="initial" id="181">
            <source xml:space="preserve">Object must implement [**System.ComponentModel.</source>
            <target xml:space="preserve">Object must implement [**System.ComponentModel.</target>
          </segment>
        </unit>
        <unit id="182">
          <segment state="initial" id="182">
            <source xml:space="preserve">INotifyPropertyChanged**](T:System.ComponentModel.INotifyPropertyChanged).</source>
            <target xml:space="preserve">INotifyPropertyChanged**](T:System.ComponentModel.INotifyPropertyChanged).</target>
          </segment>
        </unit>
        <unit id="183">
          <segment state="initial" id="183">
            <source xml:space="preserve">Object must implement [**Windows.UI.Xaml.Data.</source>
            <target xml:space="preserve">Object must implement [**Windows.UI.Xaml.Data.</target>
          </segment>
        </unit>
        <unit id="184">
          <segment state="initial" id="184">
            <source xml:space="preserve">INotifyPropertyChanged**](https://msdn.microsoft.com/library/windows/apps/BR209899).</source>
            <target xml:space="preserve">INotifyPropertyChanged**](https://msdn.microsoft.com/library/windows/apps/BR209899).</target>
          </segment>
        </unit>
        <unit id="185">
          <segment state="initial" id="185">
            <source xml:space="preserve">Bind to a collection.</source>
            <target xml:space="preserve">Bind to a collection.</target>
          </segment>
        </unit>
        <unit id="186">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="186">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**List(Of T)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**List(Of T)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="187">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="187">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Platform::Collections::Vector&lt;T&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Platform::Collections::Vector&lt;T&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="188">
          <segment state="initial" id="188">
            <source xml:space="preserve">Get collection change updates from a bound collection.</source>
            <target xml:space="preserve">Get collection change updates from a bound collection.</target>
          </segment>
        </unit>
        <unit id="189">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="189">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**ObservableCollection(Of T)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**ObservableCollection(Of T)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="190">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="190">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Platform::Collections::Vector&lt;T&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Platform::Collections::Vector&lt;T&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="191">
          <segment state="initial" id="191">
            <source xml:space="preserve">Implement a collection that supports binding.</source>
            <target xml:space="preserve">Implement a collection that supports binding.</target>
          </segment>
        </unit>
        <unit id="192">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id25">&lt;link&gt;</data>
            <data id="id26">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id31">&lt;link&gt;</data>
            <data id="id32">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id37">&lt;strong&gt;</data>
            <data id="id38">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="192">
            <source xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**List(Of T)**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or implement <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IList**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**IList**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>(Of <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**Object**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>, <pc dataRefEnd="id26" dataRefStart="id25" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**IEnumerable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc>, or <pc dataRefEnd="id32" dataRefStart="id31" id="12CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="12CapsExtId2">**IEnumerable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="12CapsExtId3"></pc></pc>(Of <pc dataRefEnd="id38" dataRefStart="id37" id="14">Object</pc>).</source>
            <target xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**List(Of T)**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or implement <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IList**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**IList**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>(Of <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**Object**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>, <pc dataRefEnd="id26" dataRefStart="id25" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**IEnumerable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc>, or <pc dataRefEnd="id32" dataRefStart="id31" id="12CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="12CapsExtId2">**IEnumerable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="12CapsExtId3"></pc></pc>(Of <pc dataRefEnd="id38" dataRefStart="id37" id="14">Object</pc>).</target>
          </segment>
        </unit>
        <unit id="193">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="193">
            <source xml:space="preserve">Binding to generic <pc dataRefEnd="id2" dataRefStart="id1" id="2">IList(Of T)</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">IEnumerable(Of T)</pc> is not supported.</source>
            <target xml:space="preserve">Binding to generic <pc dataRefEnd="id2" dataRefStart="id1" id="2">IList(Of T)</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">IEnumerable(Of T)</pc> is not supported.</target>
          </segment>
        </unit>
        <unit id="194">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id25">&lt;link&gt;</data>
            <data id="id26">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id31">&lt;strong&gt;</data>
            <data id="id32">&lt;/strong&gt;</data>
            <data id="id33">&lt;strong&gt;</data>
            <data id="id34">&lt;/strong&gt;</data>
            <data id="id35">&lt;link&gt;</data>
            <data id="id36">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id41">&lt;strong&gt;</data>
            <data id="id42">&lt;/strong&gt;</data>
            <data id="id43">&lt;strong&gt;</data>
            <data id="id44">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="194">
            <source xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IBindableVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IBindableIterable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**IVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>&lt;<pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**Object**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>^&gt;, <pc dataRefEnd="id26" dataRefStart="id25" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**IIterable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc>&lt;<pc dataRefEnd="id32" dataRefStart="id31" id="12">Object</pc>^&gt;, <pc dataRefEnd="id34" dataRefStart="id33" id="14">IVector</pc>&lt;<pc dataRefEnd="id36" dataRefStart="id35" id="16CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="16CapsExtId2">**IInspectable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="16CapsExtId3"></pc></pc>\*&gt;, or <pc dataRefEnd="id42" dataRefStart="id41" id="18">IIterable</pc>&lt;<pc dataRefEnd="id44" dataRefStart="id43" id="20">IInspectable</pc>\*&gt;.</source>
            <target xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IBindableVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IBindableIterable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**IVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>&lt;<pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**Object**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>^&gt;, <pc dataRefEnd="id26" dataRefStart="id25" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**IIterable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc>&lt;<pc dataRefEnd="id32" dataRefStart="id31" id="12">Object</pc>^&gt;, <pc dataRefEnd="id34" dataRefStart="id33" id="14">IVector</pc>&lt;<pc dataRefEnd="id36" dataRefStart="id35" id="16CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="16CapsExtId2">**IInspectable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="16CapsExtId3"></pc></pc>\*&gt;, or <pc dataRefEnd="id42" dataRefStart="id41" id="18">IIterable</pc>&lt;<pc dataRefEnd="id44" dataRefStart="id43" id="20">IInspectable</pc>\*&gt;.</target>
          </segment>
        </unit>
        <unit id="195">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="195">
            <source xml:space="preserve">Binding to generic <pc dataRefEnd="id2" dataRefStart="id1" id="2">IVector&lt;T&gt;</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">IIterable&lt;T&gt;</pc> is not supported.</source>
            <target xml:space="preserve">Binding to generic <pc dataRefEnd="id2" dataRefStart="id1" id="2">IVector&lt;T&gt;</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">IIterable&lt;T&gt;</pc> is not supported.</target>
          </segment>
        </unit>
        <unit id="196">
          <segment state="initial" id="196">
            <source xml:space="preserve">Implement a collection that supports collection change updates.</source>
            <target xml:space="preserve">Implement a collection that supports collection change updates.</target>
          </segment>
        </unit>
        <unit id="197">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="197">
            <source xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ObservableCollection(Of T)**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or implement (non-generic) <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IList**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**INotifyCollectionChanged**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ObservableCollection(Of T)**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or implement (non-generic) <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IList**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**INotifyCollectionChanged**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="198">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="198">
            <source xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IBindableVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IBindableObservableVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IBindableVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IBindableObservableVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source xml:space="preserve">Implement a collection that supports incremental loading.</source>
            <target xml:space="preserve">Implement a collection that supports incremental loading.</target>
          </segment>
        </unit>
        <unit id="200">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="200">
            <source xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ObservableCollection(Of T)**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or implement (non-generic) <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IList**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**INotifyCollectionChanged**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ObservableCollection(Of T)**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or implement (non-generic) <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IList**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**INotifyCollectionChanged**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="201">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="201">
            <source xml:space="preserve">Additionally, implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ISupportIncrementalLoading**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Additionally, implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ISupportIncrementalLoading**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="202">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="202">
            <source xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IBindableVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IBindableObservableVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**ISupportIncrementalLoading**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IBindableVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IBindableObservableVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**ISupportIncrementalLoading**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="203">
          <segment state="initial" id="203">
            <source xml:space="preserve">You can bind list controls to arbitrarily large data sources, and still achieve high performance, by using incremental loading.</source>
            <target xml:space="preserve">You can bind list controls to arbitrarily large data sources, and still achieve high performance, by using incremental loading.</target>
          </segment>
        </unit>
        <unit id="204">
          <segment state="initial" id="204">
            <source xml:space="preserve">For example, you can bind list controls to Bing image query results without having to load all the results at once.</source>
            <target xml:space="preserve">For example, you can bind list controls to Bing image query results without having to load all the results at once.</target>
          </segment>
        </unit>
        <unit id="205">
          <segment state="initial" id="205">
            <source xml:space="preserve">Instead, you load only some results immediately, and load additional results as needed.</source>
            <target xml:space="preserve">Instead, you load only some results immediately, and load additional results as needed.</target>
          </segment>
        </unit>
        <unit id="206">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="206">
            <source xml:space="preserve">To support incremental loading, you must implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ISupportIncrementalLoading**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> on a data source that supports collection change notification.</source>
            <target xml:space="preserve">To support incremental loading, you must implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ISupportIncrementalLoading**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> on a data source that supports collection change notification.</target>
          </segment>
        </unit>
        <unit id="207">
          <segment state="initial" id="207">
            <source xml:space="preserve">When the data binding engine requests more data, your data source must make the appropriate requests, integrate the results, and then send the appropriate notifications in order to update the UI.</source>
            <target xml:space="preserve">When the data binding engine requests more data, your data source must make the appropriate requests, integrate the results, and then send the appropriate notifications in order to update the UI.</target>
          </segment>
        </unit>
        <unit id="208">
          <segment state="initial" id="208">
            <source xml:space="preserve">Binding target</source>
            <target xml:space="preserve">Binding target</target>
          </segment>
        </unit>
        <unit id="209">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="209">
            <source xml:space="preserve">In the two examples below, the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Button.Content</pc> property is the binding target, and its value is set to a markup extension which declares the binding object.</source>
            <target xml:space="preserve">In the two examples below, the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Button.Content</pc> property is the binding target, and its value is set to a markup extension which declares the binding object.</target>
          </segment>
        </unit>
        <unit id="210">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="210">
            <source xml:space="preserve">First <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is shown, and then <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">First <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is shown, and then <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="211">
          <segment state="initial" id="211">
            <source xml:space="preserve">Declaring bindings in markup is the common case (it's convenient, readable, and toolable).</source>
            <target xml:space="preserve">Declaring bindings in markup is the common case (it's convenient, readable, and toolable).</target>
          </segment>
        </unit>
        <unit id="212">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="212">
            <source xml:space="preserve">But you can avoid markup and imperatively (programmatically) create an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Binding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class instead if you need to.</source>
            <target xml:space="preserve">But you can avoid markup and imperatively (programmatically) create an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Binding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class instead if you need to.</target>
          </segment>
        </unit>
        <unit id="213">
          <segment state="initial" id="213">
            <source xml:space="preserve">Binding object declared using {x:Bind}</source>
            <target xml:space="preserve">Binding object declared using {x:Bind}</target>
          </segment>
        </unit>
        <unit id="214">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="214">
            <source xml:space="preserve">There's one step we need to do before we author our <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> markup.</source>
            <target xml:space="preserve">There's one step we need to do before we author our <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> markup.</target>
          </segment>
        </unit>
        <unit id="215">
          <segment state="initial" id="215">
            <source xml:space="preserve">We need to expose our binding source class from the class that represents our page of markup.</source>
            <target xml:space="preserve">We need to expose our binding source class from the class that represents our page of markup.</target>
          </segment>
        </unit>
        <unit id="216">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="216">
            <source xml:space="preserve">We do that by adding a property (of type <pc dataRefEnd="id2" dataRefStart="id1" id="2">HostViewModel</pc> in this case) to our <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostView</pc> page class.</source>
            <target xml:space="preserve">We do that by adding a property (of type <pc dataRefEnd="id2" dataRefStart="id1" id="2">HostViewModel</pc> in this case) to our <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostView</pc> page class.</target>
          </segment>
        </unit>
        <unit id="217">
          <segment state="initial" id="217">
            <source xml:space="preserve">That done, we can now take a closer look at the markup that declares the binding object.</source>
            <target xml:space="preserve">That done, we can now take a closer look at the markup that declares the binding object.</target>
          </segment>
        </unit>
        <unit id="218">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="218">
            <source xml:space="preserve">The example below uses the same <pc dataRefEnd="id2" dataRefStart="id1" id="2">Button.Content</pc> binding target we used in the "Binding target" section earlier, and shows it being bound to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostViewModel.NextButtonText</pc> property.</source>
            <target xml:space="preserve">The example below uses the same <pc dataRefEnd="id2" dataRefStart="id1" id="2">Button.Content</pc> binding target we used in the "Binding target" section earlier, and shows it being bound to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostViewModel.NextButtonText</pc> property.</target>
          </segment>
        </unit>
        <unit id="219">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="219">
            <source xml:space="preserve">Notice the value that we specify for <pc dataRefEnd="id2" dataRefStart="id1" id="2">Path</pc>.</source>
            <target xml:space="preserve">Notice the value that we specify for <pc dataRefEnd="id2" dataRefStart="id1" id="2">Path</pc>.</target>
          </segment>
        </unit>
        <unit id="220">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="220">
            <source xml:space="preserve">This value is interpreted in the context of the page itself, and in this case the path begins by referencing the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ViewModel</pc> property that we just added to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostView</pc> page.</source>
            <target xml:space="preserve">This value is interpreted in the context of the page itself, and in this case the path begins by referencing the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ViewModel</pc> property that we just added to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostView</pc> page.</target>
          </segment>
        </unit>
        <unit id="221">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="221">
            <source xml:space="preserve">That property returns a <pc dataRefEnd="id2" dataRefStart="id1" id="2">HostViewModel</pc> instance, and so we can dot into that object to access the <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostViewModel.NextButtonText</pc> property.</source>
            <target xml:space="preserve">That property returns a <pc dataRefEnd="id2" dataRefStart="id1" id="2">HostViewModel</pc> instance, and so we can dot into that object to access the <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostViewModel.NextButtonText</pc> property.</target>
          </segment>
        </unit>
        <unit id="222">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="222">
            <source xml:space="preserve">And we specify <pc dataRefEnd="id2" dataRefStart="id1" id="2">Mode</pc>, to override the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> default of one-time.</source>
            <target xml:space="preserve">And we specify <pc dataRefEnd="id2" dataRefStart="id1" id="2">Mode</pc>, to override the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> default of one-time.</target>
          </segment>
        </unit>
        <unit id="223">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="223">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Path**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Path**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers.</target>
          </segment>
        </unit>
        <unit id="224">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="224">
            <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Property-path syntax</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Property-path syntax</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="225">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="225">
            <source xml:space="preserve">Binding to string indexers gives you the effect of binding to dynamic properties without having to implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICustomPropertyProvider**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Binding to string indexers gives you the effect of binding to dynamic properties without having to implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICustomPropertyProvider**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="226">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="226">
            <source xml:space="preserve">For other settings, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For other settings, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="227">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="227">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Changes to <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**TextBox.Text**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> are sent to a two-way bound source when the <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> loses focus, and not after every user keystroke.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Changes to <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**TextBox.Text**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> are sent to a two-way bound source when the <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> loses focus, and not after every user keystroke.</target>
          </segment>
        </unit>
        <unit id="228">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="228">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">DataTemplate and x:DataType</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">DataTemplate and x:DataType</pc>
						</target>
          </segment>
        </unit>
        <unit id="229">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="229">
            <source xml:space="preserve">Inside a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataTemplate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> (whether used as an item template, a content template, or a header template), the value of <pc dataRefEnd="id8" dataRefStart="id7" id="4">Path</pc> is not interpreted in the context of the page, but in the context of the data object being templated.</source>
            <target xml:space="preserve">Inside a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataTemplate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> (whether used as an item template, a content template, or a header template), the value of <pc dataRefEnd="id8" dataRefStart="id7" id="4">Path</pc> is not interpreted in the context of the page, but in the context of the data object being templated.</target>
          </segment>
        </unit>
        <unit id="230">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="230">
            <source xml:space="preserve">So that its bindings can be validated (and efficient code generated for them) at compile-time, a <pc dataRefEnd="id2" dataRefStart="id1" id="2">DataTemplate</pc> needs to declare the type of its data object using <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:DataType</pc>.</source>
            <target xml:space="preserve">So that its bindings can be validated (and efficient code generated for them) at compile-time, a <pc dataRefEnd="id2" dataRefStart="id1" id="2">DataTemplate</pc> needs to declare the type of its data object using <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:DataType</pc>.</target>
          </segment>
        </unit>
        <unit id="231">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="231">
            <source xml:space="preserve">The example given below could be used as the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ItemTemplate</pc> of an items control bound to a collection of <pc dataRefEnd="id4" dataRefStart="id3" id="4">SampleDataGroup</pc> objects.</source>
            <target xml:space="preserve">The example given below could be used as the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ItemTemplate</pc> of an items control bound to a collection of <pc dataRefEnd="id4" dataRefStart="id3" id="4">SampleDataGroup</pc> objects.</target>
          </segment>
        </unit>
        <unit id="232">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="232">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Weakly-typed objects in your Path</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Weakly-typed objects in your Path</pc>
						</target>
          </segment>
        </unit>
        <unit id="233">
          <segment state="initial" id="233">
            <source xml:space="preserve">Consider for example that you have a type named SampleDataGroup, which implements a string property named Title.</source>
            <target xml:space="preserve">Consider for example that you have a type named SampleDataGroup, which implements a string property named Title.</target>
          </segment>
        </unit>
        <unit id="234">
          <segment state="initial" id="234">
            <source xml:space="preserve">And you have a property MainPage.SampleDataGroupAsObject, which is of type object but which actually returns an instance of SampleDataGroup.</source>
            <target xml:space="preserve">And you have a property MainPage.SampleDataGroupAsObject, which is of type object but which actually returns an instance of SampleDataGroup.</target>
          </segment>
        </unit>
        <unit id="235">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="235">
            <source xml:space="preserve">The binding <pc dataRefEnd="id2" dataRefStart="id1" id="2">&lt;TextBlock Text="{x:Bind SampleDataGroupAsObject.Title}"/&gt;</pc> will result in a compile error because the Title property is not found on the type object.</source>
            <target xml:space="preserve">The binding <pc dataRefEnd="id2" dataRefStart="id1" id="2">&lt;TextBlock Text="{x:Bind SampleDataGroupAsObject.Title}"/&gt;</pc> will result in a compile error because the Title property is not found on the type object.</target>
          </segment>
        </unit>
        <unit id="236">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="236">
            <source xml:space="preserve">The remedy for this is to add a cast to your Path syntax like this: <pc dataRefEnd="id2" dataRefStart="id1" id="2">&lt;TextBlock Text="{x:Bind SampleDataGroupAsObject.(data:SampleDataGroup.Title)}"/&gt;</pc>.</source>
            <target xml:space="preserve">The remedy for this is to add a cast to your Path syntax like this: <pc dataRefEnd="id2" dataRefStart="id1" id="2">&lt;TextBlock Text="{x:Bind SampleDataGroupAsObject.(data:SampleDataGroup.Title)}"/&gt;</pc>.</target>
          </segment>
        </unit>
        <unit id="237">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="237">
            <source xml:space="preserve">Here's another example where Element is declared as object but is actually a TextBlock: <pc dataRefEnd="id2" dataRefStart="id1" id="2">&lt;TextBlock Text="{x:Bind Element.Text}"/&gt;</pc>.</source>
            <target xml:space="preserve">Here's another example where Element is declared as object but is actually a TextBlock: <pc dataRefEnd="id2" dataRefStart="id1" id="2">&lt;TextBlock Text="{x:Bind Element.Text}"/&gt;</pc>.</target>
          </segment>
        </unit>
        <unit id="238">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="238">
            <source xml:space="preserve">And a cast remedies the issue: <pc dataRefEnd="id2" dataRefStart="id1" id="2">&lt;TextBlock Text="{x:Bind Element.(TextBlock.Text)}"/&gt;</pc>.</source>
            <target xml:space="preserve">And a cast remedies the issue: <pc dataRefEnd="id2" dataRefStart="id1" id="2">&lt;TextBlock Text="{x:Bind Element.(TextBlock.Text)}"/&gt;</pc>.</target>
          </segment>
        </unit>
        <unit id="239">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="239">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">If your data loads asynchronously</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">If your data loads asynchronously</pc>
						</target>
          </segment>
        </unit>
        <unit id="240">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;strong&gt;</data>
            <data id="id14">&lt;/strong&gt;</data>
            <data id="id15">&lt;strong&gt;</data>
            <data id="id16">&lt;/strong&gt;</data>
            <data id="id17">&lt;strong&gt;</data>
            <data id="id18">&lt;/strong&gt;</data>
            <data id="id19">&lt;strong&gt;</data>
            <data id="id20">&lt;/strong&gt;</data>
            <data id="id21">&lt;strong&gt;</data>
            <data id="id22">&lt;/strong&gt;</data>
            <data id="id23">&lt;code&gt;</data>
            <data id="id24">&lt;/code&gt;</data>
            <data id="id25">&lt;strong&gt;</data>
            <data id="id26">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="240">
            <source xml:space="preserve">Code to support <pc dataRefEnd="id2" dataRefStart="id1" id="2">{x:Bind}</pc> is generated at compile-time in the partial classes for your pages. These files can be found in your <pc dataRefEnd="id4" dataRefStart="id3" id="4">obj</pc> folder, with names like (for C\#) <pc dataRefEnd="id6" dataRefStart="id5" id="6">&lt;view name&gt;.g.cs</pc>. The generated code includes a handler for your page's <pc dataRefEnd="id8" dataRefStart="id7" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**Loading**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> event, and that handler calls the <pc dataRefEnd="id14" dataRefStart="id13" id="10">Initialize</pc> method on a generated class that represent's your page's bindings. <pc dataRefEnd="id16" dataRefStart="id15" id="12">Initialize</pc> in turn calls <pc dataRefEnd="id18" dataRefStart="id17" id="14">Update</pc> to begin moving data between the binding source and the target. <pc dataRefEnd="id20" dataRefStart="id19" id="16">Loading</pc> is raised just before the first measure pass of the page or user control. So if your data is loaded asynchronously it may not be ready by the time <pc dataRefEnd="id22" dataRefStart="id21" id="18">Initialize</pc> is called. So, after you've loaded data, you can force one-time bindings to be initialized by calling <pc dataRefEnd="id24" dataRefStart="id23" id="20">this-&gt;Bindings-&gt;Update();</pc>. If you only need one-time bindings for asynchronously-loaded data then it’s much cheaper to initialize them this way than it is to have one-way bindings and to listen for changes. If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to <pc dataRefEnd="id26" dataRefStart="id25" id="22">Update</pc>.</source>
            <target xml:space="preserve">Code to support <pc dataRefEnd="id2" dataRefStart="id1" id="2">{x:Bind}</pc> is generated at compile-time in the partial classes for your pages. These files can be found in your <pc dataRefEnd="id4" dataRefStart="id3" id="4">obj</pc> folder, with names like (for C\#) <pc dataRefEnd="id6" dataRefStart="id5" id="6">&lt;view name&gt;.g.cs</pc>. The generated code includes a handler for your page's <pc dataRefEnd="id8" dataRefStart="id7" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**Loading**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> event, and that handler calls the <pc dataRefEnd="id14" dataRefStart="id13" id="10">Initialize</pc> method on a generated class that represent's your page's bindings. <pc dataRefEnd="id16" dataRefStart="id15" id="12">Initialize</pc> in turn calls <pc dataRefEnd="id18" dataRefStart="id17" id="14">Update</pc> to begin moving data between the binding source and the target. <pc dataRefEnd="id20" dataRefStart="id19" id="16">Loading</pc> is raised just before the first measure pass of the page or user control. So if your data is loaded asynchronously it may not be ready by the time <pc dataRefEnd="id22" dataRefStart="id21" id="18">Initialize</pc> is called. So, after you've loaded data, you can force one-time bindings to be initialized by calling <pc dataRefEnd="id24" dataRefStart="id23" id="20">this-&gt;Bindings-&gt;Update();</pc>. If you only need one-time bindings for asynchronously-loaded data then it’s much cheaper to initialize them this way than it is to have one-way bindings and to listen for changes. If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to <pc dataRefEnd="id26" dataRefStart="id25" id="22">Update</pc>.</target>
          </segment>
        </unit>
        <unit id="241">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="241">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Limitations</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Limitations</pc>
						</target>
          </segment>
        </unit>
        <unit id="242">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="242">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind}</pc> is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names ("if it walks, swims, and quacks like a duck then it's a duck").</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind}</pc> is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names ("if it walks, swims, and quacks like a duck then it's a duck").</target>
          </segment>
        </unit>
        <unit id="243">
          <segment state="initial" id="243">
            <source xml:space="preserve">With duck typing, a binding to the Age property would be equally satisfied with a Person or a Wine object.</source>
            <target xml:space="preserve">With duck typing, a binding to the Age property would be equally satisfied with a Person or a Wine object.</target>
          </segment>
        </unit>
        <unit id="244">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="244">
            <source xml:space="preserve">For these scenarios, use <pc dataRefEnd="id2" dataRefStart="id1" id="2">{Binding}</pc>.</source>
            <target xml:space="preserve">For these scenarios, use <pc dataRefEnd="id2" dataRefStart="id1" id="2">{Binding}</pc>.</target>
          </segment>
        </unit>
        <unit id="245">
          <segment state="initial" id="245">
            <source xml:space="preserve">Binding object declared using {Binding}</source>
            <target xml:space="preserve">Binding object declared using {Binding}</target>
          </segment>
        </unit>
        <unit id="246">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="246">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">{Binding}</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> assumes, by default, that you're binding to the <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**DataContext**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> of your markup page.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">{Binding}</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> assumes, by default, that you're binding to the <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**DataContext**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> of your markup page.</target>
          </segment>
        </unit>
        <unit id="247">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="247">
            <source xml:space="preserve">So we'll set the <pc dataRefEnd="id2" dataRefStart="id1" id="2">DataContext</pc> of our page to be an instance of our binding source class (of type <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostViewModel</pc> in this case).</source>
            <target xml:space="preserve">So we'll set the <pc dataRefEnd="id2" dataRefStart="id1" id="2">DataContext</pc> of our page to be an instance of our binding source class (of type <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostViewModel</pc> in this case).</target>
          </segment>
        </unit>
        <unit id="248">
          <segment state="initial" id="248">
            <source xml:space="preserve">The example below shows the markup that declares the binding object.</source>
            <target xml:space="preserve">The example below shows the markup that declares the binding object.</target>
          </segment>
        </unit>
        <unit id="249">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="249">
            <source xml:space="preserve">We use the same <pc dataRefEnd="id2" dataRefStart="id1" id="2">Button.Content</pc> binding target we used in the "Binding target" section earlier, and we bind to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostViewModel.NextButtonText</pc> property.</source>
            <target xml:space="preserve">We use the same <pc dataRefEnd="id2" dataRefStart="id1" id="2">Button.Content</pc> binding target we used in the "Binding target" section earlier, and we bind to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">HostViewModel.NextButtonText</pc> property.</target>
          </segment>
        </unit>
        <unit id="250">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="250">
            <source xml:space="preserve">Notice the value that we specify for <pc dataRefEnd="id2" dataRefStart="id1" id="2">Path</pc>.</source>
            <target xml:space="preserve">Notice the value that we specify for <pc dataRefEnd="id2" dataRefStart="id1" id="2">Path</pc>.</target>
          </segment>
        </unit>
        <unit id="251">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="251">
            <source xml:space="preserve">This value is interpreted in the context of the page's <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataContext**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, which in this example is set to an instance of <pc dataRefEnd="id8" dataRefStart="id7" id="4">HostViewModel</pc>.</source>
            <target xml:space="preserve">This value is interpreted in the context of the page's <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataContext**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, which in this example is set to an instance of <pc dataRefEnd="id8" dataRefStart="id7" id="4">HostViewModel</pc>.</target>
          </segment>
        </unit>
        <unit id="252">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="252">
            <source xml:space="preserve">The path references the <pc dataRefEnd="id2" dataRefStart="id1" id="2">HostViewModel.NextButtonText</pc> property.</source>
            <target xml:space="preserve">The path references the <pc dataRefEnd="id2" dataRefStart="id1" id="2">HostViewModel.NextButtonText</pc> property.</target>
          </segment>
        </unit>
        <unit id="253">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="253">
            <source xml:space="preserve">We can omit <pc dataRefEnd="id2" dataRefStart="id1" id="2">Mode</pc>, because the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> default of one-way works here.</source>
            <target xml:space="preserve">We can omit <pc dataRefEnd="id2" dataRefStart="id1" id="2">Mode</pc>, because the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> default of one-way works here.</target>
          </segment>
        </unit>
        <unit id="254">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="254">
            <source xml:space="preserve">The default value of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataContext**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for a UI element is the inherited value of its parent.</source>
            <target xml:space="preserve">The default value of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataContext**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for a UI element is the inherited value of its parent.</target>
          </segment>
        </unit>
        <unit id="255">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="255">
            <source xml:space="preserve">You can of course override that default by setting <pc dataRefEnd="id2" dataRefStart="id1" id="2">DataContext</pc> explicitly, which is in turn inherited by children by default.</source>
            <target xml:space="preserve">You can of course override that default by setting <pc dataRefEnd="id2" dataRefStart="id1" id="2">DataContext</pc> explicitly, which is in turn inherited by children by default.</target>
          </segment>
        </unit>
        <unit id="256">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="256">
            <source xml:space="preserve">Setting <pc dataRefEnd="id2" dataRefStart="id1" id="2">DataContext</pc> explicitly on an element is useful when you want to have multiple bindings that use the same source.</source>
            <target xml:space="preserve">Setting <pc dataRefEnd="id2" dataRefStart="id1" id="2">DataContext</pc> explicitly on an element is useful when you want to have multiple bindings that use the same source.</target>
          </segment>
        </unit>
        <unit id="257">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="257">
            <source xml:space="preserve">A binding object has a <pc dataRefEnd="id2" dataRefStart="id1" id="2">Source</pc> property, which defaults to the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DataContext**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> of the UI element on which the binding is declared.</source>
            <target xml:space="preserve">A binding object has a <pc dataRefEnd="id2" dataRefStart="id1" id="2">Source</pc> property, which defaults to the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DataContext**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> of the UI element on which the binding is declared.</target>
          </segment>
        </unit>
        <unit id="258">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="258">
            <source xml:space="preserve">You can override this default by setting <pc dataRefEnd="id2" dataRefStart="id1" id="2">Source</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">RelativeSource</pc>, or <pc dataRefEnd="id6" dataRefStart="id5" id="6">ElementName</pc> explicitly on the binding (see <pc dataRefEnd="id8" dataRefStart="id7" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> for details).</source>
            <target xml:space="preserve">You can override this default by setting <pc dataRefEnd="id2" dataRefStart="id1" id="2">Source</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">RelativeSource</pc>, or <pc dataRefEnd="id6" dataRefStart="id5" id="6">ElementName</pc> explicitly on the binding (see <pc dataRefEnd="id8" dataRefStart="id7" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> for details).</target>
          </segment>
        </unit>
        <unit id="259">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="259">
            <source xml:space="preserve">Inside a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataTemplate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DataContext**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> is set to the data object being templated.</source>
            <target xml:space="preserve">Inside a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataTemplate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**DataContext**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> is set to the data object being templated.</target>
          </segment>
        </unit>
        <unit id="260">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="260">
            <source xml:space="preserve">The example given below could be used as the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ItemTemplate</pc> of an items control bound to a collection of any type that has string properties named <pc dataRefEnd="id4" dataRefStart="id3" id="4">Title</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">Description</pc>.</source>
            <target xml:space="preserve">The example given below could be used as the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ItemTemplate</pc> of an items control bound to a collection of any type that has string properties named <pc dataRefEnd="id4" dataRefStart="id3" id="4">Title</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">Description</pc>.</target>
          </segment>
        </unit>
        <unit id="261">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="261">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  By default, changes to <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**TextBox.Text**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> are sent to a two-way bound source when the <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> loses focus.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  By default, changes to <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**TextBox.Text**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> are sent to a two-way bound source when the <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**TextBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> loses focus.</target>
          </segment>
        </unit>
        <unit id="262">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="262">
            <source xml:space="preserve">To cause changes to be sent after every user keystroke, set <pc dataRefEnd="id2" dataRefStart="id1" id="2">UpdateSourceTrigger</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">PropertyChanged</pc> on the binding in markup.</source>
            <target xml:space="preserve">To cause changes to be sent after every user keystroke, set <pc dataRefEnd="id2" dataRefStart="id1" id="2">UpdateSourceTrigger</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">PropertyChanged</pc> on the binding in markup.</target>
          </segment>
        </unit>
        <unit id="263">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="263">
            <source xml:space="preserve">You can also completely take control of when changes are sent to the source by setting <pc dataRefEnd="id2" dataRefStart="id1" id="2">UpdateSourceTrigger</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Explicit</pc>.</source>
            <target xml:space="preserve">You can also completely take control of when changes are sent to the source by setting <pc dataRefEnd="id2" dataRefStart="id1" id="2">UpdateSourceTrigger</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Explicit</pc>.</target>
          </segment>
        </unit>
        <unit id="264">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="264">
            <source xml:space="preserve">You then handle events on the text box (typically <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**TextBox.TextChanged**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, call <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**GetBindingExpression**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> on the target to get a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**BindingExpression**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> object, and finally call <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**BindingExpression.UpdateSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> to programmatically update the data source.</source>
            <target xml:space="preserve">You then handle events on the text box (typically <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**TextBox.TextChanged**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, call <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**GetBindingExpression**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> on the target to get a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**BindingExpression**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> object, and finally call <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**BindingExpression.UpdateSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> to programmatically update the data source.</target>
          </segment>
        </unit>
        <unit id="265">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="265">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Path**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Path**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers.</target>
          </segment>
        </unit>
        <unit id="266">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="266">
            <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Property-path syntax</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Property-path syntax</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="267">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="267">
            <source xml:space="preserve">Binding to string indexers gives you the effect of binding to dynamic properties without having to implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICustomPropertyProvider**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Binding to string indexers gives you the effect of binding to dynamic properties without having to implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICustomPropertyProvider**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="268">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="268">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ElementName**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property is useful for element-to-element binding.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ElementName**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property is useful for element-to-element binding.</target>
          </segment>
        </unit>
        <unit id="269">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="269">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**RelativeSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property has several uses, one of which is as a more powerful alternative to template binding inside a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ControlTemplate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**RelativeSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property has several uses, one of which is as a more powerful alternative to template binding inside a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ControlTemplate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="270">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="270">
            <source xml:space="preserve">For other settings, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{Binding} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Binding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> class.</source>
            <target xml:space="preserve">For other settings, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{Binding} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Binding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> class.</target>
          </segment>
        </unit>
        <unit id="271">
          <segment state="initial" id="271">
            <source xml:space="preserve">What if the source and the target are not the same type?</source>
            <target xml:space="preserve">What if the source and the target are not the same type?</target>
          </segment>
        </unit>
        <unit id="272">
          <segment state="initial" id="272">
            <source xml:space="preserve">If you want to control the visibility of a UI element based on the value of a boolean property, or if you want to render a UI element with a color that's a function of a numeric value's range or trend, or if you want to display a date and/or time value in a UI element property that expects a string, then you'll need to convert values from one type to another.</source>
            <target xml:space="preserve">If you want to control the visibility of a UI element based on the value of a boolean property, or if you want to render a UI element with a color that's a function of a numeric value's range or trend, or if you want to display a date and/or time value in a UI element property that expects a string, then you'll need to convert values from one type to another.</target>
          </segment>
        </unit>
        <unit id="273">
          <segment state="initial" id="273">
            <source xml:space="preserve">There will be cases where the right solution is to expose another property of the right type from your binding source class, and keep the conversion logic encapsulated and testable there.</source>
            <target xml:space="preserve">There will be cases where the right solution is to expose another property of the right type from your binding source class, and keep the conversion logic encapsulated and testable there.</target>
          </segment>
        </unit>
        <unit id="274">
          <segment state="initial" id="274">
            <source xml:space="preserve">But that isn't flexible nor scalable when you have large numbers, or large combinations, of source and target properties.</source>
            <target xml:space="preserve">But that isn't flexible nor scalable when you have large numbers, or large combinations, of source and target properties.</target>
          </segment>
        </unit>
        <unit id="275">
          <segment state="initial" id="275">
            <source xml:space="preserve">In that case you'll want to use something known as a value converter.</source>
            <target xml:space="preserve">In that case you'll want to use something known as a value converter.</target>
          </segment>
        </unit>
        <unit id="276">
          <segment state="initial" id="276">
            <source xml:space="preserve">This section describes how to implement and consume a value converter.</source>
            <target xml:space="preserve">This section describes how to implement and consume a value converter.</target>
          </segment>
        </unit>
        <unit id="277">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="277">
            <source xml:space="preserve">Here's a value converter, suitable for a one-time or a one-way binding, that converts a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DateTime**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> value to a string value containing the month.</source>
            <target xml:space="preserve">Here's a value converter, suitable for a one-time or a one-way binding, that converts a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DateTime**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> value to a string value containing the month.</target>
          </segment>
        </unit>
        <unit id="278">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="278">
            <source xml:space="preserve">The class implements <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IValueConverter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The class implements <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IValueConverter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="279">
          <segment state="initial" id="279">
            <source xml:space="preserve">And here's how you consume that value converter in your binding object markup.</source>
            <target xml:space="preserve">And here's how you consume that value converter in your binding object markup.</target>
          </segment>
        </unit>
        <unit id="280">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="280">
            <source xml:space="preserve">The binding engine calls the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Convert**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ConvertBack**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> methods if the <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Converter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> parameter is defined for the binding.</source>
            <target xml:space="preserve">The binding engine calls the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Convert**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ConvertBack**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> methods if the <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Converter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> parameter is defined for the binding.</target>
          </segment>
        </unit>
        <unit id="281">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="281">
            <source xml:space="preserve">When data is passed from the source, the binding engine calls <pc dataRefEnd="id2" dataRefStart="id1" id="2">Convert</pc> and passes the returned data to the target.</source>
            <target xml:space="preserve">When data is passed from the source, the binding engine calls <pc dataRefEnd="id2" dataRefStart="id1" id="2">Convert</pc> and passes the returned data to the target.</target>
          </segment>
        </unit>
        <unit id="282">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="282">
            <source xml:space="preserve">When data is passed from the target (for a two-way binding), the binding engine calls <pc dataRefEnd="id2" dataRefStart="id1" id="2">ConvertBack</pc> and passes the returned data to the source.</source>
            <target xml:space="preserve">When data is passed from the target (for a two-way binding), the binding engine calls <pc dataRefEnd="id2" dataRefStart="id1" id="2">ConvertBack</pc> and passes the returned data to the source.</target>
          </segment>
        </unit>
        <unit id="283">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="283">
            <source xml:space="preserve">The converter also has optional parameters: <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ConverterLanguage**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, which allows specifying the language to be used in the conversion, and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ConverterParameter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, which allows passing a parameter for the conversion logic.</source>
            <target xml:space="preserve">The converter also has optional parameters: <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ConverterLanguage**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, which allows specifying the language to be used in the conversion, and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ConverterParameter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, which allows passing a parameter for the conversion logic.</target>
          </segment>
        </unit>
        <unit id="284">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="284">
            <source xml:space="preserve">For an example that uses a converter parameter, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IValueConverter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For an example that uses a converter parameter, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IValueConverter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="285">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="285">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  If there is an error in the conversion, do not throw an exception.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  If there is an error in the conversion, do not throw an exception.</target>
          </segment>
        </unit>
        <unit id="286">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="286">
            <source xml:space="preserve">Instead, return <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty.UnsetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, which will stop the data transfer.</source>
            <target xml:space="preserve">Instead, return <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty.UnsetValue**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, which will stop the data transfer.</target>
          </segment>
        </unit>
        <unit id="287">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="287">
            <source xml:space="preserve">To display a default value to use whenever the binding source cannot be resolved, set the <pc dataRefEnd="id2" dataRefStart="id1" id="2">FallbackValue</pc> property on the binding object in markup.</source>
            <target xml:space="preserve">To display a default value to use whenever the binding source cannot be resolved, set the <pc dataRefEnd="id2" dataRefStart="id1" id="2">FallbackValue</pc> property on the binding object in markup.</target>
          </segment>
        </unit>
        <unit id="288">
          <segment state="initial" id="288">
            <source xml:space="preserve">This is useful to handle conversion and formatting errors.</source>
            <target xml:space="preserve">This is useful to handle conversion and formatting errors.</target>
          </segment>
        </unit>
        <unit id="289">
          <segment state="initial" id="289">
            <source xml:space="preserve">It is also useful to bind to source properties that might not exist on all objects in a bound collection of heterogeneous types.</source>
            <target xml:space="preserve">It is also useful to bind to source properties that might not exist on all objects in a bound collection of heterogeneous types.</target>
          </segment>
        </unit>
        <unit id="290">
          <segment state="initial" id="290">
            <source xml:space="preserve">If you bind a text control to a value that is not a string, the data binding engine will convert the value to a string.</source>
            <target xml:space="preserve">If you bind a text control to a value that is not a string, the data binding engine will convert the value to a string.</target>
          </segment>
        </unit>
        <unit id="291">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="291">
            <source xml:space="preserve">If the value is a reference type, the data binding engine will retrieve the string value by calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICustomPropertyProvider.GetStringRepresentation**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IStringable.ToString**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> if available, and will otherwise call <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Object.ToString**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">If the value is a reference type, the data binding engine will retrieve the string value by calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICustomPropertyProvider.GetStringRepresentation**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IStringable.ToString**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> if available, and will otherwise call <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Object.ToString**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="292">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="292">
            <source xml:space="preserve">Note, however, that the binding engine will ignore any <pc dataRefEnd="id2" dataRefStart="id1" id="2">ToString</pc> implementation that hides the base-class implementation.</source>
            <target xml:space="preserve">Note, however, that the binding engine will ignore any <pc dataRefEnd="id2" dataRefStart="id1" id="2">ToString</pc> implementation that hides the base-class implementation.</target>
          </segment>
        </unit>
        <unit id="293">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="293">
            <source xml:space="preserve">Subclass implementations should override the base class <pc dataRefEnd="id2" dataRefStart="id1" id="2">ToString</pc> method instead.</source>
            <target xml:space="preserve">Subclass implementations should override the base class <pc dataRefEnd="id2" dataRefStart="id1" id="2">ToString</pc> method instead.</target>
          </segment>
        </unit>
        <unit id="294">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="294">
            <source xml:space="preserve">Similarly, in native languages, all managed objects appear to implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICustomPropertyProvider**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IStringable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Similarly, in native languages, all managed objects appear to implement <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICustomPropertyProvider**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IStringable**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="295">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="295">
            <source xml:space="preserve">However, all calls to <pc dataRefEnd="id2" dataRefStart="id1" id="2">GetStringRepresentation</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">IStringable.ToString</pc> are routed to <pc dataRefEnd="id6" dataRefStart="id5" id="6">Object.ToString</pc> or an override of that method, and never to a new <pc dataRefEnd="id8" dataRefStart="id7" id="8">ToString</pc> implementation that hides the base-class implementation.</source>
            <target xml:space="preserve">However, all calls to <pc dataRefEnd="id2" dataRefStart="id1" id="2">GetStringRepresentation</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">IStringable.ToString</pc> are routed to <pc dataRefEnd="id6" dataRefStart="id5" id="6">Object.ToString</pc> or an override of that method, and never to a new <pc dataRefEnd="id8" dataRefStart="id7" id="8">ToString</pc> implementation that hides the base-class implementation.</target>
          </segment>
        </unit>
        <unit id="296">
          <segment state="initial" id="296">
            <source xml:space="preserve">Resource dictionaries with {x:Bind}</source>
            <target xml:space="preserve">Resource dictionaries with {x:Bind}</target>
          </segment>
        </unit>
        <unit id="297">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="297">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> depends on code generation, so it needs a code-behind file containing a constructor that calls <pc dataRefEnd="id8" dataRefStart="id7" id="4">InitializeComponent</pc> (to initialize the generated code).</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> depends on code generation, so it needs a code-behind file containing a constructor that calls <pc dataRefEnd="id8" dataRefStart="id7" id="4">InitializeComponent</pc> (to initialize the generated code).</target>
          </segment>
        </unit>
        <unit id="298">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="298">
            <source xml:space="preserve">You re-use the resource dictionary by instantiating its type (so that <pc dataRefEnd="id2" dataRefStart="id1" id="2">InitializeComponent</pc> is called) instead of referencing its filename.</source>
            <target xml:space="preserve">You re-use the resource dictionary by instantiating its type (so that <pc dataRefEnd="id2" dataRefStart="id1" id="2">InitializeComponent</pc> is called) instead of referencing its filename.</target>
          </segment>
        </unit>
        <unit id="299">
          <segment state="initial" id="299">
            <source xml:space="preserve">Here's an example of what to do if you have an existing resource dictionary and you want to use {x:Bind} in it.</source>
            <target xml:space="preserve">Here's an example of what to do if you have an existing resource dictionary and you want to use {x:Bind} in it.</target>
          </segment>
        </unit>
        <unit id="300">
          <segment state="initial" id="300">
            <source xml:space="preserve">TemplatesResourceDictionary.xaml</source>
            <target xml:space="preserve">TemplatesResourceDictionary.xaml</target>
          </segment>
        </unit>
        <unit id="301">
          <segment state="initial" id="301">
            <source xml:space="preserve">TemplatesResourceDictionary.xaml.cs</source>
            <target xml:space="preserve">TemplatesResourceDictionary.xaml.cs</target>
          </segment>
        </unit>
        <unit id="302">
          <segment state="initial" id="302">
            <source xml:space="preserve">MainPage.xaml</source>
            <target xml:space="preserve">MainPage.xaml</target>
          </segment>
        </unit>
        <unit id="303">
          <segment state="initial" id="303">
            <source xml:space="preserve">Event binding and ICommand</source>
            <target xml:space="preserve">Event binding and ICommand</target>
          </segment>
        </unit>
        <unit id="304">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="304">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">{x:Bind}</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> supports a feature called event binding.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">{x:Bind}</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> supports a feature called event binding.</target>
          </segment>
        </unit>
        <unit id="305">
          <segment state="initial" id="305">
            <source xml:space="preserve">With this feature, you can specify the handler for an event using a binding, which is an additional option on top of handling events with a method on the code-behind file.</source>
            <target xml:space="preserve">With this feature, you can specify the handler for an event using a binding, which is an additional option on top of handling events with a method on the code-behind file.</target>
          </segment>
        </unit>
        <unit id="306">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="306">
            <source xml:space="preserve">Let's say you have a <pc dataRefEnd="id2" dataRefStart="id1" id="2">RootFrame</pc> property on your <pc dataRefEnd="id4" dataRefStart="id3" id="4">MainPage</pc> class.</source>
            <target xml:space="preserve">Let's say you have a <pc dataRefEnd="id2" dataRefStart="id1" id="2">RootFrame</pc> property on your <pc dataRefEnd="id4" dataRefStart="id3" id="4">MainPage</pc> class.</target>
          </segment>
        </unit>
        <unit id="307">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="307">
            <source xml:space="preserve">You can then bind a button's <pc dataRefEnd="id2" dataRefStart="id1" id="2">Click</pc> event to a method on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Frame</pc> object returned by the <pc dataRefEnd="id6" dataRefStart="id5" id="6">RootFrame</pc> property like this.</source>
            <target xml:space="preserve">You can then bind a button's <pc dataRefEnd="id2" dataRefStart="id1" id="2">Click</pc> event to a method on the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Frame</pc> object returned by the <pc dataRefEnd="id6" dataRefStart="id5" id="6">RootFrame</pc> property like this.</target>
          </segment>
        </unit>
        <unit id="308">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="308">
            <source xml:space="preserve">Note that we also bind the button's <pc dataRefEnd="id2" dataRefStart="id1" id="2">IsEnabled</pc> property to another member of the same <pc dataRefEnd="id4" dataRefStart="id3" id="4">Frame</pc>.</source>
            <target xml:space="preserve">Note that we also bind the button's <pc dataRefEnd="id2" dataRefStart="id1" id="2">IsEnabled</pc> property to another member of the same <pc dataRefEnd="id4" dataRefStart="id3" id="4">Frame</pc>.</target>
          </segment>
        </unit>
        <unit id="309">
          <segment state="initial" id="309">
            <source xml:space="preserve">Overloaded methods cannot be used to handle an event with this technique.</source>
            <target xml:space="preserve">Overloaded methods cannot be used to handle an event with this technique.</target>
          </segment>
        </unit>
        <unit id="310">
          <segment state="initial" id="310">
            <source xml:space="preserve">Also, if the method that handles the event has parameters then they must all be assignable from the types of all of the event's parameters, respectively.</source>
            <target xml:space="preserve">Also, if the method that handles the event has parameters then they must all be assignable from the types of all of the event's parameters, respectively.</target>
          </segment>
        </unit>
        <unit id="311">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="311">
            <source xml:space="preserve">In this case, <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Frame.GoForward**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is not overloaded and it has no parameters (but it would still be valid even if it took two <pc dataRefEnd="id8" dataRefStart="id7" id="4">object</pc> parameters).</source>
            <target xml:space="preserve">In this case, <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Frame.GoForward**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is not overloaded and it has no parameters (but it would still be valid even if it took two <pc dataRefEnd="id8" dataRefStart="id7" id="4">object</pc> parameters).</target>
          </segment>
        </unit>
        <unit id="312">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="312">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Frame.GoBack**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> is overloaded, though, so we can't use that method with this technique.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Frame.GoBack**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> is overloaded, though, so we can't use that method with this technique.</target>
          </segment>
        </unit>
        <unit id="313">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="313">
            <source xml:space="preserve">The event binding technique is similar to implementing and consuming commands (a command is a property that returns an object that implements the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICommand**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> interface).</source>
            <target xml:space="preserve">The event binding technique is similar to implementing and consuming commands (a command is a property that returns an object that implements the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICommand**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> interface).</target>
          </segment>
        </unit>
        <unit id="314">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="314">
            <source xml:space="preserve">Both <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> work with commands.</source>
            <target xml:space="preserve">Both <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> work with commands.</target>
          </segment>
        </unit>
        <unit id="315">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="315">
            <source xml:space="preserve">So that you don't have to implement the command pattern multiple times, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">DelegateCommand</pc> helper class that you'll find in the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">QuizGame</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> sample (in the "Common" folder).</source>
            <target xml:space="preserve">So that you don't have to implement the command pattern multiple times, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">DelegateCommand</pc> helper class that you'll find in the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">QuizGame</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> sample (in the "Common" folder).</target>
          </segment>
        </unit>
        <unit id="316">
          <segment state="initial" id="316">
            <source xml:space="preserve">Binding to a collection of folders or files</source>
            <target xml:space="preserve">Binding to a collection of folders or files</target>
          </segment>
        </unit>
        <unit id="317">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="317">
            <source xml:space="preserve">You can use the APIs in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Windows.Storage**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> namespace to retrieve folder and file data.</source>
            <target xml:space="preserve">You can use the APIs in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Windows.Storage**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> namespace to retrieve folder and file data.</target>
          </segment>
        </unit>
        <unit id="318">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="318">
            <source xml:space="preserve">However, the various <pc dataRefEnd="id2" dataRefStart="id1" id="2">GetFilesAsync</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">GetFoldersAsync</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">GetItemsAsync</pc> methods do not return values that are suitable for binding to list controls.</source>
            <target xml:space="preserve">However, the various <pc dataRefEnd="id2" dataRefStart="id1" id="2">GetFilesAsync</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">GetFoldersAsync</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">GetItemsAsync</pc> methods do not return values that are suitable for binding to list controls.</target>
          </segment>
        </unit>
        <unit id="319">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="319">
            <source xml:space="preserve">Instead, you must bind to the return values of the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GetVirtualizedFilesVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**GetVirtualizedFoldersVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**GetVirtualizedItemsVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> methods of the <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**FileInformationFactory**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> class.</source>
            <target xml:space="preserve">Instead, you must bind to the return values of the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GetVirtualizedFilesVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**GetVirtualizedFoldersVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**GetVirtualizedItemsVector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> methods of the <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**FileInformationFactory**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> class.</target>
          </segment>
        </unit>
        <unit id="320">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="320">
            <source xml:space="preserve">The following code example from the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">StorageDataSource and GetVirtualizedFilesVector sample</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> shows the typical usage pattern.</source>
            <target xml:space="preserve">The following code example from the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">StorageDataSource and GetVirtualizedFilesVector sample</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> shows the typical usage pattern.</target>
          </segment>
        </unit>
        <unit id="321">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="321">
            <source xml:space="preserve">Remember to declare the <pc dataRefEnd="id2" dataRefStart="id1" id="2">picturesLibrary</pc> capability in your app package manifest, and confirm that there are pictures in your Pictures library folder.</source>
            <target xml:space="preserve">Remember to declare the <pc dataRefEnd="id2" dataRefStart="id1" id="2">picturesLibrary</pc> capability in your app package manifest, and confirm that there are pictures in your Pictures library folder.</target>
          </segment>
        </unit>
        <unit id="322">
          <segment state="initial" id="322">
            <source xml:space="preserve">You will typically use this approach to create a read-only view of file and folder info.</source>
            <target xml:space="preserve">You will typically use this approach to create a read-only view of file and folder info.</target>
          </segment>
        </unit>
        <unit id="323">
          <segment state="initial" id="323">
            <source xml:space="preserve">You can create two-way bindings to the file and folder properties, for example to let users rate a song in a music view.</source>
            <target xml:space="preserve">You can create two-way bindings to the file and folder properties, for example to let users rate a song in a music view.</target>
          </segment>
        </unit>
        <unit id="324">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="324">
            <source xml:space="preserve">However, any changes are not persisted until you call the appropriate <pc dataRefEnd="id2" dataRefStart="id1" id="2">SavePropertiesAsync</pc> method (for example, <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MusicProperties.SavePropertiesAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">However, any changes are not persisted until you call the appropriate <pc dataRefEnd="id2" dataRefStart="id1" id="2">SavePropertiesAsync</pc> method (for example, <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MusicProperties.SavePropertiesAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="325">
          <segment state="initial" id="325">
            <source xml:space="preserve">You should commit changes when the item loses focus because this triggers a selection reset.</source>
            <target xml:space="preserve">You should commit changes when the item loses focus because this triggers a selection reset.</target>
          </segment>
        </unit>
        <unit id="326">
          <segment state="initial" id="326">
            <source xml:space="preserve">Note that two-way binding using this technique works only with indexed locations, such as Music.</source>
            <target xml:space="preserve">Note that two-way binding using this technique works only with indexed locations, such as Music.</target>
          </segment>
        </unit>
        <unit id="327">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="327">
            <source xml:space="preserve">You can determine whether a location is indexed by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**FolderInformation.GetIndexedStateAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method.</source>
            <target xml:space="preserve">You can determine whether a location is indexed by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**FolderInformation.GetIndexedStateAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method.</target>
          </segment>
        </unit>
        <unit id="328">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="328">
            <source xml:space="preserve">Note also that a virtualized vector can return <pc dataRefEnd="id2" dataRefStart="id1" id="2">null</pc> for some items before it populates their value.</source>
            <target xml:space="preserve">Note also that a virtualized vector can return <pc dataRefEnd="id2" dataRefStart="id1" id="2">null</pc> for some items before it populates their value.</target>
          </segment>
        </unit>
        <unit id="329">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="329">
            <source xml:space="preserve">For example, you should check for <pc dataRefEnd="id2" dataRefStart="id1" id="2">null</pc> before you use the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SelectedItem**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> value of a list control bound to a virtualized vector, or use <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**SelectedIndex**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> instead.</source>
            <target xml:space="preserve">For example, you should check for <pc dataRefEnd="id2" dataRefStart="id1" id="2">null</pc> before you use the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SelectedItem**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> value of a list control bound to a virtualized vector, or use <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**SelectedIndex**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> instead.</target>
          </segment>
        </unit>
        <unit id="330">
          <segment state="initial" id="330">
            <source xml:space="preserve">Binding to data grouped by a key</source>
            <target xml:space="preserve">Binding to data grouped by a key</target>
          </segment>
        </unit>
        <unit id="331">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="331">
            <source xml:space="preserve">If you take a flat collection of items—books, for example, represented by a <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookSku</pc> class—and you group the items by using a common property as a key—the <pc dataRefEnd="id4" dataRefStart="id3" id="4">BookSku.AuthorName</pc> property, for example—then the result is called grouped data.</source>
            <target xml:space="preserve">If you take a flat collection of items—books, for example, represented by a <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookSku</pc> class—and you group the items by using a common property as a key—the <pc dataRefEnd="id4" dataRefStart="id3" id="4">BookSku.AuthorName</pc> property, for example—then the result is called grouped data.</target>
          </segment>
        </unit>
        <unit id="332">
          <segment state="initial" id="332">
            <source xml:space="preserve">When you group data, it is no longer a flat collection.</source>
            <target xml:space="preserve">When you group data, it is no longer a flat collection.</target>
          </segment>
        </unit>
        <unit id="333">
          <segment state="initial" id="333">
            <source xml:space="preserve">Grouped data is a collection of group objects, where each group object has a) a key and b) a collection of items whose property matches that key.</source>
            <target xml:space="preserve">Grouped data is a collection of group objects, where each group object has a) a key and b) a collection of items whose property matches that key.</target>
          </segment>
        </unit>
        <unit id="334">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="334">
            <source xml:space="preserve">To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookSku</pc>s whose <pc dataRefEnd="id4" dataRefStart="id3" id="4">AuthorName</pc> property matches the group's key.</source>
            <target xml:space="preserve">To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookSku</pc>s whose <pc dataRefEnd="id4" dataRefStart="id3" id="4">AuthorName</pc> property matches the group's key.</target>
          </segment>
        </unit>
        <unit id="335">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="335">
            <source xml:space="preserve">In general, to display a collection, you bind the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ItemsSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> of an items control (such as <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> or <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> directly to a property that returns a collection.</source>
            <target xml:space="preserve">In general, to display a collection, you bind the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ItemsSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> of an items control (such as <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> or <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> directly to a property that returns a collection.</target>
          </segment>
        </unit>
        <unit id="336">
          <segment state="initial" id="336">
            <source xml:space="preserve">If that's a flat collection of items then you don't need to do anything special.</source>
            <target xml:space="preserve">If that's a flat collection of items then you don't need to do anything special.</target>
          </segment>
        </unit>
        <unit id="337">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="337">
            <source xml:space="preserve">But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> which sits between the items control and the binding source.</source>
            <target xml:space="preserve">But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> which sits between the items control and the binding source.</target>
          </segment>
        </unit>
        <unit id="338">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="338">
            <source xml:space="preserve">You bind the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc> to the property that returns grouped data, and you bind the items control to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionViewSource</pc>.</source>
            <target xml:space="preserve">You bind the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc> to the property that returns grouped data, and you bind the items control to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionViewSource</pc>.</target>
          </segment>
        </unit>
        <unit id="339">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="339">
            <source xml:space="preserve">An extra value-add of a <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc> is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionViewSource</pc>.</source>
            <target xml:space="preserve">An extra value-add of a <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc> is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionViewSource</pc>.</target>
          </segment>
        </unit>
        <unit id="340">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="340">
            <source xml:space="preserve">You can also access the current item programmatically through the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICollectionView.CurrentItem**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property of the object returned by the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**CollectionViewSource.View**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property.</source>
            <target xml:space="preserve">You can also access the current item programmatically through the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ICollectionView.CurrentItem**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property of the object returned by the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**CollectionViewSource.View**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property.</target>
          </segment>
        </unit>
        <unit id="341">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;strong&gt;</data>
            <data id="id14">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="341">
            <source xml:space="preserve">To activate the grouping facility of a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, set <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IsSourceGrouped**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> to <pc dataRefEnd="id14" dataRefStart="id13" id="6">true</pc>.</source>
            <target xml:space="preserve">To activate the grouping facility of a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, set <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IsSourceGrouped**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> to <pc dataRefEnd="id14" dataRefStart="id13" id="6">true</pc>.</target>
          </segment>
        </unit>
        <unit id="342">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="342">
            <source xml:space="preserve">Whether you also need to set the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ItemsPath**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property depends on exactly how you author your group objects.</source>
            <target xml:space="preserve">Whether you also need to set the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ItemsPath**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property depends on exactly how you author your group objects.</target>
          </segment>
        </unit>
        <unit id="343">
          <segment state="initial" id="343">
            <source xml:space="preserve">There are two ways to author a group object: the "is-a-group" pattern, and the "has-a-group" pattern.</source>
            <target xml:space="preserve">There are two ways to author a group object: the "is-a-group" pattern, and the "has-a-group" pattern.</target>
          </segment>
        </unit>
        <unit id="344">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="344">
            <source xml:space="preserve">In the "is-a-group" pattern, the group object derives from a collection type (for example, <pc dataRefEnd="id2" dataRefStart="id1" id="2">List&lt;T&gt;</pc>), so the group object actually is itself the group of items.</source>
            <target xml:space="preserve">In the "is-a-group" pattern, the group object derives from a collection type (for example, <pc dataRefEnd="id2" dataRefStart="id1" id="2">List&lt;T&gt;</pc>), so the group object actually is itself the group of items.</target>
          </segment>
        </unit>
        <unit id="345">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="345">
            <source xml:space="preserve">With this pattern you do not need to set <pc dataRefEnd="id2" dataRefStart="id1" id="2">ItemsPath</pc>.</source>
            <target xml:space="preserve">With this pattern you do not need to set <pc dataRefEnd="id2" dataRefStart="id1" id="2">ItemsPath</pc>.</target>
          </segment>
        </unit>
        <unit id="346">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="346">
            <source xml:space="preserve">In the "has-a-group" pattern, the group object has one or more properties of a collection type (such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">List&lt;T&gt;</pc>), so the group "has a" group of items in the form of a property (or several groups of items in the form of several properties).</source>
            <target xml:space="preserve">In the "has-a-group" pattern, the group object has one or more properties of a collection type (such as <pc dataRefEnd="id2" dataRefStart="id1" id="2">List&lt;T&gt;</pc>), so the group "has a" group of items in the form of a property (or several groups of items in the form of several properties).</target>
          </segment>
        </unit>
        <unit id="347">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="347">
            <source xml:space="preserve">With this pattern you need to set <pc dataRefEnd="id2" dataRefStart="id1" id="2">ItemsPath</pc> to the name of the property that contains the group of items.</source>
            <target xml:space="preserve">With this pattern you need to set <pc dataRefEnd="id2" dataRefStart="id1" id="2">ItemsPath</pc> to the name of the property that contains the group of items.</target>
          </segment>
        </unit>
        <unit id="348">
          <segment state="initial" id="348">
            <source xml:space="preserve">The example below illustrates the "has-a-group" pattern.</source>
            <target xml:space="preserve">The example below illustrates the "has-a-group" pattern.</target>
          </segment>
        </unit>
        <unit id="349">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="349">
            <source xml:space="preserve">The page class has a property named <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ViewModel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, which returns an instance of our view model.</source>
            <target xml:space="preserve">The page class has a property named <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ViewModel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, which returns an instance of our view model.</target>
          </segment>
        </unit>
        <unit id="350">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
            <data id="id11">&lt;strong&gt;</data>
            <data id="id12">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="350">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> binds to the <pc dataRefEnd="id8" dataRefStart="id7" id="4">Authors</pc> property of the view model (<pc dataRefEnd="id10" dataRefStart="id9" id="6">Authors</pc> is the collection of group objects) and also specifies that it's the <pc dataRefEnd="id12" dataRefStart="id11" id="8">Author.BookSkus</pc> property that contains the grouped items.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> binds to the <pc dataRefEnd="id8" dataRefStart="id7" id="4">Authors</pc> property of the view model (<pc dataRefEnd="id10" dataRefStart="id9" id="6">Authors</pc> is the collection of group objects) and also specifies that it's the <pc dataRefEnd="id12" dataRefStart="id11" id="8">Author.BookSkus</pc> property that contains the grouped items.</target>
          </segment>
        </unit>
        <unit id="351">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="351">
            <source xml:space="preserve">Finally, the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is bound to the <pc dataRefEnd="id8" dataRefStart="id7" id="4">CollectionViewSource</pc>, and has its group style defined so that it can render the items in groups.</source>
            <target xml:space="preserve">Finally, the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is bound to the <pc dataRefEnd="id8" dataRefStart="id7" id="4">CollectionViewSource</pc>, and has its group style defined so that it can render the items in groups.</target>
          </segment>
        </unit>
        <unit id="352">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;strong&gt;</data>
            <data id="id20">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="352">
            <source xml:space="preserve">Note that the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ItemsSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> must use <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> (and not <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> because it needs to set the <pc dataRefEnd="id20" dataRefStart="id19" id="8">Source</pc> property to a resource.</source>
            <target xml:space="preserve">Note that the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ItemsSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> must use <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> (and not <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> because it needs to set the <pc dataRefEnd="id20" dataRefStart="id19" id="8">Source</pc> property to a resource.</target>
          </segment>
        </unit>
        <unit id="353">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="353">
            <source xml:space="preserve">To see the above example in the context of the complete app, download the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> sample app.</source>
            <target xml:space="preserve">To see the above example in the context of the complete app, download the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> sample app.</target>
          </segment>
        </unit>
        <unit id="354">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="354">
            <source xml:space="preserve">Unlike the markup shown above, <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> uses {Binding} exclusively.</source>
            <target xml:space="preserve">Unlike the markup shown above, <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> uses {Binding} exclusively.</target>
          </segment>
        </unit>
        <unit id="355">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;strong&gt;</data>
            <data id="id14">&lt;/strong&gt;</data>
            <data id="id15">&lt;strong&gt;</data>
            <data id="id16">&lt;/strong&gt;</data>
            <data id="id17">&lt;strong&gt;</data>
            <data id="id18">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="355">
            <source xml:space="preserve">You can implement the "is-a-group" pattern in one of two ways. One way is to author your own group class. Derive the class from <pc dataRefEnd="id2" dataRefStart="id1" id="2">List&lt;T&gt;</pc> (where <pc dataRefEnd="id4" dataRefStart="id3" id="4">T</pc> is the type of the items). For example, <pc dataRefEnd="id6" dataRefStart="id5" id="6">public class Author : List&lt;BookSku&gt;</pc>. The second way is to use a <pc dataRefEnd="id8" dataRefStart="id7" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">LINQ</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> expression to dynamically create group objects (and a group class) from like property values of the <pc dataRefEnd="id14" dataRefStart="id13" id="10">BookSku</pc> items. This approach—maintaining only a flat list of items and grouping them together on the fly—is typical of an app that accesses data from a cloud service. You get the flexibility to group books by author or by genre (for example) without needing special group classes such as <pc dataRefEnd="id16" dataRefStart="id15" id="12">Author</pc> and <pc dataRefEnd="id18" dataRefStart="id17" id="14">Genre</pc>.</source>
            <target xml:space="preserve">You can implement the "is-a-group" pattern in one of two ways. One way is to author your own group class. Derive the class from <pc dataRefEnd="id2" dataRefStart="id1" id="2">List&lt;T&gt;</pc> (where <pc dataRefEnd="id4" dataRefStart="id3" id="4">T</pc> is the type of the items). For example, <pc dataRefEnd="id6" dataRefStart="id5" id="6">public class Author : List&lt;BookSku&gt;</pc>. The second way is to use a <pc dataRefEnd="id8" dataRefStart="id7" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">LINQ</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> expression to dynamically create group objects (and a group class) from like property values of the <pc dataRefEnd="id14" dataRefStart="id13" id="10">BookSku</pc> items. This approach—maintaining only a flat list of items and grouping them together on the fly—is typical of an app that accesses data from a cloud service. You get the flexibility to group books by author or by genre (for example) without needing special group classes such as <pc dataRefEnd="id16" dataRefStart="id15" id="12">Author</pc> and <pc dataRefEnd="id18" dataRefStart="id17" id="14">Genre</pc>.</target>
          </segment>
        </unit>
        <unit id="356">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="356">
            <source xml:space="preserve">The example below illustrates the "is-a-group" pattern using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">LINQ</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The example below illustrates the "is-a-group" pattern using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">LINQ</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="357">
          <segment state="initial" id="357">
            <source xml:space="preserve">This time we group books by genre, displayed with the genre name in the group headers.</source>
            <target xml:space="preserve">This time we group books by genre, displayed with the genre name in the group headers.</target>
          </segment>
        </unit>
        <unit id="358">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="358">
            <source xml:space="preserve">This is indicated by the "Key" property path in reference to the group <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Key**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> value.</source>
            <target xml:space="preserve">This is indicated by the "Key" property path in reference to the group <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Key**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> value.</target>
          </segment>
        </unit>
        <unit id="359">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="359">
            <source xml:space="preserve">Remember that when using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> with data templates we need to indicate the type being bound to by setting an <pc dataRefEnd="id8" dataRefStart="id7" id="4">x:DataType</pc> value.</source>
            <target xml:space="preserve">Remember that when using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> with data templates we need to indicate the type being bound to by setting an <pc dataRefEnd="id8" dataRefStart="id7" id="4">x:DataType</pc> value.</target>
          </segment>
        </unit>
        <unit id="360">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="360">
            <source xml:space="preserve">If the type is generic then we can't express that in markup so we need to use <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instead in the group style header template.</source>
            <target xml:space="preserve">If the type is generic then we can't express that in markup so we need to use <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instead in the group style header template.</target>
          </segment>
        </unit>
        <unit id="361">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="361">
            <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control is a great way for your users to view and navigate grouped data.</source>
            <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control is a great way for your users to view and navigate grouped data.</target>
          </segment>
        </unit>
        <unit id="362">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="362">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> sample app illustrates how to use the <pc dataRefEnd="id8" dataRefStart="id7" id="4">SemanticZoom</pc>.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> sample app illustrates how to use the <pc dataRefEnd="id8" dataRefStart="id7" id="4">SemanticZoom</pc>.</target>
          </segment>
        </unit>
        <unit id="363">
          <segment state="initial" id="363">
            <source xml:space="preserve">In that app, you can view a list of books grouped by author (the zoomed-in view) or you can zoom out to see a jump list of authors (the zoomed-out view).</source>
            <target xml:space="preserve">In that app, you can view a list of books grouped by author (the zoomed-in view) or you can zoom out to see a jump list of authors (the zoomed-out view).</target>
          </segment>
        </unit>
        <unit id="364">
          <segment state="initial" id="364">
            <source xml:space="preserve">The jump list affords much quicker navigation than scrolling through the list of books.</source>
            <target xml:space="preserve">The jump list affords much quicker navigation than scrolling through the list of books.</target>
          </segment>
        </unit>
        <unit id="365">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="365">
            <source xml:space="preserve">The zoomed-in and zoomed-out views are actually <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListView</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="4">GridView</pc> controls bound to the same <pc dataRefEnd="id6" dataRefStart="id5" id="6">CollectionViewSource</pc>.</source>
            <target xml:space="preserve">The zoomed-in and zoomed-out views are actually <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListView</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="4">GridView</pc> controls bound to the same <pc dataRefEnd="id6" dataRefStart="id5" id="6">CollectionViewSource</pc>.</target>
          </segment>
        </unit>
        <unit id="366">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="366">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">An illustration of a SemanticZoom</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">An illustration of a SemanticZoom</pc>
						</target>
          </segment>
        </unit>
        <unit id="367">
          <segment state="initial" id="367">
            <source xml:space="preserve">When you bind to hierarchical data—such as subcategories within categories—you can choose to display the hierarchical levels in your UI with a series of items controls.</source>
            <target xml:space="preserve">When you bind to hierarchical data—such as subcategories within categories—you can choose to display the hierarchical levels in your UI with a series of items controls.</target>
          </segment>
        </unit>
        <unit id="368">
          <segment state="initial" id="368">
            <source xml:space="preserve">A selection in one items control determines the contents of subsequent items controls.</source>
            <target xml:space="preserve">A selection in one items control determines the contents of subsequent items controls.</target>
          </segment>
        </unit>
        <unit id="369">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="369">
            <source xml:space="preserve">You can keep the lists synchronized by binding each list to its own <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and binding the <pc dataRefEnd="id8" dataRefStart="id7" id="4">CollectionViewSource</pc> instances together in a chain.</source>
            <target xml:space="preserve">You can keep the lists synchronized by binding each list to its own <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and binding the <pc dataRefEnd="id8" dataRefStart="id7" id="4">CollectionViewSource</pc> instances together in a chain.</target>
          </segment>
        </unit>
        <unit id="370">
          <segment state="initial" id="370">
            <source xml:space="preserve">This is called a master/details (or list/details) view.</source>
            <target xml:space="preserve">This is called a master/details (or list/details) view.</target>
          </segment>
        </unit>
        <unit id="371">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="371">
            <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">How to bind to hierarchical data and create a master/details view</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">How to bind to hierarchical data and create a master/details view</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="372">
          <segment state="initial" id="372">
            <source xml:space="preserve">Diagnosing and debugging data binding problems</source>
            <target xml:space="preserve">Diagnosing and debugging data binding problems</target>
          </segment>
        </unit>
        <unit id="373">
          <segment state="initial" id="373">
            <source xml:space="preserve">Your binding markup contains the names of properties (and, for C\#, sometimes fields and methods).</source>
            <target xml:space="preserve">Your binding markup contains the names of properties (and, for C\#, sometimes fields and methods).</target>
          </segment>
        </unit>
        <unit id="374">
          <segment state="initial" id="374">
            <source xml:space="preserve">So when you rename a property, you'll also need to change any binding that references it.</source>
            <target xml:space="preserve">So when you rename a property, you'll also need to change any binding that references it.</target>
          </segment>
        </unit>
        <unit id="375">
          <segment state="initial" id="375">
            <source xml:space="preserve">Forgetting to do that leads to a typical example of a data binding bug, and your app either won't compile or won't run correctly.</source>
            <target xml:space="preserve">Forgetting to do that leads to a typical example of a data binding bug, and your app either won't compile or won't run correctly.</target>
          </segment>
        </unit>
        <unit id="376">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;code&gt;</data>
            <data id="id14">&lt;/code&gt;</data>
            <data id="id15">&lt;code&gt;</data>
            <data id="id16">&lt;/code&gt;</data>
            <data id="id17">&lt;strong&gt;</data>
            <data id="id18">&lt;/strong&gt;</data>
            <data id="id19">&lt;strong&gt;</data>
            <data id="id20">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="376">
            <source xml:space="preserve">The binding objects created by <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> are largely functionally equivalent. But {x:Bind} has type information for the binding source, and it generates source code at compile-time. With {x:Bind} you get the same kind of problem detection that you get with the rest of your code. That includes compile-time validation of your binding expressions, and debugging by setting breakpoints in the source code generated as the partial class for your page. These classes can be found in the files in your <pc dataRefEnd="id14" dataRefStart="id13" id="6">obj</pc> folder, with names like (for C\#) <pc dataRefEnd="id16" dataRefStart="id15" id="8">&lt;view name&gt;.g.cs</pc>). If you have a problem with a binding then turn on <pc dataRefEnd="id18" dataRefStart="id17" id="10">Break On Unhandled Exceptions</pc> in the Microsoft Visual Studio debugger. The debugger will break execution at that point, and you can then debug what has gone wrong. The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the <pc dataRefEnd="id20" dataRefStart="id19" id="12">Call Stack</pc> window to help determine the sequence of calls that led up to the problem.</source>
            <target xml:space="preserve">The binding objects created by <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> are largely functionally equivalent. But {x:Bind} has type information for the binding source, and it generates source code at compile-time. With {x:Bind} you get the same kind of problem detection that you get with the rest of your code. That includes compile-time validation of your binding expressions, and debugging by setting breakpoints in the source code generated as the partial class for your page. These classes can be found in the files in your <pc dataRefEnd="id14" dataRefStart="id13" id="6">obj</pc> folder, with names like (for C\#) <pc dataRefEnd="id16" dataRefStart="id15" id="8">&lt;view name&gt;.g.cs</pc>). If you have a problem with a binding then turn on <pc dataRefEnd="id18" dataRefStart="id17" id="10">Break On Unhandled Exceptions</pc> in the Microsoft Visual Studio debugger. The debugger will break execution at that point, and you can then debug what has gone wrong. The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the <pc dataRefEnd="id20" dataRefStart="id19" id="12">Call Stack</pc> window to help determine the sequence of calls that led up to the problem.</target>
          </segment>
        </unit>
        <unit id="377">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="377">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">{Binding}</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> does not have type information for the binding source.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">{Binding}</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> does not have type information for the binding source.</target>
          </segment>
        </unit>
        <unit id="378">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="378">
            <source xml:space="preserve">But when you run your app with the debugger attached, any binding errors appear in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Output</pc> window in Visual Studio.</source>
            <target xml:space="preserve">But when you run your app with the debugger attached, any binding errors appear in the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Output</pc> window in Visual Studio.</target>
          </segment>
        </unit>
        <unit id="379">
          <segment state="initial" id="379">
            <source xml:space="preserve">Creating bindings in code</source>
            <target xml:space="preserve">Creating bindings in code</target>
          </segment>
        </unit>
        <unit id="380">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="380">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  This section only applies to <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>, because you can't create <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> bindings in code.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  This section only applies to <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">{Binding}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>, because you can't create <pc dataRefEnd="id10" dataRefStart="id9" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">{x:Bind}</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> bindings in code.</target>
          </segment>
        </unit>
        <unit id="381">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="381">
            <source xml:space="preserve">However, some of the same benefits of {x:Bind} can be achieved with <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty.RegisterPropertyChangedCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, which enables you to register for change notifications on any dependency property.</source>
            <target xml:space="preserve">However, some of the same benefits of {x:Bind} can be achieved with <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DependencyProperty.RegisterPropertyChangedCallback**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, which enables you to register for change notifications on any dependency property.</target>
          </segment>
        </unit>
        <unit id="382">
          <segment state="initial" id="382">
            <source xml:space="preserve">You can also connect UI elements to data using procedural code instead of XAML.</source>
            <target xml:space="preserve">You can also connect UI elements to data using procedural code instead of XAML.</target>
          </segment>
        </unit>
        <unit id="383">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="383">
            <source xml:space="preserve">To do this, create a new <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Binding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object, set the appropriate properties, then call <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**FrameworkElement.SetBinding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> or <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**BindingOperations.SetBinding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">To do this, create a new <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Binding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object, set the appropriate properties, then call <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**FrameworkElement.SetBinding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> or <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**BindingOperations.SetBinding**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="384">
          <segment state="initial" id="384">
            <source xml:space="preserve">Creating bindings programmatically is useful when you want to choose the binding property values at run-time or share a single binding among multiple controls.</source>
            <target xml:space="preserve">Creating bindings programmatically is useful when you want to choose the binding property values at run-time or share a single binding among multiple controls.</target>
          </segment>
        </unit>
        <unit id="385">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="385">
            <source xml:space="preserve">Note, however, that you cannot change the binding property values after you call <pc dataRefEnd="id2" dataRefStart="id1" id="2">SetBinding</pc>.</source>
            <target xml:space="preserve">Note, however, that you cannot change the binding property values after you call <pc dataRefEnd="id2" dataRefStart="id1" id="2">SetBinding</pc>.</target>
          </segment>
        </unit>
        <unit id="386">
          <segment state="initial" id="386">
            <source xml:space="preserve">The following example shows how to implement a binding in code.</source>
            <target xml:space="preserve">The following example shows how to implement a binding in code.</target>
          </segment>
        </unit>
        <unit id="387">
          <segment state="initial" id="387">
            <source xml:space="preserve">{x:Bind} and {Binding} feature comparison</source>
            <target xml:space="preserve">{x:Bind} and {Binding} feature comparison</target>
          </segment>
        </unit>
        <unit id="388">
          <segment state="initial" id="388">
            <source xml:space="preserve">Feature</source>
            <target xml:space="preserve">Feature</target>
          </segment>
        </unit>
        <unit id="389">
          <segment state="initial" id="389">
            <source xml:space="preserve">{x:Bind}</source>
            <target xml:space="preserve">{x:Bind}</target>
          </segment>
        </unit>
        <unit id="390">
          <segment state="initial" id="390">
            <source xml:space="preserve">{Binding}</source>
            <target xml:space="preserve">{Binding}</target>
          </segment>
        </unit>
        <unit id="391">
          <segment state="initial" id="391">
            <source xml:space="preserve">Notes</source>
            <target xml:space="preserve">Notes</target>
          </segment>
        </unit>
        <unit id="392">
          <segment state="initial" id="392">
            <source xml:space="preserve">Path is the default property</source>
            <target xml:space="preserve">Path is the default property</target>
          </segment>
        </unit>
        <unit id="393">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="393">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind a.b.c}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind a.b.c}</pc>
						</target>
          </segment>
        </unit>
        <unit id="394">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="394">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding a.b.c}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding a.b.c}</pc>
						</target>
          </segment>
        </unit>
        <unit id="395">
          <segment state="initial" id="395">
            <source xml:space="preserve">Path property</source>
            <target xml:space="preserve">Path property</target>
          </segment>
        </unit>
        <unit id="396">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="396">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Path=a.b.c}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Path=a.b.c}</pc>
						</target>
          </segment>
        </unit>
        <unit id="397">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="397">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Path=a.b.c}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Path=a.b.c}</pc>
						</target>
          </segment>
        </unit>
        <unit id="398">
          <segment state="initial" id="398">
            <source xml:space="preserve">In x:Bind, Path is rooted at the Page by default, not the DataContext.</source>
            <target xml:space="preserve">In x:Bind, Path is rooted at the Page by default, not the DataContext.</target>
          </segment>
        </unit>
        <unit id="399">
          <segment state="initial" id="399">
            <source xml:space="preserve">Indexer</source>
            <target xml:space="preserve">Indexer</target>
          </segment>
        </unit>
        <unit id="400">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="400">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Groups[2].Title}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Groups[2].Title}</pc>
						</target>
          </segment>
        </unit>
        <unit id="401">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="401">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Groups[2].Title}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Groups[2].Title}</pc>
						</target>
          </segment>
        </unit>
        <unit id="402">
          <segment state="initial" id="402">
            <source xml:space="preserve">Binds to the specified item in the collection.</source>
            <target xml:space="preserve">Binds to the specified item in the collection.</target>
          </segment>
        </unit>
        <unit id="403">
          <segment state="initial" id="403">
            <source xml:space="preserve">Only integer-based indexes are supported.</source>
            <target xml:space="preserve">Only integer-based indexes are supported.</target>
          </segment>
        </unit>
        <unit id="404">
          <segment state="initial" id="404">
            <source xml:space="preserve">Attached properties</source>
            <target xml:space="preserve">Attached properties</target>
          </segment>
        </unit>
        <unit id="405">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="405">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Button22.(Grid.Row)}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Button22.(Grid.Row)}</pc>
						</target>
          </segment>
        </unit>
        <unit id="406">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="406">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Button22.(Grid.Row)}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Button22.(Grid.Row)}</pc>
						</target>
          </segment>
        </unit>
        <unit id="407">
          <segment state="initial" id="407">
            <source xml:space="preserve">Attached properties are specified using parentheses.</source>
            <target xml:space="preserve">Attached properties are specified using parentheses.</target>
          </segment>
        </unit>
        <unit id="408">
          <segment state="initial" id="408">
            <source xml:space="preserve">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</source>
            <target xml:space="preserve">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</target>
          </segment>
        </unit>
        <unit id="409">
          <segment state="initial" id="409">
            <source xml:space="preserve">Casting</source>
            <target xml:space="preserve">Casting</target>
          </segment>
        </unit>
        <unit id="410">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="410">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind groups[0].(data:SampleDataGroup.Title)}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind groups[0].(data:SampleDataGroup.Title)}</pc>
						</target>
          </segment>
        </unit>
        <unit id="411">
          <segment state="initial" id="411">
            <source xml:space="preserve">Not needed&lt;</source>
            <target xml:space="preserve">Not needed&lt;</target>
          </segment>
        </unit>
        <unit id="412">
          <segment state="initial" id="412">
            <source xml:space="preserve">Casts are specified using parentheses.</source>
            <target xml:space="preserve">Casts are specified using parentheses.</target>
          </segment>
        </unit>
        <unit id="413">
          <segment state="initial" id="413">
            <source xml:space="preserve">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</source>
            <target xml:space="preserve">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</target>
          </segment>
        </unit>
        <unit id="414">
          <segment state="initial" id="414">
            <source xml:space="preserve">Converter</source>
            <target xml:space="preserve">Converter</target>
          </segment>
        </unit>
        <unit id="415">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="415">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind IsShown, Converter={StaticResource BoolToVisibility}}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind IsShown, Converter={StaticResource BoolToVisibility}}</pc>
						</target>
          </segment>
        </unit>
        <unit id="416">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="416">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding IsShown, Converter={StaticResource BoolToVisibility}}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding IsShown, Converter={StaticResource BoolToVisibility}}</pc>
						</target>
          </segment>
        </unit>
        <unit id="417">
          <segment state="initial" id="417">
            <source xml:space="preserve">Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</source>
            <target xml:space="preserve">Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</target>
          </segment>
        </unit>
        <unit id="418">
          <segment state="initial" id="418">
            <source xml:space="preserve">ConverterParameter, ConverterLanguage</source>
            <target xml:space="preserve">ConverterParameter, ConverterLanguage</target>
          </segment>
        </unit>
        <unit id="419">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="419">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}</pc>
						</target>
          </segment>
        </unit>
        <unit id="420">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="420">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}</pc>
						</target>
          </segment>
        </unit>
        <unit id="421">
          <segment state="initial" id="421">
            <source xml:space="preserve">Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</source>
            <target xml:space="preserve">Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</target>
          </segment>
        </unit>
        <unit id="422">
          <segment state="initial" id="422">
            <source xml:space="preserve">TargetNullValue</source>
            <target xml:space="preserve">TargetNullValue</target>
          </segment>
        </unit>
        <unit id="423">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="423">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Name, TargetNullValue=0}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Name, TargetNullValue=0}</pc>
						</target>
          </segment>
        </unit>
        <unit id="424">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="424">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Name, TargetNullValue=0}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Name, TargetNullValue=0}</pc>
						</target>
          </segment>
        </unit>
        <unit id="425">
          <segment state="initial" id="425">
            <source xml:space="preserve">Used when the leaf of the binding expression is null.</source>
            <target xml:space="preserve">Used when the leaf of the binding expression is null.</target>
          </segment>
        </unit>
        <unit id="426">
          <segment state="initial" id="426">
            <source xml:space="preserve">Use single quotes for a string value.</source>
            <target xml:space="preserve">Use single quotes for a string value.</target>
          </segment>
        </unit>
        <unit id="427">
          <segment state="initial" id="427">
            <source xml:space="preserve">FallbackValue</source>
            <target xml:space="preserve">FallbackValue</target>
          </segment>
        </unit>
        <unit id="428">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="428">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Name, FallbackValue='empty'}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Name, FallbackValue='empty'}</pc>
						</target>
          </segment>
        </unit>
        <unit id="429">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="429">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Name, FallbackValue='empty'}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Name, FallbackValue='empty'}</pc>
						</target>
          </segment>
        </unit>
        <unit id="430">
          <segment state="initial" id="430">
            <source xml:space="preserve">Used when any part of the path for the binding (except for the leaf) is null.</source>
            <target xml:space="preserve">Used when any part of the path for the binding (except for the leaf) is null.</target>
          </segment>
        </unit>
        <unit id="431">
          <segment state="initial" id="431">
            <source xml:space="preserve">ElementName</source>
            <target xml:space="preserve">ElementName</target>
          </segment>
        </unit>
        <unit id="432">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="432">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind slider1.Value}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind slider1.Value}</pc>
						</target>
          </segment>
        </unit>
        <unit id="433">
          <segment state="initial" id="433">
            <source xml:space="preserve">{Binding Value, ElementName=slider1}`</source>
            <target xml:space="preserve">{Binding Value, ElementName=slider1}`</target>
          </segment>
        </unit>
        <unit id="434">
          <segment state="initial" id="434">
            <source xml:space="preserve">With {x:Bind} you're binding to a field; Path is rooted at the Page by default, so any named element can be accessed via its field.</source>
            <target xml:space="preserve">With {x:Bind} you're binding to a field; Path is rooted at the Page by default, so any named element can be accessed via its field.</target>
          </segment>
        </unit>
        <unit id="435">
          <segment state="initial" id="435">
            <source xml:space="preserve">RelativeSource: Self</source>
            <target xml:space="preserve">RelativeSource: Self</target>
          </segment>
        </unit>
        <unit id="436">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="436">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">&lt;Rectangle x:Name="rect1" Width="200" Height="{x:Bind rect1.Width}" ... /&gt;</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">&lt;Rectangle x:Name="rect1" Width="200" Height="{x:Bind rect1.Width}" ... /&gt;</pc>
						</target>
          </segment>
        </unit>
        <unit id="437">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="437">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">&lt;Rectangle Width="200" Height="{Binding Width, RelativeSource={RelativeSource Self}}" ... /&gt;</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">&lt;Rectangle Width="200" Height="{Binding Width, RelativeSource={RelativeSource Self}}" ... /&gt;</pc>
						</target>
          </segment>
        </unit>
        <unit id="438">
          <segment state="initial" id="438">
            <source xml:space="preserve">With {x:Bind}, name the element and use its name in Path.</source>
            <target xml:space="preserve">With {x:Bind}, name the element and use its name in Path.</target>
          </segment>
        </unit>
        <unit id="439">
          <segment state="initial" id="439">
            <source xml:space="preserve">RelativeSource: TemplatedParent</source>
            <target xml:space="preserve">RelativeSource: TemplatedParent</target>
          </segment>
        </unit>
        <unit id="440">
          <segment state="initial" id="440">
            <source xml:space="preserve">Not supported</source>
            <target xml:space="preserve">Not supported</target>
          </segment>
        </unit>
        <unit id="441">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="441">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding &lt;path&gt;, RelativeSource={RelativeSource TemplatedParent}}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding &lt;path&gt;, RelativeSource={RelativeSource TemplatedParent}}</pc>
						</target>
          </segment>
        </unit>
        <unit id="442">
          <segment state="initial" id="442">
            <source xml:space="preserve">Regular template binding can be used in control templates for most uses. But use TemplatedParent where you need to use a converter, or a two-way binding.&lt;</source>
            <target xml:space="preserve">Regular template binding can be used in control templates for most uses. But use TemplatedParent where you need to use a converter, or a two-way binding.&lt;</target>
          </segment>
        </unit>
        <unit id="443">
          <segment state="initial" id="443">
            <source xml:space="preserve">Source</source>
            <target xml:space="preserve">Source</target>
          </segment>
        </unit>
        <unit id="444">
          <segment state="initial" id="444">
            <source xml:space="preserve">Not supported</source>
            <target xml:space="preserve">Not supported</target>
          </segment>
        </unit>
        <unit id="445">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="445">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">&lt;ListView ItemsSource="{Binding Orders, Source={StaticResource MyData}}"/&gt;</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">&lt;ListView ItemsSource="{Binding Orders, Source={StaticResource MyData}}"/&gt;</pc>
						</target>
          </segment>
        </unit>
        <unit id="446">
          <segment state="initial" id="446">
            <source xml:space="preserve">For {x:Bind} use a property or a static path instead.</source>
            <target xml:space="preserve">For {x:Bind} use a property or a static path instead.</target>
          </segment>
        </unit>
        <unit id="447">
          <segment state="initial" id="447">
            <source xml:space="preserve">Mode</source>
            <target xml:space="preserve">Mode</target>
          </segment>
        </unit>
        <unit id="448">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="448">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Name, Mode=OneWay}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{x:Bind Name, Mode=OneWay}</pc>
						</target>
          </segment>
        </unit>
        <unit id="449">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="449">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Name, Mode=TwoWay}</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">{Binding Name, Mode=TwoWay}</pc>
						</target>
          </segment>
        </unit>
        <unit id="450">
          <segment state="initial" id="450">
            <source xml:space="preserve">Mode can be OneTime, OneWay, or TwoWay.</source>
            <target xml:space="preserve">Mode can be OneTime, OneWay, or TwoWay.</target>
          </segment>
        </unit>
        <unit id="451">
          <segment state="initial" id="451">
            <source xml:space="preserve">{x:Bind} defaults to OneTime; {Binding} defaults to OneWay.</source>
            <target xml:space="preserve">{x:Bind} defaults to OneTime; {Binding} defaults to OneWay.</target>
          </segment>
        </unit>
        <unit id="452">
          <segment state="initial" id="452">
            <source xml:space="preserve">UpdateSourceTrigger</source>
            <target xml:space="preserve">UpdateSourceTrigger</target>
          </segment>
        </unit>
        <unit id="453">
          <segment state="initial" id="453">
            <source xml:space="preserve">Not supported</source>
            <target xml:space="preserve">Not supported</target>
          </segment>
        </unit>
        <unit id="454">
          <segment state="initial" id="454">
            <source xml:space="preserve">'`&lt;Binding UpdateSourceTrigger="[Default</source>
            <target xml:space="preserve">'`&lt;Binding UpdateSourceTrigger="[Default</target>
          </segment>
        </unit>
        <unit id="455">
          <segment state="initial" id="455">
            <source xml:space="preserve">PropertyChanged</source>
            <target xml:space="preserve">PropertyChanged</target>
          </segment>
        </unit>
        <unit id="456">
          <segment state="initial" id="456">
            <source xml:space="preserve">Explicit]"/&gt;'</source>
            <target xml:space="preserve">Explicit]"/&gt;'</target>
          </segment>
        </unit>
        <unit id="457">
          <segment state="initial" id="457">
            <source xml:space="preserve">{x:Bind} uses PropertyChanged behavior for all cases except TextBox.Text where it waits for lost focus to update the source.</source>
            <target xml:space="preserve">{x:Bind} uses PropertyChanged behavior for all cases except TextBox.Text where it waits for lost focus to update the source.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>