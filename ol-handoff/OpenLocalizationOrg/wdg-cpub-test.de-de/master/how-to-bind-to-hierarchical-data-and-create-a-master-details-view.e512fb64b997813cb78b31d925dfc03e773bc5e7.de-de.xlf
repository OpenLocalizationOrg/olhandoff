<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">1a7852b945f351f3012a68daad18857f00ab9b76</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Bind hierarchical data and create a master/details view</source>
            <target xml:space="preserve">Bind hierarchical data and create a master/details view</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="104">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Also see the <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">Master/detail sample</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Also see the <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">Master/detail sample</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="105">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="105">
            <source xml:space="preserve">You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instances that are bound together in a chain.</source>
            <target xml:space="preserve">You can make a multi-level master/details (also known as list-details) view of hierarchical data by binding items controls to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instances that are bound together in a chain.</target>
          </segment>
        </unit>
        <unit id="106">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="106">
            <source xml:space="preserve">In this topic we use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> where possible, and the more flexible (but less performant) <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> where necessary.</source>
            <target xml:space="preserve">In this topic we use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">{x:Bind} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> where possible, and the more flexible (but less performant) <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">{Binding} markup extension</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> where necessary.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">One common structure for Universal Windows Platform (UWP) apps is to navigate to different details pages when a user makes a selection in a master list.</source>
            <target xml:space="preserve">One common structure for Universal Windows Platform (UWP) apps is to navigate to different details pages when a user makes a selection in a master list.</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">This is useful when you want to provide a rich visual representation of each item at every level in a hierarchy.</source>
            <target xml:space="preserve">This is useful when you want to provide a rich visual representation of each item at every level in a hierarchy.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Another option is to display multiple levels of data on a single page.</source>
            <target xml:space="preserve">Another option is to display multiple levels of data on a single page.</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">This is useful when you want to display a few simple lists that let the user quickly drill down to an item of interest.</source>
            <target xml:space="preserve">This is useful when you want to display a few simple lists that let the user quickly drill down to an item of interest.</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">This topic describes how to implement this interaction.</source>
            <target xml:space="preserve">This topic describes how to implement this interaction.</target>
          </segment>
        </unit>
        <unit id="112">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="112">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instances keep track of the current selection at each hierarchical level.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instances keep track of the current selection at each hierarchical level.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">We'll create a view of a sports team hierarchy that is organized into lists for leagues, divisions, and teams, and includes a team details view.</source>
            <target xml:space="preserve">We'll create a view of a sports team hierarchy that is organized into lists for leagues, divisions, and teams, and includes a team details view.</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">When you select an item from any list, the subsequent views update automatically.</source>
            <target xml:space="preserve">When you select an item from any list, the subsequent views update automatically.</target>
          </segment>
        </unit>
        <unit id="115">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="115">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">master/details view of a sports hierarchy</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">master/details view of a sports hierarchy</pc>
						</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">Prerequisites</source>
            <target xml:space="preserve">Prerequisites</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">This topic assumes that you know how to create a basic UWP app.</source>
            <target xml:space="preserve">This topic assumes that you know how to create a basic UWP app.</target>
          </segment>
        </unit>
        <unit id="118">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="118">
            <source xml:space="preserve">For instructions on creating your first UWP app, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Create your first UWP app using C\# or Visual Basic</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For instructions on creating your first UWP app, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Create your first UWP app using C\# or Visual Basic</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">Create the project</source>
            <target xml:space="preserve">Create the project</target>
          </segment>
        </unit>
        <unit id="120">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="120">
            <source xml:space="preserve">Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank Application (Windows Universal)</pc> project.</source>
            <target xml:space="preserve">Create a new <pc dataRefEnd="id2" dataRefStart="id1" id="2">Blank Application (Windows Universal)</pc> project.</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">Name it "MasterDetailsBinding".</source>
            <target xml:space="preserve">Name it "MasterDetailsBinding".</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">Create the data model</source>
            <target xml:space="preserve">Create the data model</target>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source xml:space="preserve">Add a new class to your project, name it ViewModel.cs, and add this code to it.</source>
            <target xml:space="preserve">Add a new class to your project, name it ViewModel.cs, and add this code to it.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">This will be your binding source class.</source>
            <target xml:space="preserve">This will be your binding source class.</target>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
            <data id="id3">&lt;html&gt;</data>
            <data id="id4">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc>
							<pc dataRefEnd="id4" dataRefStart="id3" id="2"></pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc>
							<pc dataRefEnd="id4" dataRefStart="id3" id="2"></pc>
						</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">C#</source>
            <target xml:space="preserve">C#</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MasterDetailsBinding
{
    public class Team
    {
        public string Name { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
    }

    public class Division
    {
        public string Name { get; set; }
        public IEnumerable&lt;Team&gt; Teams { get; set; }
    }

    public class League
    {
        public string Name { get; set; }
        public IEnumerable&lt;Division&gt; Divisions { get; set; }
    }

    public class LeagueList : List&lt;League&gt;
    {
        public LeagueList()
        {
            this.AddRange(GetLeague().ToList());
        }

        public IEnumerable&lt;League&gt; GetLeague()
        {
            return from x in Enumerable.Range(1, 2)
                   select new League
                   {
                       Name = "League " + x,
                       Divisions = GetDivisions(x).ToList()
                   };
        }

        public IEnumerable&lt;Division&gt; GetDivisions(int x)
        {
            return from y in Enumerable.Range(1, 3)
                   select new Division
                   {
                       Name = String.Format("Division {0}-{1}", x, y),
                       Teams = GetTeams(x, y).ToList()
                   };
        }

        public IEnumerable&lt;Team&gt; GetTeams(int x, int y)
        {
            return from z in Enumerable.Range(1, 4)
                   select new Team
                   {
                       Name = String.Format("Team {0}-{1}-{2}", x, y, z),
                       Wins = 25 - (x * y * z),
                       Losses = x * y * z
                   };
        }
    }
}</source>
            <target xml:space="preserve">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MasterDetailsBinding
{
    public class Team
    {
        public string Name { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
    }

    public class Division
    {
        public string Name { get; set; }
        public IEnumerable&lt;Team&gt; Teams { get; set; }
    }

    public class League
    {
        public string Name { get; set; }
        public IEnumerable&lt;Division&gt; Divisions { get; set; }
    }

    public class LeagueList : List&lt;League&gt;
    {
        public LeagueList()
        {
            this.AddRange(GetLeague().ToList());
        }

        public IEnumerable&lt;League&gt; GetLeague()
        {
            return from x in Enumerable.Range(1, 2)
                   select new League
                   {
                       Name = "League " + x,
                       Divisions = GetDivisions(x).ToList()
                   };
        }

        public IEnumerable&lt;Division&gt; GetDivisions(int x)
        {
            return from y in Enumerable.Range(1, 3)
                   select new Division
                   {
                       Name = String.Format("Division {0}-{1}", x, y),
                       Teams = GetTeams(x, y).ToList()
                   };
        }

        public IEnumerable&lt;Team&gt; GetTeams(int x, int y)
        {
            return from z in Enumerable.Range(1, 4)
                   select new Team
                   {
                       Name = String.Format("Team {0}-{1}-{2}", x, y, z),
                       Wins = 25 - (x * y * z),
                       Losses = x * y * z
                   };
        }
    }
}</target>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source xml:space="preserve">Create the view</source>
            <target xml:space="preserve">Create the view</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">Next, expose the binding source class from the class that represents your page of markup.</source>
            <target xml:space="preserve">Next, expose the binding source class from the class that represents your page of markup.</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">We do that by adding a property of type <pc dataRefEnd="id2" dataRefStart="id1" id="2">LeagueList</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">MainPage</pc>.</source>
            <target xml:space="preserve">We do that by adding a property of type <pc dataRefEnd="id2" dataRefStart="id1" id="2">LeagueList</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">MainPage</pc>.</target>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
            <data id="id3">&lt;html&gt;</data>
            <data id="id4">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc>
							<pc dataRefEnd="id4" dataRefStart="id3" id="2"></pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc>
							<pc dataRefEnd="id4" dataRefStart="id3" id="2"></pc>
						</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">C#</source>
            <target xml:space="preserve">C#</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">namespace MasterDetailsBinding
{
    /// &lt;summary&gt;
    /// An empty page that can be used on its own or navigated to within a Frame.
    /// &lt;/summary&gt;
    public sealed partial class MainPage : Page
    {
        public MainPage()
        {
            this.InitializeComponent();
            this.ViewModel = new LeagueList();
        }
        public LeagueList ViewModel { get; set; }
    }
}</source>
            <target xml:space="preserve">namespace MasterDetailsBinding
{
    /// &lt;summary&gt;
    /// An empty page that can be used on its own or navigated to within a Frame.
    /// &lt;/summary&gt;
    public sealed partial class MainPage : Page
    {
        public MainPage()
        {
            this.InitializeComponent();
            this.ViewModel = new LeagueList();
        }
        public LeagueList ViewModel { get; set; }
    }
}</target>
          </segment>
        </unit>
        <unit id="134">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="134">
            <source xml:space="preserve">Finally, replace the contents of the MainPage.xaml file with the following markup, which declares three <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instances and binds them together in a chain.</source>
            <target xml:space="preserve">Finally, replace the contents of the MainPage.xaml file with the following markup, which declares three <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> instances and binds them together in a chain.</target>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source xml:space="preserve">The subsequent controls can then bind to the appropriate <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc>, depending on its level in the hierarchy.</source>
            <target xml:space="preserve">The subsequent controls can then bind to the appropriate <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc>, depending on its level in the hierarchy.</target>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
            <data id="id3">&lt;html&gt;</data>
            <data id="id4">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc>
							<pc dataRefEnd="id4" dataRefStart="id3" id="2"></pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc>
							<pc dataRefEnd="id4" dataRefStart="id3" id="2"></pc>
						</target>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source xml:space="preserve">XAML</source>
            <target xml:space="preserve">XAML</target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">&lt;Page
    x:Class="MasterDetailsBinding.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:MasterDetailsBinding"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"&gt;

    &lt;Page.Resources&gt;
        &lt;CollectionViewSource x:Name="Leagues"
            Source="{x:Bind ViewModel}"/&gt;
        &lt;CollectionViewSource x:Name="Divisions"
            Source="{Binding Divisions, Source={StaticResource Leagues}}"/&gt;
        &lt;CollectionViewSource x:Name="Teams"
            Source="{Binding Teams, Source={StaticResource Divisions}}"/&gt;

        &lt;Style TargetType="TextBlock"&gt;
            &lt;Setter Property="FontSize" Value="15"/&gt;
            &lt;Setter Property="FontWeight" Value="Bold"/&gt;
        &lt;/Style&gt;

        &lt;Style TargetType="ListBox"&gt;
            &lt;Setter Property="FontSize" Value="15"/&gt;
        &lt;/Style&gt;

        &lt;Style TargetType="ContentControl"&gt;
            &lt;Setter Property="FontSize" Value="15"/&gt;
        &lt;/Style&gt;

    &lt;/Page.Resources&gt;

    &lt;Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"&gt;

        &lt;StackPanel Orientation="Horizontal"&gt;

            &lt;!-- All Leagues view --&gt;

            &lt;StackPanel Margin="5"&gt;
                &lt;TextBlock Text="All Leagues"/&gt;
                &lt;ListBox ItemsSource="{Binding Source={StaticResource Leagues}}" 
                    DisplayMemberPath="Name"/&gt;
            &lt;/StackPanel&gt;

            &lt;!-- League/Divisions view --&gt;

            &lt;StackPanel Margin="5"&gt;
                &lt;TextBlock Text="{Binding Name, Source={StaticResource Leagues}}"/&gt;
                &lt;ListBox ItemsSource="{Binding Source={StaticResource Divisions}}" 
                    DisplayMemberPath="Name"/&gt;
            &lt;/StackPanel&gt;

            &lt;!-- Division/Teams view --&gt;

            &lt;StackPanel Margin="5"&gt;
                &lt;TextBlock Text="{Binding Name, Source={StaticResource Divisions}}"/&gt;
                &lt;ListBox ItemsSource="{Binding Source={StaticResource Teams}}" 
                    DisplayMemberPath="Name"/&gt;
            &lt;/StackPanel&gt;

            &lt;!-- Team view --&gt;

            &lt;ContentControl Content="{Binding Source={StaticResource Teams}}"&gt;
                &lt;ContentControl.ContentTemplate&gt;
                    &lt;DataTemplate&gt;
                        &lt;StackPanel Margin="5"&gt;
                            &lt;TextBlock Text="{Binding Name}" 
                                FontSize="15" FontWeight="Bold"/&gt;
                            &lt;StackPanel Orientation="Horizontal" Margin="10,10"&gt;
                                &lt;TextBlock Text="Wins:" Margin="0,0,5,0"/&gt;
                                &lt;TextBlock Text="{Binding Wins}"/&gt;
                            &lt;/StackPanel&gt;
                            &lt;StackPanel Orientation="Horizontal" Margin="10,0"&gt;
                                &lt;TextBlock Text="Losses:" Margin="0,0,5,0"/&gt;
                                &lt;TextBlock Text="{Binding Losses}"/&gt;
                            &lt;/StackPanel&gt;
                        &lt;/StackPanel&gt;
                    &lt;/DataTemplate&gt;
                &lt;/ContentControl.ContentTemplate&gt;
            &lt;/ContentControl&gt;

        &lt;/StackPanel&gt;

    &lt;/Grid&gt;
&lt;/Page&gt;</source>
            <target xml:space="preserve">&lt;Page
    x:Class="MasterDetailsBinding.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:MasterDetailsBinding"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"&gt;

    &lt;Page.Resources&gt;
        &lt;CollectionViewSource x:Name="Leagues"
            Source="{x:Bind ViewModel}"/&gt;
        &lt;CollectionViewSource x:Name="Divisions"
            Source="{Binding Divisions, Source={StaticResource Leagues}}"/&gt;
        &lt;CollectionViewSource x:Name="Teams"
            Source="{Binding Teams, Source={StaticResource Divisions}}"/&gt;

        &lt;Style TargetType="TextBlock"&gt;
            &lt;Setter Property="FontSize" Value="15"/&gt;
            &lt;Setter Property="FontWeight" Value="Bold"/&gt;
        &lt;/Style&gt;

        &lt;Style TargetType="ListBox"&gt;
            &lt;Setter Property="FontSize" Value="15"/&gt;
        &lt;/Style&gt;

        &lt;Style TargetType="ContentControl"&gt;
            &lt;Setter Property="FontSize" Value="15"/&gt;
        &lt;/Style&gt;

    &lt;/Page.Resources&gt;

    &lt;Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"&gt;

        &lt;StackPanel Orientation="Horizontal"&gt;

            &lt;!-- All Leagues view --&gt;

            &lt;StackPanel Margin="5"&gt;
                &lt;TextBlock Text="All Leagues"/&gt;
                &lt;ListBox ItemsSource="{Binding Source={StaticResource Leagues}}" 
                    DisplayMemberPath="Name"/&gt;
            &lt;/StackPanel&gt;

            &lt;!-- League/Divisions view --&gt;

            &lt;StackPanel Margin="5"&gt;
                &lt;TextBlock Text="{Binding Name, Source={StaticResource Leagues}}"/&gt;
                &lt;ListBox ItemsSource="{Binding Source={StaticResource Divisions}}" 
                    DisplayMemberPath="Name"/&gt;
            &lt;/StackPanel&gt;

            &lt;!-- Division/Teams view --&gt;

            &lt;StackPanel Margin="5"&gt;
                &lt;TextBlock Text="{Binding Name, Source={StaticResource Divisions}}"/&gt;
                &lt;ListBox ItemsSource="{Binding Source={StaticResource Teams}}" 
                    DisplayMemberPath="Name"/&gt;
            &lt;/StackPanel&gt;

            &lt;!-- Team view --&gt;

            &lt;ContentControl Content="{Binding Source={StaticResource Teams}}"&gt;
                &lt;ContentControl.ContentTemplate&gt;
                    &lt;DataTemplate&gt;
                        &lt;StackPanel Margin="5"&gt;
                            &lt;TextBlock Text="{Binding Name}" 
                                FontSize="15" FontWeight="Bold"/&gt;
                            &lt;StackPanel Orientation="Horizontal" Margin="10,10"&gt;
                                &lt;TextBlock Text="Wins:" Margin="0,0,5,0"/&gt;
                                &lt;TextBlock Text="{Binding Wins}"/&gt;
                            &lt;/StackPanel&gt;
                            &lt;StackPanel Orientation="Horizontal" Margin="10,0"&gt;
                                &lt;TextBlock Text="Losses:" Margin="0,0,5,0"/&gt;
                                &lt;TextBlock Text="{Binding Losses}"/&gt;
                            &lt;/StackPanel&gt;
                        &lt;/StackPanel&gt;
                    &lt;/DataTemplate&gt;
                &lt;/ContentControl.ContentTemplate&gt;
            &lt;/ContentControl&gt;

        &lt;/StackPanel&gt;

    &lt;/Grid&gt;
&lt;/Page&gt;</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">Note that by binding directly to the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.</source>
            <target xml:space="preserve">Note that by binding directly to the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, you're implying that you want to bind to the current item in bindings where the path cannot be found on the collection itself.</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">There's no need to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CurrentItem</pc> property as the path for the binding, although you can do that if there's any ambiguity).</source>
            <target xml:space="preserve">There's no need to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CurrentItem</pc> property as the path for the binding, although you can do that if there's any ambiguity).</target>
          </segment>
        </unit>
        <unit id="141">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;code&gt;</data>
            <data id="id14">&lt;/code&gt;</data>
            <data id="id15">&lt;strong&gt;</data>
            <data id="id16">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="141">
            <source xml:space="preserve">For example, the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ContentControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> representing the team view has its <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Content**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property bound to the <pc dataRefEnd="id14" dataRefStart="id13" id="6">Teams</pc><pc dataRefEnd="id16" dataRefStart="id15" id="7">CollectionViewSource</pc>.</source>
            <target xml:space="preserve">For example, the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ContentControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> representing the team view has its <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Content**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property bound to the <pc dataRefEnd="id14" dataRefStart="id13" id="6">Teams</pc><pc dataRefEnd="id16" dataRefStart="id15" id="7">CollectionViewSource</pc>.</target>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source xml:space="preserve">However, the controls in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataTemplate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> bind to properties of the <pc dataRefEnd="id8" dataRefStart="id7" id="4">Team</pc> class because the <pc dataRefEnd="id10" dataRefStart="id9" id="6">CollectionViewSource</pc> automatically supplies the currently selected team from the teams list when necessary.</source>
            <target xml:space="preserve">However, the controls in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DataTemplate**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> bind to properties of the <pc dataRefEnd="id8" dataRefStart="id7" id="4">Team</pc> class because the <pc dataRefEnd="id10" dataRefStart="id9" id="6">CollectionViewSource</pc> automatically supplies the currently selected team from the teams list when necessary.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>