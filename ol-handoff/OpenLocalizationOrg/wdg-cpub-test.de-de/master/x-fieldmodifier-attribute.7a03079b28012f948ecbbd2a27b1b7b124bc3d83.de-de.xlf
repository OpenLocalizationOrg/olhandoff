<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">bd458e994c7c5d0238d047e4dbd6737fd6f81ac5</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">x:FieldModifier attribute</source>
            <target xml:space="preserve">x:FieldModifier attribute</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="104">
            <source xml:space="preserve">Modifies XAML compilation behavior, such that fields for named object references are defined with <pc dataRefEnd="id2" dataRefStart="id1" id="2">public</pc> access rather than the <pc dataRefEnd="id4" dataRefStart="id3" id="4">private</pc> default behavior.</source>
            <target xml:space="preserve">Modifies XAML compilation behavior, such that fields for named object references are defined with <pc dataRefEnd="id2" dataRefStart="id1" id="2">public</pc> access rather than the <pc dataRefEnd="id4" dataRefStart="id3" id="4">private</pc> default behavior.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">XAML attribute usage</source>
            <target xml:space="preserve">XAML attribute usage</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">Dependencies</source>
            <target xml:space="preserve">Dependencies</target>
          </segment>
        </unit>
        <unit id="107">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="107">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">x:Name attribute</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> must also be provided on the same element.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">x:Name attribute</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> must also be provided on the same element.</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">Remarks</source>
            <target xml:space="preserve">Remarks</target>
          </segment>
        </unit>
        <unit id="109">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="109">
            <source xml:space="preserve">The value for the <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:FieldModifier</pc> attribute will vary by programming language.</source>
            <target xml:space="preserve">The value for the <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:FieldModifier</pc> attribute will vary by programming language.</target>
          </segment>
        </unit>
        <unit id="110">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="110">
            <source xml:space="preserve">The string to use will depend on how each language implements its <pc dataRefEnd="id2" dataRefStart="id1" id="2">CodeDomProvider</pc> and the type converters it returns to define the meanings for <pc dataRefEnd="id4" dataRefStart="id3" id="4">TypeAttributes.Public</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">TypeAttributes.NotPublic</pc>.</source>
            <target xml:space="preserve">The string to use will depend on how each language implements its <pc dataRefEnd="id2" dataRefStart="id1" id="2">CodeDomProvider</pc> and the type converters it returns to define the meanings for <pc dataRefEnd="id4" dataRefStart="id3" id="4">TypeAttributes.Public</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">TypeAttributes.NotPublic</pc>.</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">For C\#, Microsoft Visual Basic or Visual C++ component extensions (C++/CX), you can give the string value "public" or "Public"; the parser doesn't enforce case on this attribute value.</source>
            <target xml:space="preserve">For C\#, Microsoft Visual Basic or Visual C++ component extensions (C++/CX), you can give the string value "public" or "Public"; the parser doesn't enforce case on this attribute value.</target>
          </segment>
        </unit>
        <unit id="112">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="112">
            <source xml:space="preserve">You can also specify <pc dataRefEnd="id2" dataRefStart="id1" id="2">NonPublic</pc> (<pc dataRefEnd="id4" dataRefStart="id3" id="4">internal</pc> in C\# or C++/CX, <pc dataRefEnd="id6" dataRefStart="id5" id="6">Friend</pc> in Visual Basic) but this is uncommon.</source>
            <target xml:space="preserve">You can also specify <pc dataRefEnd="id2" dataRefStart="id1" id="2">NonPublic</pc> (<pc dataRefEnd="id4" dataRefStart="id3" id="4">internal</pc> in C\# or C++/CX, <pc dataRefEnd="id6" dataRefStart="id5" id="6">Friend</pc> in Visual Basic) but this is uncommon.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">Internal access doesn't have any application to the Windows Runtime XAML code generation model.</source>
            <target xml:space="preserve">Internal access doesn't have any application to the Windows Runtime XAML code generation model.</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">Private access is the default.</source>
            <target xml:space="preserve">Private access is the default.</target>
          </segment>
        </unit>
        <unit id="115">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="115">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">x:FieldModifier</pc> is only relevant for elements with an <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">x:Name attribute</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>, because that name is used to reference the field once it is public.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">x:FieldModifier</pc> is only relevant for elements with an <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">x:Name attribute</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>, because that name is used to reference the field once it is public.</target>
          </segment>
        </unit>
        <unit id="116">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="116">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Windows Runtime XAML doesn't support <pc dataRefEnd="id4" dataRefStart="id3" id="3">x:ClassModifier</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="5">x:Subclass</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Windows Runtime XAML doesn't support <pc dataRefEnd="id4" dataRefStart="id3" id="3">x:ClassModifier</pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="5">x:Subclass</pc>.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>