<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">5880add499ff902e320c9d594279444f28668da0</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">x:Uid directive</source>
            <target xml:space="preserve">x:Uid directive</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">Provides a unique identifier for markup elements.</source>
            <target xml:space="preserve">Provides a unique identifier for markup elements.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">For Universal Windows Platform (UWP) XAML, this unique identifier is used by XAML localization processes and tools, such as using resources from a .resw resource file.</source>
            <target xml:space="preserve">For Universal Windows Platform (UWP) XAML, this unique identifier is used by XAML localization processes and tools, such as using resources from a .resw resource file.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">XAML attribute usage</source>
            <target xml:space="preserve">XAML attribute usage</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">XAML values</source>
            <target xml:space="preserve">XAML values</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">Term</source>
            <target xml:space="preserve">Term</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Description</source>
            <target xml:space="preserve">Description</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">stringID</source>
            <target xml:space="preserve">stringID</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">A string that uniquely identifies a XAML element in an app, and becomes part of the resource path in a resource file.</source>
            <target xml:space="preserve">A string that uniquely identifies a XAML element in an app, and becomes part of the resource path in a resource file.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">See Remarks.</source>
            <target xml:space="preserve">See Remarks.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">Remarks</source>
            <target xml:space="preserve">Remarks</target>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> to identify an object element in your XAML.</source>
            <target xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> to identify an object element in your XAML.</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">Typically this object element is an instance of a control class or other element that is displayed in a UI.</source>
            <target xml:space="preserve">Typically this object element is an instance of a control class or other element that is displayed in a UI.</target>
          </segment>
        </unit>
        <unit id="116">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="116">
            <source xml:space="preserve">The relationship between the string you use in <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> and the strings you use in a resources file is that the resource file strings are the <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:Uid</pc> followed by a dot (.)</source>
            <target xml:space="preserve">The relationship between the string you use in <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> and the strings you use in a resources file is that the resource file strings are the <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:Uid</pc> followed by a dot (.)</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">and then by the name of a specific property of the element that's being localized.</source>
            <target xml:space="preserve">and then by the name of a specific property of the element that's being localized.</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">Consider this example:</source>
            <target xml:space="preserve">Consider this example:</target>
          </segment>
        </unit>
        <unit id="119">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="119">
            <source xml:space="preserve">To specify content to replace the display text <pc dataRefEnd="id2" dataRefStart="id1" id="2">Go</pc>, you must specify a new resource that comes from a resource file.</source>
            <target xml:space="preserve">To specify content to replace the display text <pc dataRefEnd="id2" dataRefStart="id1" id="2">Go</pc>, you must specify a new resource that comes from a resource file.</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">Your resource file should contain an entry for the resource named "GoButton.Content".</source>
            <target xml:space="preserve">Your resource file should contain an entry for the resource named "GoButton.Content".</target>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Content**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> in this case is a specific property that's inherited by the <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> class.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**Content**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> in this case is a specific property that's inherited by the <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> class.</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">You might also provide localized values for other properties of this button, for example you could provide a resource-based value for "GoButton.FlowDirection".</source>
            <target xml:space="preserve">You might also provide localized values for other properties of this button, for example you could provide a resource-based value for "GoButton.FlowDirection".</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">For more info on how to use <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> and resource files together, see <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">Quickstart: Translating UI resources</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info on how to use <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> and resource files together, see <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">Quickstart: Translating UI resources</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="124">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="124">
            <source xml:space="preserve">The validity of which strings can be used for an <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> value is controlled in a practical sense by which strings are legal as an identifier in a resource file and a resource path.</source>
            <target xml:space="preserve">The validity of which strings can be used for an <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> value is controlled in a practical sense by which strings are legal as an identifier in a resource file and a resource path.</target>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">x:Uid</pc> is discrete from <pc dataRefEnd="id4" dataRefStart="id3" id="3">x:Name</pc> both because of the stated XAML localization scenario, and so that identifiers that are used for localization have no dependencies on the programming model implications of <pc dataRefEnd="id6" dataRefStart="id5" id="5">x:Name</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">x:Uid</pc> is discrete from <pc dataRefEnd="id4" dataRefStart="id3" id="3">x:Name</pc> both because of the stated XAML localization scenario, and so that identifiers that are used for localization have no dependencies on the programming model implications of <pc dataRefEnd="id6" dataRefStart="id5" id="5">x:Name</pc>.</target>
          </segment>
        </unit>
        <unit id="126">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="126">
            <source xml:space="preserve">Also, <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Name</pc> is governed by the XAML namescope concept, whereas uniqueness for <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:Uid</pc> is controlled by the package resource index (PRI) system.</source>
            <target xml:space="preserve">Also, <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Name</pc> is governed by the XAML namescope concept, whereas uniqueness for <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:Uid</pc> is controlled by the package resource index (PRI) system.</target>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Resource Management System</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Resource Management System</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">UWP XAML has somewhat different rules for <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> uniqueness than previous XAML-utilizing technologies used.</source>
            <target xml:space="preserve">UWP XAML has somewhat different rules for <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> uniqueness than previous XAML-utilizing technologies used.</target>
          </segment>
        </unit>
        <unit id="129">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="129">
            <source xml:space="preserve">For UWP XAML it is legal for the same <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> ID value to exist as a directive on multiple XAML elements.</source>
            <target xml:space="preserve">For UWP XAML it is legal for the same <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> ID value to exist as a directive on multiple XAML elements.</target>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source xml:space="preserve">However, each such element must then share the same resolution logic when resolving the resources in a resource file.</source>
            <target xml:space="preserve">However, each such element must then share the same resolution logic when resolving the resources in a resource file.</target>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source xml:space="preserve">Also, all XAML files in a project share a single resource scope for purposes of <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> resolution, there is no concept of <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:Uid</pc> scopes being aligned to individual XAML files.</source>
            <target xml:space="preserve">Also, all XAML files in a project share a single resource scope for purposes of <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> resolution, there is no concept of <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:Uid</pc> scopes being aligned to individual XAML files.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">In some cases you'll be using a resource path rather than built-in functionality of the package resource index (PRI) system.</source>
            <target xml:space="preserve">In some cases you'll be using a resource path rather than built-in functionality of the package resource index (PRI) system.</target>
          </segment>
        </unit>
        <unit id="133">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="133">
            <source xml:space="preserve">Any string used as an <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> value defines a resource path that begins with ms-resource:///Resources/ and includes the <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:Uid</pc> string.</source>
            <target xml:space="preserve">Any string used as an <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> value defines a resource path that begins with ms-resource:///Resources/ and includes the <pc dataRefEnd="id4" dataRefStart="id3" id="4">x:Uid</pc> string.</target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">The path is completed by the names of the properties you specify in a resources file or are otherwise targeting.</source>
            <target xml:space="preserve">The path is completed by the names of the properties you specify in a resources file or are otherwise targeting.</target>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source xml:space="preserve">Don't put <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> on property elements, that isn't allowed in Windows Runtime XAML.</source>
            <target xml:space="preserve">Don't put <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Uid</pc> on property elements, that isn't allowed in Windows Runtime XAML.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>