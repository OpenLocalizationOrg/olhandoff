<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">234bd20caa6a3a40a35698a214b6ddab7c9e2f2c</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Call asynchronous APIs in C\# or Visual Basic</source>
            <target xml:space="preserve">Call asynchronous APIs in C\# or Visual Basic</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</source>
            <target xml:space="preserve">The Universal Windows Platform (UWP) includes many asynchronous APIs to ensure that your app remains responsive when it does work that might take an extended amount of time.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">This topic discusses how to use asynchronous methods from the UWP in C\# or Microsoft Visual Basic.</source>
            <target xml:space="preserve">This topic discusses how to use asynchronous methods from the UWP in C\# or Microsoft Visual Basic.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">Asynchronous APIs keep your app from waiting for large operations to complete before continuing execution.</source>
            <target xml:space="preserve">Asynchronous APIs keep your app from waiting for large operations to complete before continuing execution.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">For example, an app that downloads info from the Internet might spend several seconds waiting for the info to arrive.</source>
            <target xml:space="preserve">For example, an app that downloads info from the Internet might spend several seconds waiting for the info to arrive.</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">If you use a synchronous method to retrieve the info, the app is blocked until the method returns.</source>
            <target xml:space="preserve">If you use a synchronous method to retrieve the info, the app is blocked until the method returns.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">The app won't respond to user interaction and because it seems non-responsive, the user might become frustrated.</source>
            <target xml:space="preserve">The app won't respond to user interaction and because it seems non-responsive, the user might become frustrated.</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">By providing asynchronous APIs, the UWP helps to ensure that your app stays responsive to the user when it's performing long operations.</source>
            <target xml:space="preserve">By providing asynchronous APIs, the UWP helps to ensure that your app stays responsive to the user when it's performing long operations.</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">Most of the asynchronous APIs in the UWP don't have synchronous counterparts, so you need to be sure to understand how to use the asynchronous APIs with C\# or Visual Basic in your Universal Windows Platform (UWP) app.</source>
            <target xml:space="preserve">Most of the asynchronous APIs in the UWP don't have synchronous counterparts, so you need to be sure to understand how to use the asynchronous APIs with C\# or Visual Basic in your Universal Windows Platform (UWP) app.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">Here we show how to call asynchronous APIs of the UWP.</source>
            <target xml:space="preserve">Here we show how to call asynchronous APIs of the UWP.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">Using asynchronous APIs</source>
            <target xml:space="preserve">Using asynchronous APIs</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">By convention, asynchronous methods are given names that end in "Async".</source>
            <target xml:space="preserve">By convention, asynchronous methods are given names that end in "Async".</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">You typically call asynchronous APIs in response to a user's action, such as when the user clicks a button.</source>
            <target xml:space="preserve">You typically call asynchronous APIs in response to a user's action, such as when the user clicks a button.</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">Calling an asynchronous method in an event handler is one of the simplest ways of using asynchronous APIs.</source>
            <target xml:space="preserve">Calling an asynchronous method in an event handler is one of the simplest ways of using asynchronous APIs.</target>
          </segment>
        </unit>
        <unit id="117">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="117">
            <source xml:space="preserve">Here we use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator as an example.</source>
            <target xml:space="preserve">Here we use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator as an example.</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">Suppose that you have an app that lists the titles of blog posts from a certain location.</source>
            <target xml:space="preserve">Suppose that you have an app that lists the titles of blog posts from a certain location.</target>
          </segment>
        </unit>
        <unit id="119">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="119">
            <source xml:space="preserve">The app has a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that the user clicks to get the titles.</source>
            <target xml:space="preserve">The app has a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Button**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that the user clicks to get the titles.</target>
          </segment>
        </unit>
        <unit id="120">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="120">
            <source xml:space="preserve">The titles are displayed in a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**TextBlock**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The titles are displayed in a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**TextBlock**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">When the user clicks the button, it is important that the app remains responsive while it waits for the info from the blog's website.</source>
            <target xml:space="preserve">When the user clicks the button, it is important that the app remains responsive while it waits for the info from the blog's website.</target>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source xml:space="preserve">To ensure this responsiveness, the UWP provides an asynchronous method, <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SyndicationClient.RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, to download the feed.</source>
            <target xml:space="preserve">To ensure this responsiveness, the UWP provides an asynchronous method, <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SyndicationClient.RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, to download the feed.</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">The example here gets the lists of blog posts from a blog by calling the asynchronous method, <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SyndicationClient.RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and awaiting the result.</source>
            <target xml:space="preserve">The example here gets the lists of blog posts from a blog by calling the asynchronous method, <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SyndicationClient.RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and awaiting the result.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets" data-resources="OutlookServices.Calendar"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets" data-resources="OutlookServices.Calendar"]</target>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source xml:space="preserve">[!code-csharp<pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Main</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>]</source>
            <target xml:space="preserve">[!code-csharp<pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Main</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>]</target>
          </segment>
        </unit>
        <unit id="126">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="126">
            <source xml:space="preserve">[!code-vb<pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Main</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>]</source>
            <target xml:space="preserve">[!code-vb<pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Main</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>]</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">There are a couple of important things about this example.</source>
            <target xml:space="preserve">There are a couple of important things about this example.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">First, the line, <pc dataRefEnd="id2" dataRefStart="id1" id="2">SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)</pc> uses the <pc dataRefEnd="id4" dataRefStart="id3" id="4">await</pc> operator with the call to the asynchronous method, <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">First, the line, <pc dataRefEnd="id2" dataRefStart="id1" id="2">SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)</pc> uses the <pc dataRefEnd="id4" dataRefStart="id3" id="4">await</pc> operator with the call to the asynchronous method, <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="129">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="129">
            <source xml:space="preserve">You can think of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator as telling the compiler that you are calling an asynchronous method, which causes the compiler to do some extra work so you don’t have to.</source>
            <target xml:space="preserve">You can think of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator as telling the compiler that you are calling an asynchronous method, which causes the compiler to do some extra work so you don’t have to.</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">Next, the declaration of the event handler includes the keyword <pc dataRefEnd="id2" dataRefStart="id1" id="2">async</pc>.</source>
            <target xml:space="preserve">Next, the declaration of the event handler includes the keyword <pc dataRefEnd="id2" dataRefStart="id1" id="2">async</pc>.</target>
          </segment>
        </unit>
        <unit id="131">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="131">
            <source xml:space="preserve">You must include this keyword in the method declaration of any method in which you use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator.</source>
            <target xml:space="preserve">You must include this keyword in the method declaration of any method in which you use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator.</target>
          </segment>
        </unit>
        <unit id="132">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="132">
            <source xml:space="preserve">In this topic, we won't go into a lot of the details of what the compiler does with the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator, but let's examine what your app does so that it is asynchronous and responsive.</source>
            <target xml:space="preserve">In this topic, we won't go into a lot of the details of what the compiler does with the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator, but let's examine what your app does so that it is asynchronous and responsive.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">Consider what happens when you use synchronous code.</source>
            <target xml:space="preserve">Consider what happens when you use synchronous code.</target>
          </segment>
        </unit>
        <unit id="134">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="134">
            <source xml:space="preserve">For example, suppose that there is a method called <pc dataRefEnd="id2" dataRefStart="id1" id="2">SyndicationClient.RetrieveFeed</pc> that is synchronous.</source>
            <target xml:space="preserve">For example, suppose that there is a method called <pc dataRefEnd="id2" dataRefStart="id1" id="2">SyndicationClient.RetrieveFeed</pc> that is synchronous.</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">(There is no such method, but imagine that there is.)</source>
            <target xml:space="preserve">(There is no such method, but imagine that there is.)</target>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source xml:space="preserve">If your app included the line <pc dataRefEnd="id2" dataRefStart="id1" id="2">SyndicationFeed feed = client.RetrieveFeed(feedUri)</pc>, instead of <pc dataRefEnd="id4" dataRefStart="id3" id="4">SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)</pc>, execution of the app would stop until the return value of <pc dataRefEnd="id6" dataRefStart="id5" id="6">RetrieveFeed</pc> is available.</source>
            <target xml:space="preserve">If your app included the line <pc dataRefEnd="id2" dataRefStart="id1" id="2">SyndicationFeed feed = client.RetrieveFeed(feedUri)</pc>, instead of <pc dataRefEnd="id4" dataRefStart="id3" id="4">SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)</pc>, execution of the app would stop until the return value of <pc dataRefEnd="id6" dataRefStart="id5" id="6">RetrieveFeed</pc> is available.</target>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source xml:space="preserve">And while your app waits for the method to complete, it can't respond to any other events, such another <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event.</source>
            <target xml:space="preserve">And while your app waits for the method to complete, it can't respond to any other events, such another <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Click**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event.</target>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source xml:space="preserve">That is, your app would be blocked until <pc dataRefEnd="id2" dataRefStart="id1" id="2">RetrieveFeed</pc> returns.</source>
            <target xml:space="preserve">That is, your app would be blocked until <pc dataRefEnd="id2" dataRefStart="id1" id="2">RetrieveFeed</pc> returns.</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">But if you call <pc dataRefEnd="id2" dataRefStart="id1" id="2">client.RetrieveFeedAsync</pc>, the method initiates the retrieval and immediately returns.</source>
            <target xml:space="preserve">But if you call <pc dataRefEnd="id2" dataRefStart="id1" id="2">client.RetrieveFeedAsync</pc>, the method initiates the retrieval and immediately returns.</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">When you use <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> with <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, the app temporarily exits the event handler.</source>
            <target xml:space="preserve">When you use <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> with <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, the app temporarily exits the event handler.</target>
          </segment>
        </unit>
        <unit id="141">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="141">
            <source xml:space="preserve">Then it can process other events while <pc dataRefEnd="id2" dataRefStart="id1" id="2">RetrieveFeedAsync</pc> executes asynchronously.</source>
            <target xml:space="preserve">Then it can process other events while <pc dataRefEnd="id2" dataRefStart="id1" id="2">RetrieveFeedAsync</pc> executes asynchronously.</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">This keeps the app responsive to the user.</source>
            <target xml:space="preserve">This keeps the app responsive to the user.</target>
          </segment>
        </unit>
        <unit id="143">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="143">
            <source xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="2">RetrieveFeedAsync</pc> completes and the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SyndicationFeed**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> is available, the app essentially reenters the event handler where it left off, after <pc dataRefEnd="id10" dataRefStart="id9" id="6">SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)</pc>, and finishes the rest of the method.</source>
            <target xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="2">RetrieveFeedAsync</pc> completes and the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SyndicationFeed**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> is available, the app essentially reenters the event handler where it left off, after <pc dataRefEnd="id10" dataRefStart="id9" id="6">SyndicationFeed feed = await client.RetrieveFeedAsync(feedUri)</pc>, and finishes the rest of the method.</target>
          </segment>
        </unit>
        <unit id="144">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="144">
            <source xml:space="preserve">The nice thing about using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator is that the code doesn't look much different from how the code looks if you used the imaginary <pc dataRefEnd="id4" dataRefStart="id3" id="4">RetrieveFeed</pc> method.</source>
            <target xml:space="preserve">The nice thing about using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator is that the code doesn't look much different from how the code looks if you used the imaginary <pc dataRefEnd="id4" dataRefStart="id3" id="4">RetrieveFeed</pc> method.</target>
          </segment>
        </unit>
        <unit id="145">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="145">
            <source xml:space="preserve">There are ways to write asynchronous code in C\# or Visual Basic without the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator, but the resulting code tends to emphasize the mechanics of executing asynchronously.</source>
            <target xml:space="preserve">There are ways to write asynchronous code in C\# or Visual Basic without the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator, but the resulting code tends to emphasize the mechanics of executing asynchronously.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">This makes asynchronous code hard to write, hard to understand, and hard to maintain.</source>
            <target xml:space="preserve">This makes asynchronous code hard to write, hard to understand, and hard to maintain.</target>
          </segment>
        </unit>
        <unit id="147">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="147">
            <source xml:space="preserve">By using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator, you get the benefits of an asynchronous app without making your code complex.</source>
            <target xml:space="preserve">By using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator, you get the benefits of an asynchronous app without making your code complex.</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">Return types and results of asynchronous APIs</source>
            <target xml:space="preserve">Return types and results of asynchronous APIs</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id15">&lt;code&gt;</data>
            <data id="id16">&lt;/code&gt;</data>
            <data id="id17">&lt;strong&gt;</data>
            <data id="id18">&lt;/strong&gt;</data>
            <data id="id19">&lt;strong&gt;</data>
            <data id="id20">&lt;/strong&gt;</data>
            <data id="id21">&lt;strong&gt;</data>
            <data id="id22">&lt;/strong&gt;</data>
            <data id="id23">&lt;strong&gt;</data>
            <data id="id24">&lt;/strong&gt;</data>
            <data id="id25">&lt;strong&gt;</data>
            <data id="id26">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">If you followed the link to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, you might have noticed that the return type of <pc dataRefEnd="id8" dataRefStart="id7" id="4">RetrieveFeedAsync</pc> is not a <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**SyndicationFeed**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>. Instead, the return type is <pc dataRefEnd="id16" dataRefStart="id15" id="8">IAsyncOperationWithProgress&lt;SyndicationFeed, RetrievalProgress&gt;</pc>. Viewed from the raw syntax, an asynchronous API returns an object that contains the result within it. While it is common, and sometimes useful, to think of an asynchronous method as being awaitable, the <pc dataRefEnd="id18" dataRefStart="id17" id="10">await</pc> operator actually operates on the method’s return value, not on the method. When you apply the <pc dataRefEnd="id20" dataRefStart="id19" id="12">await</pc> operator, what you get back is the result of calling <pc dataRefEnd="id22" dataRefStart="id21" id="14">GetResult</pc> on the object returned by the method. In the example, the <pc dataRefEnd="id24" dataRefStart="id23" id="16">SyndicationFeed</pc> is the result of <pc dataRefEnd="id26" dataRefStart="id25" id="18">RetrieveFeedAsync.GetResult()</pc>.</source>
            <target xml:space="preserve">If you followed the link to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, you might have noticed that the return type of <pc dataRefEnd="id8" dataRefStart="id7" id="4">RetrieveFeedAsync</pc> is not a <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**SyndicationFeed**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>. Instead, the return type is <pc dataRefEnd="id16" dataRefStart="id15" id="8">IAsyncOperationWithProgress&lt;SyndicationFeed, RetrievalProgress&gt;</pc>. Viewed from the raw syntax, an asynchronous API returns an object that contains the result within it. While it is common, and sometimes useful, to think of an asynchronous method as being awaitable, the <pc dataRefEnd="id18" dataRefStart="id17" id="10">await</pc> operator actually operates on the method’s return value, not on the method. When you apply the <pc dataRefEnd="id20" dataRefStart="id19" id="12">await</pc> operator, what you get back is the result of calling <pc dataRefEnd="id22" dataRefStart="id21" id="14">GetResult</pc> on the object returned by the method. In the example, the <pc dataRefEnd="id24" dataRefStart="id23" id="16">SyndicationFeed</pc> is the result of <pc dataRefEnd="id26" dataRefStart="id25" id="18">RetrieveFeedAsync.GetResult()</pc>.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">When you use an asynchronous method, you can examine the signature to see what you’ll get back after awaiting the value returned from the method.</source>
            <target xml:space="preserve">When you use an asynchronous method, you can examine the signature to see what you’ll get back after awaiting the value returned from the method.</target>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source xml:space="preserve">All asynchronous APIs in the UWP return one of the following types:</source>
            <target xml:space="preserve">All asynchronous APIs in the UWP return one of the following types:</target>
          </segment>
        </unit>
        <unit id="152">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="152">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncOperation&lt;TResult&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncOperation&lt;TResult&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="153">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="153">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncOperationWithProgress&lt;TResult, TProgress&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncOperationWithProgress&lt;TResult, TProgress&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="154">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="154">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncAction**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncAction**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="155">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="155">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncActionWithProgress&lt;TProgress&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncActionWithProgress&lt;TProgress&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="156">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="156">
            <source xml:space="preserve">The result type of an asynchronous method is the same as the <pc dataRefEnd="id2" dataRefStart="id1" id="2">      TResult</pc> type parameter.</source>
            <target xml:space="preserve">The result type of an asynchronous method is the same as the <pc dataRefEnd="id2" dataRefStart="id1" id="2">      TResult</pc> type parameter.</target>
          </segment>
        </unit>
        <unit id="157">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="157">
            <source xml:space="preserve">Types without a <pc dataRefEnd="id2" dataRefStart="id1" id="2">TResult</pc> don't have a result.</source>
            <target xml:space="preserve">Types without a <pc dataRefEnd="id2" dataRefStart="id1" id="2">TResult</pc> don't have a result.</target>
          </segment>
        </unit>
        <unit id="158">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="158">
            <source xml:space="preserve">You can think of the result as being <pc dataRefEnd="id2" dataRefStart="id1" id="2">void</pc>.</source>
            <target xml:space="preserve">You can think of the result as being <pc dataRefEnd="id2" dataRefStart="id1" id="2">void</pc>.</target>
          </segment>
        </unit>
        <unit id="159">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="159">
            <source xml:space="preserve">In Visual Basic, a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Sub</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> procedure is equivalent to a method with a <pc dataRefEnd="id8" dataRefStart="id7" id="4">void</pc> return type.</source>
            <target xml:space="preserve">In Visual Basic, a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Sub</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> procedure is equivalent to a method with a <pc dataRefEnd="id8" dataRefStart="id7" id="4">void</pc> return type.</target>
          </segment>
        </unit>
        <unit id="160">
          <segment state="initial" id="160">
            <source xml:space="preserve">The table here gives examples of asynchronous methods and lists the return type and result type of each.</source>
            <target xml:space="preserve">The table here gives examples of asynchronous methods and lists the return type and result type of each.</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">Asynchronous method</source>
            <target xml:space="preserve">Asynchronous method</target>
          </segment>
        </unit>
        <unit id="162">
          <segment state="initial" id="162">
            <source xml:space="preserve">Return type</source>
            <target xml:space="preserve">Return type</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">Result type</source>
            <target xml:space="preserve">Result type</target>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**SyndicationClient.RetrieveFeedAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**SyndicationClient.RetrieveFeedAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncOperationWithProgress&lt;SyndicationFeed, RetrievalProgress&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncOperationWithProgress&lt;SyndicationFeed, RetrievalProgress&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="166">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="166">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**SyndicationFeed**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**SyndicationFeed**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="167">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="167">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**FileOpenPicker.PickSingleFileAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**FileOpenPicker.PickSingleFileAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="168">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="168">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncOperation&lt;StorageFile&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncOperation&lt;StorageFile&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="169">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="169">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StorageFile**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StorageFile**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="170">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="170">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**XmlDocument.SaveToFileAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**XmlDocument.SaveToFileAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="171">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="171">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncAction**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncAction**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="172">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="172">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">void</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">void</pc>
						</target>
          </segment>
        </unit>
        <unit id="173">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="173">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**InkStrokeContainer.LoadAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**InkStrokeContainer.LoadAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="174">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="174">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncActionWithProgress&lt;UInt64&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncActionWithProgress&lt;UInt64&gt;**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="175">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="175">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">void</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">void</pc>
						</target>
          </segment>
        </unit>
        <unit id="176">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="176">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DataReader.LoadAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DataReader.LoadAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="177">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="177">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DataReaderLoadOperation**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>, a custom results class that implements <pc dataRefEnd="id8" dataRefStart="id7" id="3">IAsyncOperation&lt;UInt32&gt;</pc></source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**DataReaderLoadOperation**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>, a custom results class that implements <pc dataRefEnd="id8" dataRefStart="id7" id="3">IAsyncOperation&lt;UInt32&gt;</pc></target>
          </segment>
        </unit>
        <unit id="178">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="178">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**UInt32**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**UInt32**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="179">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="179">
            <source xml:space="preserve">Asynchronous methods that are defined in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**.NET for UWP apps**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> have the return type <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Task**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> or <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Task&lt;TResult&gt;**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Asynchronous methods that are defined in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**.NET for UWP apps**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> have the return type <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Task**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> or <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Task&lt;TResult&gt;**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="180">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="180">
            <source xml:space="preserve">Methods that return <pc dataRefEnd="id2" dataRefStart="id1" id="2">Task</pc> are similar to the asynchronous methods in the UWP that return <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncAction**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Methods that return <pc dataRefEnd="id2" dataRefStart="id1" id="2">Task</pc> are similar to the asynchronous methods in the UWP that return <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncAction**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="181">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="181">
            <source xml:space="preserve">In each case, the result of the asynchronous method is <pc dataRefEnd="id2" dataRefStart="id1" id="2">void</pc>.</source>
            <target xml:space="preserve">In each case, the result of the asynchronous method is <pc dataRefEnd="id2" dataRefStart="id1" id="2">void</pc>.</target>
          </segment>
        </unit>
        <unit id="182">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="182">
            <source xml:space="preserve">The return type <pc dataRefEnd="id2" dataRefStart="id1" id="2">Task&lt;TResult&gt;</pc> is similar to <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncOperation&lt;TResult&gt;**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> in that the result of the asynchronous method when running the task is the same type as the <pc dataRefEnd="id10" dataRefStart="id9" id="6">TResult</pc> type parameter.</source>
            <target xml:space="preserve">The return type <pc dataRefEnd="id2" dataRefStart="id1" id="2">Task&lt;TResult&gt;</pc> is similar to <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncOperation&lt;TResult&gt;**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> in that the result of the asynchronous method when running the task is the same type as the <pc dataRefEnd="id10" dataRefStart="id9" id="6">TResult</pc> type parameter.</target>
          </segment>
        </unit>
        <unit id="183">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="183">
            <source xml:space="preserve">For more info about using <pc dataRefEnd="id2" dataRefStart="id1" id="2">.NET for UWP apps</pc> and tasks, see <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">.NET for Windows Runtime apps overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info about using <pc dataRefEnd="id2" dataRefStart="id1" id="2">.NET for UWP apps</pc> and tasks, see <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">.NET for Windows Runtime apps overview</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="184">
          <segment state="initial" id="184">
            <source xml:space="preserve">Handling errors</source>
            <target xml:space="preserve">Handling errors</target>
          </segment>
        </unit>
        <unit id="185">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="185">
            <source xml:space="preserve">When you use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator to retrieve your results from an asynchronous method, you can use a <pc dataRefEnd="id4" dataRefStart="id3" id="4">try/catch</pc> block to handle errors that occur in asynchronous methods, just as you do for synchronous methods.</source>
            <target xml:space="preserve">When you use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator to retrieve your results from an asynchronous method, you can use a <pc dataRefEnd="id4" dataRefStart="id3" id="4">try/catch</pc> block to handle errors that occur in asynchronous methods, just as you do for synchronous methods.</target>
          </segment>
        </unit>
        <unit id="186">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="186">
            <source xml:space="preserve">The previous example wraps the <pc dataRefEnd="id2" dataRefStart="id1" id="2">RetrieveFeedAsync</pc> method and <pc dataRefEnd="id4" dataRefStart="id3" id="4">await</pc> operation in a <pc dataRefEnd="id6" dataRefStart="id5" id="6">try/catch</pc> block to handle errors when an exception is thrown.</source>
            <target xml:space="preserve">The previous example wraps the <pc dataRefEnd="id2" dataRefStart="id1" id="2">RetrieveFeedAsync</pc> method and <pc dataRefEnd="id4" dataRefStart="id3" id="4">await</pc> operation in a <pc dataRefEnd="id6" dataRefStart="id5" id="6">try/catch</pc> block to handle errors when an exception is thrown.</target>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source xml:space="preserve">When asynchronous methods call other asynchronous methods, any asynchronous method that results in an exception will be propagated to the outer methods.</source>
            <target xml:space="preserve">When asynchronous methods call other asynchronous methods, any asynchronous method that results in an exception will be propagated to the outer methods.</target>
          </segment>
        </unit>
        <unit id="188">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="188">
            <source xml:space="preserve">This means that you can put a <pc dataRefEnd="id2" dataRefStart="id1" id="2">try/catch</pc> block on the outer-most method to catch errors for the nested asynchronous methods.</source>
            <target xml:space="preserve">This means that you can put a <pc dataRefEnd="id2" dataRefStart="id1" id="2">try/catch</pc> block on the outer-most method to catch errors for the nested asynchronous methods.</target>
          </segment>
        </unit>
        <unit id="189">
          <segment state="initial" id="189">
            <source xml:space="preserve">Again, this is similar to how you catch exceptions for synchronous methods.</source>
            <target xml:space="preserve">Again, this is similar to how you catch exceptions for synchronous methods.</target>
          </segment>
        </unit>
        <unit id="190">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="190">
            <source xml:space="preserve">However, you can't use <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">catch</pc> block.</source>
            <target xml:space="preserve">However, you can't use <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">catch</pc> block.</target>
          </segment>
        </unit>
        <unit id="191">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="191">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Tip</pc>  Starting with C\# in Microsoft Visual Studio 2005, you can use <pc dataRefEnd="id4" dataRefStart="id3" id="3">await</pc> in the <pc dataRefEnd="id6" dataRefStart="id5" id="5">catch</pc> block.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Tip</pc>  Starting with C\# in Microsoft Visual Studio 2005, you can use <pc dataRefEnd="id4" dataRefStart="id3" id="3">await</pc> in the <pc dataRefEnd="id6" dataRefStart="id5" id="5">catch</pc> block.</target>
          </segment>
        </unit>
        <unit id="192">
          <segment state="initial" id="192">
            <source xml:space="preserve">Summary and next steps</source>
            <target xml:space="preserve">Summary and next steps</target>
          </segment>
        </unit>
        <unit id="193">
          <segment state="initial" id="193">
            <source xml:space="preserve">The pattern of calling an asynchronous method that we show here is the simplest one to use when you call asynchronous APIs in an event handler.</source>
            <target xml:space="preserve">The pattern of calling an asynchronous method that we show here is the simplest one to use when you call asynchronous APIs in an event handler.</target>
          </segment>
        </unit>
        <unit id="194">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="194">
            <source xml:space="preserve">You can also use this pattern when you call an asynchronous method in an overridden method that returns <pc dataRefEnd="id2" dataRefStart="id1" id="2">void</pc> or a <pc dataRefEnd="id4" dataRefStart="id3" id="4">Sub</pc> in Visual Basic.</source>
            <target xml:space="preserve">You can also use this pattern when you call an asynchronous method in an overridden method that returns <pc dataRefEnd="id2" dataRefStart="id1" id="2">void</pc> or a <pc dataRefEnd="id4" dataRefStart="id3" id="4">Sub</pc> in Visual Basic.</target>
          </segment>
        </unit>
        <unit id="195">
          <segment state="initial" id="195">
            <source xml:space="preserve">As you encounter asynchronous methods in the UWP, it is important to remember:</source>
            <target xml:space="preserve">As you encounter asynchronous methods in the UWP, it is important to remember:</target>
          </segment>
        </unit>
        <unit id="196">
          <segment state="initial" id="196">
            <source xml:space="preserve">By convention, asynchronous methods are given names that end in "Async".</source>
            <target xml:space="preserve">By convention, asynchronous methods are given names that end in "Async".</target>
          </segment>
        </unit>
        <unit id="197">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="197">
            <source xml:space="preserve">Any method that uses the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator must have its declaration marked with the <pc dataRefEnd="id4" dataRefStart="id3" id="4">async</pc> keyword.</source>
            <target xml:space="preserve">Any method that uses the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator must have its declaration marked with the <pc dataRefEnd="id4" dataRefStart="id3" id="4">async</pc> keyword.</target>
          </segment>
        </unit>
        <unit id="198">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="198">
            <source xml:space="preserve">When an app finds the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator, the app remains responsive to user interaction while the asynchronous method executes.</source>
            <target xml:space="preserve">When an app finds the <pc dataRefEnd="id2" dataRefStart="id1" id="2">await</pc> operator, the app remains responsive to user interaction while the asynchronous method executes.</target>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source xml:space="preserve">Awaiting the value returned by an asynchronous method returns an object that contains the result.</source>
            <target xml:space="preserve">Awaiting the value returned by an asynchronous method returns an object that contains the result.</target>
          </segment>
        </unit>
        <unit id="200">
          <segment state="initial" id="200">
            <source xml:space="preserve">In most cases, the result contained within the return value is what's useful, not the return value itself.</source>
            <target xml:space="preserve">In most cases, the result contained within the return value is what's useful, not the return value itself.</target>
          </segment>
        </unit>
        <unit id="201">
          <segment state="initial" id="201">
            <source xml:space="preserve">You can find the type of the value that is contained inside the result by looking at the return type of the async method.</source>
            <target xml:space="preserve">You can find the type of the value that is contained inside the result by looking at the return type of the async method.</target>
          </segment>
        </unit>
        <unit id="202">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="202">
            <source xml:space="preserve">Using asynchronous APIs and <pc dataRefEnd="id2" dataRefStart="id1" id="2">async</pc> patterns is often a way to improve the responsiveness of your app.</source>
            <target xml:space="preserve">Using asynchronous APIs and <pc dataRefEnd="id2" dataRefStart="id1" id="2">async</pc> patterns is often a way to improve the responsiveness of your app.</target>
          </segment>
        </unit>
        <unit id="203">
          <segment state="initial" id="203">
            <source xml:space="preserve">The example in this topic outputs text that looks like this.</source>
            <target xml:space="preserve">The example in this topic outputs text that looks like this.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>