<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">63c440fabde53045f46313d4500b9a8109e4872e</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Asynchronous programming in C++</source>
            <target xml:space="preserve">Asynchronous programming in C++</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="104">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">* Important APIs *</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">* Important APIs *</pc>
						</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">[task class]</source>
            <target xml:space="preserve">[task class]</target>
          </segment>
        </unit>
        <unit id="106">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="106">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**concurrency namespace**[concurrencynamespace]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**concurrency namespace**[concurrencynamespace]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="107">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="107">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncOperation**[iasyncoperation]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**IAsyncOperation**[iasyncoperation]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source xml:space="preserve">This article describes the recommended way to consume asynchronous methods in Visual C++ component extensions (C++/CX) by using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">task</pc> class that's defined in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">concurrency</pc> namespace in ppltasks.h.</source>
            <target xml:space="preserve">This article describes the recommended way to consume asynchronous methods in Visual C++ component extensions (C++/CX) by using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">task</pc> class that's defined in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">concurrency</pc> namespace in ppltasks.h.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Universal Windows Platform (UWP) asynchronous types</source>
            <target xml:space="preserve">Universal Windows Platform (UWP) asynchronous types</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">The Universal Windows Platform (UWP) features a well-defined model for calling asynchronous methods and provides the types that you need to consume such methods.</source>
            <target xml:space="preserve">The Universal Windows Platform (UWP) features a well-defined model for calling asynchronous methods and provides the types that you need to consume such methods.</target>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source xml:space="preserve">If you are not familiar with the UWP asynchronous model, read <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Asynchronous Programming[asyncprogramming]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> before you read the rest of this article.</source>
            <target xml:space="preserve">If you are not familiar with the UWP asynchronous model, read <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Asynchronous Programming[asyncprogramming]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> before you read the rest of this article.</target>
          </segment>
        </unit>
        <unit id="112">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;code&gt;</data>
            <data id="id14">&lt;/code&gt;</data>
            <data id="id15">&lt;strong&gt;</data>
            <data id="id16">&lt;/strong&gt;</data>
            <data id="id17">&lt;strong&gt;</data>
            <data id="id18">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="112">
            <source xml:space="preserve">Although you can consume the asynchronous UWP APIs directly in C++, the preferred approach is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task class**[task-class]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and its related types and functions, which are contained in the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**concurrency**[concurrencynamespace]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> namespace and defined in <pc dataRefEnd="id14" dataRefStart="id13" id="6">&lt;ppltasks.h&gt;</pc>. The <pc dataRefEnd="id16" dataRefStart="id15" id="8">concurrency::task</pc> is a general-purpose type, but when the <pc dataRefEnd="id18" dataRefStart="id17" id="10">/ZW</pc> compiler switch—which is required for Universal Windows Platform (UWP) apps and components—is used, the task class encapsulates the UWP asynchronous types so that it's easier to:</source>
            <target xml:space="preserve">Although you can consume the asynchronous UWP APIs directly in C++, the preferred approach is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task class**[task-class]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and its related types and functions, which are contained in the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**concurrency**[concurrencynamespace]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> namespace and defined in <pc dataRefEnd="id14" dataRefStart="id13" id="6">&lt;ppltasks.h&gt;</pc>. The <pc dataRefEnd="id16" dataRefStart="id15" id="8">concurrency::task</pc> is a general-purpose type, but when the <pc dataRefEnd="id18" dataRefStart="id17" id="10">/ZW</pc> compiler switch—which is required for Universal Windows Platform (UWP) apps and components—is used, the task class encapsulates the UWP asynchronous types so that it's easier to:</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">chain multiple asynchronous and synchronous operations together</source>
            <target xml:space="preserve">chain multiple asynchronous and synchronous operations together</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">handle exceptions in task chains</source>
            <target xml:space="preserve">handle exceptions in task chains</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">perform cancellation in task chains</source>
            <target xml:space="preserve">perform cancellation in task chains</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">ensure that individual tasks run in the appropriate thread context or apartment</source>
            <target xml:space="preserve">ensure that individual tasks run in the appropriate thread context or apartment</target>
          </segment>
        </unit>
        <unit id="117">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="117">
            <source xml:space="preserve">This article provides basic guidance about how to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">task</pc> class with the UWP asynchronous APIs.</source>
            <target xml:space="preserve">This article provides basic guidance about how to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">task</pc> class with the UWP asynchronous APIs.</target>
          </segment>
        </unit>
        <unit id="118">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="118">
            <source xml:space="preserve">For more complete documentation about <pc dataRefEnd="id2" dataRefStart="id1" id="2">task</pc> and its related methods including <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**create\_task**[createtask]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, see <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">Task Parallelism (Concurrency Runtime)[taskparallelism]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more complete documentation about <pc dataRefEnd="id2" dataRefStart="id1" id="2">task</pc> and its related methods including <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**create\_task**[createtask]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, see <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">Task Parallelism (Concurrency Runtime)[taskparallelism]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="119">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="119">
            <source xml:space="preserve">For more information about how to create asynchronous public methods for consumption by JavaScript or other UWP-compatible languages, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Creating Asynchronous Operations in C++ for Windows Runtime apps[createasynccpp]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more information about how to create asynchronous public methods for consumption by JavaScript or other UWP-compatible languages, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Creating Asynchronous Operations in C++ for Windows Runtime apps[createasynccpp]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">Consuming an async operation by using a task</source>
            <target xml:space="preserve">Consuming an async operation by using a task</target>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source xml:space="preserve">The following example shows how to use the task class to consume an <pc dataRefEnd="id2" dataRefStart="id1" id="2">async</pc> method that returns an <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncOperation**[iasyncoperation]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> interface and whose operation produces a value.</source>
            <target xml:space="preserve">The following example shows how to use the task class to consume an <pc dataRefEnd="id2" dataRefStart="id1" id="2">async</pc> method that returns an <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncOperation**[iasyncoperation]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> interface and whose operation produces a value.</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">Here are the basic steps:</source>
            <target xml:space="preserve">Here are the basic steps:</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">Call the <pc dataRefEnd="id2" dataRefStart="id1" id="2">create_task</pc> method and pass it the <pc dataRefEnd="id4" dataRefStart="id3" id="4">IAsyncOperation^</pc> object.</source>
            <target xml:space="preserve">Call the <pc dataRefEnd="id2" dataRefStart="id1" id="2">create_task</pc> method and pass it the <pc dataRefEnd="id4" dataRefStart="id3" id="4">IAsyncOperation^</pc> object.</target>
          </segment>
        </unit>
        <unit id="124">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="124">
            <source xml:space="preserve">Call the member function <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> on the task and supply a lambda that will be invoked when the asynchronous operation completes.</source>
            <target xml:space="preserve">Call the member function <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> on the task and supply a lambda that will be invoked when the asynchronous operation completes.</target>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;em&gt;</data>
            <data id="id8">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source xml:space="preserve">The task that's created and returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> function is known as a <pc dataRefEnd="id8" dataRefStart="id7" id="4">continuation</pc>.</source>
            <target xml:space="preserve">The task that's created and returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> function is known as a <pc dataRefEnd="id8" dataRefStart="id7" id="4">continuation</pc>.</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">The input argument (in this case) to the user-provided lambda is the result that the task operation produces when it completes.</source>
            <target xml:space="preserve">The input argument (in this case) to the user-provided lambda is the result that the task operation produces when it completes.</target>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source xml:space="preserve">It's the same value that would be retrieved by calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IAsyncOperation::GetResults**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> if you were using the <pc dataRefEnd="id8" dataRefStart="id7" id="4">IAsyncOperation</pc> interface directly.</source>
            <target xml:space="preserve">It's the same value that would be retrieved by calling <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IAsyncOperation::GetResults**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> if you were using the <pc dataRefEnd="id8" dataRefStart="id7" id="4">IAsyncOperation</pc> interface directly.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method returns immediately, and its delegate doesn't run until the asynchronous work completes successfully.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method returns immediately, and its delegate doesn't run until the asynchronous work completes successfully.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">In this example, if the asynchronous operation causes an exception to be thrown, or ends in the canceled state as a result of a cancellation request, the continuation will never execute.</source>
            <target xml:space="preserve">In this example, if the asynchronous operation causes an exception to be thrown, or ends in the canceled state as a result of a cancellation request, the continuation will never execute.</target>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source xml:space="preserve">Later, we’ll describe how to write continuations that execute even if the previous task was cancelled or failed.</source>
            <target xml:space="preserve">Later, we’ll describe how to write continuations that execute even if the previous task was cancelled or failed.</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">Although you declare the task variable on the local stack, it manages its lifetime so that it is not deleted until all of its operations complete and all references to it go out of scope, even if the method returns before the operations complete.</source>
            <target xml:space="preserve">Although you declare the task variable on the local stack, it manages its lifetime so that it is not deleted until all of its operations complete and all references to it go out of scope, even if the method returns before the operations complete.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">Creating a chain of tasks</source>
            <target xml:space="preserve">Creating a chain of tasks</target>
          </segment>
        </unit>
        <unit id="133">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id11">&lt;html&gt;</data>
            <data id="id12">&lt;/html&gt;</data>
            <data id="id13">&lt;strong&gt;</data>
            <data id="id14">&lt;/strong&gt;</data>
            <data id="id15">&lt;code&gt;</data>
            <data id="id16">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="133">
            <source xml:space="preserve">In asynchronous programming, it's common to define a sequence of operations, also known as <pc dataRefEnd="id2" dataRefStart="id1" id="2">task chains</pc>, in which each continuation executes only when the previous one completes. In some cases, the previous (or <pc dataRefEnd="id4" dataRefStart="id3" id="4">antecedent</pc>) task produces a value that the continuation accepts as input. By using the <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> method, you can create task chains in an intuitive and straightforward manner; the method returns a **task<pc dataRefEnd="id12" dataRefStart="id11" id="8"></pc>** where <pc dataRefEnd="id14" dataRefStart="id13" id="10">T</pc> is the return type of the lambda function. You can compose multiple continuations into a task chain: <pc dataRefEnd="id16" dataRefStart="id15" id="12">myTask.then(…).then(…).then(…);</pc></source>
            <target xml:space="preserve">In asynchronous programming, it's common to define a sequence of operations, also known as <pc dataRefEnd="id2" dataRefStart="id1" id="2">task chains</pc>, in which each continuation executes only when the previous one completes. In some cases, the previous (or <pc dataRefEnd="id4" dataRefStart="id3" id="4">antecedent</pc>) task produces a value that the continuation accepts as input. By using the <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> method, you can create task chains in an intuitive and straightforward manner; the method returns a **task<pc dataRefEnd="id12" dataRefStart="id11" id="8"></pc>** where <pc dataRefEnd="id14" dataRefStart="id13" id="10">T</pc> is the return type of the lambda function. You can compose multiple continuations into a task chain: <pc dataRefEnd="id16" dataRefStart="id15" id="12">myTask.then(…).then(…).then(…);</pc></target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">Task chains are especially useful when a continuation creates a new asynchronous operation; such a task is known as an asynchronous task.</source>
            <target xml:space="preserve">Task chains are especially useful when a continuation creates a new asynchronous operation; such a task is known as an asynchronous task.</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">The following example illustrates a task chain that has two continuations.</source>
            <target xml:space="preserve">The following example illustrates a task chain that has two continuations.</target>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source xml:space="preserve">The initial task acquires the handle to an existing file, and when that operation completes, the first continuation starts up a new asynchronous operation to delete the file.</source>
            <target xml:space="preserve">The initial task acquires the handle to an existing file, and when that operation completes, the first continuation starts up a new asynchronous operation to delete the file.</target>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source xml:space="preserve">When that operation completes, the second continuation runs, and outputs a confirmation message.</source>
            <target xml:space="preserve">When that operation completes, the second continuation runs, and outputs a confirmation message.</target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">The previous example illustrates four important points:</source>
            <target xml:space="preserve">The previous example illustrates four important points:</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;html&gt;</data>
            <data id="id8">&lt;/html&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">The first continuation converts the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IAsyncAction^**[iasyncaction]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object to a **task<pc dataRefEnd="id8" dataRefStart="id7" id="4"></pc>** and returns the <pc dataRefEnd="id10" dataRefStart="id9" id="6">task</pc>.</source>
            <target xml:space="preserve">The first continuation converts the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IAsyncAction^**[iasyncaction]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object to a **task<pc dataRefEnd="id8" dataRefStart="id7" id="4"></pc>** and returns the <pc dataRefEnd="id10" dataRefStart="id9" id="6">task</pc>.</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;html&gt;</data>
            <data id="id4">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">The second continuation performs no error handling, and therefore takes <pc dataRefEnd="id2" dataRefStart="id1" id="2">void</pc> and not **task<pc dataRefEnd="id4" dataRefStart="id3" id="4"></pc>** as input. It is a value-based continuation.</source>
            <target xml:space="preserve">The second continuation performs no error handling, and therefore takes <pc dataRefEnd="id2" dataRefStart="id1" id="2">void</pc> and not **task<pc dataRefEnd="id4" dataRefStart="id3" id="4"></pc>** as input. It is a value-based continuation.</target>
          </segment>
        </unit>
        <unit id="141">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="141">
            <source xml:space="preserve">The second continuation doesn't execute until the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DeleteAsync**[deleteasync]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> operation completes.</source>
            <target xml:space="preserve">The second continuation doesn't execute until the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DeleteAsync**[deleteasync]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> operation completes.</target>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source xml:space="preserve">Because the second continuation is value-based, if the operation that was started by the call to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DeleteAsync**[deleteasync]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> throws an exception, the second continuation doesn't execute at all.</source>
            <target xml:space="preserve">Because the second continuation is value-based, if the operation that was started by the call to <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DeleteAsync**[deleteasync]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> throws an exception, the second continuation doesn't execute at all.</target>
          </segment>
        </unit>
        <unit id="143">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="143">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Creating a task chain is just one of the ways to use the <pc dataRefEnd="id4" dataRefStart="id3" id="3">task</pc> class to compose asynchronous operations. You can also compose operations by using join and choice operators <pc dataRefEnd="id6" dataRefStart="id5" id="5">&amp;&amp;</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="7">||</pc>. For more information, see <pc dataRefEnd="id10" dataRefStart="id9" id="9CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="9CapsExtId2">Task Parallelism (Concurrency Runtime)[taskparallelism]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="9CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>  Creating a task chain is just one of the ways to use the <pc dataRefEnd="id4" dataRefStart="id3" id="3">task</pc> class to compose asynchronous operations. You can also compose operations by using join and choice operators <pc dataRefEnd="id6" dataRefStart="id5" id="5">&amp;&amp;</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="7">||</pc>. For more information, see <pc dataRefEnd="id10" dataRefStart="id9" id="9CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="9CapsExtId2">Task Parallelism (Concurrency Runtime)[taskparallelism]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="9CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">Lambda function return types and task return types</source>
            <target xml:space="preserve">Lambda function return types and task return types</target>
          </segment>
        </unit>
        <unit id="145">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;html&gt;</data>
            <data id="id6">&lt;/html&gt;</data>
            <data id="id7">&lt;em&gt;</data>
            <data id="id8">&lt;/em&gt;</data>
            <data id="id9">&lt;html&gt;</data>
            <data id="id10">&lt;/html&gt;</data>
            <data id="id11">&lt;em&gt;</data>
            <data id="id12">&lt;/em&gt;</data>
            <data id="id13">&lt;html&gt;</data>
            <data id="id14">&lt;/html&gt;</data>
            <data id="id15">&lt;em&gt;</data>
            <data id="id16">&lt;/em&gt;</data>
            <data id="id17">&lt;html&gt;</data>
            <data id="id18">&lt;/html&gt;</data>
            <data id="id19">&lt;em&gt;</data>
            <data id="id20">&lt;/em&gt;</data>
            <data id="id21">&lt;html&gt;</data>
            <data id="id22">&lt;/html&gt;</data>
            <data id="id23">&lt;em&gt;</data>
            <data id="id24">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="145">
            <source xml:space="preserve">In a task continuation, the return type of the lambda function is wrapped in a <pc dataRefEnd="id2" dataRefStart="id1" id="2">task</pc> object. If the lambda returns a <pc dataRefEnd="id4" dataRefStart="id3" id="4">double</pc>, then the type of the continuation task is **task<pc dataRefEnd="id6" dataRefStart="id5" id="6"></pc><pc dataRefEnd="id8" dataRefStart="id7" id="7">*. However, the task object is designed so that it doesn't produce needlessly nested return types. If a lambda returns an *</pc>IAsyncOperation<pc dataRefEnd="id10" dataRefStart="id9" id="9"></pc>^<pc dataRefEnd="id12" dataRefStart="id11" id="11">*, the continuation returns a *</pc>task<pc dataRefEnd="id14" dataRefStart="id13" id="13"></pc><pc dataRefEnd="id16" dataRefStart="id15" id="14">*, not a *</pc>task<pc dataRefEnd="id18" dataRefStart="id17" id="16"></pc>&gt;<pc dataRefEnd="id20" dataRefStart="id19" id="18">* or *</pc>task<pc dataRefEnd="id22" dataRefStart="id21" id="20"></pc>^&gt;^<pc dataRefEnd="id24" dataRefStart="id23" id="22">*. This process is known as *asynchronous unwrapping</pc> and it also ensures that the asynchronous operation inside the continuation completes before the next continuation is invoked.</source>
            <target xml:space="preserve">In a task continuation, the return type of the lambda function is wrapped in a <pc dataRefEnd="id2" dataRefStart="id1" id="2">task</pc> object. If the lambda returns a <pc dataRefEnd="id4" dataRefStart="id3" id="4">double</pc>, then the type of the continuation task is **task<pc dataRefEnd="id6" dataRefStart="id5" id="6"></pc><pc dataRefEnd="id8" dataRefStart="id7" id="7">*. However, the task object is designed so that it doesn't produce needlessly nested return types. If a lambda returns an *</pc>IAsyncOperation<pc dataRefEnd="id10" dataRefStart="id9" id="9"></pc>^<pc dataRefEnd="id12" dataRefStart="id11" id="11">*, the continuation returns a *</pc>task<pc dataRefEnd="id14" dataRefStart="id13" id="13"></pc><pc dataRefEnd="id16" dataRefStart="id15" id="14">*, not a *</pc>task<pc dataRefEnd="id18" dataRefStart="id17" id="16"></pc>&gt;<pc dataRefEnd="id20" dataRefStart="id19" id="18">* or *</pc>task<pc dataRefEnd="id22" dataRefStart="id21" id="20"></pc>^&gt;^<pc dataRefEnd="id24" dataRefStart="id23" id="22">*. This process is known as *asynchronous unwrapping</pc> and it also ensures that the asynchronous operation inside the continuation completes before the next continuation is invoked.</target>
          </segment>
        </unit>
        <unit id="146">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="146">
            <source xml:space="preserve">In the previous example, notice that the task returns a **task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc>** even though its lambda returned an <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncInfo**[iasyncinfo]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> object. The following table summarizes the type conversions that occur between a lambda function and the enclosing task:</source>
            <target xml:space="preserve">In the previous example, notice that the task returns a **task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc>** even though its lambda returned an <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncInfo**[iasyncinfo]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> object. The following table summarizes the type conversions that occur between a lambda function and the enclosing task:</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">lambda return type</source>
            <target xml:space="preserve">lambda return type</target>
          </segment>
        </unit>
        <unit id="148">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="148">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">.then</pc> return type</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">.then</pc> return type</target>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source xml:space="preserve">TResult</source>
            <target xml:space="preserve">TResult</target>
          </segment>
        </unit>
        <unit id="150">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="150">
            <source xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></source>
            <target xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></target>
          </segment>
        </unit>
        <unit id="151">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="151">
            <source xml:space="preserve">IAsyncOperation<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc>^</source>
            <target xml:space="preserve">IAsyncOperation<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc>^</target>
          </segment>
        </unit>
        <unit id="152">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="152">
            <source xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></source>
            <target xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></target>
          </segment>
        </unit>
        <unit id="153">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="153">
            <source xml:space="preserve">IAsyncOperationWithProgress<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc>^</source>
            <target xml:space="preserve">IAsyncOperationWithProgress<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc>^</target>
          </segment>
        </unit>
        <unit id="154">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="154">
            <source xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></source>
            <target xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></target>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source xml:space="preserve">IAsyncAction^</source>
            <target xml:space="preserve">IAsyncAction^</target>
          </segment>
        </unit>
        <unit id="156">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="156">
            <source xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></source>
            <target xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></target>
          </segment>
        </unit>
        <unit id="157">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="157">
            <source xml:space="preserve">IAsyncActionWithProgress<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc>^</source>
            <target xml:space="preserve">IAsyncActionWithProgress<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc>^</target>
          </segment>
        </unit>
        <unit id="158">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="158">
            <source xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></source>
            <target xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></target>
          </segment>
        </unit>
        <unit id="159">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="159">
            <source xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></source>
            <target xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></source>
            <target xml:space="preserve">task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc></target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">Canceling tasks</source>
            <target xml:space="preserve">Canceling tasks</target>
          </segment>
        </unit>
        <unit id="162">
          <segment state="initial" id="162">
            <source xml:space="preserve">It is often a good idea to give the user the option to cancel an asynchronous operation.</source>
            <target xml:space="preserve">It is often a good idea to give the user the option to cancel an asynchronous operation.</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">And in some cases you might have to cancel an operation programmatically from outside the task chain.</source>
            <target xml:space="preserve">And in some cases you might have to cancel an operation programmatically from outside the task chain.</target>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source xml:space="preserve">Although each \<pc dataRefEnd="id2" dataRefStart="id1" id="2">*Async</pc> return type has a <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Cancel**[iasyncinfocancel]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method that it inherits from <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**IAsyncInfo**[iasyncinfo]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, it's awkward to expose it to outside methods.</source>
            <target xml:space="preserve">Although each \<pc dataRefEnd="id2" dataRefStart="id1" id="2">*Async</pc> return type has a <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Cancel**[iasyncinfocancel]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method that it inherits from <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**IAsyncInfo**[iasyncinfo]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, it's awkward to expose it to outside methods.</target>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source xml:space="preserve">The preferred way to support cancellation in a task chain is to use a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**cancellation\_token\_source**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to create a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**cancellation\_token**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and then pass the token to the constructor of the initial task.</source>
            <target xml:space="preserve">The preferred way to support cancellation in a task chain is to use a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**cancellation\_token\_source**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to create a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**cancellation\_token**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and then pass the token to the constructor of the initial task.</target>
          </segment>
        </unit>
        <unit id="166">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="166">
            <source xml:space="preserve">If an asynchronous task is created with a cancellation token, and <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**cancellation\_token\_source::cancel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is called, the task automatically calls <pc dataRefEnd="id8" dataRefStart="id7" id="4">Cancel</pc> on the <pc dataRefEnd="id10" dataRefStart="id9" id="6">IAsync\*</pc> operation and passes the cancellation request down its continuation chain.</source>
            <target xml:space="preserve">If an asynchronous task is created with a cancellation token, and <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**cancellation\_token\_source::cancel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is called, the task automatically calls <pc dataRefEnd="id8" dataRefStart="id7" id="4">Cancel</pc> on the <pc dataRefEnd="id10" dataRefStart="id9" id="6">IAsync\*</pc> operation and passes the cancellation request down its continuation chain.</target>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source xml:space="preserve">The following pseudocode demonstrates the basic approach.</source>
            <target xml:space="preserve">The following pseudocode demonstrates the basic approach.</target>
          </segment>
        </unit>
        <unit id="168">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="168">
            <source xml:space="preserve">When a task is canceled, a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_canceled**[taskcanceled]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> exception is propagated down the task chain.</source>
            <target xml:space="preserve">When a task is canceled, a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_canceled**[taskcanceled]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> exception is propagated down the task chain.</target>
          </segment>
        </unit>
        <unit id="169">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="169">
            <source xml:space="preserve">Value-based continuations will simply not execute, but task-based continuations will cause the exception to be thrown when <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::get**[taskget]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is called.</source>
            <target xml:space="preserve">Value-based continuations will simply not execute, but task-based continuations will cause the exception to be thrown when <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::get**[taskget]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is called.</target>
          </segment>
        </unit>
        <unit id="170">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="170">
            <source xml:space="preserve">If you have an error-handling continuation, make sure that it catches the <pc dataRefEnd="id2" dataRefStart="id1" id="2">task\_canceled</pc> exception explicitly.</source>
            <target xml:space="preserve">If you have an error-handling continuation, make sure that it catches the <pc dataRefEnd="id2" dataRefStart="id1" id="2">task\_canceled</pc> exception explicitly.</target>
          </segment>
        </unit>
        <unit id="171">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="171">
            <source xml:space="preserve">(This exception is not derived from <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Platform::Exception**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc></source>
            <target xml:space="preserve">(This exception is not derived from <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Platform::Exception**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc></target>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source xml:space="preserve">Cancellation is cooperative.</source>
            <target xml:space="preserve">Cancellation is cooperative.</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">If your continuation does some long-running work beyond just invoking a UWP method, then it is your responsibility to check the state of the cancellation token periodically and stop execution if it is canceled.</source>
            <target xml:space="preserve">If your continuation does some long-running work beyond just invoking a UWP method, then it is your responsibility to check the state of the cancellation token periodically and stop execution if it is canceled.</target>
          </segment>
        </unit>
        <unit id="174">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="174">
            <source xml:space="preserve">After you clean up all resources that were allocated in the continuation, call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**cancel\_current\_task**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to cancel that task and propagate the cancellation down to any value-based continuations that follow it.</source>
            <target xml:space="preserve">After you clean up all resources that were allocated in the continuation, call <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**cancel\_current\_task**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to cancel that task and propagate the cancellation down to any value-based continuations that follow it.</target>
          </segment>
        </unit>
        <unit id="175">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="175">
            <source xml:space="preserve">Here's another example: you can create a task chain that represents the result of a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**FileSavePicker**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> operation.</source>
            <target xml:space="preserve">Here's another example: you can create a task chain that represents the result of a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**FileSavePicker**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> operation.</target>
          </segment>
        </unit>
        <unit id="176">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="176">
            <source xml:space="preserve">If the user chooses the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Cancel</pc> button, the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncInfo::Cancel**[iasyncinfocancel]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method is not called.</source>
            <target xml:space="preserve">If the user chooses the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Cancel</pc> button, the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncInfo::Cancel**[iasyncinfocancel]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method is not called.</target>
          </segment>
        </unit>
        <unit id="177">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="177">
            <source xml:space="preserve">Instead, the operation succeeds but returns <pc dataRefEnd="id2" dataRefStart="id1" id="2">nullptr</pc>.</source>
            <target xml:space="preserve">Instead, the operation succeeds but returns <pc dataRefEnd="id2" dataRefStart="id1" id="2">nullptr</pc>.</target>
          </segment>
        </unit>
        <unit id="178">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="178">
            <source xml:space="preserve">The continuation can test the input parameter and call <pc dataRefEnd="id2" dataRefStart="id1" id="2">cancel\_current\_task</pc> if the input is <pc dataRefEnd="id4" dataRefStart="id3" id="4">nullptr</pc>.</source>
            <target xml:space="preserve">The continuation can test the input parameter and call <pc dataRefEnd="id2" dataRefStart="id1" id="2">cancel\_current\_task</pc> if the input is <pc dataRefEnd="id4" dataRefStart="id3" id="4">nullptr</pc>.</target>
          </segment>
        </unit>
        <unit id="179">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="179">
            <source xml:space="preserve">For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Cancellation in the PPL</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc></source>
            <target xml:space="preserve">For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Cancellation in the PPL</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc></target>
          </segment>
        </unit>
        <unit id="180">
          <segment state="initial" id="180">
            <source xml:space="preserve">Handling errors in a task chain</source>
            <target xml:space="preserve">Handling errors in a task chain</target>
          </segment>
        </unit>
        <unit id="181">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
            <data id="id5">&lt;html&gt;</data>
            <data id="id6">&lt;/html&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="181">
            <source xml:space="preserve">If you want a continuation to execute even if the antecedent was canceled or threw an exception, then make the continuation a task-based continuation by specifying the input to its lambda function as a **task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc><pc dataRefEnd="id4" dataRefStart="id3" id="3">* or *</pc>task<pc dataRefEnd="id6" dataRefStart="id5" id="5"></pc>** if the lambda of the antecedent task returns an <pc dataRefEnd="id8" dataRefStart="id7" id="7CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="7CapsExtId2">**IAsyncAction^**[iasyncaction]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="7CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">If you want a continuation to execute even if the antecedent was canceled or threw an exception, then make the continuation a task-based continuation by specifying the input to its lambda function as a **task<pc dataRefEnd="id2" dataRefStart="id1" id="2"></pc><pc dataRefEnd="id4" dataRefStart="id3" id="3">* or *</pc>task<pc dataRefEnd="id6" dataRefStart="id5" id="5"></pc>** if the lambda of the antecedent task returns an <pc dataRefEnd="id8" dataRefStart="id7" id="7CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="7CapsExtId2">**IAsyncAction^**[iasyncaction]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="7CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="182">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="182">
            <source xml:space="preserve">To handle errors and cancellation in a task chain, you don't have to make every continuation task-based or enclose every operation that might throw within a <pc dataRefEnd="id2" dataRefStart="id1" id="2">try…catch</pc> block.</source>
            <target xml:space="preserve">To handle errors and cancellation in a task chain, you don't have to make every continuation task-based or enclose every operation that might throw within a <pc dataRefEnd="id2" dataRefStart="id1" id="2">try…catch</pc> block.</target>
          </segment>
        </unit>
        <unit id="183">
          <segment state="initial" id="183">
            <source xml:space="preserve">Instead, you can add a task-based continuation at the end of the chain and handle all errors there.</source>
            <target xml:space="preserve">Instead, you can add a task-based continuation at the end of the chain and handle all errors there.</target>
          </segment>
        </unit>
        <unit id="184">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="184">
            <source xml:space="preserve">Any exception—this includes a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_canceled**[taskcanceled]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> exception—will propagate down the task chain and bypass any value-based continuations, so that you can handle it in the error-handling task-based continuation.</source>
            <target xml:space="preserve">Any exception—this includes a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_canceled**[taskcanceled]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> exception—will propagate down the task chain and bypass any value-based continuations, so that you can handle it in the error-handling task-based continuation.</target>
          </segment>
        </unit>
        <unit id="185">
          <segment state="initial" id="185">
            <source xml:space="preserve">We can rewrite the previous example to use an error-handling task-based continuation:</source>
            <target xml:space="preserve">We can rewrite the previous example to use an error-handling task-based continuation:</target>
          </segment>
        </unit>
        <unit id="186">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="186">
            <source xml:space="preserve">In a task-based continuation, we call the member function <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::get**[taskget]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to get the results of the task.</source>
            <target xml:space="preserve">In a task-based continuation, we call the member function <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::get**[taskget]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to get the results of the task.</target>
          </segment>
        </unit>
        <unit id="187">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="187">
            <source xml:space="preserve">We still have to call <pc dataRefEnd="id2" dataRefStart="id1" id="2">task::get</pc> even if the operation was an <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncAction**[iasyncaction]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> that produces no result because <pc dataRefEnd="id10" dataRefStart="id9" id="6">task::get</pc> also gets any exceptions that have been transported down to the task.</source>
            <target xml:space="preserve">We still have to call <pc dataRefEnd="id2" dataRefStart="id1" id="2">task::get</pc> even if the operation was an <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncAction**[iasyncaction]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> that produces no result because <pc dataRefEnd="id10" dataRefStart="id9" id="6">task::get</pc> also gets any exceptions that have been transported down to the task.</target>
          </segment>
        </unit>
        <unit id="188">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="188">
            <source xml:space="preserve">If the input task is storing an exception, it is thrown at the call to <pc dataRefEnd="id2" dataRefStart="id1" id="2">task::get</pc>.</source>
            <target xml:space="preserve">If the input task is storing an exception, it is thrown at the call to <pc dataRefEnd="id2" dataRefStart="id1" id="2">task::get</pc>.</target>
          </segment>
        </unit>
        <unit id="189">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="189">
            <source xml:space="preserve">If you don't call <pc dataRefEnd="id2" dataRefStart="id1" id="2">task::get</pc>, or don't use a task-based continuation at the end of the chain, or don't catch the exception type that was thrown, then an <pc dataRefEnd="id4" dataRefStart="id3" id="4">unobserved\_task\_exception</pc> is thrown when all references to the task have been deleted.</source>
            <target xml:space="preserve">If you don't call <pc dataRefEnd="id2" dataRefStart="id1" id="2">task::get</pc>, or don't use a task-based continuation at the end of the chain, or don't catch the exception type that was thrown, then an <pc dataRefEnd="id4" dataRefStart="id3" id="4">unobserved\_task\_exception</pc> is thrown when all references to the task have been deleted.</target>
          </segment>
        </unit>
        <unit id="190">
          <segment state="initial" id="190">
            <source xml:space="preserve">Only catch the exceptions that you can handle.</source>
            <target xml:space="preserve">Only catch the exceptions that you can handle.</target>
          </segment>
        </unit>
        <unit id="191">
          <segment state="initial" id="191">
            <source xml:space="preserve">If your app encounters an error that you can't recover from, it's better to let the app crash than to let it continue to run in an unknown state.</source>
            <target xml:space="preserve">If your app encounters an error that you can't recover from, it's better to let the app crash than to let it continue to run in an unknown state.</target>
          </segment>
        </unit>
        <unit id="192">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="192">
            <source xml:space="preserve">Also, in general, don't attempt to catch the <pc dataRefEnd="id2" dataRefStart="id1" id="2">unobserved\_task\_exception</pc> itself.</source>
            <target xml:space="preserve">Also, in general, don't attempt to catch the <pc dataRefEnd="id2" dataRefStart="id1" id="2">unobserved\_task\_exception</pc> itself.</target>
          </segment>
        </unit>
        <unit id="193">
          <segment state="initial" id="193">
            <source xml:space="preserve">This exception is mainly intended for diagnostic purposes.</source>
            <target xml:space="preserve">This exception is mainly intended for diagnostic purposes.</target>
          </segment>
        </unit>
        <unit id="194">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="194">
            <source xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="2">unobserved\_task\_exception</pc> is thrown, it usually indicates a bug in the code.</source>
            <target xml:space="preserve">When <pc dataRefEnd="id2" dataRefStart="id1" id="2">unobserved\_task\_exception</pc> is thrown, it usually indicates a bug in the code.</target>
          </segment>
        </unit>
        <unit id="195">
          <segment state="initial" id="195">
            <source xml:space="preserve">Often the cause is either an exception that should be handled, or an unrecoverable exception that's caused by some other error in the code.</source>
            <target xml:space="preserve">Often the cause is either an exception that should be handled, or an unrecoverable exception that's caused by some other error in the code.</target>
          </segment>
        </unit>
        <unit id="196">
          <segment state="initial" id="196">
            <source xml:space="preserve">Managing the thread context</source>
            <target xml:space="preserve">Managing the thread context</target>
          </segment>
        </unit>
        <unit id="197">
          <segment state="initial" id="197">
            <source xml:space="preserve">The UI of a UWP app runs in a single-threaded apartment (STA).</source>
            <target xml:space="preserve">The UI of a UWP app runs in a single-threaded apartment (STA).</target>
          </segment>
        </unit>
        <unit id="198">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="198">
            <source xml:space="preserve">A task whose lambda returns either an <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IAsyncAction**[iasyncaction]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncOperation**[iasyncoperation]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> is apartment-aware.</source>
            <target xml:space="preserve">A task whose lambda returns either an <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IAsyncAction**[iasyncaction]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncOperation**[iasyncoperation]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> is apartment-aware.</target>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source xml:space="preserve">If the task is created in the STA, then all of its continuations will run also run in it by default, unless you specify otherwise.</source>
            <target xml:space="preserve">If the task is created in the STA, then all of its continuations will run also run in it by default, unless you specify otherwise.</target>
          </segment>
        </unit>
        <unit id="200">
          <segment state="initial" id="200">
            <source xml:space="preserve">In other words, the entire task chain inherits apartment-awareness from the parent task.</source>
            <target xml:space="preserve">In other words, the entire task chain inherits apartment-awareness from the parent task.</target>
          </segment>
        </unit>
        <unit id="201">
          <segment state="initial" id="201">
            <source xml:space="preserve">This behavior helps simplify interactions with UI controls, which can only be accessed from the STA.</source>
            <target xml:space="preserve">This behavior helps simplify interactions with UI controls, which can only be accessed from the STA.</target>
          </segment>
        </unit>
        <unit id="202">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="202">
            <source xml:space="preserve">For example, in a UWP app, in the member function of any class that represents a XAML page, you can populate a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ListBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control from within a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method without having to use the <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Dispatcher**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> object.</source>
            <target xml:space="preserve">For example, in a UWP app, in the member function of any class that represents a XAML page, you can populate a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ListBox**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control from within a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> method without having to use the <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**Dispatcher**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> object.</target>
          </segment>
        </unit>
        <unit id="203">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="203">
            <source xml:space="preserve">If a task doesn't return an <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IAsyncAction**[iasyncaction]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncOperation**[iasyncoperation]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, then it's not apartment-aware and, by default, its continuations are run on the first available background thread.</source>
            <target xml:space="preserve">If a task doesn't return an <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IAsyncAction**[iasyncaction]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncOperation**[iasyncoperation]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, then it's not apartment-aware and, by default, its continuations are run on the first available background thread.</target>
          </segment>
        </unit>
        <unit id="204">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="204">
            <source xml:space="preserve">You can override the default thread context for either kind of task by using the overload of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that takes a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**task\_continuation\_context**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">You can override the default thread context for either kind of task by using the overload of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task::then**[taskthen]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that takes a <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**task\_continuation\_context**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="205">
          <segment state="initial" id="205">
            <source xml:space="preserve">For example, in some cases, it might be desirable to schedule the continuation of an apartment-aware task on a background thread.</source>
            <target xml:space="preserve">For example, in some cases, it might be desirable to schedule the continuation of an apartment-aware task on a background thread.</target>
          </segment>
        </unit>
        <unit id="206">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="206">
            <source xml:space="preserve">In such a case, you can pass <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_continuation\_context::use\_arbitrary**[usearbitrary]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to schedule the task’s work on the next available thread in a multi-threaded apartment.</source>
            <target xml:space="preserve">In such a case, you can pass <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_continuation\_context::use\_arbitrary**[usearbitrary]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to schedule the task’s work on the next available thread in a multi-threaded apartment.</target>
          </segment>
        </unit>
        <unit id="207">
          <segment state="initial" id="207">
            <source xml:space="preserve">This can improve the performance of the continuation because its work doesn't have to be synchronized with other work that's happening on the UI thread.</source>
            <target xml:space="preserve">This can improve the performance of the continuation because its work doesn't have to be synchronized with other work that's happening on the UI thread.</target>
          </segment>
        </unit>
        <unit id="208">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="208">
            <source xml:space="preserve">The following example demonstrates when it's useful to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_continuation\_context::use\_arbitrary**[usearbitrary]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> option, and it also shows how the default continuation context is useful for synchronizing concurrent operations on non-thread-safe collections.</source>
            <target xml:space="preserve">The following example demonstrates when it's useful to specify the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_continuation\_context::use\_arbitrary**[usearbitrary]</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> option, and it also shows how the default continuation context is useful for synchronizing concurrent operations on non-thread-safe collections.</target>
          </segment>
        </unit>
        <unit id="209">
          <segment state="initial" id="209">
            <source xml:space="preserve">In this code, we loop through a list of URLs for RSS feeds, and for each URL, we start up an async operation to retrieve the feed data.</source>
            <target xml:space="preserve">In this code, we loop through a list of URLs for RSS feeds, and for each URL, we start up an async operation to retrieve the feed data.</target>
          </segment>
        </unit>
        <unit id="210">
          <segment state="initial" id="210">
            <source xml:space="preserve">We can’t control the order in which the feeds are retrieved, and we don't really care.</source>
            <target xml:space="preserve">We can’t control the order in which the feeds are retrieved, and we don't really care.</target>
          </segment>
        </unit>
        <unit id="211">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;code&gt;</data>
            <data id="id14">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="211">
            <source xml:space="preserve">When each <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> operation completes, the first continuation accepts the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SyndicationFeed^**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> object and uses it to initialize an app-defined <pc dataRefEnd="id14" dataRefStart="id13" id="6">FeedData^</pc> object.</source>
            <target xml:space="preserve">When each <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**RetrieveFeedAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> operation completes, the first continuation accepts the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SyndicationFeed^**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> object and uses it to initialize an app-defined <pc dataRefEnd="id14" dataRefStart="id13" id="6">FeedData^</pc> object.</target>
          </segment>
        </unit>
        <unit id="212">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="212">
            <source xml:space="preserve">Because each of these operations is independent from the others, we can potentially speed things up by specifying the <pc dataRefEnd="id2" dataRefStart="id1" id="2">task\_continuation\_context::use\_arbitrary</pc> continuation context.</source>
            <target xml:space="preserve">Because each of these operations is independent from the others, we can potentially speed things up by specifying the <pc dataRefEnd="id2" dataRefStart="id1" id="2">task\_continuation\_context::use\_arbitrary</pc> continuation context.</target>
          </segment>
        </unit>
        <unit id="213">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="213">
            <source xml:space="preserve">However, after each <pc dataRefEnd="id2" dataRefStart="id1" id="2">FeedData</pc> object is initialized, we have to add it to a <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Vector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, which is not a thread-safe collection.</source>
            <target xml:space="preserve">However, after each <pc dataRefEnd="id2" dataRefStart="id1" id="2">FeedData</pc> object is initialized, we have to add it to a <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Vector**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, which is not a thread-safe collection.</target>
          </segment>
        </unit>
        <unit id="214">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="214">
            <source xml:space="preserve">Therefore, we create a continuation and specify <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_continuation\_context::use\_current**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to ensure that all the calls to <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Append**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> occur in the same Application Single-Threaded Apartment (ASTA) context.</source>
            <target xml:space="preserve">Therefore, we create a continuation and specify <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_continuation\_context::use\_current**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> to ensure that all the calls to <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Append**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> occur in the same Application Single-Threaded Apartment (ASTA) context.</target>
          </segment>
        </unit>
        <unit id="215">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="215">
            <source xml:space="preserve">Because <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_continuation\_context::use\_default**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is the default context, we don’t have to specify it explicitly, but we do so here for the sake of clarity.</source>
            <target xml:space="preserve">Because <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**task\_continuation\_context::use\_default**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> is the default context, we don’t have to specify it explicitly, but we do so here for the sake of clarity.</target>
          </segment>
        </unit>
        <unit id="216">
          <segment state="initial" id="216">
            <source xml:space="preserve">Nested tasks, which are new tasks that are created inside a continuation, don't inherit apartment-awareness of the initial task.</source>
            <target xml:space="preserve">Nested tasks, which are new tasks that are created inside a continuation, don't inherit apartment-awareness of the initial task.</target>
          </segment>
        </unit>
        <unit id="217">
          <segment state="initial" id="217">
            <source xml:space="preserve">Handing progress updates</source>
            <target xml:space="preserve">Handing progress updates</target>
          </segment>
        </unit>
        <unit id="218">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="218">
            <source xml:space="preserve">Methods that support <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IAsyncOperationWithProgress**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncActionWithProgress**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> provide progress updates periodically while the operation is in progress, before it completes.</source>
            <target xml:space="preserve">Methods that support <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IAsyncOperationWithProgress**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**IAsyncActionWithProgress**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> provide progress updates periodically while the operation is in progress, before it completes.</target>
          </segment>
        </unit>
        <unit id="219">
          <segment state="initial" id="219">
            <source xml:space="preserve">Progress reporting is independent from the notion of tasks and continuations.</source>
            <target xml:space="preserve">Progress reporting is independent from the notion of tasks and continuations.</target>
          </segment>
        </unit>
        <unit id="220">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="220">
            <source xml:space="preserve">You just supply the delegate for the object’s <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Progress**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property.</source>
            <target xml:space="preserve">You just supply the delegate for the object’s <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Progress**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property.</target>
          </segment>
        </unit>
        <unit id="221">
          <segment state="initial" id="221">
            <source xml:space="preserve">A typical use of the delegate is to update a progress bar in the UI.</source>
            <target xml:space="preserve">A typical use of the delegate is to update a progress bar in the UI.</target>
          </segment>
        </unit>
        <unit id="222">
          <segment state="initial" id="222">
            <source xml:space="preserve">Related topics</source>
            <target xml:space="preserve">Related topics</target>
          </segment>
        </unit>
        <unit id="223">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="223">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Creating Asynchronous Operations in C++ for Windows Store apps[createasynccpp]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Creating Asynchronous Operations in C++ for Windows Store apps[createasynccpp]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="224">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="224">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Visual C++ Language Reference</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Visual C++ Language Reference</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="225">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="225">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Asynchronous Programming[asyncprogramming]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Asynchronous Programming[asyncprogramming]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="226">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="226">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Task Parallelism (Concurrency Runtime)[taskparallelism]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Task Parallelism (Concurrency Runtime)[taskparallelism]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="227">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="227">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">task class[task-class]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">task class[task-class]</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>