<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">e7a9ccda1b74e57d810adbecc46585098b594f7a</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Windows Phone Silverlight to UWP case study: Bookstore2</source>
            <target xml:space="preserve">Windows Phone Silverlight to UWP case study: Bookstore2</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="104">
            <source xml:space="preserve">This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>—begins with a Windows Phone Silverlight app that displays grouped data in a <pc dataRefEnd="id8" dataRefStart="id7" id="4">LongListSelector</pc>.</source>
            <target xml:space="preserve">This case study—which builds on the info given in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>—begins with a Windows Phone Silverlight app that displays grouped data in a <pc dataRefEnd="id8" dataRefStart="id7" id="4">LongListSelector</pc>.</target>
          </segment>
        </unit>
        <unit id="105">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="105">
            <source xml:space="preserve">In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="2">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">LongListSelector</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</source>
            <target xml:space="preserve">In the view model, each instance of the class <pc dataRefEnd="id2" dataRefStart="id1" id="2">Author</pc> represents the group of the books written by that author, and in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">LongListSelector</pc>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">The jump list affords much quicker navigation than scrolling through the list of books.</source>
            <target xml:space="preserve">The jump list affords much quicker navigation than scrolling through the list of books.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">We walk through the steps of porting the app to a Windows 10 Universal Windows Platform (UWP) app.</source>
            <target xml:space="preserve">We walk through the steps of porting the app to a Windows 10 Universal Windows Platform (UWP) app.</target>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When opening Bookstore2Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">TargetPlatformVersion</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When opening Bookstore2Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">TargetPlatformVersion</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Downloads</source>
            <target xml:space="preserve">Downloads</target>
          </segment>
        </unit>
        <unit id="110">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="110">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore2WPSL8 Windows Phone Silverlight app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore2WPSL8 Windows Phone Silverlight app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore2Universal\_10 Windows 10 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore2Universal\_10 Windows 10 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">The Windows Phone Silverlight app</source>
            <target xml:space="preserve">The Windows Phone Silverlight app</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">The illustration below shows what Bookstore2WPSL8—the app that we're going to port—looks like.</source>
            <target xml:space="preserve">The illustration below shows what Bookstore2WPSL8—the app that we're going to port—looks like.</target>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source xml:space="preserve">It's a vertically-scrolling <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector</pc> of books grouped by author.</source>
            <target xml:space="preserve">It's a vertically-scrolling <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector</pc> of books grouped by author.</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">You can zoom out to the jump list, and from there, you can navigate back into any group.</source>
            <target xml:space="preserve">You can zoom out to the jump list, and from there, you can navigate back into any group.</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">There are two main pieces to this app: the view model that provides the grouped data source, and the user interface that binds to that view model.</source>
            <target xml:space="preserve">There are two main pieces to this app: the view model that provides the grouped data source, and the user interface that binds to that view model.</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">As we'll see, both of these pieces port easily from Windows Phone Silverlight technology to the Universal Windows Platform (UWP).</source>
            <target xml:space="preserve">As we'll see, both of these pieces port easily from Windows Phone Silverlight technology to the Universal Windows Platform (UWP).</target>
          </segment>
        </unit>
        <unit id="118">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="118">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">how bookstore2wpsl8 looks</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">how bookstore2wpsl8 looks</pc>
						</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">Porting to a Windows 10 project</source>
            <target xml:space="preserve">Porting to a Windows 10 project</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">It's a quick task to create a new project in Visual Studio, copy files over to it from Bookstore2WPSL8, and include the copied files in the new project.</source>
            <target xml:space="preserve">It's a quick task to create a new project in Visual Studio, copy files over to it from Bookstore2WPSL8, and include the copied files in the new project.</target>
          </segment>
        </unit>
        <unit id="121">
          <segment state="initial" id="121">
            <source xml:space="preserve">Start by creating a new Blank Application (Windows Universal) project.</source>
            <target xml:space="preserve">Start by creating a new Blank Application (Windows Universal) project.</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">Name it Bookstore2Universal\_10.</source>
            <target xml:space="preserve">Name it Bookstore2Universal\_10.</target>
          </segment>
        </unit>
        <unit id="123">
          <segment state="initial" id="123">
            <source xml:space="preserve">These are the files to copy over from Bookstore2WPSL8 to Bookstore2Universal\_10.</source>
            <target xml:space="preserve">These are the files to copy over from Bookstore2WPSL8 to Bookstore2Universal\_10.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</source>
            <target xml:space="preserve">Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</target>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source xml:space="preserve">After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="4">Show All Files</pc> is toggled on.</source>
            <target xml:space="preserve">After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="4">Show All Files</pc> is toggled on.</target>
          </segment>
        </unit>
        <unit id="126">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="126">
            <source xml:space="preserve">Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Include In Project</pc>.</source>
            <target xml:space="preserve">Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Include In Project</pc>.</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">That command is what we mean by "including" files or folders in a project.</source>
            <target xml:space="preserve">That command is what we mean by "including" files or folders in a project.</target>
          </segment>
        </unit>
        <unit id="128">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="128">
            <source xml:space="preserve">Each time you copy a file or folder, click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="4">Solution Explorer</pc> and then include the file or folder in the project.</source>
            <target xml:space="preserve">Each time you copy a file or folder, click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="4">Solution Explorer</pc> and then include the file or folder in the project.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">There's no need to do this for files that you're replacing in the destination.</source>
            <target xml:space="preserve">There's no need to do this for files that you're replacing in the destination.</target>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source xml:space="preserve">Copy the folder containing the view model source file (the folder is \\ViewModel).</source>
            <target xml:space="preserve">Copy the folder containing the view model source file (the folder is \\ViewModel).</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">Copy MainPage.xaml and replace the file in the destination.</source>
            <target xml:space="preserve">Copy MainPage.xaml and replace the file in the destination.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">We can keep the App.xaml, and App.xaml.cs that Visual Studio generated for us in the Windows 10 project.</source>
            <target xml:space="preserve">We can keep the App.xaml, and App.xaml.cs that Visual Studio generated for us in the Windows 10 project.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">Edit the source code and markup files that you just copied and change any references to the Bookstore2WPSL8 namespace to Bookstore2Universal\_10.</source>
            <target xml:space="preserve">Edit the source code and markup files that you just copied and change any references to the Bookstore2WPSL8 namespace to Bookstore2Universal\_10.</target>
          </segment>
        </unit>
        <unit id="134">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="134">
            <source xml:space="preserve">A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Replace In Files</pc> feature.</source>
            <target xml:space="preserve">A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Replace In Files</pc> feature.</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">In the imperative code in the view model source file, these porting changes are needed.</source>
            <target xml:space="preserve">In the imperative code in the view model source file, these porting changes are needed.</target>
          </segment>
        </unit>
        <unit id="136">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="136">
            <source xml:space="preserve">Change <pc dataRefEnd="id2" dataRefStart="id1" id="2">System.ComponentModel.DesignerProperties</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">DesignMode</pc> and then use the <pc dataRefEnd="id6" dataRefStart="id5" id="6">Resolve</pc> command on it.</source>
            <target xml:space="preserve">Change <pc dataRefEnd="id2" dataRefStart="id1" id="2">System.ComponentModel.DesignerProperties</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">DesignMode</pc> and then use the <pc dataRefEnd="id6" dataRefStart="id5" id="6">Resolve</pc> command on it.</target>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source xml:space="preserve">Delete the <pc dataRefEnd="id2" dataRefStart="id1" id="2">IsInDesignTool</pc> property and use IntelliSense to add the correct property name: <pc dataRefEnd="id4" dataRefStart="id3" id="4">DesignModeEnabled</pc>.</source>
            <target xml:space="preserve">Delete the <pc dataRefEnd="id2" dataRefStart="id1" id="2">IsInDesignTool</pc> property and use IntelliSense to add the correct property name: <pc dataRefEnd="id4" dataRefStart="id3" id="4">DesignModeEnabled</pc>.</target>
          </segment>
        </unit>
        <unit id="138">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="138">
            <source xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Resolve</pc> command on <pc dataRefEnd="id4" dataRefStart="id3" id="4">ImageSource</pc>.</source>
            <target xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Resolve</pc> command on <pc dataRefEnd="id4" dataRefStart="id3" id="4">ImageSource</pc>.</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Resolve</pc> command on <pc dataRefEnd="id4" dataRefStart="id3" id="4">BitmapImage</pc>.</source>
            <target xml:space="preserve">Use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Resolve</pc> command on <pc dataRefEnd="id4" dataRefStart="id3" id="4">BitmapImage</pc>.</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">Delete <pc dataRefEnd="id2" dataRefStart="id1" id="2">using System.Windows.Media;</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">using System.Windows.Media.Imaging;</pc>.</source>
            <target xml:space="preserve">Delete <pc dataRefEnd="id2" dataRefStart="id1" id="2">using System.Windows.Media;</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">using System.Windows.Media.Imaging;</pc>.</target>
          </segment>
        </unit>
        <unit id="141">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="141">
            <source xml:space="preserve">Change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Bookstore2Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE2WPSL8" to "BOOKSTORE2UNIVERSAL".</source>
            <target xml:space="preserve">Change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Bookstore2Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE2WPSL8" to "BOOKSTORE2UNIVERSAL".</target>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;link&gt;</data>
            <data id="id10">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source xml:space="preserve">Just as we did for <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, update the implementation of the <pc dataRefEnd="id8" dataRefStart="id7" id="4">BookSku.CoverImage</pc> property (see <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">Binding an Image to a view model</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Just as we did for <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, update the implementation of the <pc dataRefEnd="id8" dataRefStart="id7" id="4">BookSku.CoverImage</pc> property (see <pc dataRefEnd="id10" dataRefStart="id9" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">Binding an Image to a view model</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source xml:space="preserve">In MainPage.xaml, these initial porting changes are needed.</source>
            <target xml:space="preserve">In MainPage.xaml, these initial porting changes are needed.</target>
          </segment>
        </unit>
        <unit id="144">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="144">
            <source xml:space="preserve">Change <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone:PhoneApplicationPage</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Page</pc> (including the occurrences in property element syntax).</source>
            <target xml:space="preserve">Change <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone:PhoneApplicationPage</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Page</pc> (including the occurrences in property element syntax).</target>
          </segment>
        </unit>
        <unit id="145">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="145">
            <source xml:space="preserve">Delete the <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">shell</pc> namespace prefix declarations.</source>
            <target xml:space="preserve">Delete the <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">shell</pc> namespace prefix declarations.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">Change "clr-namespace" to "using" in the remaining namespace prefix declaration.</source>
            <target xml:space="preserve">Change "clr-namespace" to "using" in the remaining namespace prefix declaration.</target>
          </segment>
        </unit>
        <unit id="147">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="147">
            <source xml:space="preserve">Delete <pc dataRefEnd="id2" dataRefStart="id1" id="2">SupportedOrientations="Portrait"</pc>, and <pc dataRefEnd="id4" dataRefStart="id3" id="4">Orientation="Portrait"</pc>, and configure <pc dataRefEnd="id6" dataRefStart="id5" id="6">Portrait</pc> in the app package manifest in the new project.</source>
            <target xml:space="preserve">Delete <pc dataRefEnd="id2" dataRefStart="id1" id="2">SupportedOrientations="Portrait"</pc>, and <pc dataRefEnd="id4" dataRefStart="id3" id="4">Orientation="Portrait"</pc>, and configure <pc dataRefEnd="id6" dataRefStart="id5" id="6">Portrait</pc> in the app package manifest in the new project.</target>
          </segment>
        </unit>
        <unit id="148">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="148">
            <source xml:space="preserve">Delete <pc dataRefEnd="id2" dataRefStart="id1" id="2">shell:SystemTray.IsVisible="True"</pc>.</source>
            <target xml:space="preserve">Delete <pc dataRefEnd="id2" dataRefStart="id1" id="2">shell:SystemTray.IsVisible="True"</pc>.</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">The types of the jump list item converters (which are present in the markup as resources) have moved to the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Windows.UI.Xaml.Controls.Primitives**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> namespace.</source>
            <target xml:space="preserve">The types of the jump list item converters (which are present in the markup as resources) have moved to the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Windows.UI.Xaml.Controls.Primitives**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> namespace.</target>
          </segment>
        </unit>
        <unit id="150">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="150">
            <source xml:space="preserve">So, add the namespace prefix declaration Windows\_UI\_Xaml\_Controls\_Primitives and map it to <pc dataRefEnd="id2" dataRefStart="id1" id="2">Windows.UI.Xaml.Controls.Primitives</pc>.</source>
            <target xml:space="preserve">So, add the namespace prefix declaration Windows\_UI\_Xaml\_Controls\_Primitives and map it to <pc dataRefEnd="id2" dataRefStart="id1" id="2">Windows.UI.Xaml.Controls.Primitives</pc>.</target>
          </segment>
        </unit>
        <unit id="151">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="151">
            <source xml:space="preserve">On the jump list item converter resources, change the prefix from <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone:</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Windows_UI_Xaml_Controls_Primitives:</pc>.</source>
            <target xml:space="preserve">On the jump list item converter resources, change the prefix from <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone:</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Windows_UI_Xaml_Controls_Primitives:</pc>.</target>
          </segment>
        </unit>
        <unit id="152">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
            <data id="id11">&lt;code&gt;</data>
            <data id="id12">&lt;/code&gt;</data>
            <data id="id13">&lt;code&gt;</data>
            <data id="id14">&lt;/code&gt;</data>
            <data id="id15">&lt;code&gt;</data>
            <data id="id16">&lt;/code&gt;</data>
            <data id="id17">&lt;code&gt;</data>
            <data id="id18">&lt;/code&gt;</data>
            <data id="id19">&lt;code&gt;</data>
            <data id="id20">&lt;/code&gt;</data>
            <data id="id21">&lt;code&gt;</data>
            <data id="id22">&lt;/code&gt;</data>
            <data id="id23">&lt;code&gt;</data>
            <data id="id24">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="152">
            <source xml:space="preserve">Just as we did for <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, replace all references to the <pc dataRefEnd="id8" dataRefStart="id7" id="4">PhoneTextExtraLargeStyle</pc> <pc dataRefEnd="id10" dataRefStart="id9" id="6">TextBlock</pc> style with a reference to <pc dataRefEnd="id12" dataRefStart="id11" id="8">SubtitleTextBlockStyle</pc>, replace <pc dataRefEnd="id14" dataRefStart="id13" id="10">PhoneTextSubtleStyle</pc> with <pc dataRefEnd="id16" dataRefStart="id15" id="12">SubtitleTextBlockStyle</pc>, replace <pc dataRefEnd="id18" dataRefStart="id17" id="14">PhoneTextNormalStyle</pc> with <pc dataRefEnd="id20" dataRefStart="id19" id="16">CaptionTextBlockStyle</pc>, and replace <pc dataRefEnd="id22" dataRefStart="id21" id="18">PhoneTextTitle1Style</pc> with <pc dataRefEnd="id24" dataRefStart="id23" id="20">HeaderTextBlockStyle</pc>.</source>
            <target xml:space="preserve">Just as we did for <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, replace all references to the <pc dataRefEnd="id8" dataRefStart="id7" id="4">PhoneTextExtraLargeStyle</pc> <pc dataRefEnd="id10" dataRefStart="id9" id="6">TextBlock</pc> style with a reference to <pc dataRefEnd="id12" dataRefStart="id11" id="8">SubtitleTextBlockStyle</pc>, replace <pc dataRefEnd="id14" dataRefStart="id13" id="10">PhoneTextSubtleStyle</pc> with <pc dataRefEnd="id16" dataRefStart="id15" id="12">SubtitleTextBlockStyle</pc>, replace <pc dataRefEnd="id18" dataRefStart="id17" id="14">PhoneTextNormalStyle</pc> with <pc dataRefEnd="id20" dataRefStart="id19" id="16">CaptionTextBlockStyle</pc>, and replace <pc dataRefEnd="id22" dataRefStart="id21" id="18">PhoneTextTitle1Style</pc> with <pc dataRefEnd="id24" dataRefStart="id23" id="20">HeaderTextBlockStyle</pc>.</target>
          </segment>
        </unit>
        <unit id="153">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="153">
            <source xml:space="preserve">There is one exception in <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc>.</source>
            <target xml:space="preserve">There is one exception in <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc>.</target>
          </segment>
        </unit>
        <unit id="154">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="154">
            <source xml:space="preserve">The style of the second <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> should reference <pc dataRefEnd="id4" dataRefStart="id3" id="4">CaptionTextBlockStyle</pc>.</source>
            <target xml:space="preserve">The style of the second <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> should reference <pc dataRefEnd="id4" dataRefStart="id3" id="4">CaptionTextBlockStyle</pc>.</target>
          </segment>
        </unit>
        <unit id="155">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
            <data id="id9">&lt;code&gt;</data>
            <data id="id10">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="155">
            <source xml:space="preserve">Remove the FontFamily attribute from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> inside <pc dataRefEnd="id4" dataRefStart="id3" id="4">AuthorGroupHeaderTemplate</pc> and set the Background of the <pc dataRefEnd="id6" dataRefStart="id5" id="6">Border</pc> to reference <pc dataRefEnd="id8" dataRefStart="id7" id="8">SystemControlBackgroundAccentBrush</pc> instead of <pc dataRefEnd="id10" dataRefStart="id9" id="10">PhoneAccentBrush</pc>.</source>
            <target xml:space="preserve">Remove the FontFamily attribute from the <pc dataRefEnd="id2" dataRefStart="id1" id="2">TextBlock</pc> inside <pc dataRefEnd="id4" dataRefStart="id3" id="4">AuthorGroupHeaderTemplate</pc> and set the Background of the <pc dataRefEnd="id6" dataRefStart="id5" id="6">Border</pc> to reference <pc dataRefEnd="id8" dataRefStart="id7" id="8">SystemControlBackgroundAccentBrush</pc> instead of <pc dataRefEnd="id10" dataRefStart="id9" id="10">PhoneAccentBrush</pc>.</target>
          </segment>
        </unit>
        <unit id="156">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="156">
            <source xml:space="preserve">Because of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">changes related to view pixels</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, go through the markup and multiply any fixed size dimension (margins, width, height, etc) by 0.8.</source>
            <target xml:space="preserve">Because of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">changes related to view pixels</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, go through the markup and multiply any fixed size dimension (margins, width, height, etc) by 0.8.</target>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source xml:space="preserve">Replacing the LongListSelector</source>
            <target xml:space="preserve">Replacing the LongListSelector</target>
          </segment>
        </unit>
        <unit id="158">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
            <data id="id11">&lt;strong&gt;</data>
            <data id="id12">&lt;/strong&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id25">&lt;link&gt;</data>
            <data id="id26">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id31">&lt;strong&gt;</data>
            <data id="id32">&lt;/strong&gt;</data>
            <data id="id33">&lt;code&gt;</data>
            <data id="id34">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="158">
            <source xml:space="preserve">Replacing the <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector</pc> with a <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control will take several steps, so let's make a start on that. A <pc dataRefEnd="id10" dataRefStart="id9" id="6">LongListSelector</pc> binds directly to the grouped data source, but a <pc dataRefEnd="id12" dataRefStart="id11" id="8">SemanticZoom</pc> contains <pc dataRefEnd="id14" dataRefStart="id13" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc> or <pc dataRefEnd="id20" dataRefStart="id19" id="12CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="12CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="12CapsExtId3"></pc></pc> controls, which bind indirectly to the data via a <pc dataRefEnd="id26" dataRefStart="id25" id="14CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="14CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="14CapsExtId3"></pc></pc> adapter. The <pc dataRefEnd="id32" dataRefStart="id31" id="16">CollectionViewSource</pc> needs to be present in the markup as a resource, so let's begin by adding that to the markup in MainPage.xaml inside <pc dataRefEnd="id34" dataRefStart="id33" id="18">&lt;Page.Resources&gt;</pc>.</source>
            <target xml:space="preserve">Replacing the <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector</pc> with a <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> control will take several steps, so let's make a start on that. A <pc dataRefEnd="id10" dataRefStart="id9" id="6">LongListSelector</pc> binds directly to the grouped data source, but a <pc dataRefEnd="id12" dataRefStart="id11" id="8">SemanticZoom</pc> contains <pc dataRefEnd="id14" dataRefStart="id13" id="10CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="10CapsExtId2">**ListView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="10CapsExtId3"></pc></pc> or <pc dataRefEnd="id20" dataRefStart="id19" id="12CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="12CapsExtId2">**GridView**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="12CapsExtId3"></pc></pc> controls, which bind indirectly to the data via a <pc dataRefEnd="id26" dataRefStart="id25" id="14CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="14CapsExtId2">**CollectionViewSource**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="14CapsExtId3"></pc></pc> adapter. The <pc dataRefEnd="id32" dataRefStart="id31" id="16">CollectionViewSource</pc> needs to be present in the markup as a resource, so let's begin by adding that to the markup in MainPage.xaml inside <pc dataRefEnd="id34" dataRefStart="id33" id="18">&lt;Page.Resources&gt;</pc>.</target>
          </segment>
        </unit>
        <unit id="159">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="159">
            <source xml:space="preserve">Note that the binding on <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector.ItemsSource</pc> becomes the value of <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionViewSource.Source</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">LongListSelector.IsGroupingEnabled</pc> becomes <pc dataRefEnd="id8" dataRefStart="id7" id="8">CollectionViewSource.IsSourceGrouped</pc>.</source>
            <target xml:space="preserve">Note that the binding on <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector.ItemsSource</pc> becomes the value of <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionViewSource.Source</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">LongListSelector.IsGroupingEnabled</pc> becomes <pc dataRefEnd="id8" dataRefStart="id7" id="8">CollectionViewSource.IsSourceGrouped</pc>.</target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc> has a name (note: not a key, as you might expect) so that we can bind to it.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc> has a name (note: not a key, as you might expect) so that we can bind to it.</target>
          </segment>
        </unit>
        <unit id="161">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="161">
            <source xml:space="preserve">Next, replace the <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone:LongListSelector</pc> with this markup, which will give us a preliminary <pc dataRefEnd="id4" dataRefStart="id3" id="4">SemanticZoom</pc> to work with.</source>
            <target xml:space="preserve">Next, replace the <pc dataRefEnd="id2" dataRefStart="id1" id="2">phone:LongListSelector</pc> with this markup, which will give us a preliminary <pc dataRefEnd="id4" dataRefStart="id3" id="4">SemanticZoom</pc> to work with.</target>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector</pc> notion of flat list and jump list modes is answered in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">SemanticZoom</pc> notion of a zoomed-in and a zoomed-out view, respectively.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector</pc> notion of flat list and jump list modes is answered in the <pc dataRefEnd="id4" dataRefStart="id3" id="4">SemanticZoom</pc> notion of a zoomed-in and a zoomed-out view, respectively.</target>
          </segment>
        </unit>
        <unit id="163">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="163">
            <source xml:space="preserve">The zoomed-in view is a property, and you set that property to an instance of a <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListView</pc>.</source>
            <target xml:space="preserve">The zoomed-in view is a property, and you set that property to an instance of a <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListView</pc>.</target>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source xml:space="preserve">In this case, the zoomed-out view is also set to a <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListView</pc>, and both <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListView</pc> controls are bound to our <pc dataRefEnd="id6" dataRefStart="id5" id="6">CollectionViewSource</pc>.</source>
            <target xml:space="preserve">In this case, the zoomed-out view is also set to a <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListView</pc>, and both <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListView</pc> controls are bound to our <pc dataRefEnd="id6" dataRefStart="id5" id="6">CollectionViewSource</pc>.</target>
          </segment>
        </unit>
        <unit id="165">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="165">
            <source xml:space="preserve">The zoomed-in view uses the same item template, group header template, and <pc dataRefEnd="id2" dataRefStart="id1" id="2">HideEmptyGroups</pc> setting (now named <pc dataRefEnd="id4" dataRefStart="id3" id="4">HidesIfEmpty</pc>) as the <pc dataRefEnd="id6" dataRefStart="id5" id="6">LongListSelector</pc>'s flat list does.</source>
            <target xml:space="preserve">The zoomed-in view uses the same item template, group header template, and <pc dataRefEnd="id2" dataRefStart="id1" id="2">HideEmptyGroups</pc> setting (now named <pc dataRefEnd="id4" dataRefStart="id3" id="4">HidesIfEmpty</pc>) as the <pc dataRefEnd="id6" dataRefStart="id5" id="6">LongListSelector</pc>'s flat list does.</target>
          </segment>
        </unit>
        <unit id="166">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="166">
            <source xml:space="preserve">And the zoomed-out view uses an item template very much like the one inside the <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector</pc>'s jump list style (<pc dataRefEnd="id4" dataRefStart="id3" id="4">AuthorNameJumpListStyle</pc>).</source>
            <target xml:space="preserve">And the zoomed-out view uses an item template very much like the one inside the <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector</pc>'s jump list style (<pc dataRefEnd="id4" dataRefStart="id3" id="4">AuthorNameJumpListStyle</pc>).</target>
          </segment>
        </unit>
        <unit id="167">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="167">
            <source xml:space="preserve">Also, note that the zoomed-out view binds to a special property of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc> named <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionGroups</pc>, which is a collection containing the groups rather than the items.</source>
            <target xml:space="preserve">Also, note that the zoomed-out view binds to a special property of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc> named <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionGroups</pc>, which is a collection containing the groups rather than the items.</target>
          </segment>
        </unit>
        <unit id="168">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="168">
            <source xml:space="preserve">We no longer need <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorNameJumpListStyle</pc>, at least not all of it.</source>
            <target xml:space="preserve">We no longer need <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorNameJumpListStyle</pc>, at least not all of it.</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">We only need the data template for the groups (which are authors in this app) in the zoomed-out view.</source>
            <target xml:space="preserve">We only need the data template for the groups (which are authors in this app) in the zoomed-out view.</target>
          </segment>
        </unit>
        <unit id="170">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="170">
            <source xml:space="preserve">So, we delete the <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorNameJumpListStyle</pc> style and replace it with this data template.</source>
            <target xml:space="preserve">So, we delete the <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorNameJumpListStyle</pc> style and replace it with this data template.</target>
          </segment>
        </unit>
        <unit id="171">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="171">
            <source xml:space="preserve">Note that, since the data context of this data template is a group rather than an item, we bind to a special property named <pc dataRefEnd="id2" dataRefStart="id1" id="2">Group</pc>.</source>
            <target xml:space="preserve">Note that, since the data context of this data template is a group rather than an item, we bind to a special property named <pc dataRefEnd="id2" dataRefStart="id1" id="2">Group</pc>.</target>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source xml:space="preserve">You can build and run the app now.</source>
            <target xml:space="preserve">You can build and run the app now.</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">Here's how it looks on the mobile emulator.</source>
            <target xml:space="preserve">Here's how it looks on the mobile emulator.</target>
          </segment>
        </unit>
        <unit id="174">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="174">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the uwp app on mobile with initial source code changes</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the uwp app on mobile with initial source code changes</pc>
						</target>
          </segment>
        </unit>
        <unit id="175">
          <segment state="initial" id="175">
            <source xml:space="preserve">The view model and the zoomed-in and zoomed-out views are working together correctly, although one issue is that we need to do a little more styling and templating work.</source>
            <target xml:space="preserve">The view model and the zoomed-in and zoomed-out views are working together correctly, although one issue is that we need to do a little more styling and templating work.</target>
          </segment>
        </unit>
        <unit id="176">
          <segment state="initial" id="176">
            <source xml:space="preserve">For example, the correct styles and brushes are not yet being used, so the text is invisible on the group headers that you can click to zoom out.</source>
            <target xml:space="preserve">For example, the correct styles and brushes are not yet being used, so the text is invisible on the group headers that you can click to zoom out.</target>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source xml:space="preserve">If you run the app on a desktop device, then you'll see a second issue, which is that the app doesn't yet adapt its user-interface to give the best experience and use of space on larger devices where windows can be potentially much larger than the screen of a mobile device.</source>
            <target xml:space="preserve">If you run the app on a desktop device, then you'll see a second issue, which is that the app doesn't yet adapt its user-interface to give the best experience and use of space on larger devices where windows can be potentially much larger than the screen of a mobile device.</target>
          </segment>
        </unit>
        <unit id="178">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="178">
            <source xml:space="preserve">So, in the next few sections (<pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Initial styling and templating</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">Adaptive UI</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">Final styling</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, we'll remedy those issues.</source>
            <target xml:space="preserve">So, in the next few sections (<pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Initial styling and templating</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">Adaptive UI</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">Final styling</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, we'll remedy those issues.</target>
          </segment>
        </unit>
        <unit id="179">
          <segment state="initial" id="179">
            <source xml:space="preserve">Initial styling and templating</source>
            <target xml:space="preserve">Initial styling and templating</target>
          </segment>
        </unit>
        <unit id="180">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="180">
            <source xml:space="preserve">To space out the group headers nicely, edit <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplate</pc> and set a <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin</pc> of <pc dataRefEnd="id6" dataRefStart="id5" id="6">"0,0,0,9.6"</pc> on the <pc dataRefEnd="id8" dataRefStart="id7" id="8">Border</pc>.</source>
            <target xml:space="preserve">To space out the group headers nicely, edit <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplate</pc> and set a <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin</pc> of <pc dataRefEnd="id6" dataRefStart="id5" id="6">"0,0,0,9.6"</pc> on the <pc dataRefEnd="id8" dataRefStart="id7" id="8">Border</pc>.</target>
          </segment>
        </unit>
        <unit id="181">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="181">
            <source xml:space="preserve">To space out the book items nicely, Edit <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc> and set the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin</pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="6">"9.6,0"</pc> on both <pc dataRefEnd="id8" dataRefStart="id7" id="8">TextBlock</pc>s.</source>
            <target xml:space="preserve">To space out the book items nicely, Edit <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc> and set the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin</pc> to <pc dataRefEnd="id6" dataRefStart="id5" id="6">"9.6,0"</pc> on both <pc dataRefEnd="id8" dataRefStart="id7" id="8">TextBlock</pc>s.</target>
          </segment>
        </unit>
        <unit id="182">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="182">
            <source xml:space="preserve">To lay out the app name and the page title a little better, inside <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitlePanel</pc>, remove the top <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin</pc> on the second <pc dataRefEnd="id6" dataRefStart="id5" id="6">TextBlock</pc> by setting the value to <pc dataRefEnd="id8" dataRefStart="id7" id="8">"7.2,0,0,0"</pc>.</source>
            <target xml:space="preserve">To lay out the app name and the page title a little better, inside <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitlePanel</pc>, remove the top <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin</pc> on the second <pc dataRefEnd="id6" dataRefStart="id5" id="6">TextBlock</pc> by setting the value to <pc dataRefEnd="id8" dataRefStart="id7" id="8">"7.2,0,0,0"</pc>.</target>
          </segment>
        </unit>
        <unit id="183">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="183">
            <source xml:space="preserve">And on <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitlePanel</pc> itself, set the margin to <pc dataRefEnd="id4" dataRefStart="id3" id="4">0</pc> (or whatever value looks good to you)</source>
            <target xml:space="preserve">And on <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitlePanel</pc> itself, set the margin to <pc dataRefEnd="id4" dataRefStart="id3" id="4">0</pc> (or whatever value looks good to you)</target>
          </segment>
        </unit>
        <unit id="184">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="184">
            <source xml:space="preserve">Change <pc dataRefEnd="id2" dataRefStart="id1" id="2">LayoutRoot</pc>'s Background to <pc dataRefEnd="id4" dataRefStart="id3" id="4">"{ThemeResource ApplicationPageBackgroundThemeBrush}"</pc>.</source>
            <target xml:space="preserve">Change <pc dataRefEnd="id2" dataRefStart="id1" id="2">LayoutRoot</pc>'s Background to <pc dataRefEnd="id4" dataRefStart="id3" id="4">"{ThemeResource ApplicationPageBackgroundThemeBrush}"</pc>.</target>
          </segment>
        </unit>
        <unit id="185">
          <segment state="initial" id="185">
            <source xml:space="preserve">Adaptive UI</source>
            <target xml:space="preserve">Adaptive UI</target>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source xml:space="preserve">Because we started out with a phone app, it's no surprise that our ported app's UI layout really only makes sense for small devices and narrow windows at this stage in the process.</source>
            <target xml:space="preserve">Because we started out with a phone app, it's no surprise that our ported app's UI layout really only makes sense for small devices and narrow windows at this stage in the process.</target>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source xml:space="preserve">But, we'd really like the UI layout to adapt itself and make better use of space when the app is running in a wide window (which is only possible on a device with a large screen), and for it only to use the UI that we have currently when the app's window is narrow (which happens on a small device, and can also happen on a large device).</source>
            <target xml:space="preserve">But, we'd really like the UI layout to adapt itself and make better use of space when the app is running in a wide window (which is only possible on a device with a large screen), and for it only to use the UI that we have currently when the app's window is narrow (which happens on a small device, and can also happen on a large device).</target>
          </segment>
        </unit>
        <unit id="188">
          <segment state="initial" id="188">
            <source xml:space="preserve">We can use the adaptive Visual State Manager feature to achieve this.</source>
            <target xml:space="preserve">We can use the adaptive Visual State Manager feature to achieve this.</target>
          </segment>
        </unit>
        <unit id="189">
          <segment state="initial" id="189">
            <source xml:space="preserve">We'll set properties on visual elements so that, by default, the UI is laid out in the narrow state using the templates that we're using right now.</source>
            <target xml:space="preserve">We'll set properties on visual elements so that, by default, the UI is laid out in the narrow state using the templates that we're using right now.</target>
          </segment>
        </unit>
        <unit id="190">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="190">
            <source xml:space="preserve">Then, we'll detect when the app's window is wider-than-or-equal-to a specific size (measured in units of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">effective pixels</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and in response, we'll change the properties of visual elements so that we get a larger, and wider, layout.</source>
            <target xml:space="preserve">Then, we'll detect when the app's window is wider-than-or-equal-to a specific size (measured in units of <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">effective pixels</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and in response, we'll change the properties of visual elements so that we get a larger, and wider, layout.</target>
          </segment>
        </unit>
        <unit id="191">
          <segment state="initial" id="191">
            <source xml:space="preserve">We'll put those property changes in a visual state, and we'll use an adaptive trigger to continuously monitor and determine whether to apply that visual state, or not, depending on the width of the window in effective pixels.</source>
            <target xml:space="preserve">We'll put those property changes in a visual state, and we'll use an adaptive trigger to continuously monitor and determine whether to apply that visual state, or not, depending on the width of the window in effective pixels.</target>
          </segment>
        </unit>
        <unit id="192">
          <segment state="initial" id="192">
            <source xml:space="preserve">We're triggering on window width in this case, but it's possible to trigger on window height, too.</source>
            <target xml:space="preserve">We're triggering on window width in this case, but it's possible to trigger on window height, too.</target>
          </segment>
        </unit>
        <unit id="193">
          <segment state="initial" id="193">
            <source xml:space="preserve">A minimum window width of 548 epx is appropriate for this use case because that's the size of the smallest device we would want to show the wide layout on.</source>
            <target xml:space="preserve">A minimum window width of 548 epx is appropriate for this use case because that's the size of the smallest device we would want to show the wide layout on.</target>
          </segment>
        </unit>
        <unit id="194">
          <segment state="initial" id="194">
            <source xml:space="preserve">Phones are typically smaller than 548 epx, so on a small device like that, we'd remain in the default narrow layout.</source>
            <target xml:space="preserve">Phones are typically smaller than 548 epx, so on a small device like that, we'd remain in the default narrow layout.</target>
          </segment>
        </unit>
        <unit id="195">
          <segment state="initial" id="195">
            <source xml:space="preserve">On a PC, the window will launch by default wide enough to trigger the switch to the wide state, which will display 250x250-sized items.</source>
            <target xml:space="preserve">On a PC, the window will launch by default wide enough to trigger the switch to the wide state, which will display 250x250-sized items.</target>
          </segment>
        </unit>
        <unit id="196">
          <segment state="initial" id="196">
            <source xml:space="preserve">From there, you'll be able to drag the window narrow enough to display a minimum of two columns of the 250x250 items.</source>
            <target xml:space="preserve">From there, you'll be able to drag the window narrow enough to display a minimum of two columns of the 250x250 items.</target>
          </segment>
        </unit>
        <unit id="197">
          <segment state="initial" id="197">
            <source xml:space="preserve">Any narrower than that and the trigger will deactivate, the wide visual state will be removed, and the default narrow layout will be in effect.</source>
            <target xml:space="preserve">Any narrower than that and the trigger will deactivate, the wide visual state will be removed, and the default narrow layout will be in effect.</target>
          </segment>
        </unit>
        <unit id="198">
          <segment state="initial" id="198">
            <source xml:space="preserve">Before tackling the adaptive Visual State Manager piece, we first need to design the wide state and that means adding some new visual elements and templates to our markup.</source>
            <target xml:space="preserve">Before tackling the adaptive Visual State Manager piece, we first need to design the wide state and that means adding some new visual elements and templates to our markup.</target>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source xml:space="preserve">These steps describe how to do that.</source>
            <target xml:space="preserve">These steps describe how to do that.</target>
          </segment>
        </unit>
        <unit id="200">
          <segment state="initial" id="200">
            <source xml:space="preserve">By way of naming conventions for visual elements and templates, we'll include the word "wide" in the name of any element or template that is for the wide state.</source>
            <target xml:space="preserve">By way of naming conventions for visual elements and templates, we'll include the word "wide" in the name of any element or template that is for the wide state.</target>
          </segment>
        </unit>
        <unit id="201">
          <segment state="initial" id="201">
            <source xml:space="preserve">If an element or template does not contain the word "wide", then you can assume that it is for the narrow state, which is the default state and whose property values are set as local values on visual elements in the page.</source>
            <target xml:space="preserve">If an element or template does not contain the word "wide", then you can assume that it is for the narrow state, which is the default state and whose property values are set as local values on visual elements in the page.</target>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source xml:space="preserve">Only the property values for the wide state are set via an actual Visual State in the markup.</source>
            <target xml:space="preserve">Only the property values for the wide state are set via an actual Visual State in the markup.</target>
          </segment>
        </unit>
        <unit id="203">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="203">
            <source xml:space="preserve">Make a copy of the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control in the markup and set <pc dataRefEnd="id8" dataRefStart="id7" id="4">x:Name="narrowSeZo"</pc> on the copy.</source>
            <target xml:space="preserve">Make a copy of the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SemanticZoom**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> control in the markup and set <pc dataRefEnd="id8" dataRefStart="id7" id="4">x:Name="narrowSeZo"</pc> on the copy.</target>
          </segment>
        </unit>
        <unit id="204">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="204">
            <source xml:space="preserve">On the original, set <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Name="wideSeZo"</pc> and also set <pc dataRefEnd="id4" dataRefStart="id3" id="4">Visibility="Collapsed"</pc> so that the wide one is not visible by default.</source>
            <target xml:space="preserve">On the original, set <pc dataRefEnd="id2" dataRefStart="id1" id="2">x:Name="wideSeZo"</pc> and also set <pc dataRefEnd="id4" dataRefStart="id3" id="4">Visibility="Collapsed"</pc> so that the wide one is not visible by default.</target>
          </segment>
        </unit>
        <unit id="205">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="205">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">wideSeZo</pc>, change the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListView</pc>s to <pc dataRefEnd="id6" dataRefStart="id5" id="6">GridView</pc>s in both the zoomed-in view and the zoomed-out view.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">wideSeZo</pc>, change the <pc dataRefEnd="id4" dataRefStart="id3" id="4">ListView</pc>s to <pc dataRefEnd="id6" dataRefStart="id5" id="6">GridView</pc>s in both the zoomed-in view and the zoomed-out view.</target>
          </segment>
        </unit>
        <unit id="206">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="206">
            <source xml:space="preserve">Make a copy of these three resources <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplate</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">ZoomedOutAuthorTemplate</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">BookTemplate</pc> and append the word <pc dataRefEnd="id8" dataRefStart="id7" id="8">Wide</pc> to the keys of the copies.</source>
            <target xml:space="preserve">Make a copy of these three resources <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplate</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="4">ZoomedOutAuthorTemplate</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="6">BookTemplate</pc> and append the word <pc dataRefEnd="id8" dataRefStart="id7" id="8">Wide</pc> to the keys of the copies.</target>
          </segment>
        </unit>
        <unit id="207">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="207">
            <source xml:space="preserve">Also, update <pc dataRefEnd="id2" dataRefStart="id1" id="2">wideSeZo</pc> so that it references the keys of these new resources.</source>
            <target xml:space="preserve">Also, update <pc dataRefEnd="id2" dataRefStart="id1" id="2">wideSeZo</pc> so that it references the keys of these new resources.</target>
          </segment>
        </unit>
        <unit id="208">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="208">
            <source xml:space="preserve">Replace the contents of <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplateWide</pc> with <pc dataRefEnd="id4" dataRefStart="id3" id="4">&lt;TextBlock Style="{StaticResource SubheaderTextBlockStyle}" Text="{Binding Name}"/&gt;</pc>.</source>
            <target xml:space="preserve">Replace the contents of <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplateWide</pc> with <pc dataRefEnd="id4" dataRefStart="id3" id="4">&lt;TextBlock Style="{StaticResource SubheaderTextBlockStyle}" Text="{Binding Name}"/&gt;</pc>.</target>
          </segment>
        </unit>
        <unit id="209">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="209">
            <source xml:space="preserve">Replace the contents of <pc dataRefEnd="id2" dataRefStart="id1" id="2">ZoomedOutAuthorTemplateWide</pc> with:</source>
            <target xml:space="preserve">Replace the contents of <pc dataRefEnd="id2" dataRefStart="id1" id="2">ZoomedOutAuthorTemplateWide</pc> with:</target>
          </segment>
        </unit>
        <unit id="210">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="210">
            <source xml:space="preserve">Replace the contents of <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplateWide</pc> with:</source>
            <target xml:space="preserve">Replace the contents of <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplateWide</pc> with:</target>
          </segment>
        </unit>
        <unit id="211">
          <segment state="initial" id="211">
            <source xml:space="preserve">For the wide state, the groups in the zoomed-in view will need more vertical breathing space around them.</source>
            <target xml:space="preserve">For the wide state, the groups in the zoomed-in view will need more vertical breathing space around them.</target>
          </segment>
        </unit>
        <unit id="212">
          <segment state="initial" id="212">
            <source xml:space="preserve">Creating and referencing an items panel template will give us the results we want.</source>
            <target xml:space="preserve">Creating and referencing an items panel template will give us the results we want.</target>
          </segment>
        </unit>
        <unit id="213">
          <segment state="initial" id="213">
            <source xml:space="preserve">Here's how the markup looks.</source>
            <target xml:space="preserve">Here's how the markup looks.</target>
          </segment>
        </unit>
        <unit id="214">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="214">
            <source xml:space="preserve">Finally, add the appropriate Visual State Manager markup as the first child of <pc dataRefEnd="id2" dataRefStart="id1" id="2">LayoutRoot</pc>.</source>
            <target xml:space="preserve">Finally, add the appropriate Visual State Manager markup as the first child of <pc dataRefEnd="id2" dataRefStart="id1" id="2">LayoutRoot</pc>.</target>
          </segment>
        </unit>
        <unit id="215">
          <segment state="initial" id="215">
            <source xml:space="preserve">Final styling</source>
            <target xml:space="preserve">Final styling</target>
          </segment>
        </unit>
        <unit id="216">
          <segment state="initial" id="216">
            <source xml:space="preserve">All that remains are some final styling tweaks.</source>
            <target xml:space="preserve">All that remains are some final styling tweaks.</target>
          </segment>
        </unit>
        <unit id="217">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="217">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplate</pc>, set <pc dataRefEnd="id4" dataRefStart="id3" id="4">Foreground="White"</pc> on the <pc dataRefEnd="id6" dataRefStart="id5" id="6">TextBlock</pc> so that it looks correct when running on the mobile device family.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">AuthorGroupHeaderTemplate</pc>, set <pc dataRefEnd="id4" dataRefStart="id3" id="4">Foreground="White"</pc> on the <pc dataRefEnd="id6" dataRefStart="id5" id="6">TextBlock</pc> so that it looks correct when running on the mobile device family.</target>
          </segment>
        </unit>
        <unit id="218">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
            <data id="id7">&lt;code&gt;</data>
            <data id="id8">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="218">
            <source xml:space="preserve">Add <pc dataRefEnd="id2" dataRefStart="id1" id="2">FontWeight="SemiBold"</pc> to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">TextBlock</pc> in both <pc dataRefEnd="id6" dataRefStart="id5" id="6">AuthorGroupHeaderTemplate</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="8">ZoomedOutAuthorTemplate</pc>.</source>
            <target xml:space="preserve">Add <pc dataRefEnd="id2" dataRefStart="id1" id="2">FontWeight="SemiBold"</pc> to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">TextBlock</pc> in both <pc dataRefEnd="id6" dataRefStart="id5" id="6">AuthorGroupHeaderTemplate</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="8">ZoomedOutAuthorTemplate</pc>.</target>
          </segment>
        </unit>
        <unit id="219">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="219">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">narrowSeZo</pc>, the group headers and the authors in the zoomed-out view are left-aligned instead of stretched, so let's work on that.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">narrowSeZo</pc>, the group headers and the authors in the zoomed-out view are left-aligned instead of stretched, so let's work on that.</target>
          </segment>
        </unit>
        <unit id="220">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;code&gt;</data>
            <data id="id14">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="220">
            <source xml:space="preserve">We'll create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**HeaderContainerStyle**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for the zoomed-in view with <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**HorizontalContentAlignment**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> set to <pc dataRefEnd="id14" dataRefStart="id13" id="6">Stretch</pc>.</source>
            <target xml:space="preserve">We'll create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**HeaderContainerStyle**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for the zoomed-in view with <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**HorizontalContentAlignment**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> set to <pc dataRefEnd="id14" dataRefStart="id13" id="6">Stretch</pc>.</target>
          </segment>
        </unit>
        <unit id="221">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="221">
            <source xml:space="preserve">And we'll create an <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ItemContainerStyle**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for the zoomed-out view containing that same <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Setter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">And we'll create an <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ItemContainerStyle**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> for the zoomed-out view containing that same <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**Setter**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="222">
          <segment state="initial" id="222">
            <source xml:space="preserve">Here's what that looks like.</source>
            <target xml:space="preserve">Here's what that looks like.</target>
          </segment>
        </unit>
        <unit id="223">
          <segment state="initial" id="223">
            <source xml:space="preserve">That last sequence of styling operations leaves the app looking like this.</source>
            <target xml:space="preserve">That last sequence of styling operations leaves the app looking like this.</target>
          </segment>
        </unit>
        <unit id="224">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="224">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a desktop device, zoomed-in view, two sizes of window</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a desktop device, zoomed-in view, two sizes of window</pc>
						</target>
          </segment>
        </unit>
        <unit id="225">
          <segment state="initial" id="225">
            <source xml:space="preserve">The ported Windows 10 app running on a Desktop device, zoomed-in view, two sizes of window</source>
            <target xml:space="preserve">The ported Windows 10 app running on a Desktop device, zoomed-in view, two sizes of window</target>
          </segment>
        </unit>
        <unit id="226">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="226">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a desktop device, zoomed-out view, two sizes of window</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a desktop device, zoomed-out view, two sizes of window</pc>
						</target>
          </segment>
        </unit>
        <unit id="227">
          <segment state="initial" id="227">
            <source xml:space="preserve">The ported Windows 10 app running on a Desktop device, zoomed-out view, two sizes of window</source>
            <target xml:space="preserve">The ported Windows 10 app running on a Desktop device, zoomed-out view, two sizes of window</target>
          </segment>
        </unit>
        <unit id="228">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="228">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a mobile device, zoomed-in view</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a mobile device, zoomed-in view</pc>
						</target>
          </segment>
        </unit>
        <unit id="229">
          <segment state="initial" id="229">
            <source xml:space="preserve">The ported Windows 10 app running on a Mobile device, zoomed-in view</source>
            <target xml:space="preserve">The ported Windows 10 app running on a Mobile device, zoomed-in view</target>
          </segment>
        </unit>
        <unit id="230">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="230">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a mobile device, zoomed-out view</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app running on a mobile device, zoomed-out view</pc>
						</target>
          </segment>
        </unit>
        <unit id="231">
          <segment state="initial" id="231">
            <source xml:space="preserve">The ported Windows 10 app running on a Mobile device, zoomed-out view</source>
            <target xml:space="preserve">The ported Windows 10 app running on a Mobile device, zoomed-out view</target>
          </segment>
        </unit>
        <unit id="232">
          <segment state="initial" id="232">
            <source xml:space="preserve">Making the view model more flexible</source>
            <target xml:space="preserve">Making the view model more flexible</target>
          </segment>
        </unit>
        <unit id="233">
          <segment state="initial" id="233">
            <source xml:space="preserve">This section contains an example of facilities that open up to us by virtue of having moved our app to use the UWP.</source>
            <target xml:space="preserve">This section contains an example of facilities that open up to us by virtue of having moved our app to use the UWP.</target>
          </segment>
        </unit>
        <unit id="234">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="234">
            <source xml:space="preserve">Here, we explain optional steps that you can follow to make your view model more flexible when accessed via a <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc>.</source>
            <target xml:space="preserve">Here, we explain optional steps that you can follow to make your view model more flexible when accessed via a <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc>.</target>
          </segment>
        </unit>
        <unit id="235">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="235">
            <source xml:space="preserve">The view model (the source file is in ViewModel\\BookstoreViewModel.cs) that we ported from the Windows Phone Silverlight app Bookstore2WPSL8 contains a class named Author, which derives from <pc dataRefEnd="id2" dataRefStart="id1" id="2">List&lt;T&gt;</pc>, where <pc dataRefEnd="id4" dataRefStart="id3" id="4">T</pc> is BookSku.</source>
            <target xml:space="preserve">The view model (the source file is in ViewModel\\BookstoreViewModel.cs) that we ported from the Windows Phone Silverlight app Bookstore2WPSL8 contains a class named Author, which derives from <pc dataRefEnd="id2" dataRefStart="id1" id="2">List&lt;T&gt;</pc>, where <pc dataRefEnd="id4" dataRefStart="id3" id="4">T</pc> is BookSku.</target>
          </segment>
        </unit>
        <unit id="236">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="236">
            <source xml:space="preserve">That means that the Author class <pc dataRefEnd="id2" dataRefStart="id1" id="2">is a</pc> group of BookSku.</source>
            <target xml:space="preserve">That means that the Author class <pc dataRefEnd="id2" dataRefStart="id1" id="2">is a</pc> group of BookSku.</target>
          </segment>
        </unit>
        <unit id="237">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="237">
            <source xml:space="preserve">When we bind <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource.Source</pc> to Authors, the only thing we're communicating is that each Author in Authors is a group of <pc dataRefEnd="id4" dataRefStart="id3" id="4">something</pc>.</source>
            <target xml:space="preserve">When we bind <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource.Source</pc> to Authors, the only thing we're communicating is that each Author in Authors is a group of <pc dataRefEnd="id4" dataRefStart="id3" id="4">something</pc>.</target>
          </segment>
        </unit>
        <unit id="238">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="238">
            <source xml:space="preserve">We leave it to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc> to determine that Author is, in this case, a group of BookSku.</source>
            <target xml:space="preserve">We leave it to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc> to determine that Author is, in this case, a group of BookSku.</target>
          </segment>
        </unit>
        <unit id="239">
          <segment state="initial" id="239">
            <source xml:space="preserve">That works: but it's not flexible.</source>
            <target xml:space="preserve">That works: but it's not flexible.</target>
          </segment>
        </unit>
        <unit id="240">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="240">
            <source xml:space="preserve">What if we want Author to be <pc dataRefEnd="id2" dataRefStart="id1" id="2">both</pc> a group of BookSku <pc dataRefEnd="id4" dataRefStart="id3" id="4">and</pc> a group of the addresses where the author has lived?</source>
            <target xml:space="preserve">What if we want Author to be <pc dataRefEnd="id2" dataRefStart="id1" id="2">both</pc> a group of BookSku <pc dataRefEnd="id4" dataRefStart="id3" id="4">and</pc> a group of the addresses where the author has lived?</target>
          </segment>
        </unit>
        <unit id="241">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="241">
            <source xml:space="preserve">Author can't <pc dataRefEnd="id2" dataRefStart="id1" id="2">be</pc> both of those groups.</source>
            <target xml:space="preserve">Author can't <pc dataRefEnd="id2" dataRefStart="id1" id="2">be</pc> both of those groups.</target>
          </segment>
        </unit>
        <unit id="242">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="242">
            <source xml:space="preserve">But, Author can <pc dataRefEnd="id2" dataRefStart="id1" id="2">have</pc> any number of groups.</source>
            <target xml:space="preserve">But, Author can <pc dataRefEnd="id2" dataRefStart="id1" id="2">have</pc> any number of groups.</target>
          </segment>
        </unit>
        <unit id="243">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="243">
            <source xml:space="preserve">And that's the solution: use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">has-a-group</pc> pattern instead of, or in addition to, the <pc dataRefEnd="id4" dataRefStart="id3" id="4">is-a-group</pc> pattern that we're using currently.</source>
            <target xml:space="preserve">And that's the solution: use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">has-a-group</pc> pattern instead of, or in addition to, the <pc dataRefEnd="id4" dataRefStart="id3" id="4">is-a-group</pc> pattern that we're using currently.</target>
          </segment>
        </unit>
        <unit id="244">
          <segment state="initial" id="244">
            <source xml:space="preserve">Here's how:</source>
            <target xml:space="preserve">Here's how:</target>
          </segment>
        </unit>
        <unit id="245">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="245">
            <source xml:space="preserve">Change Author so that it no longer derives from <pc dataRefEnd="id2" dataRefStart="id1" id="2">List&lt;T&gt;</pc>.</source>
            <target xml:space="preserve">Change Author so that it no longer derives from <pc dataRefEnd="id2" dataRefStart="id1" id="2">List&lt;T&gt;</pc>.</target>
          </segment>
        </unit>
        <unit id="246">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="246">
            <source xml:space="preserve">Add this field to Author: <pc dataRefEnd="id2" dataRefStart="id1" id="2">private ObservableCollection&lt;BookSku&gt; bookSkus = new ObservableCollection&lt;BookSku&gt;();</pc>.</source>
            <target xml:space="preserve">Add this field to Author: <pc dataRefEnd="id2" dataRefStart="id1" id="2">private ObservableCollection&lt;BookSku&gt; bookSkus = new ObservableCollection&lt;BookSku&gt;();</pc>.</target>
          </segment>
        </unit>
        <unit id="247">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="247">
            <source xml:space="preserve">Add this property to Author: <pc dataRefEnd="id2" dataRefStart="id1" id="2">public ObservableCollection&lt;BookSku&gt; BookSkus { get { return this.bookSkus; } }</pc>.</source>
            <target xml:space="preserve">Add this property to Author: <pc dataRefEnd="id2" dataRefStart="id1" id="2">public ObservableCollection&lt;BookSku&gt; BookSkus { get { return this.bookSkus; } }</pc>.</target>
          </segment>
        </unit>
        <unit id="248">
          <segment state="initial" id="248">
            <source xml:space="preserve">And of course we can repeat the above two steps to add as many groups to Author as we need.</source>
            <target xml:space="preserve">And of course we can repeat the above two steps to add as many groups to Author as we need.</target>
          </segment>
        </unit>
        <unit id="249">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="249">
            <source xml:space="preserve">Change the implementation of the AddBookSku method to <pc dataRefEnd="id2" dataRefStart="id1" id="2">this.BookSkus.Add(bookSku);</pc>.</source>
            <target xml:space="preserve">Change the implementation of the AddBookSku method to <pc dataRefEnd="id2" dataRefStart="id1" id="2">this.BookSkus.Add(bookSku);</pc>.</target>
          </segment>
        </unit>
        <unit id="250">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="250">
            <source xml:space="preserve">Now that Author <pc dataRefEnd="id2" dataRefStart="id1" id="2">has</pc> at least one group, we need to communicate to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionViewSource</pc> which of those groups it should use.</source>
            <target xml:space="preserve">Now that Author <pc dataRefEnd="id2" dataRefStart="id1" id="2">has</pc> at least one group, we need to communicate to the <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionViewSource</pc> which of those groups it should use.</target>
          </segment>
        </unit>
        <unit id="251">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="251">
            <source xml:space="preserve">To do that, add this property to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc>: <pc dataRefEnd="id4" dataRefStart="id3" id="4">ItemsPath="BookSkus"</pc></source>
            <target xml:space="preserve">To do that, add this property to the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc>: <pc dataRefEnd="id4" dataRefStart="id3" id="4">ItemsPath="BookSkus"</pc></target>
          </segment>
        </unit>
        <unit id="252">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="252">
            <source xml:space="preserve">Those changes leave this app functionally unchanged, but you now know how you could extend Author, and the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc>, should you need to.</source>
            <target xml:space="preserve">Those changes leave this app functionally unchanged, but you now know how you could extend Author, and the <pc dataRefEnd="id2" dataRefStart="id1" id="2">CollectionViewSource</pc>, should you need to.</target>
          </segment>
        </unit>
        <unit id="253">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="253">
            <source xml:space="preserve">Let's make one last change to Author so that, if we use it <pc dataRefEnd="id2" dataRefStart="id1" id="2">without</pc> specifying <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionViewSource.ItemsPath</pc>, a default group of our choosing will be used:</source>
            <target xml:space="preserve">Let's make one last change to Author so that, if we use it <pc dataRefEnd="id2" dataRefStart="id1" id="2">without</pc> specifying <pc dataRefEnd="id4" dataRefStart="id3" id="4">CollectionViewSource.ItemsPath</pc>, a default group of our choosing will be used:</target>
          </segment>
        </unit>
        <unit id="254">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="254">
            <source xml:space="preserve">And now we can choose to remove <pc dataRefEnd="id2" dataRefStart="id1" id="2">ItemsPath="BookSkus"</pc> if we like and the app will still behave the same way.</source>
            <target xml:space="preserve">And now we can choose to remove <pc dataRefEnd="id2" dataRefStart="id1" id="2">ItemsPath="BookSkus"</pc> if we like and the app will still behave the same way.</target>
          </segment>
        </unit>
        <unit id="255">
          <segment state="initial" id="255">
            <source xml:space="preserve">Conclusion</source>
            <target xml:space="preserve">Conclusion</target>
          </segment>
        </unit>
        <unit id="256">
          <segment state="initial" id="256">
            <source xml:space="preserve">This case study involved a more ambitious user interface than the previous one.</source>
            <target xml:space="preserve">This case study involved a more ambitious user interface than the previous one.</target>
          </segment>
        </unit>
        <unit id="257">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="257">
            <source xml:space="preserve">All of the facilities and concepts of the Windows Phone Silverlight <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector</pc>—and more—were found to be available to a UWP app in the form of <pc dataRefEnd="id4" dataRefStart="id3" id="4">SemanticZoom</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="6">ListView</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="8">GridView</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="10">CollectionViewSource</pc>.</source>
            <target xml:space="preserve">All of the facilities and concepts of the Windows Phone Silverlight <pc dataRefEnd="id2" dataRefStart="id1" id="2">LongListSelector</pc>—and more—were found to be available to a UWP app in the form of <pc dataRefEnd="id4" dataRefStart="id3" id="4">SemanticZoom</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="6">ListView</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="8">GridView</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="10">CollectionViewSource</pc>.</target>
          </segment>
        </unit>
        <unit id="258">
          <segment state="initial" id="258">
            <source xml:space="preserve">We showed how to re-use, or copy-and-edit, both imperative code and markup in a UWP app to achieve functionality, UI, and interactions tailored to suit the narrowest and widest Windows device form factors and all sizes in-between.</source>
            <target xml:space="preserve">We showed how to re-use, or copy-and-edit, both imperative code and markup in a UWP app to achieve functionality, UI, and interactions tailored to suit the narrowest and widest Windows device form factors and all sizes in-between.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>