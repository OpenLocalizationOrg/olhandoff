<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">79ab8aa9970da6242a7df1d7188ddf26904f0ee2</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Windows Runtime 8.x to UWP case study: Bookstore1</source>
            <target xml:space="preserve">Windows Runtime 8.x to UWP case study: Bookstore1</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">This topic presents a case study of porting a very simple Universal 8.1 app to a Windows 10 Universal Windows Platform (UWP) app.</source>
            <target xml:space="preserve">This topic presents a case study of porting a very simple Universal 8.1 app to a Windows 10 Universal Windows Platform (UWP) app.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">A Universal 8.1 app is one that builds one app package for Windows 8.1, and a different app package for Windows Phone 8.1.</source>
            <target xml:space="preserve">A Universal 8.1 app is one that builds one app package for Windows 8.1, and a different app package for Windows Phone 8.1.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</source>
            <target xml:space="preserve">With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</target>
          </segment>
        </unit>
        <unit id="107">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="107">
            <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Guide to UWP apps</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Guide to UWP apps</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source xml:space="preserve">The app we'll port consists of a <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc> bound to a view model.</source>
            <target xml:space="preserve">The app we'll port consists of a <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc> bound to a view model.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">The view model has a list of books that shows title, author, and book cover.</source>
            <target xml:space="preserve">The view model has a list of books that shows title, author, and book cover.</target>
          </segment>
        </unit>
        <unit id="110">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="110">
            <source xml:space="preserve">The book cover images have <pc dataRefEnd="id2" dataRefStart="id1" id="2">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="8">Do not copy</pc>.</source>
            <target xml:space="preserve">The book cover images have <pc dataRefEnd="id2" dataRefStart="id1" id="2">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="8">Do not copy</pc>.</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">The previous topics in this section describe the differences between the platforms, and they give details and guidance on the porting process for various aspects of an app from XAML markup, through binding to a view model, down to accessing data.</source>
            <target xml:space="preserve">The previous topics in this section describe the differences between the platforms, and they give details and guidance on the porting process for various aspects of an app from XAML markup, through binding to a view model, down to accessing data.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">A case study aims to complement that guidance by showing it in action in a real example.</source>
            <target xml:space="preserve">A case study aims to complement that guidance by showing it in action in a real example.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">The case studies assume you've read the guidance, which they do not repeat.</source>
            <target xml:space="preserve">The case studies assume you've read the guidance, which they do not repeat.</target>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When opening Bookstore1Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">TargetPlatformVersion</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>   When opening Bookstore1Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">TargetPlatformVersion</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">Downloads</source>
            <target xml:space="preserve">Downloads</target>
          </segment>
        </unit>
        <unit id="116">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="116">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore1\_81 Universal 8.1 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore1\_81 Universal 8.1 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="117">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="117">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore1Universal\_10 Windows 10 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Download the Bookstore1Universal\_10 Windows 10 app</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>.</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">The Universal 8.1 app</source>
            <target xml:space="preserve">The Universal 8.1 app</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">Here’s what Bookstore1\_81—the app that we're going to port—looks like.</source>
            <target xml:space="preserve">Here’s what Bookstore1\_81—the app that we're going to port—looks like.</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">It's just a vertically-scrolling list box of books beneath the heading of the app's name and page title.</source>
            <target xml:space="preserve">It's just a vertically-scrolling list box of books beneath the heading of the app's name and page title.</target>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">how bookstore1\-81 looks on windows</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">how bookstore1\-81 looks on windows</pc>
						</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">Bookstore1\_81 on Windows</source>
            <target xml:space="preserve">Bookstore1\_81 on Windows</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">how bookstore1\-81 looks on windows phone</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">how bookstore1\-81 looks on windows phone</pc>
						</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">Bookstore1\_81 on Windows Phone</source>
            <target xml:space="preserve">Bookstore1\_81 on Windows Phone</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">Porting to a Windows 10 project</source>
            <target xml:space="preserve">Porting to a Windows 10 project</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">The Bookstore1\_81 solution is an 8.1 Universal App project, and it contains these projects.</source>
            <target xml:space="preserve">The Bookstore1\_81 solution is an 8.1 Universal App project, and it contains these projects.</target>
          </segment>
        </unit>
        <unit id="127">
          <segment state="initial" id="127">
            <source xml:space="preserve">Bookstore1\_81.Windows.</source>
            <target xml:space="preserve">Bookstore1\_81.Windows.</target>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source xml:space="preserve">This is the project that builds the app package for Windows 8.1.</source>
            <target xml:space="preserve">This is the project that builds the app package for Windows 8.1.</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">Bookstore1\_81.WindowsPhone.</source>
            <target xml:space="preserve">Bookstore1\_81.WindowsPhone.</target>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source xml:space="preserve">This is the project that builds the app package for Windows Phone 8.1.</source>
            <target xml:space="preserve">This is the project that builds the app package for Windows Phone 8.1.</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">Bookstore1\_81.Shared.</source>
            <target xml:space="preserve">Bookstore1\_81.Shared.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">This is the project that contains source code, markup files, and other assets and resources, that are used by both of the other two projects.</source>
            <target xml:space="preserve">This is the project that contains source code, markup files, and other assets and resources, that are used by both of the other two projects.</target>
          </segment>
        </unit>
        <unit id="133">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="133">
            <source xml:space="preserve">For this case study, we have the usual options described in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">If you have a Universal 8.1 app</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> with respect to what devices to support.</source>
            <target xml:space="preserve">For this case study, we have the usual options described in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">If you have a Universal 8.1 app</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> with respect to what devices to support.</target>
          </segment>
        </unit>
        <unit id="134">
          <segment state="initial" id="134">
            <source xml:space="preserve">The decision here is a simple one: this app has the same features, and does so mostly with the same code, in both its Windows 8.1 and Windows Phone 8.1 forms.</source>
            <target xml:space="preserve">The decision here is a simple one: this app has the same features, and does so mostly with the same code, in both its Windows 8.1 and Windows Phone 8.1 forms.</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">So, we'll port the contents of the Shared project (and anything else we need from the other projects) to a Windows 10 that targets the Universal device family (one that you can install onto the widest range of devices).</source>
            <target xml:space="preserve">So, we'll port the contents of the Shared project (and anything else we need from the other projects) to a Windows 10 that targets the Universal device family (one that you can install onto the widest range of devices).</target>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source xml:space="preserve">It's a very quick task to create a new project in Visual Studio, copy files over to it from Bookstore1\_81, and include the copied files in the new project.</source>
            <target xml:space="preserve">It's a very quick task to create a new project in Visual Studio, copy files over to it from Bookstore1\_81, and include the copied files in the new project.</target>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source xml:space="preserve">Start by creating a new Blank Application (Windows Universal) project.</source>
            <target xml:space="preserve">Start by creating a new Blank Application (Windows Universal) project.</target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">Name it Bookstore1Universal\_10.</source>
            <target xml:space="preserve">Name it Bookstore1Universal\_10.</target>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source xml:space="preserve">These are the files to copy over from Bookstore1\_81 to Bookstore1Universal\_10.</source>
            <target xml:space="preserve">These are the files to copy over from Bookstore1\_81 to Bookstore1Universal\_10.</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">From the Shared project</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">From the Shared project</pc>
						</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</source>
            <target xml:space="preserve">Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</target>
          </segment>
        </unit>
        <unit id="142">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="142">
            <source xml:space="preserve">After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="4">Show All Files</pc> is toggled on.</source>
            <target xml:space="preserve">After copying the folder, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="4">Show All Files</pc> is toggled on.</target>
          </segment>
        </unit>
        <unit id="143">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="143">
            <source xml:space="preserve">Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Include In Project</pc>.</source>
            <target xml:space="preserve">Right-click the folder that you copied and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Include In Project</pc>.</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">That command is what we mean by "including" files or folders in a project.</source>
            <target xml:space="preserve">That command is what we mean by "including" files or folders in a project.</target>
          </segment>
        </unit>
        <unit id="145">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="145">
            <source xml:space="preserve">Each time you copy a file or folder, each copy, click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="4">Solution Explorer</pc> and then include the file or folder in the project.</source>
            <target xml:space="preserve">Each time you copy a file or folder, each copy, click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Refresh</pc> in <pc dataRefEnd="id4" dataRefStart="id3" id="4">Solution Explorer</pc> and then include the file or folder in the project.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">There's no need to do this for files that you're replacing in the destination.</source>
            <target xml:space="preserve">There's no need to do this for files that you're replacing in the destination.</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">Copy the folder containing the view model source file (the folder is \\ViewModel).</source>
            <target xml:space="preserve">Copy the folder containing the view model source file (the folder is \\ViewModel).</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">Copy MainPage.xaml and replace the file in the destination.</source>
            <target xml:space="preserve">Copy MainPage.xaml and replace the file in the destination.</target>
          </segment>
        </unit>
        <unit id="149">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="149">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">From the Windows project</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">From the Windows project</pc>
						</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">Copy BookstoreStyles.xaml.</source>
            <target xml:space="preserve">Copy BookstoreStyles.xaml.</target>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source xml:space="preserve">We'll use this one as a good starting-point because all the resource keys in this file will resolve in a Windows 10 app; some of those in the equivalent WindowsPhone file will not.</source>
            <target xml:space="preserve">We'll use this one as a good starting-point because all the resource keys in this file will resolve in a Windows 10 app; some of those in the equivalent WindowsPhone file will not.</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">Edit the source code and markup files that you just copied and change any references to the Bookstore1\_81 namespace to Bookstore1Universal\_10.</source>
            <target xml:space="preserve">Edit the source code and markup files that you just copied and change any references to the Bookstore1\_81 namespace to Bookstore1Universal\_10.</target>
          </segment>
        </unit>
        <unit id="153">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="153">
            <source xml:space="preserve">A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Replace In Files</pc> feature.</source>
            <target xml:space="preserve">A quick way to do that is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Replace In Files</pc> feature.</target>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source xml:space="preserve">No code changes are needed in the view model, nor in any other imperative code.</source>
            <target xml:space="preserve">No code changes are needed in the view model, nor in any other imperative code.</target>
          </segment>
        </unit>
        <unit id="155">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="155">
            <source xml:space="preserve">But, just to make it easier to see which version of the app is running, change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Bookstore1Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE1\_81" to "BOOKSTORE1UNIVERSAL\_10".</source>
            <target xml:space="preserve">But, just to make it easier to see which version of the app is running, change the value returned by the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Bookstore1Universal\_10.BookstoreViewModel.AppName</pc> property from "BOOKSTORE1\_81" to "BOOKSTORE1UNIVERSAL\_10".</target>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source xml:space="preserve">Right now, you can build and run.</source>
            <target xml:space="preserve">Right now, you can build and run.</target>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source xml:space="preserve">Here's how our new UWP app looks after having done no explicit work yet to port it to Windows 10.</source>
            <target xml:space="preserve">Here's how our new UWP app looks after having done no explicit work yet to port it to Windows 10.</target>
          </segment>
        </unit>
        <unit id="158">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="158">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the windows 10 app with initial source code changes</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the windows 10 app with initial source code changes</pc>
						</target>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source xml:space="preserve">The Windows 10 app with initial source code changes running on a Desktop device</source>
            <target xml:space="preserve">The Windows 10 app with initial source code changes running on a Desktop device</target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the windows 10 app with initial source code changes</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the windows 10 app with initial source code changes</pc>
						</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">The Windows 10 app with initial source code changes running on a Mobile device</source>
            <target xml:space="preserve">The Windows 10 app with initial source code changes running on a Mobile device</target>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source xml:space="preserve">The view and the view model are working together correctly, and the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc> is functioning.</source>
            <target xml:space="preserve">The view and the view model are working together correctly, and the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc> is functioning.</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">We just need to fix the styling.</source>
            <target xml:space="preserve">We just need to fix the styling.</target>
          </segment>
        </unit>
        <unit id="164">
          <segment state="initial" id="164">
            <source xml:space="preserve">On a Mobile device, in light theme, we can see the border of the list box, but that will be easy to hide.</source>
            <target xml:space="preserve">On a Mobile device, in light theme, we can see the border of the list box, but that will be easy to hide.</target>
          </segment>
        </unit>
        <unit id="165">
          <segment state="initial" id="165">
            <source xml:space="preserve">And, the typography is too big, so we'll change the styles we're using.</source>
            <target xml:space="preserve">And, the typography is too big, so we'll change the styles we're using.</target>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source xml:space="preserve">Also, the app should be light in color when running on a Desktop device if we want it to look like the default.</source>
            <target xml:space="preserve">Also, the app should be light in color when running on a Desktop device if we want it to look like the default.</target>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source xml:space="preserve">So, we'll change that.</source>
            <target xml:space="preserve">So, we'll change that.</target>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source xml:space="preserve">Universal styling</source>
            <target xml:space="preserve">Universal styling</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">The Bookstore1\_81 app used two different resource dictionaries (BookstoreStyles.xaml) to tailor its styles to the Windows 8.1 and Windows Phone 8.1 operating systems.</source>
            <target xml:space="preserve">The Bookstore1\_81 app used two different resource dictionaries (BookstoreStyles.xaml) to tailor its styles to the Windows 8.1 and Windows Phone 8.1 operating systems.</target>
          </segment>
        </unit>
        <unit id="170">
          <segment state="initial" id="170">
            <source xml:space="preserve">Neither of those two BookstoreStyles.xaml files contains exactly the styles we need for our Windows 10 app.</source>
            <target xml:space="preserve">Neither of those two BookstoreStyles.xaml files contains exactly the styles we need for our Windows 10 app.</target>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source xml:space="preserve">But, the good news is that what we want is actually much simpler than either of them.</source>
            <target xml:space="preserve">But, the good news is that what we want is actually much simpler than either of them.</target>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source xml:space="preserve">So, the next steps will mostly involve removing and simplifying our project files and markup.</source>
            <target xml:space="preserve">So, the next steps will mostly involve removing and simplifying our project files and markup.</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">The steps are below.</source>
            <target xml:space="preserve">The steps are below.</target>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source xml:space="preserve">And you can use the links at the top of this topic to download the projects and see the results of all the changes between here and the end of the case study.</source>
            <target xml:space="preserve">And you can use the links at the top of this topic to download the projects and see the results of all the changes between here and the end of the case study.</target>
          </segment>
        </unit>
        <unit id="175">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="175">
            <source xml:space="preserve">To tighten up the spacing between items, find the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc> data template in MainPage.xaml and delete the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin="0,0,0,8"</pc> from the root <pc dataRefEnd="id6" dataRefStart="id5" id="6">Grid</pc>.</source>
            <target xml:space="preserve">To tighten up the spacing between items, find the <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc> data template in MainPage.xaml and delete the <pc dataRefEnd="id4" dataRefStart="id3" id="4">Margin="0,0,0,8"</pc> from the root <pc dataRefEnd="id6" dataRefStart="id5" id="6">Grid</pc>.</target>
          </segment>
        </unit>
        <unit id="176">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="176">
            <source xml:space="preserve">Also, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc>, there are references to <pc dataRefEnd="id4" dataRefStart="id3" id="4">BookTemplateTitleTextBlockStyle</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">BookTemplateAuthorTextBlockStyle</pc>.</source>
            <target xml:space="preserve">Also, in <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookTemplate</pc>, there are references to <pc dataRefEnd="id4" dataRefStart="id3" id="4">BookTemplateTitleTextBlockStyle</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">BookTemplateAuthorTextBlockStyle</pc>.</target>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source xml:space="preserve">Bookstore1\_81 used those keys as an indirection so that a single key had different implementations in the two apps.</source>
            <target xml:space="preserve">Bookstore1\_81 used those keys as an indirection so that a single key had different implementations in the two apps.</target>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source xml:space="preserve">We don't need that indirection any more; we can just reference system styles directly.</source>
            <target xml:space="preserve">We don't need that indirection any more; we can just reference system styles directly.</target>
          </segment>
        </unit>
        <unit id="179">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="179">
            <source xml:space="preserve">So, replace those references with <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitleTextBlockStyle</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">SubtitleTextBlockStyle</pc>, respectively.</source>
            <target xml:space="preserve">So, replace those references with <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitleTextBlockStyle</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="4">SubtitleTextBlockStyle</pc>, respectively.</target>
          </segment>
        </unit>
        <unit id="180">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="180">
            <source xml:space="preserve">Now, we need to set <pc dataRefEnd="id2" dataRefStart="id1" id="2">LayoutRoot</pc>'s Background to the correct default value so that the app looks appropriate when running on all devices no matter what the theme is.</source>
            <target xml:space="preserve">Now, we need to set <pc dataRefEnd="id2" dataRefStart="id1" id="2">LayoutRoot</pc>'s Background to the correct default value so that the app looks appropriate when running on all devices no matter what the theme is.</target>
          </segment>
        </unit>
        <unit id="181">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="181">
            <source xml:space="preserve">Change it from <pc dataRefEnd="id2" dataRefStart="id1" id="2">"Transparent"</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">"{ThemeResource ApplicationPageBackgroundThemeBrush}"</pc>.</source>
            <target xml:space="preserve">Change it from <pc dataRefEnd="id2" dataRefStart="id1" id="2">"Transparent"</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="4">"{ThemeResource ApplicationPageBackgroundThemeBrush}"</pc>.</target>
          </segment>
        </unit>
        <unit id="182">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
            <data id="id5">&lt;code&gt;</data>
            <data id="id6">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="182">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitlePanel</pc>, change the reference to <pc dataRefEnd="id4" dataRefStart="id3" id="4">TitleTextBlockStyle</pc> (which is now a little too big) to a reference to <pc dataRefEnd="id6" dataRefStart="id5" id="6">CaptionTextBlockStyle</pc>.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">TitlePanel</pc>, change the reference to <pc dataRefEnd="id4" dataRefStart="id3" id="4">TitleTextBlockStyle</pc> (which is now a little too big) to a reference to <pc dataRefEnd="id6" dataRefStart="id5" id="6">CaptionTextBlockStyle</pc>.</target>
          </segment>
        </unit>
        <unit id="183">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="183">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">PageTitleTextBlockStyle</pc> is another Bookstore1\_81 indirection that we don't need any longer.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">PageTitleTextBlockStyle</pc> is another Bookstore1\_81 indirection that we don't need any longer.</target>
          </segment>
        </unit>
        <unit id="184">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="184">
            <source xml:space="preserve">Change that to reference <pc dataRefEnd="id2" dataRefStart="id1" id="2">HeaderTextBlockStyle</pc> instead.</source>
            <target xml:space="preserve">Change that to reference <pc dataRefEnd="id2" dataRefStart="id1" id="2">HeaderTextBlockStyle</pc> instead.</target>
          </segment>
        </unit>
        <unit id="185">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="185">
            <source xml:space="preserve">We no longer need to set any special Background, Style, nor ItemContainerStyle on the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc>, so just delete those three attributes and their values from the markup.</source>
            <target xml:space="preserve">We no longer need to set any special Background, Style, nor ItemContainerStyle on the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc>, so just delete those three attributes and their values from the markup.</target>
          </segment>
        </unit>
        <unit id="186">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="186">
            <source xml:space="preserve">We do want to hide the border of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc>, though, so add <pc dataRefEnd="id4" dataRefStart="id3" id="4">BorderBrush="{x:Null}"</pc> to it.</source>
            <target xml:space="preserve">We do want to hide the border of the <pc dataRefEnd="id2" dataRefStart="id1" id="2">ListBox</pc>, though, so add <pc dataRefEnd="id4" dataRefStart="id3" id="4">BorderBrush="{x:Null}"</pc> to it.</target>
          </segment>
        </unit>
        <unit id="187">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="187">
            <source xml:space="preserve">We're not referencing any of the resources in the BookstoreStyles.xaml <pc dataRefEnd="id2" dataRefStart="id1" id="2">ResourceDictionary</pc> file any longer.</source>
            <target xml:space="preserve">We're not referencing any of the resources in the BookstoreStyles.xaml <pc dataRefEnd="id2" dataRefStart="id1" id="2">ResourceDictionary</pc> file any longer.</target>
          </segment>
        </unit>
        <unit id="188">
          <segment state="initial" id="188">
            <source xml:space="preserve">You can delete all of those resources.</source>
            <target xml:space="preserve">You can delete all of those resources.</target>
          </segment>
        </unit>
        <unit id="189">
          <segment state="initial" id="189">
            <source xml:space="preserve">But, don't delete the BookstoreStyles.xaml file itself: we still have one last use for it, as you'll see in the next section.</source>
            <target xml:space="preserve">But, don't delete the BookstoreStyles.xaml file itself: we still have one last use for it, as you'll see in the next section.</target>
          </segment>
        </unit>
        <unit id="190">
          <segment state="initial" id="190">
            <source xml:space="preserve">That last sequence of styling operations leaves the app looking like this.</source>
            <target xml:space="preserve">That last sequence of styling operations leaves the app looking like this.</target>
          </segment>
        </unit>
        <unit id="191">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="191">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the almost-ported windows 10 app</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the almost-ported windows 10 app</pc>
						</target>
          </segment>
        </unit>
        <unit id="192">
          <segment state="initial" id="192">
            <source xml:space="preserve">The almost-ported Windows 10 app running on a Desktop device</source>
            <target xml:space="preserve">The almost-ported Windows 10 app running on a Desktop device</target>
          </segment>
        </unit>
        <unit id="193">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="193">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the almost-ported windows 10 app</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the almost-ported windows 10 app</pc>
						</target>
          </segment>
        </unit>
        <unit id="194">
          <segment state="initial" id="194">
            <source xml:space="preserve">The almost-ported Windows 10 app running on a Mobile device</source>
            <target xml:space="preserve">The almost-ported Windows 10 app running on a Mobile device</target>
          </segment>
        </unit>
        <unit id="195">
          <segment state="initial" id="195">
            <source xml:space="preserve">An optional adjustment to the list box for Mobile devices</source>
            <target xml:space="preserve">An optional adjustment to the list box for Mobile devices</target>
          </segment>
        </unit>
        <unit id="196">
          <segment state="initial" id="196">
            <source xml:space="preserve">When the app is running on a Mobile device, the background of a list box is light by default in both themes.</source>
            <target xml:space="preserve">When the app is running on a Mobile device, the background of a list box is light by default in both themes.</target>
          </segment>
        </unit>
        <unit id="197">
          <segment state="initial" id="197">
            <source xml:space="preserve">That may be the style that you prefer and, if so, then there's nothing more to do except to tidy up: delete the BookstoreStyles.xaml resource dictionary file from your project, and remove the markup that merges it into MainPage.xaml.</source>
            <target xml:space="preserve">That may be the style that you prefer and, if so, then there's nothing more to do except to tidy up: delete the BookstoreStyles.xaml resource dictionary file from your project, and remove the markup that merges it into MainPage.xaml.</target>
          </segment>
        </unit>
        <unit id="198">
          <segment state="initial" id="198">
            <source xml:space="preserve">But, controls are designed so that you can customize their look while leaving their behavior unaffected.</source>
            <target xml:space="preserve">But, controls are designed so that you can customize their look while leaving their behavior unaffected.</target>
          </segment>
        </unit>
        <unit id="199">
          <segment state="initial" id="199">
            <source xml:space="preserve">So, if you want the list box to be dark in the dark theme—the way the original app looked—then this section describes a way to do that.</source>
            <target xml:space="preserve">So, if you want the list box to be dark in the dark theme—the way the original app looked—then this section describes a way to do that.</target>
          </segment>
        </unit>
        <unit id="200">
          <segment state="initial" id="200">
            <source xml:space="preserve">The change we make only needs to affect the app when it's running on Mobile devices.</source>
            <target xml:space="preserve">The change we make only needs to affect the app when it's running on Mobile devices.</target>
          </segment>
        </unit>
        <unit id="201">
          <segment state="initial" id="201">
            <source xml:space="preserve">So, we'll use a very slightly customized list box style when we're running on the Mobile device family, and we'll continue to use the default style when we're running everywhere else.</source>
            <target xml:space="preserve">So, we'll use a very slightly customized list box style when we're running on the Mobile device family, and we'll continue to use the default style when we're running everywhere else.</target>
          </segment>
        </unit>
        <unit id="202">
          <segment state="initial" id="202">
            <source xml:space="preserve">To do that, we'll make a copy of BookstoreStyles.xaml and we'll give it a special MRT-qualified name, which will cause it to be loaded only on Mobile devices.</source>
            <target xml:space="preserve">To do that, we'll make a copy of BookstoreStyles.xaml and we'll give it a special MRT-qualified name, which will cause it to be loaded only on Mobile devices.</target>
          </segment>
        </unit>
        <unit id="203">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="203">
            <source xml:space="preserve">Add a new <pc dataRefEnd="id2" dataRefStart="id1" id="2">ResourceDictionary</pc> project item and name it BookstoreStyles.DeviceFamily-Mobile.xaml.</source>
            <target xml:space="preserve">Add a new <pc dataRefEnd="id2" dataRefStart="id1" id="2">ResourceDictionary</pc> project item and name it BookstoreStyles.DeviceFamily-Mobile.xaml.</target>
          </segment>
        </unit>
        <unit id="204">
          <segment state="initial" id="204">
            <source xml:space="preserve">You now have two files both of whose logical name is BookstoreStyles.xaml (and that's the name you use in your markup and code).</source>
            <target xml:space="preserve">You now have two files both of whose logical name is BookstoreStyles.xaml (and that's the name you use in your markup and code).</target>
          </segment>
        </unit>
        <unit id="205">
          <segment state="initial" id="205">
            <source xml:space="preserve">The files have different physical names, though, so they can contain different markup.</source>
            <target xml:space="preserve">The files have different physical names, though, so they can contain different markup.</target>
          </segment>
        </unit>
        <unit id="206">
          <segment state="initial" id="206">
            <source xml:space="preserve">You can use this MRT-qualified naming scheme with any xaml file, but be aware that all xaml files with the same logical name share a single xaml.cs code-behind file (where one is applicable).</source>
            <target xml:space="preserve">You can use this MRT-qualified naming scheme with any xaml file, but be aware that all xaml files with the same logical name share a single xaml.cs code-behind file (where one is applicable).</target>
          </segment>
        </unit>
        <unit id="207">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="207">
            <source xml:space="preserve">Edit a copy of the control template for the list box and store that with the key of <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookstoreListBoxStyle</pc> in the new resource dictionary, BookstoreStyles.DeviceFamily-Mobile.xaml.</source>
            <target xml:space="preserve">Edit a copy of the control template for the list box and store that with the key of <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookstoreListBoxStyle</pc> in the new resource dictionary, BookstoreStyles.DeviceFamily-Mobile.xaml.</target>
          </segment>
        </unit>
        <unit id="208">
          <segment state="initial" id="208">
            <source xml:space="preserve">Now, we'll make simple changes to three of the setters.</source>
            <target xml:space="preserve">Now, we'll make simple changes to three of the setters.</target>
          </segment>
        </unit>
        <unit id="209">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="209">
            <source xml:space="preserve">In the Foreground setter, change the value to <pc dataRefEnd="id2" dataRefStart="id1" id="2">"{x:Null}"</pc>.</source>
            <target xml:space="preserve">In the Foreground setter, change the value to <pc dataRefEnd="id2" dataRefStart="id1" id="2">"{x:Null}"</pc>.</target>
          </segment>
        </unit>
        <unit id="210">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
            <data id="id3">&lt;code&gt;</data>
            <data id="id4">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="210">
            <source xml:space="preserve">Note that setting a property to <pc dataRefEnd="id2" dataRefStart="id1" id="2">"{x:Null}"</pc> directly on an element is the same as setting it to <pc dataRefEnd="id4" dataRefStart="id3" id="4">null</pc> in code.</source>
            <target xml:space="preserve">Note that setting a property to <pc dataRefEnd="id2" dataRefStart="id1" id="2">"{x:Null}"</pc> directly on an element is the same as setting it to <pc dataRefEnd="id4" dataRefStart="id3" id="4">null</pc> in code.</target>
          </segment>
        </unit>
        <unit id="211">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="211">
            <source xml:space="preserve">But, using a value of <pc dataRefEnd="id2" dataRefStart="id1" id="2">"{x:Null}"</pc> in a setter has a unique effect: it overrides the setter in the default style (for the same property) and restores the default value of the property on the target element.</source>
            <target xml:space="preserve">But, using a value of <pc dataRefEnd="id2" dataRefStart="id1" id="2">"{x:Null}"</pc> in a setter has a unique effect: it overrides the setter in the default style (for the same property) and restores the default value of the property on the target element.</target>
          </segment>
        </unit>
        <unit id="212">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="212">
            <source xml:space="preserve">In the Background setter, change the value to <pc dataRefEnd="id2" dataRefStart="id1" id="2">"Transparent"</pc> to remove that light background.</source>
            <target xml:space="preserve">In the Background setter, change the value to <pc dataRefEnd="id2" dataRefStart="id1" id="2">"Transparent"</pc> to remove that light background.</target>
          </segment>
        </unit>
        <unit id="213">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="213">
            <source xml:space="preserve">In the Template setter, find the visual state named <pc dataRefEnd="id2" dataRefStart="id1" id="2">Focused</pc> and delete its Storyboard, making it into an empty tag.</source>
            <target xml:space="preserve">In the Template setter, find the visual state named <pc dataRefEnd="id2" dataRefStart="id1" id="2">Focused</pc> and delete its Storyboard, making it into an empty tag.</target>
          </segment>
        </unit>
        <unit id="214">
          <segment state="initial" id="214">
            <source xml:space="preserve">Delete all the other setters from the markup.</source>
            <target xml:space="preserve">Delete all the other setters from the markup.</target>
          </segment>
        </unit>
        <unit id="215">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="215">
            <source xml:space="preserve">Finally, copy <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookstoreListBoxStyle</pc> into BookstoreStyles.xaml and delete its three setters, making it into an empty tag.</source>
            <target xml:space="preserve">Finally, copy <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookstoreListBoxStyle</pc> into BookstoreStyles.xaml and delete its three setters, making it into an empty tag.</target>
          </segment>
        </unit>
        <unit id="216">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="216">
            <source xml:space="preserve">We do this so that on devices other than Mobile ones, our reference to BookstoreStyles.xaml and to <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookstoreListBoxStyle</pc> will resolve, but will have no effect.</source>
            <target xml:space="preserve">We do this so that on devices other than Mobile ones, our reference to BookstoreStyles.xaml and to <pc dataRefEnd="id2" dataRefStart="id1" id="2">BookstoreListBoxStyle</pc> will resolve, but will have no effect.</target>
          </segment>
        </unit>
        <unit id="217">
          <originalData>
            <data id="id1">&lt;linkText&gt;</data>
            <data id="id2">&lt;/linkText&gt;</data>
          </originalData>
          <segment state="initial" id="217">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">the ported windows 10 app</pc>
						</target>
          </segment>
        </unit>
        <unit id="218">
          <segment state="initial" id="218">
            <source xml:space="preserve">The ported Windows 10 app running on a Mobile device</source>
            <target xml:space="preserve">The ported Windows 10 app running on a Mobile device</target>
          </segment>
        </unit>
        <unit id="219">
          <segment state="initial" id="219">
            <source xml:space="preserve">Conclusion</source>
            <target xml:space="preserve">Conclusion</target>
          </segment>
        </unit>
        <unit id="220">
          <segment state="initial" id="220">
            <source xml:space="preserve">This case study showed the process of porting a very simple app—arguably an unrealistically simple one.</source>
            <target xml:space="preserve">This case study showed the process of porting a very simple app—arguably an unrealistically simple one.</target>
          </segment>
        </unit>
        <unit id="221">
          <segment state="initial" id="221">
            <source xml:space="preserve">For instance, a list box can be used for selection or for establishing a context for navigation; the app navigates to a page with more details about the item that was tapped.</source>
            <target xml:space="preserve">For instance, a list box can be used for selection or for establishing a context for navigation; the app navigates to a page with more details about the item that was tapped.</target>
          </segment>
        </unit>
        <unit id="222">
          <segment state="initial" id="222">
            <source xml:space="preserve">This particular app does nothing with the user's selection, and it has no navigation.</source>
            <target xml:space="preserve">This particular app does nothing with the user's selection, and it has no navigation.</target>
          </segment>
        </unit>
        <unit id="223">
          <segment state="initial" id="223">
            <source xml:space="preserve">Even so, the case study served to break the ice, to introduce the porting process, and to demonstrate important techniques that you can use in real UWP apps.</source>
            <target xml:space="preserve">Even so, the case study served to break the ice, to introduce the porting process, and to demonstrate important techniques that you can use in real UWP apps.</target>
          </segment>
        </unit>
        <unit id="224">
          <segment state="initial" id="224">
            <source xml:space="preserve">We also saw evidence that porting view models is generally a smooth process.</source>
            <target xml:space="preserve">We also saw evidence that porting view models is generally a smooth process.</target>
          </segment>
        </unit>
        <unit id="225">
          <segment state="initial" id="225">
            <source xml:space="preserve">User interface, and form factor support, are aspects that are more likely to require our attention when porting.</source>
            <target xml:space="preserve">User interface, and form factor support, are aspects that are more likely to require our attention when porting.</target>
          </segment>
        </unit>
        <unit id="226">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="226">
            <source xml:space="preserve">The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, in which we look at accessing and displaying grouped data.</source>
            <target xml:space="preserve">The next case study is <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore2</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, in which we look at accessing and displaying grouped data.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>