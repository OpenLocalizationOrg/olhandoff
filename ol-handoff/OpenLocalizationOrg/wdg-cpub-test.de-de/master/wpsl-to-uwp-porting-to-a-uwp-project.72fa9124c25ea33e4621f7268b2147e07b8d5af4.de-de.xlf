<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">37aa4360e13b9b47620e9ef220d69ea10c0fb1cf</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Porting a Windows Phone Silverlight project to a UWP project</source>
            <target xml:space="preserve">Porting a Windows Phone Silverlight project to a UWP project</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="104">
            <source xml:space="preserve">The previous topic was <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Namespace and class mappings</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The previous topic was <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Namespace and class mappings</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</source>
            <target xml:space="preserve">You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">Create the project and copy files to it</source>
            <target xml:space="preserve">Create the project and copy files to it</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">Launch Microsoft Visual Studio 2015 and create a new Blank Application (Windows Universal) project.</source>
            <target xml:space="preserve">Launch Microsoft Visual Studio 2015 and create a new Blank Application (Windows Universal) project.</target>
          </segment>
        </unit>
        <unit id="108">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="108">
            <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Jumpstart your Windows Store app using templates (C\#, C++, Visual Basic)</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Jumpstart your Windows Store app using templates (C\#, C++, Visual Basic)</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Your new project builds an app package (an appx file) that will run on all device families.</source>
            <target xml:space="preserve">Your new project builds an app package (an appx file) that will run on all device families.</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">In your Windows Phone Silverlight app project, identify all the source code files and visual asset files that you want to reuse.</source>
            <target xml:space="preserve">In your Windows Phone Silverlight app project, identify all the source code files and visual asset files that you want to reuse.</target>
          </segment>
        </unit>
        <unit id="111">
          <segment state="initial" id="111">
            <source xml:space="preserve">Using File Explorer, copy data models, view models, visual assets, Resource Dictionaries, folder structure, and anything else that you wish to re-use, to your new project.</source>
            <target xml:space="preserve">Using File Explorer, copy data models, view models, visual assets, Resource Dictionaries, folder structure, and anything else that you wish to re-use, to your new project.</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">Copy or create sub-folders on disk as necessary.</source>
            <target xml:space="preserve">Copy or create sub-folders on disk as necessary.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">Copy views (for example, MainPage.xaml and MainPage.xaml.cs) into the new project node, too.</source>
            <target xml:space="preserve">Copy views (for example, MainPage.xaml and MainPage.xaml.cs) into the new project node, too.</target>
          </segment>
        </unit>
        <unit id="114">
          <segment state="initial" id="114">
            <source xml:space="preserve">Again, create new sub-folders as necessary, and remove the existing views from the project.</source>
            <target xml:space="preserve">Again, create new sub-folders as necessary, and remove the existing views from the project.</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">But, before you over-write or remove a view that Visual Studio generated, keep a copy because it may be useful to refer to it later.</source>
            <target xml:space="preserve">But, before you over-write or remove a view that Visual Studio generated, keep a copy because it may be useful to refer to it later.</target>
          </segment>
        </unit>
        <unit id="116">
          <segment state="initial" id="116">
            <source xml:space="preserve">The first phase of porting a Windows Phone Silverlight app focuses on getting it to look good and work well on one device family.</source>
            <target xml:space="preserve">The first phase of porting a Windows Phone Silverlight app focuses on getting it to look good and work well on one device family.</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">Later, you'll turn your attention to making sure the views adapt themselves well to all form factors, and optionally to adding any adaptive code to get the most from a particular device family.</source>
            <target xml:space="preserve">Later, you'll turn your attention to making sure the views adapt themselves well to all form factors, and optionally to adding any adaptive code to get the most from a particular device family.</target>
          </segment>
        </unit>
        <unit id="118">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="118">
            <source xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="4">Show All Files</pc> is toggled on.</source>
            <target xml:space="preserve">In <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, make sure <pc dataRefEnd="id4" dataRefStart="id3" id="4">Show All Files</pc> is toggled on.</target>
          </segment>
        </unit>
        <unit id="119">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="119">
            <source xml:space="preserve">Select the files that you copied, right-click them, and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Include In Project</pc>.</source>
            <target xml:space="preserve">Select the files that you copied, right-click them, and click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Include In Project</pc>.</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">This will automatically include their containing folders.</source>
            <target xml:space="preserve">This will automatically include their containing folders.</target>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source xml:space="preserve">You can then toggle <pc dataRefEnd="id2" dataRefStart="id1" id="2">Show All Files</pc> off if you like.</source>
            <target xml:space="preserve">You can then toggle <pc dataRefEnd="id2" dataRefStart="id1" id="2">Show All Files</pc> off if you like.</target>
          </segment>
        </unit>
        <unit id="122">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="122">
            <source xml:space="preserve">An alternative workflow, if you prefer, is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add Existing Item</pc> command, having created any necessary sub-folders in the Visual Studio <pc dataRefEnd="id4" dataRefStart="id3" id="4">Solution Explorer</pc>.</source>
            <target xml:space="preserve">An alternative workflow, if you prefer, is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Add Existing Item</pc> command, having created any necessary sub-folders in the Visual Studio <pc dataRefEnd="id4" dataRefStart="id3" id="4">Solution Explorer</pc>.</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">Double-check that your visual assets have <pc dataRefEnd="id2" dataRefStart="id1" id="2">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="8">Do not copy</pc>.</source>
            <target xml:space="preserve">Double-check that your visual assets have <pc dataRefEnd="id2" dataRefStart="id1" id="2">Build Action</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Content</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="6">Copy to Output Directory</pc> set to <pc dataRefEnd="id8" dataRefStart="id7" id="8">Do not copy</pc>.</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">The differences in namespace and class names will generate lots of build errors at this stage.</source>
            <target xml:space="preserve">The differences in namespace and class names will generate lots of build errors at this stage.</target>
          </segment>
        </unit>
        <unit id="125">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="125">
            <source xml:space="preserve">For example, if you open the views that Visual Studio generated, you'll see that they are of type <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Page**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and not <pc dataRefEnd="id8" dataRefStart="id7" id="4">PhoneApplicationPage</pc>.</source>
            <target xml:space="preserve">For example, if you open the views that Visual Studio generated, you'll see that they are of type <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Page**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, and not <pc dataRefEnd="id8" dataRefStart="id7" id="4">PhoneApplicationPage</pc>.</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">There are lots of XAML markup and imperative code differences that the following topics in this porting guide cover in detail.</source>
            <target xml:space="preserve">There are lots of XAML markup and imperative code differences that the following topics in this porting guide cover in detail.</target>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
            <data id="id11">&lt;strong&gt;</data>
            <data id="id12">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source xml:space="preserve">But, you'll make fast progress just following these general steps: change "clr-namespace" to "using" in your namespace prefix declarations in XAML markup; use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Namespace and class mappings</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> topic and Visual Studio's <pc dataRefEnd="id8" dataRefStart="id7" id="4">Find and Replace</pc> command to make bulk changes to your source code (for example, replace "System.Windows" with "Windows.UI.Xaml"); and in the imperative code editor in Visual Studio use the <pc dataRefEnd="id10" dataRefStart="id9" id="6">Resolve</pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="8">Organize Usings</pc> commands on the context menu for more targeted changes.</source>
            <target xml:space="preserve">But, you'll make fast progress just following these general steps: change "clr-namespace" to "using" in your namespace prefix declarations in XAML markup; use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Namespace and class mappings</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> topic and Visual Studio's <pc dataRefEnd="id8" dataRefStart="id7" id="4">Find and Replace</pc> command to make bulk changes to your source code (for example, replace "System.Windows" with "Windows.UI.Xaml"); and in the imperative code editor in Visual Studio use the <pc dataRefEnd="id10" dataRefStart="id9" id="6">Resolve</pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="8">Organize Usings</pc> commands on the context menu for more targeted changes.</target>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source xml:space="preserve">Extension SDKs</source>
            <target xml:space="preserve">Extension SDKs</target>
          </segment>
        </unit>
        <unit id="129">
          <segment state="initial" id="129">
            <source xml:space="preserve">Most of the Universal Windows Platform (UWP) APIs your ported app will call are implemented in the set of APIs known as the universal device family.</source>
            <target xml:space="preserve">Most of the Universal Windows Platform (UWP) APIs your ported app will call are implemented in the set of APIs known as the universal device family.</target>
          </segment>
        </unit>
        <unit id="130">
          <segment state="initial" id="130">
            <source xml:space="preserve">But, some are implemented in extension SDKs, and Visual Studio only recognizes APIs that are implemented by your app's target device family or by any extension SDKs that you have referenced.</source>
            <target xml:space="preserve">But, some are implemented in extension SDKs, and Visual Studio only recognizes APIs that are implemented by your app's target device family or by any extension SDKs that you have referenced.</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">If you get compile errors about namespaces or types or members that could not be found, then this is likely to be the cause.</source>
            <target xml:space="preserve">If you get compile errors about namespaces or types or members that could not be found, then this is likely to be the cause.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">Open the API's topic in the API reference documentation and navigate to the Requirements section: that will tell you what the implementing device family is.</source>
            <target xml:space="preserve">Open the API's topic in the API reference documentation and navigate to the Requirements section: that will tell you what the implementing device family is.</target>
          </segment>
        </unit>
        <unit id="133">
          <segment state="initial" id="133">
            <source xml:space="preserve">If that's not your target device family, then to make the API available to your project, you will need a reference to the extension SDK for that device family.</source>
            <target xml:space="preserve">If that's not your target device family, then to make the API available to your project, you will need a reference to the extension SDK for that device family.</target>
          </segment>
        </unit>
        <unit id="134">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;strong&gt;</data>
            <data id="id8">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="134">
            <source xml:space="preserve">Click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Project</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Add Reference</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Windows Universal</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">Extensions</pc> and select the appropriate extension SDK.</source>
            <target xml:space="preserve">Click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Project</pc> &gt; <pc dataRefEnd="id4" dataRefStart="id3" id="4">Add Reference</pc> &gt; <pc dataRefEnd="id6" dataRefStart="id5" id="6">Windows Universal</pc> &gt; <pc dataRefEnd="id8" dataRefStart="id7" id="8">Extensions</pc> and select the appropriate extension SDK.</target>
          </segment>
        </unit>
        <unit id="135">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="135">
            <source xml:space="preserve">For example, if the APIs you want to call are available only in the mobile device family, and they were introduced in version 10.0.x.y, then select <pc dataRefEnd="id2" dataRefStart="id1" id="2">Windows Mobile Extensions for the UWP</pc>.</source>
            <target xml:space="preserve">For example, if the APIs you want to call are available only in the mobile device family, and they were introduced in version 10.0.x.y, then select <pc dataRefEnd="id2" dataRefStart="id1" id="2">Windows Mobile Extensions for the UWP</pc>.</target>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source xml:space="preserve">That will add the following reference to your project file:</source>
            <target xml:space="preserve">That will add the following reference to your project file:</target>
          </segment>
        </unit>
        <unit id="137">
          <segment state="initial" id="137">
            <source xml:space="preserve">The name and version number match the folders in the installed location of your SDK.</source>
            <target xml:space="preserve">The name and version number match the folders in the installed location of your SDK.</target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">For example, the above information matches this folder name:</source>
            <target xml:space="preserve">For example, the above information matches this folder name:</target>
          </segment>
        </unit>
        <unit id="139">
          <originalData>
            <data id="id1">&lt;code&gt;</data>
            <data id="id2">&lt;/code&gt;</data>
          </originalData>
          <segment state="initial" id="139">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">\Program Files (x86)\Windows Kits\10\Extension SDKs\WindowsMobile\10.0.x.y</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">\Program Files (x86)\Windows Kits\10\Extension SDKs\WindowsMobile\10.0.x.y</pc>
						</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">Unless your app targets the device family that implements the API, you'll need to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ApiInformation**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class to test for the presence of the API before you call it (this is called adaptive code).</source>
            <target xml:space="preserve">Unless your app targets the device family that implements the API, you'll need to use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ApiInformation**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class to test for the presence of the API before you call it (this is called adaptive code).</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">This condition will then be evaluated wherever your app runs, but it will only evaluate to true on devices where the API is present and therefore available to call.</source>
            <target xml:space="preserve">This condition will then be evaluated wherever your app runs, but it will only evaluate to true on devices where the API is present and therefore available to call.</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">Only use extension SDKs and adaptive code after first checking whether a universal API exists.</source>
            <target xml:space="preserve">Only use extension SDKs and adaptive code after first checking whether a universal API exists.</target>
          </segment>
        </unit>
        <unit id="143">
          <segment state="initial" id="143">
            <source xml:space="preserve">Some examples are given in the section below.</source>
            <target xml:space="preserve">Some examples are given in the section below.</target>
          </segment>
        </unit>
        <unit id="144">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="144">
            <source xml:space="preserve">Also, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">App package manifest</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Also, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">App package manifest</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="145">
          <segment state="initial" id="145">
            <source xml:space="preserve">Maximizing markup and code reuse</source>
            <target xml:space="preserve">Maximizing markup and code reuse</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">You will find that refactoring a little, and/or adding adaptive code (which is explained below), will allow you to maximize the markup and code that works across all device families.</source>
            <target xml:space="preserve">You will find that refactoring a little, and/or adding adaptive code (which is explained below), will allow you to maximize the markup and code that works across all device families.</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">Here are more details.</source>
            <target xml:space="preserve">Here are more details.</target>
          </segment>
        </unit>
        <unit id="148">
          <segment state="initial" id="148">
            <source xml:space="preserve">Files that are common to all device families need no special consideration.</source>
            <target xml:space="preserve">Files that are common to all device families need no special consideration.</target>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source xml:space="preserve">Those files will be used by the app on all the device families that it runs on.</source>
            <target xml:space="preserve">Those files will be used by the app on all the device families that it runs on.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">This includes XAML markup files, imperative source code files, and asset files.</source>
            <target xml:space="preserve">This includes XAML markup files, imperative source code files, and asset files.</target>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source xml:space="preserve">It is possible for your app to detect the device family that it is running on and navigate to a view that has been designed specifically for that device family.</source>
            <target xml:space="preserve">It is possible for your app to detect the device family that it is running on and navigate to a view that has been designed specifically for that device family.</target>
          </segment>
        </unit>
        <unit id="152">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="152">
            <source xml:space="preserve">For more details, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Detecting the platform your app is running on</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more details, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Detecting the platform your app is running on</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="153">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="153">
            <source xml:space="preserve">A similar technique that you may find useful if there is no alternative is to give a markup file or <pc dataRefEnd="id2" dataRefStart="id1" id="2">ResourceDictionary</pc> file (or the folder that contains the file) a special name such that it is automatically loaded at runtime only when your app runs on a particular device family.</source>
            <target xml:space="preserve">A similar technique that you may find useful if there is no alternative is to give a markup file or <pc dataRefEnd="id2" dataRefStart="id1" id="2">ResourceDictionary</pc> file (or the folder that contains the file) a special name such that it is automatically loaded at runtime only when your app runs on a particular device family.</target>
          </segment>
        </unit>
        <unit id="154">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="154">
            <source xml:space="preserve">This technique is illustrated in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> case study.</source>
            <target xml:space="preserve">This technique is illustrated in the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Bookstore1</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> case study.</target>
          </segment>
        </unit>
        <unit id="155">
          <segment state="initial" id="155">
            <source xml:space="preserve">To use features that are not available on all device families (for example, printers, scanners, or the camera button) you can write adaptive code.</source>
            <target xml:space="preserve">To use features that are not available on all device families (for example, printers, scanners, or the camera button) you can write adaptive code.</target>
          </segment>
        </unit>
        <unit id="156">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="156">
            <source xml:space="preserve">See the third example in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Conditional compilation, and adaptive code</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> in this topic.</source>
            <target xml:space="preserve">See the third example in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Conditional compilation, and adaptive code</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> in this topic.</target>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source xml:space="preserve">If you want to support both Windows Phone Silverlight and Windows 10, then you may be able to share source code files between projects.</source>
            <target xml:space="preserve">If you want to support both Windows Phone Silverlight and Windows 10, then you may be able to share source code files between projects.</target>
          </segment>
        </unit>
        <unit id="158">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="158">
            <source xml:space="preserve">Here's how: in Visual Studio, right-click the project in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, select <pc dataRefEnd="id4" dataRefStart="id3" id="4">Add Existing Item</pc>, select the files to share, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="6">Add As Link</pc>.</source>
            <target xml:space="preserve">Here's how: in Visual Studio, right-click the project in <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc>, select <pc dataRefEnd="id4" dataRefStart="id3" id="4">Add Existing Item</pc>, select the files to share, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="6">Add As Link</pc>.</target>
          </segment>
        </unit>
        <unit id="159">
          <segment state="initial" id="159">
            <source xml:space="preserve">Store your source code files in a common folder on the file system where the projects that link to them can see them, and don't forget to add them to source control.</source>
            <target xml:space="preserve">Store your source code files in a common folder on the file system where the projects that link to them can see them, and don't forget to add them to source control.</target>
          </segment>
        </unit>
        <unit id="160">
          <segment state="initial" id="160">
            <source xml:space="preserve">If you can factor your imperative source code so that most, if not all, of a file will work on both platforms, then you don't need to have two copies of it.</source>
            <target xml:space="preserve">If you can factor your imperative source code so that most, if not all, of a file will work on both platforms, then you don't need to have two copies of it.</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">You can wrap any platform-specific logic in the file inside conditional compilation directives where possible, or run-time conditions where necessary.</source>
            <target xml:space="preserve">You can wrap any platform-specific logic in the file inside conditional compilation directives where possible, or run-time conditions where necessary.</target>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source xml:space="preserve">See the next section below, and <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">C\# Preprocessor Directives</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">See the next section below, and <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">C\# Preprocessor Directives</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="163">
          <segment state="initial" id="163">
            <source xml:space="preserve">For reuse at the binary level, rather than the source code level, there are Portable Class Libraries, which support the subset of .NET APIs that are available in Windows Phone Silverlight as well as the subset for Windows 10 apps (.NET Core).</source>
            <target xml:space="preserve">For reuse at the binary level, rather than the source code level, there are Portable Class Libraries, which support the subset of .NET APIs that are available in Windows Phone Silverlight as well as the subset for Windows 10 apps (.NET Core).</target>
          </segment>
        </unit>
        <unit id="164">
          <segment state="initial" id="164">
            <source xml:space="preserve">Portable Class Library assemblies are binary compatible with these .NET platforms and more.</source>
            <target xml:space="preserve">Portable Class Library assemblies are binary compatible with these .NET platforms and more.</target>
          </segment>
        </unit>
        <unit id="165">
          <segment state="initial" id="165">
            <source xml:space="preserve">Use Visual Studio to create a project that targets a Portable Class Library.</source>
            <target xml:space="preserve">Use Visual Studio to create a project that targets a Portable Class Library.</target>
          </segment>
        </unit>
        <unit id="166">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="166">
            <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Cross-Platform Development with the Portable Class Library</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Cross-Platform Development with the Portable Class Library</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source xml:space="preserve">Conditional compilation, and adaptive code</source>
            <target xml:space="preserve">Conditional compilation, and adaptive code</target>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source xml:space="preserve">If you want to support both Windows Phone Silverlight and Windows 10 in a single code file then you can do that.</source>
            <target xml:space="preserve">If you want to support both Windows Phone Silverlight and Windows 10 in a single code file then you can do that.</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">If you look in your Windows 10 project at the project properties pages, you'll see that the project defines WINDOWS\_UAP as a conditional compilation symbol.</source>
            <target xml:space="preserve">If you look in your Windows 10 project at the project properties pages, you'll see that the project defines WINDOWS\_UAP as a conditional compilation symbol.</target>
          </segment>
        </unit>
        <unit id="170">
          <segment state="initial" id="170">
            <source xml:space="preserve">In general, you can use the following logic to perform conditional compilation.</source>
            <target xml:space="preserve">In general, you can use the following logic to perform conditional compilation.</target>
          </segment>
        </unit>
        <unit id="171">
          <segment state="initial" id="171">
            <source xml:space="preserve">If you have code that you've been sharing between a Windows Phone Silverlight app and a Windows Store app, then you may already have source code with logic like this:</source>
            <target xml:space="preserve">If you have code that you've been sharing between a Windows Phone Silverlight app and a Windows Store app, then you may already have source code with logic like this:</target>
          </segment>
        </unit>
        <unit id="172">
          <segment state="initial" id="172">
            <source xml:space="preserve">If so, and if you now want to support Windows 10 in addition, then you can do that, too.</source>
            <target xml:space="preserve">If so, and if you now want to support Windows 10 in addition, then you can do that, too.</target>
          </segment>
        </unit>
        <unit id="173">
          <segment state="initial" id="173">
            <source xml:space="preserve">You may have used conditional compilation to limit handling of the hardware back button to Windows Phone.</source>
            <target xml:space="preserve">You may have used conditional compilation to limit handling of the hardware back button to Windows Phone.</target>
          </segment>
        </unit>
        <unit id="174">
          <segment state="initial" id="174">
            <source xml:space="preserve">In Windows 10, the back button event is a universal concept.</source>
            <target xml:space="preserve">In Windows 10, the back button event is a universal concept.</target>
          </segment>
        </unit>
        <unit id="175">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="175">
            <source xml:space="preserve">Back buttons implemented in hardware or in software will all raise the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**BackRequested**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event, so that's the one to handle.</source>
            <target xml:space="preserve">Back buttons implemented in hardware or in software will all raise the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**BackRequested**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> event, so that's the one to handle.</target>
          </segment>
        </unit>
        <unit id="176">
          <segment state="initial" id="176">
            <source xml:space="preserve">You may have used conditional compilation to limit handling of the hardware camera button to Windows Phone.</source>
            <target xml:space="preserve">You may have used conditional compilation to limit handling of the hardware camera button to Windows Phone.</target>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source xml:space="preserve">In Windows 10, the hardware camera button is a concept particular to the mobile device family.</source>
            <target xml:space="preserve">In Windows 10, the hardware camera button is a concept particular to the mobile device family.</target>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source xml:space="preserve">Because one app package will be running on all devices, we change our compile-time condition into a run-time condition using what is known as adaptive code.</source>
            <target xml:space="preserve">Because one app package will be running on all devices, we change our compile-time condition into a run-time condition using what is known as adaptive code.</target>
          </segment>
        </unit>
        <unit id="179">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="179">
            <source xml:space="preserve">To do that, we use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ApiInformation**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class to query at run-time for the presence of the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**HardwareButtons**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> class.</source>
            <target xml:space="preserve">To do that, we use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ApiInformation**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class to query at run-time for the presence of the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**HardwareButtons**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> class.</target>
          </segment>
        </unit>
        <unit id="180">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="180">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">HardwareButtons</pc> is defined in the mobile extension SDK, so we'll need to add a reference to that SDK to our project for this code to compile.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">HardwareButtons</pc> is defined in the mobile extension SDK, so we'll need to add a reference to that SDK to our project for this code to compile.</target>
          </segment>
        </unit>
        <unit id="181">
          <segment state="initial" id="181">
            <source xml:space="preserve">Note, though, that the handler will only be executed on a device that implements the types defined in the mobile extension SDK, and that's the mobile device family.</source>
            <target xml:space="preserve">Note, though, that the handler will only be executed on a device that implements the types defined in the mobile extension SDK, and that's the mobile device family.</target>
          </segment>
        </unit>
        <unit id="182">
          <segment state="initial" id="182">
            <source xml:space="preserve">So, the following code is careful only to use features that are present, although it achieves it in a different way from conditional compilation.</source>
            <target xml:space="preserve">So, the following code is careful only to use features that are present, although it achieves it in a different way from conditional compilation.</target>
          </segment>
        </unit>
        <unit id="183">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="183">
            <source xml:space="preserve">Also, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Detecting the platform your app is running on</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Also, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Detecting the platform your app is running on</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="184">
          <segment state="initial" id="184">
            <source xml:space="preserve">The app package manifest</source>
            <target xml:space="preserve">The app package manifest</target>
          </segment>
        </unit>
        <unit id="185">
          <segment state="initial" id="185">
            <source xml:space="preserve">The settings in your project (including any extension SDKs references) determine the API surface area that your app can call.</source>
            <target xml:space="preserve">The settings in your project (including any extension SDKs references) determine the API surface area that your app can call.</target>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source xml:space="preserve">But, your app package manifest is what determines the actual set of devices that your customers can install your app onto from the Store.</source>
            <target xml:space="preserve">But, your app package manifest is what determines the actual set of devices that your customers can install your app onto from the Store.</target>
          </segment>
        </unit>
        <unit id="187">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="187">
            <source xml:space="preserve">For more info, see Examples in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**TargetDeviceFamily**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For more info, see Examples in <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**TargetDeviceFamily**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="188">
          <segment state="initial" id="188">
            <source xml:space="preserve">It's worth knowing how to edit the app package manifest, because the topics that follow talk about using it for various declarations, capabilities, and other settings that some features need.</source>
            <target xml:space="preserve">It's worth knowing how to edit the app package manifest, because the topics that follow talk about using it for various declarations, capabilities, and other settings that some features need.</target>
          </segment>
        </unit>
        <unit id="189">
          <segment state="initial" id="189">
            <source xml:space="preserve">You can use the Visual Studio app package manifest editor to edit it.</source>
            <target xml:space="preserve">You can use the Visual Studio app package manifest editor to edit it.</target>
          </segment>
        </unit>
        <unit id="190">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="190">
            <source xml:space="preserve">If the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc> is not shown, choose it from the <pc dataRefEnd="id4" dataRefStart="id3" id="4">View</pc> menu.</source>
            <target xml:space="preserve">If the <pc dataRefEnd="id2" dataRefStart="id1" id="2">Solution Explorer</pc> is not shown, choose it from the <pc dataRefEnd="id4" dataRefStart="id3" id="4">View</pc> menu.</target>
          </segment>
        </unit>
        <unit id="191">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="191">
            <source xml:space="preserve">Double-click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Package.appxmanifest</pc>.</source>
            <target xml:space="preserve">Double-click <pc dataRefEnd="id2" dataRefStart="id1" id="2">Package.appxmanifest</pc>.</target>
          </segment>
        </unit>
        <unit id="192">
          <segment state="initial" id="192">
            <source xml:space="preserve">This opens the manifest editor window.</source>
            <target xml:space="preserve">This opens the manifest editor window.</target>
          </segment>
        </unit>
        <unit id="193">
          <segment state="initial" id="193">
            <source xml:space="preserve">Select the appropriate tab to make changes and then save the changes.</source>
            <target xml:space="preserve">Select the appropriate tab to make changes and then save the changes.</target>
          </segment>
        </unit>
        <unit id="194">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="194">
            <source xml:space="preserve">You may want to ensure that the <pc dataRefEnd="id2" dataRefStart="id1" id="2">pm:PhoneIdentity</pc> element in the ported app manifest matches what is in the app manifest of the app you're porting (for full details, see the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**pm:PhoneIdentity**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> topic).</source>
            <target xml:space="preserve">You may want to ensure that the <pc dataRefEnd="id2" dataRefStart="id1" id="2">pm:PhoneIdentity</pc> element in the ported app manifest matches what is in the app manifest of the app you're porting (for full details, see the <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**pm:PhoneIdentity**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> topic).</target>
          </segment>
        </unit>
        <unit id="195">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="195">
            <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Package manifest schema reference for Windows 10</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Package manifest schema reference for Windows 10</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="196">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="196">
            <source xml:space="preserve">The next topic is <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Troubleshooting</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">The next topic is <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Troubleshooting</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>