<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-us" trgLang="de-de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">c2cb4cffdd8252207df28eab2484bc40c430efc9</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <group id="101">
        <unit id="101">
          <segment state="initial" id="101">
            <source xml:space="preserve">Networking basics</source>
            <target xml:space="preserve">Networking basics</target>
          </segment>
        </unit>
        <unit id="102">
          <segment state="initial" id="102">
            <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
            <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
          </segment>
        </unit>
        <unit id="103">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="103">
            <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</source>
            <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">archive</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> \]</target>
          </segment>
        </unit>
        <unit id="104">
          <segment state="initial" id="104">
            <source xml:space="preserve">Things you must do for any network-enabled app.</source>
            <target xml:space="preserve">Things you must do for any network-enabled app.</target>
          </segment>
        </unit>
        <unit id="105">
          <segment state="initial" id="105">
            <source xml:space="preserve">Capabilities</source>
            <target xml:space="preserve">Capabilities</target>
          </segment>
        </unit>
        <unit id="106">
          <segment state="initial" id="106">
            <source xml:space="preserve">In order to use networking, you must add appropriate capability elements to your app manifest.</source>
            <target xml:space="preserve">In order to use networking, you must add appropriate capability elements to your app manifest.</target>
          </segment>
        </unit>
        <unit id="107">
          <segment state="initial" id="107">
            <source xml:space="preserve">If no network capability is specified in your app's manifest, your app will have no networking capability, and any attempt to connect to the network will fail.</source>
            <target xml:space="preserve">If no network capability is specified in your app's manifest, your app will have no networking capability, and any attempt to connect to the network will fail.</target>
          </segment>
        </unit>
        <unit id="108">
          <segment state="initial" id="108">
            <source xml:space="preserve">The following are the most-used networking capabilities.</source>
            <target xml:space="preserve">The following are the most-used networking capabilities.</target>
          </segment>
        </unit>
        <unit id="109">
          <segment state="initial" id="109">
            <source xml:space="preserve">Capability</source>
            <target xml:space="preserve">Capability</target>
          </segment>
        </unit>
        <unit id="110">
          <segment state="initial" id="110">
            <source xml:space="preserve">Description</source>
            <target xml:space="preserve">Description</target>
          </segment>
        </unit>
        <unit id="111">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="111">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">internetClient</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">internetClient</pc>
						</target>
          </segment>
        </unit>
        <unit id="112">
          <segment state="initial" id="112">
            <source xml:space="preserve">Provides outbound access to the Internet and networks in public places, like airports and coffee shop.</source>
            <target xml:space="preserve">Provides outbound access to the Internet and networks in public places, like airports and coffee shop.</target>
          </segment>
        </unit>
        <unit id="113">
          <segment state="initial" id="113">
            <source xml:space="preserve">Most apps that require Internet access should use this capability.</source>
            <target xml:space="preserve">Most apps that require Internet access should use this capability.</target>
          </segment>
        </unit>
        <unit id="114">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="114">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">internetClientServer</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">internetClientServer</pc>
						</target>
          </segment>
        </unit>
        <unit id="115">
          <segment state="initial" id="115">
            <source xml:space="preserve">Gives the app inbound and outbound network access from the Internet and networks in public places like airports and coffee shops.</source>
            <target xml:space="preserve">Gives the app inbound and outbound network access from the Internet and networks in public places like airports and coffee shops.</target>
          </segment>
        </unit>
        <unit id="116">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="116">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">privateNetworkClientServer</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">privateNetworkClientServer</pc>
						</target>
          </segment>
        </unit>
        <unit id="117">
          <segment state="initial" id="117">
            <source xml:space="preserve">Gives the app inbound and outbound network access at the user's trusted places, like home and work.</source>
            <target xml:space="preserve">Gives the app inbound and outbound network access at the user's trusted places, like home and work.</target>
          </segment>
        </unit>
        <unit id="118">
          <segment state="initial" id="118">
            <source xml:space="preserve">There are other capabilities that might be necessary for your app, in certain circumstances.</source>
            <target xml:space="preserve">There are other capabilities that might be necessary for your app, in certain circumstances.</target>
          </segment>
        </unit>
        <unit id="119">
          <segment state="initial" id="119">
            <source xml:space="preserve">Capability</source>
            <target xml:space="preserve">Capability</target>
          </segment>
        </unit>
        <unit id="120">
          <segment state="initial" id="120">
            <source xml:space="preserve">Description</source>
            <target xml:space="preserve">Description</target>
          </segment>
        </unit>
        <unit id="121">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="121">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">pushNotifications</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">pushNotifications</pc>
						</target>
          </segment>
        </unit>
        <unit id="122">
          <segment state="initial" id="122">
            <source xml:space="preserve">If your app uses socket activity triggers, you must specify this capability in the app manifest.</source>
            <target xml:space="preserve">If your app uses socket activity triggers, you must specify this capability in the app manifest.</target>
          </segment>
        </unit>
        <unit id="123">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="123">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">enterpriseAuthentication</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">enterpriseAuthentication</pc>
						</target>
          </segment>
        </unit>
        <unit id="124">
          <segment state="initial" id="124">
            <source xml:space="preserve">Allows an app to connect to network resources that require domain credentials.</source>
            <target xml:space="preserve">Allows an app to connect to network resources that require domain credentials.</target>
          </segment>
        </unit>
        <unit id="125">
          <segment state="initial" id="125">
            <source xml:space="preserve">This capability will require a domain administrator to enable the functionality for all apps.</source>
            <target xml:space="preserve">This capability will require a domain administrator to enable the functionality for all apps.</target>
          </segment>
        </unit>
        <unit id="126">
          <segment state="initial" id="126">
            <source xml:space="preserve">An example would be an app that retrieves data from SharePoint servers on a private Intranet.</source>
            <target xml:space="preserve">An example would be an app that retrieves data from SharePoint servers on a private Intranet.</target>
          </segment>
        </unit>
        <unit id="127">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="127">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc> With this capability your credentials can be used to access network resources on a network that requires credentials.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc> With this capability your credentials can be used to access network resources on a network that requires credentials.</target>
          </segment>
        </unit>
        <unit id="128">
          <segment state="initial" id="128">
            <source xml:space="preserve">An app with this capability can impersonate you on the network.</source>
            <target xml:space="preserve">An app with this capability can impersonate you on the network.</target>
          </segment>
        </unit>
        <unit id="129">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="129">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc> This capability is not required to allow an app to access the Internet via an authenticating proxy.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc> This capability is not required to allow an app to access the Internet via an authenticating proxy.</target>
          </segment>
        </unit>
        <unit id="130">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="130">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">proximity</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">proximity</pc>
						</target>
          </segment>
        </unit>
        <unit id="131">
          <segment state="initial" id="131">
            <source xml:space="preserve">Required for near-field proximity communication with devices in close proximity to the computer.</source>
            <target xml:space="preserve">Required for near-field proximity communication with devices in close proximity to the computer.</target>
          </segment>
        </unit>
        <unit id="132">
          <segment state="initial" id="132">
            <source xml:space="preserve">Near-field proximity may be used to send or connect with an application on a nearby device.</source>
            <target xml:space="preserve">Near-field proximity may be used to send or connect with an application on a nearby device.</target>
          </segment>
        </unit>
        <unit id="133">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="133">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc> This capability allows an app to access the network to connect to a device in close proximity, with user consent to send an invite or accept an invite.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc> This capability allows an app to access the network to connect to a device in close proximity, with user consent to send an invite or accept an invite.</target>
          </segment>
        </unit>
        <unit id="134">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="134">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">sharedUserCertificates</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">sharedUserCertificates</pc>
						</target>
          </segment>
        </unit>
        <unit id="135">
          <segment state="initial" id="135">
            <source xml:space="preserve">This capability allows an app to access software and hardware certificates, such as smart card certificates.</source>
            <target xml:space="preserve">This capability allows an app to access software and hardware certificates, such as smart card certificates.</target>
          </segment>
        </unit>
        <unit id="136">
          <segment state="initial" id="136">
            <source xml:space="preserve">When this capability is invoked at runtime, the user must take action, such as inserting a card or selecting a certificate.</source>
            <target xml:space="preserve">When this capability is invoked at runtime, the user must take action, such as inserting a card or selecting a certificate.</target>
          </segment>
        </unit>
        <unit id="137">
          <originalData>
            <data id="id1">&lt;html&gt;</data>
            <data id="id2">&lt;/html&gt;</data>
          </originalData>
          <segment state="initial" id="137">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc> With this capability, your software and hardware certificates or a smart card are used for identification in the app.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1"></pc> With this capability, your software and hardware certificates or a smart card are used for identification in the app.</target>
          </segment>
        </unit>
        <unit id="138">
          <segment state="initial" id="138">
            <source xml:space="preserve">This capability may be used by your employer, bank, or government services for identification.</source>
            <target xml:space="preserve">This capability may be used by your employer, bank, or government services for identification.</target>
          </segment>
        </unit>
        <unit id="139">
          <segment state="initial" id="139">
            <source xml:space="preserve">Communicating when your app is not in the foreground</source>
            <target xml:space="preserve">Communicating when your app is not in the foreground</target>
          </segment>
        </unit>
        <unit id="140">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="140">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Support your app with background tasks</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> contains general information about using background tasks to do work when your app is not in the foreground.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Support your app with background tasks</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> contains general information about using background tasks to do work when your app is not in the foreground.</target>
          </segment>
        </unit>
        <unit id="141">
          <segment state="initial" id="141">
            <source xml:space="preserve">More specifically, your code must take special steps to be notified when it is not the current foreground app and data arrives over the network for it.</source>
            <target xml:space="preserve">More specifically, your code must take special steps to be notified when it is not the current foreground app and data arrives over the network for it.</target>
          </segment>
        </unit>
        <unit id="142">
          <segment state="initial" id="142">
            <source xml:space="preserve">You used Control Channel Triggers for this purpose in Windows 8, and they are still supported in Windows 10.</source>
            <target xml:space="preserve">You used Control Channel Triggers for this purpose in Windows 8, and they are still supported in Windows 10.</target>
          </segment>
        </unit>
        <unit id="143">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="143">
            <source xml:space="preserve">Full information about using Control Channel Triggers is available <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**here**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Full information about using Control Channel Triggers is available <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**here**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="144">
          <segment state="initial" id="144">
            <source xml:space="preserve">A new technology in Windows 10 provides better functionality with lower overhead for some scenarios, such as push-enabled stream sockets: the socket broker and socket activity triggers.</source>
            <target xml:space="preserve">A new technology in Windows 10 provides better functionality with lower overhead for some scenarios, such as push-enabled stream sockets: the socket broker and socket activity triggers.</target>
          </segment>
        </unit>
        <unit id="145">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="145">
            <source xml:space="preserve">If your app uses <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DatagramSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, or <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**StreamSocketListener**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, then your app can transfer ownership of an open socket to a socket broker provided by the system, and then leave the foreground, or even terminate.</source>
            <target xml:space="preserve">If your app uses <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**DatagramSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>, or <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**StreamSocketListener**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, then your app can transfer ownership of an open socket to a socket broker provided by the system, and then leave the foreground, or even terminate.</target>
          </segment>
        </unit>
        <unit id="146">
          <segment state="initial" id="146">
            <source xml:space="preserve">When a connection is made on the transferred socket, or traffic arrives on that socket, then your app or its designated background task are activated.</source>
            <target xml:space="preserve">When a connection is made on the transferred socket, or traffic arrives on that socket, then your app or its designated background task are activated.</target>
          </segment>
        </unit>
        <unit id="147">
          <segment state="initial" id="147">
            <source xml:space="preserve">If your app is not running, it is started.</source>
            <target xml:space="preserve">If your app is not running, it is started.</target>
          </segment>
        </unit>
        <unit id="148">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="148">
            <source xml:space="preserve">The socket broker then notifies your app using a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SocketActivityTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that new traffic has arrived.</source>
            <target xml:space="preserve">The socket broker then notifies your app using a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SocketActivityTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> that new traffic has arrived.</target>
          </segment>
        </unit>
        <unit id="149">
          <segment state="initial" id="149">
            <source xml:space="preserve">Your app reclaims the socket from the socket broker and process the traffic on the socket.</source>
            <target xml:space="preserve">Your app reclaims the socket from the socket broker and process the traffic on the socket.</target>
          </segment>
        </unit>
        <unit id="150">
          <segment state="initial" id="150">
            <source xml:space="preserve">This means that your app consumes far less system resources when it is not actively processing network traffic.</source>
            <target xml:space="preserve">This means that your app consumes far less system resources when it is not actively processing network traffic.</target>
          </segment>
        </unit>
        <unit id="151">
          <segment state="initial" id="151">
            <source xml:space="preserve">The socket broker is intended to replace Control Channel Triggers where it is applicable, because it provides the same functionality, but with fewer restrictions and a smaller memory footprint.</source>
            <target xml:space="preserve">The socket broker is intended to replace Control Channel Triggers where it is applicable, because it provides the same functionality, but with fewer restrictions and a smaller memory footprint.</target>
          </segment>
        </unit>
        <unit id="152">
          <segment state="initial" id="152">
            <source xml:space="preserve">Socket broker can be used by apps that are not lock screen apps, and it is used the same way on phones as on other devices.</source>
            <target xml:space="preserve">Socket broker can be used by apps that are not lock screen apps, and it is used the same way on phones as on other devices.</target>
          </segment>
        </unit>
        <unit id="153">
          <segment state="initial" id="153">
            <source xml:space="preserve">Apps need not be running when traffic arrives in order to be activated by the socket broker.</source>
            <target xml:space="preserve">Apps need not be running when traffic arrives in order to be activated by the socket broker.</target>
          </segment>
        </unit>
        <unit id="154">
          <segment state="initial" id="154">
            <source xml:space="preserve">And the socket broker supports listening on TCP sockets, which Control Channel Triggers do not support.</source>
            <target xml:space="preserve">And the socket broker supports listening on TCP sockets, which Control Channel Triggers do not support.</target>
          </segment>
        </unit>
        <unit id="155">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="155">
            <source xml:space="preserve">If your app uses socket activity triggers, you must specify the <pc dataRefEnd="id2" dataRefStart="id1" id="2">pushNotifications</pc> capability in the app manifest.</source>
            <target xml:space="preserve">If your app uses socket activity triggers, you must specify the <pc dataRefEnd="id2" dataRefStart="id1" id="2">pushNotifications</pc> capability in the app manifest.</target>
          </segment>
        </unit>
        <unit id="156">
          <segment state="initial" id="156">
            <source xml:space="preserve">Choosing a network trigger</source>
            <target xml:space="preserve">Choosing a network trigger</target>
          </segment>
        </unit>
        <unit id="157">
          <segment state="initial" id="157">
            <source xml:space="preserve">There are some scenarios where either kind of trigger would be suitable.</source>
            <target xml:space="preserve">There are some scenarios where either kind of trigger would be suitable.</target>
          </segment>
        </unit>
        <unit id="158">
          <segment state="initial" id="158">
            <source xml:space="preserve">When you are choosing which kind of trigger to use in your app, consider the following advice.</source>
            <target xml:space="preserve">When you are choosing which kind of trigger to use in your app, consider the following advice.</target>
          </segment>
        </unit>
        <unit id="159">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="159">
            <source xml:space="preserve">If you are using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IXMLHTTPRequest2**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**System.Net.Http.HttpClient**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> or <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">System.Net.Http.HttpClientHandler</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, you must use <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**ControlChannelTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">If you are using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**IXMLHTTPRequest2**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**System.Net.Http.HttpClient**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> or <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">System.Net.Http.HttpClientHandler</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc>, you must use <pc dataRefEnd="id20" dataRefStart="id19" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**ControlChannelTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="160">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="160">
            <source xml:space="preserve">If you are using push-enabled <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSockets</pc>, you can use control channel triggers, but should prefer <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SocketActivityTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">If you are using push-enabled <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSockets</pc>, you can use control channel triggers, but should prefer <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**SocketActivityTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="161">
          <segment state="initial" id="161">
            <source xml:space="preserve">The latter choice allows the system to free up memory and reduce power requirements when the connection is not being actively used.</source>
            <target xml:space="preserve">The latter choice allows the system to free up memory and reduce power requirements when the connection is not being actively used.</target>
          </segment>
        </unit>
        <unit id="162">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="162">
            <source xml:space="preserve">If you want to minimize the memory footprint of your app when it is not actively servicing network requests, prefer <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SocketActivityTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> when possible.</source>
            <target xml:space="preserve">If you want to minimize the memory footprint of your app when it is not actively servicing network requests, prefer <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SocketActivityTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> when possible.</target>
          </segment>
        </unit>
        <unit id="163">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="163">
            <source xml:space="preserve">If you want your app to be able to receive data while the system is in Connected Standby mode, use <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SocketActivityTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">If you want your app to be able to receive data while the system is in Connected Standby mode, use <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**SocketActivityTrigger**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="164">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="164">
            <source xml:space="preserve">For details and examples of how to use the socket broker, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Network communications in the background</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For details and examples of how to use the socket broker, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">Network communications in the background</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="165">
          <segment state="initial" id="165">
            <source xml:space="preserve">Secured connections</source>
            <target xml:space="preserve">Secured connections</target>
          </segment>
        </unit>
        <unit id="166">
          <segment state="initial" id="166">
            <source xml:space="preserve">Secure Sockets Layer (SSL) and the more recent Transport Layer Security (TLS) are cryptographic protocols designed to provide authentication and encryption for network communication.</source>
            <target xml:space="preserve">Secure Sockets Layer (SSL) and the more recent Transport Layer Security (TLS) are cryptographic protocols designed to provide authentication and encryption for network communication.</target>
          </segment>
        </unit>
        <unit id="167">
          <segment state="initial" id="167">
            <source xml:space="preserve">These protocols are designed to prevent eavesdropping and tampering when sending and receiving network data.</source>
            <target xml:space="preserve">These protocols are designed to prevent eavesdropping and tampering when sending and receiving network data.</target>
          </segment>
        </unit>
        <unit id="168">
          <segment state="initial" id="168">
            <source xml:space="preserve">These protocols use a client-server model for the protocol exchanges.</source>
            <target xml:space="preserve">These protocols use a client-server model for the protocol exchanges.</target>
          </segment>
        </unit>
        <unit id="169">
          <segment state="initial" id="169">
            <source xml:space="preserve">These protocols also use digital certificates and certificate authorities to verify that the server is who it claims to be.</source>
            <target xml:space="preserve">These protocols also use digital certificates and certificate authorities to verify that the server is who it claims to be.</target>
          </segment>
        </unit>
        <unit id="170">
          <segment state="initial" id="170">
            <source xml:space="preserve">Creating secure socket connections</source>
            <target xml:space="preserve">Creating secure socket connections</target>
          </segment>
        </unit>
        <unit id="171">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="171">
            <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object can be configured to use SSL/TLS for communications between the client and the server.</source>
            <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object can be configured to use SSL/TLS for communications between the client and the server.</target>
          </segment>
        </unit>
        <unit id="172">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="172">
            <source xml:space="preserve">This support for SSL/TLS is limited to using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocket</pc> object as the client in the SSL/TLS negotiation.</source>
            <target xml:space="preserve">This support for SSL/TLS is limited to using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocket</pc> object as the client in the SSL/TLS negotiation.</target>
          </segment>
        </unit>
        <unit id="173">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;link&gt;</data>
            <data id="id4">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id9">&lt;strong&gt;</data>
            <data id="id10">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="173">
            <source xml:space="preserve">You cannot use SSL/TLS with the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocket</pc> created by a <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocketListener**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> when incoming communications are received, because SSL/TLS negotiation as a server is not implemented by the <pc dataRefEnd="id10" dataRefStart="id9" id="6">StreamSocket</pc> class.</source>
            <target xml:space="preserve">You cannot use SSL/TLS with the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocket</pc> created by a <pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocketListener**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> when incoming communications are received, because SSL/TLS negotiation as a server is not implemented by the <pc dataRefEnd="id10" dataRefStart="id9" id="6">StreamSocket</pc> class.</target>
          </segment>
        </unit>
        <unit id="174">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="174">
            <source xml:space="preserve">There are two ways to secure a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> connection with SSL/TLS:</source>
            <target xml:space="preserve">There are two ways to secure a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> connection with SSL/TLS:</target>
          </segment>
        </unit>
        <unit id="175">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="175">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**ConnectAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> - Make the initial connection to a network service and negotiate immediately to use SSL/TLS for all communications.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**ConnectAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> - Make the initial connection to a network service and negotiate immediately to use SSL/TLS for all communications.</target>
          </segment>
        </unit>
        <unit id="176">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="176">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**UpgradeToSslAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> - Connect initially to a network service without encryption.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**UpgradeToSslAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> - Connect initially to a network service without encryption.</target>
          </segment>
        </unit>
        <unit id="177">
          <segment state="initial" id="177">
            <source xml:space="preserve">The app may send or receive data.</source>
            <target xml:space="preserve">The app may send or receive data.</target>
          </segment>
        </unit>
        <unit id="178">
          <segment state="initial" id="178">
            <source xml:space="preserve">Then, upgrade the connection to use SSL/TLS for all further communications.</source>
            <target xml:space="preserve">Then, upgrade the connection to use SSL/TLS for all further communications.</target>
          </segment>
        </unit>
        <unit id="179">
          <segment state="initial" id="179">
            <source xml:space="preserve">The SocketProtectionLevel value that you provide sets the minimum protection level you are willing to allow.</source>
            <target xml:space="preserve">The SocketProtectionLevel value that you provide sets the minimum protection level you are willing to allow.</target>
          </segment>
        </unit>
        <unit id="180">
          <segment state="initial" id="180">
            <source xml:space="preserve">However, the eventual protection level of the established connection is determined in a negotiation process between both endpoints of the connection.</source>
            <target xml:space="preserve">However, the eventual protection level of the established connection is determined in a negotiation process between both endpoints of the connection.</target>
          </segment>
        </unit>
        <unit id="181">
          <segment state="initial" id="181">
            <source xml:space="preserve">The result can be a more-secure protection level than the one you specified, if the other endpoint requires a higher level.</source>
            <target xml:space="preserve">The result can be a more-secure protection level than the one you specified, if the other endpoint requires a higher level.</target>
          </segment>
        </unit>
        <unit id="182">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="182">
            <source xml:space="preserve">The SSL strength actually negotiated using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> can be determined by getting the <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**StreamSocketinformation.ProtectionLevel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> property after the async operation has completed successfully.</source>
            <target xml:space="preserve">The SSL strength actually negotiated using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> can be determined by getting the <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**StreamSocketinformation.ProtectionLevel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> property after the async operation has completed successfully.</target>
          </segment>
        </unit>
        <unit id="183">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="183">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Note</pc>
						</target>
          </segment>
        </unit>
        <unit id="184">
          <segment state="initial" id="184">
            <source xml:space="preserve">Your code should never implicitly depend on using a particular protection level, or on the assumption that a given security level is used by default.</source>
            <target xml:space="preserve">Your code should never implicitly depend on using a particular protection level, or on the assumption that a given security level is used by default.</target>
          </segment>
        </unit>
        <unit id="185">
          <segment state="initial" id="185">
            <source xml:space="preserve">The security landscape changes constantly, and protocols and default protection levels will be changed over time in order to avoid the use of protocols with known weaknesses.</source>
            <target xml:space="preserve">The security landscape changes constantly, and protocols and default protection levels will be changed over time in order to avoid the use of protocols with known weaknesses.</target>
          </segment>
        </unit>
        <unit id="186">
          <segment state="initial" id="186">
            <source xml:space="preserve">Defaults can vary depending on individual machine configuration, or on which software is installed and which patches have been applied.</source>
            <target xml:space="preserve">Defaults can vary depending on individual machine configuration, or on which software is installed and which patches have been applied.</target>
          </segment>
        </unit>
        <unit id="187">
          <segment state="initial" id="187">
            <source xml:space="preserve">If your app depends on the use of a particular security level, you must explicitly specify that level and then check to be sure that it is actually in use on the established connection.</source>
            <target xml:space="preserve">If your app depends on the use of a particular security level, you must explicitly specify that level and then check to be sure that it is actually in use on the established connection.</target>
          </segment>
        </unit>
        <unit id="188">
          <segment state="initial" id="188">
            <source xml:space="preserve">Use ConnectAsync</source>
            <target xml:space="preserve">Use ConnectAsync</target>
          </segment>
        </unit>
        <unit id="189">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="189">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**ConnectAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> can be used to establish the initial connection with a network service and then negotiate immediately to use SSL/TLS for all communications.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**ConnectAsync**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> can be used to establish the initial connection with a network service and then negotiate immediately to use SSL/TLS for all communications.</target>
          </segment>
        </unit>
        <unit id="190">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
            <data id="id3">&lt;em&gt;</data>
            <data id="id4">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="190">
            <source xml:space="preserve">There are two <pc dataRefEnd="id2" dataRefStart="id1" id="2">ConnectAsync</pc> methods that support passing a <pc dataRefEnd="id4" dataRefStart="id3" id="4">protectionLevel</pc> parameter:</source>
            <target xml:space="preserve">There are two <pc dataRefEnd="id2" dataRefStart="id1" id="2">ConnectAsync</pc> methods that support passing a <pc dataRefEnd="id4" dataRefStart="id3" id="4">protectionLevel</pc> parameter:</target>
          </segment>
        </unit>
        <unit id="191">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id19">&lt;link&gt;</data>
            <data id="id20">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="191">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**ConnectAsync(EndpointPair, SocketProtectionLevel)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> - Starts an asynchronous operation on a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> object to connect to a remote network destination specified as an <pc dataRefEnd="id14" dataRefStart="id13" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**EndpointPair**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> object and a <pc dataRefEnd="id20" dataRefStart="id19" id="7CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="7CapsExtId2">**SocketProtectionLevel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="7CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**ConnectAsync(EndpointPair, SocketProtectionLevel)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> - Starts an asynchronous operation on a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> object to connect to a remote network destination specified as an <pc dataRefEnd="id14" dataRefStart="id13" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**EndpointPair**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc> object and a <pc dataRefEnd="id20" dataRefStart="id19" id="7CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="7CapsExtId2">**SocketProtectionLevel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="7CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="192">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="192">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**ConnectAsync(HostName, String, SocketProtectionLevel)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> - Starts an asynchronous operation on a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> object to connect to a remote destination specified by a remote hostname, a remote service name, and a <pc dataRefEnd="id14" dataRefStart="id13" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**SocketProtectionLevel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**ConnectAsync(HostName, String, SocketProtectionLevel)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc> - Starts an asynchronous operation on a <pc dataRefEnd="id8" dataRefStart="id7" id="3CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="3CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="3CapsExtId3"></pc></pc> object to connect to a remote destination specified by a remote hostname, a remote service name, and a <pc dataRefEnd="id14" dataRefStart="id13" id="5CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="5CapsExtId2">**SocketProtectionLevel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="5CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="193">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;link&gt;</data>
            <data id="id6">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id11">&lt;link&gt;</data>
            <data id="id12">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="193">
            <source xml:space="preserve">If the <pc dataRefEnd="id2" dataRefStart="id1" id="2">protectionLevel</pc> parameter is set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Windows.Networking.Sockets.SocketProtectionLevel.Ssl</pc> when calling either of the above <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> methods, the <pc dataRefEnd="id12" dataRefStart="id11" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> must will be established to use SSL/TLS for encryption.</source>
            <target xml:space="preserve">If the <pc dataRefEnd="id2" dataRefStart="id1" id="2">protectionLevel</pc> parameter is set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Windows.Networking.Sockets.SocketProtectionLevel.Ssl</pc> when calling either of the above <pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> methods, the <pc dataRefEnd="id12" dataRefStart="id11" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> must will be established to use SSL/TLS for encryption.</target>
          </segment>
        </unit>
        <unit id="194">
          <segment state="initial" id="194">
            <source xml:space="preserve">This value requires encryption and never allows a NULL cipher to be used.</source>
            <target xml:space="preserve">This value requires encryption and never allows a NULL cipher to be used.</target>
          </segment>
        </unit>
        <unit id="195">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="195">
            <source xml:space="preserve">The normal sequence to use with one of these <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> methods is the same.</source>
            <target xml:space="preserve">The normal sequence to use with one of these <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> methods is the same.</target>
          </segment>
        </unit>
        <unit id="196">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="196">
            <source xml:space="preserve">Create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="197">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="197">
            <source xml:space="preserve">If an advanced option on the socket is needed, use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket.Control**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property to get the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocketControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instance associated with a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> object.</source>
            <target xml:space="preserve">If an advanced option on the socket is needed, use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket.Control**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property to get the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocketControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instance associated with a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> object.</target>
          </segment>
        </unit>
        <unit id="198">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="198">
            <source xml:space="preserve">Set a property on the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocketControl</pc>.</source>
            <target xml:space="preserve">Set a property on the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocketControl</pc>.</target>
          </segment>
        </unit>
        <unit id="199">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="199">
            <source xml:space="preserve">Call one of the above <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> methods to start an operation to connect to a remote destination and immediately negotiate the use of SSL/TLS.</source>
            <target xml:space="preserve">Call one of the above <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> methods to start an operation to connect to a remote destination and immediately negotiate the use of SSL/TLS.</target>
          </segment>
        </unit>
        <unit id="200">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="200">
            <source xml:space="preserve">The SSL strength actually negotiated using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> can be determined by getting the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocketinformation.ProtectionLevel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property after the async operation has completed successfully.</source>
            <target xml:space="preserve">The SSL strength actually negotiated using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**ConnectAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> can be determined by getting the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocketinformation.ProtectionLevel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property after the async operation has completed successfully.</target>
          </segment>
        </unit>
        <unit id="201">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="201">
            <source xml:space="preserve">The following example creates a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and tries to establish a connection to the network service and negotiate immediately to use SSL/TLS.</source>
            <target xml:space="preserve">The following example creates a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and tries to establish a connection to the network service and negotiate immediately to use SSL/TLS.</target>
          </segment>
        </unit>
        <unit id="202">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="202">
            <source xml:space="preserve">If the negotiation is successful, all network communication using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocket</pc> between the client the network server will be encrypted.</source>
            <target xml:space="preserve">If the negotiation is successful, all network communication using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocket</pc> between the client the network server will be encrypted.</target>
          </segment>
        </unit>
        <unit id="203">
          <segment state="initial" id="203">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="204">
          <segment state="initial" id="204">
            <source xml:space="preserve">Use UpgradeToSslAsync</source>
            <target xml:space="preserve">Use UpgradeToSslAsync</target>
          </segment>
        </unit>
        <unit id="205">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="205">
            <source xml:space="preserve">When your code uses <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, it first establishes a connection to a network service without encryption.</source>
            <target xml:space="preserve">When your code uses <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, it first establishes a connection to a network service without encryption.</target>
          </segment>
        </unit>
        <unit id="206">
          <segment state="initial" id="206">
            <source xml:space="preserve">The app may send or receive some data, then upgrade the connection to use SSL/TLS for all further communications.</source>
            <target xml:space="preserve">The app may send or receive some data, then upgrade the connection to use SSL/TLS for all further communications.</target>
          </segment>
        </unit>
        <unit id="207">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="207">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method takes two parameters.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method takes two parameters.</target>
          </segment>
        </unit>
        <unit id="208">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="208">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">protectionLevel</pc> parameter indicates the protection level desired.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">protectionLevel</pc> parameter indicates the protection level desired.</target>
          </segment>
        </unit>
        <unit id="209">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="209">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">validationHostName</pc> parameter is the hostname of the remote network destination that is used for validation when upgrading to SSL.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">validationHostName</pc> parameter is the hostname of the remote network destination that is used for validation when upgrading to SSL.</target>
          </segment>
        </unit>
        <unit id="210">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
          </originalData>
          <segment state="initial" id="210">
            <source xml:space="preserve">Normally the <pc dataRefEnd="id2" dataRefStart="id1" id="2">validationHostName</pc> would be the same hostname that the app used to initially establish the connection.</source>
            <target xml:space="preserve">Normally the <pc dataRefEnd="id2" dataRefStart="id1" id="2">validationHostName</pc> would be the same hostname that the app used to initially establish the connection.</target>
          </segment>
        </unit>
        <unit id="211">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
            <data id="id5">&lt;strong&gt;</data>
            <data id="id6">&lt;/strong&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="211">
            <source xml:space="preserve">If the <pc dataRefEnd="id2" dataRefStart="id1" id="2">protectionLevel</pc> parameter is set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Windows.System.Socket.SocketProtectionLevel.Ssl</pc> when calling <pc dataRefEnd="id6" dataRefStart="id5" id="6">UpgradeToSslAsync</pc>, the <pc dataRefEnd="id8" dataRefStart="id7" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> must use the SSL/TLS for encryption on further communications over the socket.</source>
            <target xml:space="preserve">If the <pc dataRefEnd="id2" dataRefStart="id1" id="2">protectionLevel</pc> parameter is set to <pc dataRefEnd="id4" dataRefStart="id3" id="4">Windows.System.Socket.SocketProtectionLevel.Ssl</pc> when calling <pc dataRefEnd="id6" dataRefStart="id5" id="6">UpgradeToSslAsync</pc>, the <pc dataRefEnd="id8" dataRefStart="id7" id="8CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="8CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="8CapsExtId3"></pc></pc> must use the SSL/TLS for encryption on further communications over the socket.</target>
          </segment>
        </unit>
        <unit id="212">
          <segment state="initial" id="212">
            <source xml:space="preserve">This value requires encryption and never allows a NULL cipher to be used.</source>
            <target xml:space="preserve">This value requires encryption and never allows a NULL cipher to be used.</target>
          </segment>
        </unit>
        <unit id="213">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="213">
            <source xml:space="preserve">The normal sequence to use with the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method is as follows:</source>
            <target xml:space="preserve">The normal sequence to use with the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method is as follows:</target>
          </segment>
        </unit>
        <unit id="214">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="214">
            <source xml:space="preserve">Create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">Create a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="215">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id13">&lt;link&gt;</data>
            <data id="id14">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="215">
            <source xml:space="preserve">If an advanced option on the socket is needed, use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket.Control**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property to get the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocketControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instance associated with a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> object.</source>
            <target xml:space="preserve">If an advanced option on the socket is needed, use the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket.Control**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> property to get the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocketControl**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> instance associated with a <pc dataRefEnd="id14" dataRefStart="id13" id="6CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="6CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="6CapsExtId3"></pc></pc> object.</target>
          </segment>
        </unit>
        <unit id="216">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="216">
            <source xml:space="preserve">Set a property on the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocketControl</pc>.</source>
            <target xml:space="preserve">Set a property on the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocketControl</pc>.</target>
          </segment>
        </unit>
        <unit id="217">
          <segment state="initial" id="217">
            <source xml:space="preserve">If any data needs to be sent and received unencrypted, send it now.</source>
            <target xml:space="preserve">If any data needs to be sent and received unencrypted, send it now.</target>
          </segment>
        </unit>
        <unit id="218">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="218">
            <source xml:space="preserve">Call the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method to start an operation to upgrade the connection to use SSL/TLS.</source>
            <target xml:space="preserve">Call the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> method to start an operation to upgrade the connection to use SSL/TLS.</target>
          </segment>
        </unit>
        <unit id="219">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="219">
            <source xml:space="preserve">The SSL strength actually negotiated using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> can be determined by getting the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocketinformation.ProtectionLevel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property after the async operation completes successfully.</source>
            <target xml:space="preserve">The SSL strength actually negotiated using <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**UpgradeToSslAsync**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> can be determined by getting the <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**StreamSocketinformation.ProtectionLevel**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> property after the async operation completes successfully.</target>
          </segment>
        </unit>
        <unit id="220">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="220">
            <source xml:space="preserve">The following example creates a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, tries to establish a connection to the network service, sends some initial data, and then negotiates to use SSL/TLS.</source>
            <target xml:space="preserve">The following example creates a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>, tries to establish a connection to the network service, sends some initial data, and then negotiates to use SSL/TLS.</target>
          </segment>
        </unit>
        <unit id="221">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="221">
            <source xml:space="preserve">If the negotiation is successful, all network communication using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocket</pc> between the client and the network server will be encrypted.</source>
            <target xml:space="preserve">If the negotiation is successful, all network communication using the <pc dataRefEnd="id2" dataRefStart="id1" id="2">StreamSocket</pc> between the client and the network server will be encrypted.</target>
          </segment>
        </unit>
        <unit id="222">
          <segment state="initial" id="222">
            <source xml:space="preserve">[!div class="tabbedCodeSnippets"]</source>
            <target xml:space="preserve">[!div class="tabbedCodeSnippets"]</target>
          </segment>
        </unit>
        <unit id="223">
          <segment state="initial" id="223">
            <source xml:space="preserve">Creating secure WebSocket connections</source>
            <target xml:space="preserve">Creating secure WebSocket connections</target>
          </segment>
        </unit>
        <unit id="224">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="224">
            <source xml:space="preserve">Like traditional socket connections, WebSocket connections can also be encrypted with Transport Layer Security (TLS)/Secure Sockets Layer (SSL) when using the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> features in Windows 8 for a Windows Store app.</source>
            <target xml:space="preserve">Like traditional socket connections, WebSocket connections can also be encrypted with Transport Layer Security (TLS)/Secure Sockets Layer (SSL) when using the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MessageWebSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> features in Windows 8 for a Windows Store app.</target>
          </segment>
        </unit>
        <unit id="225">
          <segment state="initial" id="225">
            <source xml:space="preserve">In most cases you'll want to use a secure WebSocket connection.</source>
            <target xml:space="preserve">In most cases you'll want to use a secure WebSocket connection.</target>
          </segment>
        </unit>
        <unit id="226">
          <segment state="initial" id="226">
            <source xml:space="preserve">This will increase the chances that your connection will succeed, as many proxies will reject unencrypted WebSocket connections.</source>
            <target xml:space="preserve">This will increase the chances that your connection will succeed, as many proxies will reject unencrypted WebSocket connections.</target>
          </segment>
        </unit>
        <unit id="227">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="227">
            <source xml:space="preserve">For examples of how to create, or upgrade to, a secure socket connection to a network service, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">How to secure WebSocket connections with TLS/SSL</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</source>
            <target xml:space="preserve">For examples of how to create, or upgrade to, a secure socket connection to a network service, see <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">How to secure WebSocket connections with TLS/SSL</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc>.</target>
          </segment>
        </unit>
        <unit id="228">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="228">
            <source xml:space="preserve">In addition to TLS/SSL encryption, a server may require a <pc dataRefEnd="id2" dataRefStart="id1" id="2">Sec-WebSocket-Protocol</pc> header value to complete the initial handshake.</source>
            <target xml:space="preserve">In addition to TLS/SSL encryption, a server may require a <pc dataRefEnd="id2" dataRefStart="id1" id="2">Sec-WebSocket-Protocol</pc> header value to complete the initial handshake.</target>
          </segment>
        </unit>
        <unit id="229">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
            <data id="id7">&lt;link&gt;</data>
            <data id="id8">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="229">
            <source xml:space="preserve">This value, represented by the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocketInformation.Protocol**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MessageWebSocketInformation.Protocol**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> properties, indicate the protocol version of the connection and enables the server to correctly interpret the opening handshake and the data being exchanged afterwards.</source>
            <target xml:space="preserve">This value, represented by the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamWebSocketInformation.Protocol**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="4CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="4CapsExtId2">**MessageWebSocketInformation.Protocol**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="4CapsExtId3"></pc></pc> properties, indicate the protocol version of the connection and enables the server to correctly interpret the opening handshake and the data being exchanged afterwards.</target>
          </segment>
        </unit>
        <unit id="230">
          <segment state="initial" id="230">
            <source xml:space="preserve">Using this protocol information, if at any point if the server cannot interpret the incoming data in a safe manner the connection can be closed.</source>
            <target xml:space="preserve">Using this protocol information, if at any point if the server cannot interpret the incoming data in a safe manner the connection can be closed.</target>
          </segment>
        </unit>
        <unit id="231">
          <segment state="initial" id="231">
            <source xml:space="preserve">If the initial request from the client either does not contain this value, or provides a value that doesn't match what the server expects, the expected value is sent from the server to the client on WebSocket handshake error.</source>
            <target xml:space="preserve">If the initial request from the client either does not contain this value, or provides a value that doesn't match what the server expects, the expected value is sent from the server to the client on WebSocket handshake error.</target>
          </segment>
        </unit>
        <unit id="232">
          <segment state="initial" id="232">
            <source xml:space="preserve">Authentication</source>
            <target xml:space="preserve">Authentication</target>
          </segment>
        </unit>
        <unit id="233">
          <segment state="initial" id="233">
            <source xml:space="preserve">How to provide authentication credentials when connecting over the network.</source>
            <target xml:space="preserve">How to provide authentication credentials when connecting over the network.</target>
          </segment>
        </unit>
        <unit id="234">
          <segment state="initial" id="234">
            <source xml:space="preserve">Providing a client certificate with the StreamSocket class</source>
            <target xml:space="preserve">Providing a client certificate with the StreamSocket class</target>
          </segment>
        </unit>
        <unit id="235">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="235">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Windows.Networking.StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class supports using SSL/TLS to authenticate the server the app is talking to.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**Windows.Networking.StreamSocket**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> class supports using SSL/TLS to authenticate the server the app is talking to.</target>
          </segment>
        </unit>
        <unit id="236">
          <segment state="initial" id="236">
            <source xml:space="preserve">In certain cases, the app also needs to authenticate itself to the server using a TLS client certificate.</source>
            <target xml:space="preserve">In certain cases, the app also needs to authenticate itself to the server using a TLS client certificate.</target>
          </segment>
        </unit>
        <unit id="237">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="237">
            <source xml:space="preserve">In Windows 10, you can provide a client certificate on the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket.Control**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object (this must be set before the TLS handshake is started).</source>
            <target xml:space="preserve">In Windows 10, you can provide a client certificate on the <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**StreamSocket.Control**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object (this must be set before the TLS handshake is started).</target>
          </segment>
        </unit>
        <unit id="238">
          <segment state="initial" id="238">
            <source xml:space="preserve">If the server requests the client certificate, Windows will respond with the certificate provided.</source>
            <target xml:space="preserve">If the server requests the client certificate, Windows will respond with the certificate provided.</target>
          </segment>
        </unit>
        <unit id="239">
          <segment state="initial" id="239">
            <source xml:space="preserve">Here is a code snippet showing how to implement this:</source>
            <target xml:space="preserve">Here is a code snippet showing how to implement this:</target>
          </segment>
        </unit>
        <unit id="240">
          <segment state="initial" id="240">
            <source xml:space="preserve">Providing authentication credentials to a web service</source>
            <target xml:space="preserve">Providing authentication credentials to a web service</target>
          </segment>
        </unit>
        <unit id="241">
          <segment state="initial" id="241">
            <source xml:space="preserve">The networking APIs that enable apps to interact with secure web services each provide their own methods to either initialize a client or set a request header with server and proxy authentication credentials.</source>
            <target xml:space="preserve">The networking APIs that enable apps to interact with secure web services each provide their own methods to either initialize a client or set a request header with server and proxy authentication credentials.</target>
          </segment>
        </unit>
        <unit id="242">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="242">
            <source xml:space="preserve">Each method is set with a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PasswordCredential**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object that indicates a user name, password, and the resource for which these credentials are used.</source>
            <target xml:space="preserve">Each method is set with a <pc dataRefEnd="id2" dataRefStart="id1" id="2CapsExtId1"><pc dataRefEnd="id4" dataRefStart="id3" id="2CapsExtId2">**PasswordCredential**</pc><pc dataRefEnd="id6" dataRefStart="id5" id="2CapsExtId3"></pc></pc> object that indicates a user name, password, and the resource for which these credentials are used.</target>
          </segment>
        </unit>
        <unit id="243">
          <segment state="initial" id="243">
            <source xml:space="preserve">The following table provides a mapping of these APIs:</source>
            <target xml:space="preserve">The following table provides a mapping of these APIs:</target>
          </segment>
        </unit>
        <unit id="244">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="244">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">WebSockets</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">WebSockets</pc>
						</target>
          </segment>
        </unit>
        <unit id="245">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="245">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocketControl.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocketControl.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="246">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="246">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocketControl.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**MessageWebSocketControl.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="247">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="247">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StreamWebSocketControl.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StreamWebSocketControl.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="248">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="248">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StreamWebSocketControl.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**StreamWebSocketControl.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="249">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="249">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Background Transfer</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Background Transfer</pc>
						</target>
          </segment>
        </unit>
        <unit id="250">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="250">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**BackgroundDownloader.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**BackgroundDownloader.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="251">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="251">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**BackgroundDownloader.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**BackgroundDownloader.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="252">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="252">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**BackgroundUploader.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**BackgroundUploader.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="253">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="253">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**BackgroundUploader.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**BackgroundUploader.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="254">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="254">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Syndication</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">Syndication</pc>
						</target>
          </segment>
        </unit>
        <unit id="255">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="255">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**SyndicationClient(PasswordCredential)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**SyndicationClient(PasswordCredential)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="256">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="256">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**SyndicationClient.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**SyndicationClient.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="257">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="257">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**SyndicationClient.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**SyndicationClient.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="258">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="258">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">AtomPub</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1">AtomPub</pc>
						</target>
          </segment>
        </unit>
        <unit id="259">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="259">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**AtomPubClient(PasswordCredential)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**AtomPubClient(PasswordCredential)**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="260">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="260">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**AtomPubClient.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**AtomPubClient.ServerCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="261">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="261">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**AtomPubClient.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">**AtomPubClient.ProxyCredential**</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
        <unit id="262">
          <segment state="initial" id="262">
            <source xml:space="preserve">Handling network exceptions</source>
            <target xml:space="preserve">Handling network exceptions</target>
          </segment>
        </unit>
        <unit id="263">
          <segment state="initial" id="263">
            <source xml:space="preserve">In most areas of programming, an exception indicates a significant problem or failure, caused by some flaw in the program.</source>
            <target xml:space="preserve">In most areas of programming, an exception indicates a significant problem or failure, caused by some flaw in the program.</target>
          </segment>
        </unit>
        <unit id="264">
          <segment state="initial" id="264">
            <source xml:space="preserve">In network programming, there is an additional source for exceptions: the network itself, and the nature of network communications.</source>
            <target xml:space="preserve">In network programming, there is an additional source for exceptions: the network itself, and the nature of network communications.</target>
          </segment>
        </unit>
        <unit id="265">
          <segment state="initial" id="265">
            <source xml:space="preserve">Network communications are inherently unreliable and prone to unexpected failure.</source>
            <target xml:space="preserve">Network communications are inherently unreliable and prone to unexpected failure.</target>
          </segment>
        </unit>
        <unit id="266">
          <segment state="initial" id="266">
            <source xml:space="preserve">For each of the ways your app uses networking, you must maintain some state information; and your app code must handle network exceptions by updating that state information and initiating appropriate logic for your app to re-establish or retry communication failures.</source>
            <target xml:space="preserve">For each of the ways your app uses networking, you must maintain some state information; and your app code must handle network exceptions by updating that state information and initiating appropriate logic for your app to re-establish or retry communication failures.</target>
          </segment>
        </unit>
        <unit id="267">
          <segment state="initial" id="267">
            <source xml:space="preserve">When Universal Windows apps throw an exception, your exception handler can retrieve more detailed information on the cause of the exception to better understand the failure and make appropriate decisions.</source>
            <target xml:space="preserve">When Universal Windows apps throw an exception, your exception handler can retrieve more detailed information on the cause of the exception to better understand the failure and make appropriate decisions.</target>
          </segment>
        </unit>
        <unit id="268">
          <segment state="initial" id="268">
            <source xml:space="preserve">Each language projection supports a method to access this more detailed information.</source>
            <target xml:space="preserve">Each language projection supports a method to access this more detailed information.</target>
          </segment>
        </unit>
        <unit id="269">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="269">
            <source xml:space="preserve">An exception projects as an <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> value in Universal Windows apps.</source>
            <target xml:space="preserve">An exception projects as an <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> value in Universal Windows apps.</target>
          </segment>
        </unit>
        <unit id="270">
          <originalData>
            <data id="id1">&lt;em&gt;</data>
            <data id="id2">&lt;/em&gt;</data>
            <data id="id3">&lt;strong&gt;</data>
            <data id="id4">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="270">
            <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">Winerror.h</pc> include file contains a very large list of possible <pc dataRefEnd="id4" dataRefStart="id3" id="4">HRESULT</pc> values that includes network errors.</source>
            <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="2">Winerror.h</pc> include file contains a very large list of possible <pc dataRefEnd="id4" dataRefStart="id3" id="4">HRESULT</pc> values that includes network errors.</target>
          </segment>
        </unit>
        <unit id="271">
          <segment state="initial" id="271">
            <source xml:space="preserve">The networking APIs support different methods for retrieving this detailed information on the cause of an exception.</source>
            <target xml:space="preserve">The networking APIs support different methods for retrieving this detailed information on the cause of an exception.</target>
          </segment>
        </unit>
        <unit id="272">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="272">
            <source xml:space="preserve">Some APIs provide a helper method that converts the <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> value from the exception to an enumeration value.</source>
            <target xml:space="preserve">Some APIs provide a helper method that converts the <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> value from the exception to an enumeration value.</target>
          </segment>
        </unit>
        <unit id="273">
          <originalData>
            <data id="id1">&lt;strong&gt;</data>
            <data id="id2">&lt;/strong&gt;</data>
          </originalData>
          <segment state="initial" id="273">
            <source xml:space="preserve">Other APIs provide a method to retrieve the actual <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> value.</source>
            <target xml:space="preserve">Other APIs provide a method to retrieve the actual <pc dataRefEnd="id2" dataRefStart="id1" id="2">HRESULT</pc> value.</target>
          </segment>
        </unit>
        <unit id="274">
          <segment state="initial" id="274">
            <source xml:space="preserve">Related topics</source>
            <target xml:space="preserve">Related topics</target>
          </segment>
        </unit>
        <unit id="275">
          <originalData>
            <data id="id1">&lt;link&gt;</data>
            <data id="id2">&lt;/link&gt;</data>
            <data id="id3">&lt;linkText&gt;</data>
            <data id="id4">&lt;/linkText&gt;</data>
            <data id="id5">&lt;title&gt;</data>
            <data id="id6">&lt;/title&gt;</data>
          </originalData>
          <segment state="initial" id="275">
            <source xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Networking API Improvements in Windows 10</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</source>
            <target xml:space="preserve">
							<pc dataRefEnd="id2" dataRefStart="id1" id="1CapsExtId1">
								<pc dataRefEnd="id4" dataRefStart="id3" id="1CapsExtId2">Networking API Improvements in Windows 10</pc>
								<pc dataRefEnd="id6" dataRefStart="id5" id="1CapsExtId3"></pc>
							</pc>
						</target>
          </segment>
        </unit>
      </group>
    </group>
  </file>
</xliff>