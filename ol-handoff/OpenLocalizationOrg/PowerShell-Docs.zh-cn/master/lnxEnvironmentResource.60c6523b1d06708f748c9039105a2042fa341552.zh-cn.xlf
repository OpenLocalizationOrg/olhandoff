<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dsc\lnxEnvironmentResource.md</xliffext:olfilepath>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef0812e4b382b5efb6e6f42d8671fab3ab663a4b</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1b2f027" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>DSC for Linux nxEnvironment Resource</source>
          <target state="new">DSC for Linux nxEnvironment Resource</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>nxEnvironment<ept id="p1">**</ept> resource in PowerShell Desired State Configuration (DSC) provides a mechanism to to manage system environment variables on a Linux node.</source>
          <target state="new">The <bpt id="p1">**</bpt>nxEnvironment<ept id="p1">**</ept> resource in PowerShell Desired State Configuration (DSC) provides a mechanism to to manage system environment variables on a Linux node.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="new">Syntax</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="new">Properties</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Property</source>
          <target state="new">Property</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new">Name</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Indicates the name of the environment variable for which you want to ensure a specific state.</source>
          <target state="new">Indicates the name of the environment variable for which you want to ensure a specific state.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="new">Value</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The value to assign to the environment variable.</source>
          <target state="new">The value to assign to the environment variable.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Ensure</source>
          <target state="new">Ensure</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Determines whether to check if the variable exists.</source>
          <target state="new">Determines whether to check if the variable exists.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Set this property to "Present" to ensure the variable exists.</source>
          <target state="new">Set this property to "Present" to ensure the variable exists.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Set it to "Absent" to ensure the variable does not exist.</source>
          <target state="new">Set it to "Absent" to ensure the variable does not exist.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The default value is "Present".</source>
          <target state="new">The default value is "Present".</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="new">Path</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Defines the environment variable that is being configured.</source>
          <target state="new">Defines the environment variable that is being configured.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Set this property to <bpt id="p1">**</bpt>$true<ept id="p1">**</ept> if the variable is the <bpt id="p2">**</bpt>Path<ept id="p2">**</ept> variable; otherwise, set it to <bpt id="p3">**</bpt>$false<ept id="p3">**</ept>.</source>
          <target state="new">Set this property to <bpt id="p1">**</bpt>$true<ept id="p1">**</ept> if the variable is the <bpt id="p2">**</bpt>Path<ept id="p2">**</ept> variable; otherwise, set it to <bpt id="p3">**</bpt>$false<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The default is <bpt id="p1">**</bpt>$false<ept id="p1">**</ept>.</source>
          <target state="new">The default is <bpt id="p1">**</bpt>$false<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the variable being configured is the <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> variable, the value provided through the <bpt id="p2">**</bpt>Value<ept id="p2">**</ept> property will be appended to the existing value.</source>
          <target state="new">If the variable being configured is the <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> variable, the value provided through the <bpt id="p2">**</bpt>Value<ept id="p2">**</ept> property will be appended to the existing value.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>DependsOn</source>
          <target state="new">DependsOn</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Indicates that the configuration of another resource must run before this resource is configured.</source>
          <target state="new">Indicates that the configuration of another resource must run before this resource is configured.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, if the <bpt id="p1">**</bpt>ID<ept id="p1">**</ept> of the resource configuration script block that you want to run first is <bpt id="p2">**</bpt>ResourceName<ept id="p2">**</ept> and its type is <bpt id="p3">**</bpt>ResourceType<ept id="p3">**</ept>, the syntax for using this property is <ph id="ph1">`DependsOn = "[ResourceType]ResourceName"`</ph>.</source>
          <target state="new">For example, if the <bpt id="p1">**</bpt>ID<ept id="p1">**</ept> of the resource configuration script block that you want to run first is <bpt id="p2">**</bpt>ResourceName<ept id="p2">**</ept> and its type is <bpt id="p3">**</bpt>ResourceType<ept id="p3">**</ept>, the syntax for using this property is <ph id="ph1">`DependsOn = "[ResourceType]ResourceName"`</ph>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Additional Information</source>
          <target state="new">Additional Information</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> is absent or set to <bpt id="p2">**</bpt>$false<ept id="p2">**</ept>, environment variables are managed in <ph id="ph1">`/etc/environment`</ph>.</source>
          <target state="new">If <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> is absent or set to <bpt id="p2">**</bpt>$false<ept id="p2">**</ept>, environment variables are managed in <ph id="ph1">`/etc/environment`</ph>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your programs or scripts may require configuration to source the <ph id="ph1">`/etc/environment`</ph> file to access the managed environment variables.</source>
          <target state="new">Your programs or scripts may require configuration to source the <ph id="ph1">`/etc/environment`</ph> file to access the managed environment variables.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>$true<ept id="p2">**</ept>, the environment variable is managed in the file <ph id="ph1">`/etc/profile.d/DSCenvironment.sh`</ph>.</source>
          <target state="new">If <bpt id="p1">**</bpt>Path<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>$true<ept id="p2">**</ept>, the environment variable is managed in the file <ph id="ph1">`/etc/profile.d/DSCenvironment.sh`</ph>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This file will be created if it does not exist.</source>
          <target state="new">This file will be created if it does not exist.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>Ensure<ept id="p1">**</ept> is set to "Absent" and <bpt id="p2">**</bpt>Path<ept id="p2">**</ept> is set to <bpt id="p3">**</bpt>$true<ept id="p3">**</ept>, an existing environment variable will only be removed from <ph id="ph1">`/etc/profile.d/DSCenvironment.sh`</ph> and not from other files.</source>
          <target state="new">If <bpt id="p1">**</bpt>Ensure<ept id="p1">**</ept> is set to "Absent" and <bpt id="p2">**</bpt>Path<ept id="p2">**</ept> is set to <bpt id="p3">**</bpt>$true<ept id="p3">**</ept>, an existing environment variable will only be removed from <ph id="ph1">`/etc/profile.d/DSCenvironment.sh`</ph> and not from other files.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="new">Example</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <bpt id="p1">**</bpt>nxEnvironment<ept id="p1">**</ept> resource to ensure that <bpt id="p2">**</bpt>TestEnvironmentVariable<ept id="p2">**</ept> is present and has the value "Test-Value".</source>
          <target state="new">The following example shows how to use the <bpt id="p1">**</bpt>nxEnvironment<ept id="p1">**</ept> resource to ensure that <bpt id="p2">**</bpt>TestEnvironmentVariable<ept id="p2">**</ept> is present and has the value "Test-Value".</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>TestEnvironmentVariable<ept id="p1">**</ept> is not present, it will be created.</source>
          <target state="new">If <bpt id="p1">**</bpt>TestEnvironmentVariable<ept id="p1">**</ept> is not present, it will be created.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>