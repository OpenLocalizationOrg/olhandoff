<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ddd864f4c1a912c0f8b5629bd010498bc50850f5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\porting\getting-started-getting-around-in-visual-studio.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting around in Visual Studio</source>
          <target state="new">Getting around in Visual Studio</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting around in Visual Studio</source>
          <target state="new">Getting around in Visual Studio</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Getting started: Getting around in Visual Studio</source>
          <target state="new">Getting started: Getting around in Visual Studio</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Getting around in Microsoft Visual Studio</source>
          <target state="new">Getting around in Microsoft Visual Studio</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Let's now get back to the project that we created earlier, and look at how you might find your way around the Microsoft Visual Studio integrated development environment (IDE).</source>
          <target state="new">Let's now get back to the project that we created earlier, and look at how you might find your way around the Microsoft Visual Studio integrated development environment (IDE).</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you are an Xcode developer, the default view below should be familiar, with source files in the left pane, the editor (either the UI or source code) in the center pane, and controls and their properties in the right pane.</source>
          <target state="new">If you are an Xcode developer, the default view below should be familiar, with source files in the left pane, the editor (either the UI or source code) in the center pane, and controls and their properties in the right pane.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>xcode development environment</source>
          <target state="new">xcode development environment</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Microsoft Visual Studio looks very similar, although the default view has the controls on the left side in the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>.</source>
          <target state="new">Microsoft Visual Studio looks very similar, although the default view has the controls on the left side in the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The source files are in the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> on the right side, and properties are in <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Solution Explorer<ept id="p3">**</ept> pane, like this:</source>
          <target state="new">The source files are in the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> on the right side, and properties are in <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> under the <bpt id="p3">**</bpt>Solution Explorer<ept id="p3">**</ept> pane, like this:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>visual studio development environment</source>
          <target state="new">visual studio development environment</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If this feels a little alien to you, you'll be pleased to know you can rearrange the panes in Visual Studio to place the source files on the left of the screen and the toolbox on the right.</source>
          <target state="new">If this feels a little alien to you, you'll be pleased to know you can rearrange the panes in Visual Studio to place the source files on the left of the screen and the toolbox on the right.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In fact, you can click and drag the title bar of any pane to reposition it, and Visual Studio will display a shaded box telling you where it will be docked once you release it.</source>
          <target state="new">In fact, you can click and drag the title bar of any pane to reposition it, and Visual Studio will display a shaded box telling you where it will be docked once you release it.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Many panes also have a small drawing pin icon in their title bar.</source>
          <target state="new">Many panes also have a small drawing pin icon in their title bar.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This allows you to pin the panel as-is, locking it in place.</source>
          <target state="new">This allows you to pin the panel as-is, locking it in place.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unpin the pane, and it can be collapsed to save space: useful if your monitor is on the smaller side.</source>
          <target state="new">Unpin the pane, and it can be collapsed to save space: useful if your monitor is on the smaller side.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you mess things up (don't worry, we've all done it), select <bpt id="p1">**</bpt>Reset Window Layout<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Window<ept id="p2">**</ept> menu to restore order.</source>
          <target state="new">If you mess things up (don't worry, we've all done it), select <bpt id="p1">**</bpt>Reset Window Layout<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Window<ept id="p2">**</ept> menu to restore order.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Adding controls, setting their properties, and responding to events</source>
          <target state="new">Adding controls, setting their properties, and responding to events</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Let's now add some controls to your project.</source>
          <target state="new">Let's now add some controls to your project.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>We'll then change some of their properties, and write some code to respond to one of the control's events.</source>
          <target state="new">We'll then change some of their properties, and write some code to respond to one of the control's events.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To add controls in Xcode, you open up the desired .xib file or the Storyboard and then drag and drop controls, such as a<bpt id="p1">**</bpt>Round Rect Button<ept id="p1">**</ept> or a <bpt id="p2">**</bpt>Label<ept id="p2">**</ept>, as shown below:</source>
          <target state="new">To add controls in Xcode, you open up the desired .xib file or the Storyboard and then drag and drop controls, such as a<bpt id="p1">**</bpt>Round Rect Button<ept id="p1">**</ept> or a <bpt id="p2">**</bpt>Label<ept id="p2">**</ept>, as shown below:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>designing ui in xcode</source>
          <target state="new">designing ui in xcode</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Let's do something similar in Visual Studio.</source>
          <target state="new">Let's do something similar in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>, drag the <bpt id="p2">**</bpt>Button<ept id="p2">**</ept> control, and then drop it onto the MainPage.xaml file's design surface.</source>
          <target state="new">From the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>, drag the <bpt id="p2">**</bpt>Button<ept id="p2">**</ept> control, and then drop it onto the MainPage.xaml file's design surface.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Do the same with the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> control, so it looks like this:</source>
          <target state="new">Do the same with the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> control, so it looks like this:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>designing ui in visual studio</source>
          <target state="new">designing ui in visual studio</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Unlike Xcode, which hides the layout and binding information inside a .xib or Storyboard file, Visual Studio encourages you to edit the XAML files used to store these details it its rich, editable, declarative, XML-like language.</source>
          <target state="new">Unlike Xcode, which hides the layout and binding information inside a .xib or Storyboard file, Visual Studio encourages you to edit the XAML files used to store these details it its rich, editable, declarative, XML-like language.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more info about Extensible Application Markup Language (XAML), see <bpt id="p1">[</bpt>XAML overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185595)</ept>.</source>
          <target state="new">For more info about Extensible Application Markup Language (XAML), see <bpt id="p1">[</bpt>XAML overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185595)</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For now, know that everything displayed in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> pane is defined in the <bpt id="p2">**</bpt>XAML<ept id="p2">**</ept> pane.</source>
          <target state="new">For now, know that everything displayed in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> pane is defined in the <bpt id="p2">**</bpt>XAML<ept id="p2">**</ept> pane.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> pane allows for fine control where necessary, and as you learn more about it, you can quickly develop user interface code manually.</source>
          <target state="new">The <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> pane allows for fine control where necessary, and as you learn more about it, you can quickly develop user interface code manually.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For now, however, let's focus on just the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> panes.</source>
          <target state="new">For now, however, let's focus on just the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> panes.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Let's change the button's details.</source>
          <target state="new">Let's change the button's details.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>As you will know, to change the button's name in Xcode, you would change the value of the <bpt id="p1">**</bpt>Title<ept id="p1">**</ept> field in its properties panel.</source>
          <target state="new">As you will know, to change the button's name in Xcode, you would change the value of the <bpt id="p1">**</bpt>Title<ept id="p1">**</ept> field in its properties panel.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When using Visual Studio you do something very similar.</source>
          <target state="new">When using Visual Studio you do something very similar.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> pane, tap the button to give it focus.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> pane, tap the button to give it focus.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Then in the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> pane, alter the <bpt id="p2">**</bpt>Content<ept id="p2">**</ept> value from "Button" to "Press Me".</source>
          <target state="new">Then in the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> pane, alter the <bpt id="p2">**</bpt>Content<ept id="p2">**</ept> value from "Button" to "Press Me".</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Next, update the name of the button control, by changing the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> value from "<ph id="ph1">&amp;lt;</ph>No Name<ph id="ph2">&amp;gt;</ph>" to "myButton", as shown here:</source>
          <target state="new">Next, update the name of the button control, by changing the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> value from "<ph id="ph1">&amp;lt;</ph>No Name<ph id="ph2">&amp;gt;</ph>" to "myButton", as shown here:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>button properties window in visual studio</source>
          <target state="new">button properties window in visual studio</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Now, let's write some code to change the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> control's contents to "Hello, World!"</source>
          <target state="new">Now, let's write some code to change the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> control's contents to "Hello, World!"</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>after the user taps the button.</source>
          <target state="new">after the user taps the button.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In Xcode, you would associate an event with a control by writing code and then associating that code with the control, often by control-dragging the button into the source code, like this:</source>
          <target state="new">In Xcode, you would associate an event with a control by writing code and then associating that code with the control, often by control-dragging the button into the source code, like this:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>wiring a button to an event in xcode</source>
          <target state="new">wiring a button to an event in xcode</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Visual Studio is similar.</source>
          <target state="new">Visual Studio is similar.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>At the top right of <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> is a lightning bolt button.</source>
          <target state="new">At the top right of <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> is a lightning bolt button.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This is where the possible events associated with the selected control are listed, like this:</source>
          <target state="new">This is where the possible events associated with the selected control are listed, like this:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>button events list in visual studio</source>
          <target state="new">button events list in visual studio</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To add code for the button's click event, first select the button in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> pane.</source>
          <target state="new">To add code for the button's click event, first select the button in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> pane.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Next, click the lightning bolt button, and double-click the empty box next to the name <bpt id="p1">**</bpt>Click<ept id="p1">**</ept>.</source>
          <target state="new">Next, click the lightning bolt button, and double-click the empty box next to the name <bpt id="p1">**</bpt>Click<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Visual Studio then adds the event "myButton\_Click" to the <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> box, and then adds and displays the corresponding event handler in the MainPage.xaml.cs file, like this.</source>
          <target state="new">Visual Studio then adds the event "myButton\_Click" to the <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> box, and then adds and displays the corresponding event handler in the MainPage.xaml.cs file, like this.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Let's now hook-up the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> control.</source>
          <target state="new">Let's now hook-up the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> control.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In Xcode, you would control-drag the button to the source code file to associate the control with its definition, like this.</source>
          <target state="new">In Xcode, you would control-drag the button to the source code file to associate the control with its definition, like this.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>wiring a label to its definition in xcode</source>
          <target state="new">wiring a label to its definition in xcode</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In Visual Studio, you don't need associated the control as this is always done for you.</source>
          <target state="new">In Visual Studio, you don't need associated the control as this is always done for you.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Let's change some of the properties though:</source>
          <target state="new">Let's change some of the properties though:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Tap the MainPage.xaml file tab.</source>
          <target state="new">Tap the MainPage.xaml file tab.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> pane, tap the <bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept> control.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> pane, tap the <bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept> control.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> pane, tap the wrench button to display its properties.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> pane, tap the wrench button to display its properties.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, change "<ph id="ph1">&amp;lt;</ph>No Name<ph id="ph2">&amp;gt;</ph>" to "myLabel".</source>
          <target state="new">In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, change "<ph id="ph1">&amp;lt;</ph>No Name<ph id="ph2">&amp;gt;</ph>" to "myLabel".</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>label properties window in visual studio</source>
          <target state="new">label properties window in visual studio</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Let's now add some code to the button's click event.</source>
          <target state="new">Let's now add some code to the button's click event.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To do this, tap the MainPage.xaml.cs file, and add the following code to the myButton\_Click event handler.</source>
          <target state="new">To do this, tap the MainPage.xaml.cs file, and add the following code to the myButton\_Click event handler.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is similar to what you would write in Swift:</source>
          <target state="new">This is similar to what you would write in Swift:</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Finally, to run the app, select the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, and then select <bpt id="p2">**</bpt>Start Debugging<ept id="p2">**</ept> (or just press F5).</source>
          <target state="new">Finally, to run the app, select the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, and then select <bpt id="p2">**</bpt>Start Debugging<ept id="p2">**</ept> (or just press F5).</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>After the app starts, click the "Press Me" button, and see the label's contents change from "TextBlock" to "Hello, World!", as shown in the following figure.</source>
          <target state="new">After the app starts, click the "Press Me" button, and see the label's contents change from "TextBlock" to "Hello, World!", as shown in the following figure.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>results of running the first walkthrough: hello, world!</source>
          <target state="new">results of running the first walkthrough: hello, world!</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To quit the app, return to Visual Studio, tap the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, and then tap <bpt id="p2">**</bpt>Stop Debugging<ept id="p2">**</ept> (or just press SHIFT + F5).</source>
          <target state="new">To quit the app, return to Visual Studio, tap the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, and then tap <bpt id="p2">**</bpt>Stop Debugging<ept id="p2">**</ept> (or just press SHIFT + F5).</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Notice that Visual Studio lets you try the app in many different devices, to check how it will perform in each.</source>
          <target state="new">Notice that Visual Studio lets you try the app in many different devices, to check how it will perform in each.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Next step</source>
          <target state="new">Next step</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Getting started: Common Controls</source>
          <target state="new">Getting started: Common Controls</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>