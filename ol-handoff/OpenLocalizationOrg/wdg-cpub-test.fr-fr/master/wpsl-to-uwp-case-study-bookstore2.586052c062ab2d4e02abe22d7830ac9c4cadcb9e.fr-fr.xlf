<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41e68ba09ad3d36eb5fc1cf351126dbf274c4bc6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\porting\wpsl-to-uwp-case-study-bookstore2.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>This case study, which builds on the info given in Bookstore, begins with a Windows Phone Silverlight app that displays grouped data in a LongListSelector.</source>
          <target state="new">This case study, which builds on the info given in Bookstore, begins with a Windows Phone Silverlight app that displays grouped data in a LongListSelector.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Windows Phone Silverlight to UWP case study, Bookstore2</source>
          <target state="new">Windows Phone Silverlight to UWP case study, Bookstore2</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows Phone Silverlight to UWP case study: Bookstore2</source>
          <target state="new">Windows Phone Silverlight to UWP case study: Bookstore2</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This case study—which builds on the info given in <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](wpsl-to-uwp-case-study-bookstore1.md)</ept>—begins with a Windows Phone Silverlight app that displays grouped data in a <bpt id="p2">**</bpt>LongListSelector<ept id="p2">**</ept>.</source>
          <target state="new">This case study—which builds on the info given in <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](wpsl-to-uwp-case-study-bookstore1.md)</ept>—begins with a Windows Phone Silverlight app that displays grouped data in a <bpt id="p2">**</bpt>LongListSelector<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the view model, each instance of the class <bpt id="p1">**</bpt>Author<ept id="p1">**</ept> represents the group of the books written by that author, and in the <bpt id="p2">**</bpt>LongListSelector<ept id="p2">**</ept>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</source>
          <target state="new">In the view model, each instance of the class <bpt id="p1">**</bpt>Author<ept id="p1">**</ept> represents the group of the books written by that author, and in the <bpt id="p2">**</bpt>LongListSelector<ept id="p2">**</ept>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The jump list affords much quicker navigation than scrolling through the list of books.</source>
          <target state="new">The jump list affords much quicker navigation than scrolling through the list of books.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We walk through the steps of porting the app to a Windows 10 Universal Windows Platform (UWP) app.</source>
          <target state="new">We walk through the steps of porting the app to a Windows 10 Universal Windows Platform (UWP) app.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   When opening Bookstore2Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <bpt id="p2">[</bpt>TargetPlatformVersion<ept id="p2">](w8x-to-uwp-troubleshooting.md#targetplatformversion)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   When opening Bookstore2Universal\_10 in Visual Studio, if you see the message "Visual Studio update required", then follow the steps in <bpt id="p2">[</bpt>TargetPlatformVersion<ept id="p2">](w8x-to-uwp-troubleshooting.md#targetplatformversion)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Downloads</source>
          <target state="new">Downloads</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Download the Bookstore2WPSL8 Windows Phone Silverlight app<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=522601)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Download the Bookstore2WPSL8 Windows Phone Silverlight app<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=522601)</ept>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Download the Bookstore2Universal\_10 Windows 10 app<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>Download the Bookstore2Universal\_10 Windows 10 app<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Windows Phone Silverlight app</source>
          <target state="new">The Windows Phone Silverlight app</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The illustration below shows what Bookstore2WPSL8—the app that we're going to port—looks like.</source>
          <target state="new">The illustration below shows what Bookstore2WPSL8—the app that we're going to port—looks like.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It's a vertically-scrolling <bpt id="p1">**</bpt>LongListSelector<ept id="p1">**</ept> of books grouped by author.</source>
          <target state="new">It's a vertically-scrolling <bpt id="p1">**</bpt>LongListSelector<ept id="p1">**</ept> of books grouped by author.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can zoom out to the jump list, and from there, you can navigate back into any group.</source>
          <target state="new">You can zoom out to the jump list, and from there, you can navigate back into any group.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There are two main pieces to this app: the view model that provides the grouped data source, and the user interface that binds to that view model.</source>
          <target state="new">There are two main pieces to this app: the view model that provides the grouped data source, and the user interface that binds to that view model.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>As we'll see, both of these pieces port easily from Windows Phone Silverlight technology to the Universal Windows Platform (UWP).</source>
          <target state="new">As we'll see, both of these pieces port easily from Windows Phone Silverlight technology to the Universal Windows Platform (UWP).</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>how bookstore2wpsl8 looks</source>
          <target state="new">how bookstore2wpsl8 looks</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Porting to a Windows 10 project</source>
          <target state="new">Porting to a Windows 10 project</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It's a quick task to create a new project in Visual Studio, copy files over to it from Bookstore2WPSL8, and include the copied files in the new project.</source>
          <target state="new">It's a quick task to create a new project in Visual Studio, copy files over to it from Bookstore2WPSL8, and include the copied files in the new project.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Start by creating a new Blank Application (Windows Universal) project.</source>
          <target state="new">Start by creating a new Blank Application (Windows Universal) project.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Name it Bookstore2Universal\_10.</source>
          <target state="new">Name it Bookstore2Universal\_10.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These are the files to copy over from Bookstore2WPSL8 to Bookstore2Universal\_10.</source>
          <target state="new">These are the files to copy over from Bookstore2WPSL8 to Bookstore2Universal\_10.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</source>
          <target state="new">Copy the folder containing the book cover image PNG files (the folder is \\Assets\\CoverImages).</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>After copying the folder, in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, make sure <bpt id="p2">**</bpt>Show All Files<ept id="p2">**</ept> is toggled on.</source>
          <target state="new">After copying the folder, in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, make sure <bpt id="p2">**</bpt>Show All Files<ept id="p2">**</ept> is toggled on.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Right-click the folder that you copied and click <bpt id="p1">**</bpt>Include In Project<ept id="p1">**</ept>.</source>
          <target state="new">Right-click the folder that you copied and click <bpt id="p1">**</bpt>Include In Project<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>That command is what we mean by "including" files or folders in a project.</source>
          <target state="new">That command is what we mean by "including" files or folders in a project.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Each time you copy a file or folder, click <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> in <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept> and then include the file or folder in the project.</source>
          <target state="new">Each time you copy a file or folder, click <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> in <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept> and then include the file or folder in the project.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There's no need to do this for files that you're replacing in the destination.</source>
          <target state="new">There's no need to do this for files that you're replacing in the destination.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Copy the folder containing the view model source file (the folder is \\ViewModel).</source>
          <target state="new">Copy the folder containing the view model source file (the folder is \\ViewModel).</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Copy MainPage.xaml and replace the file in the destination.</source>
          <target state="new">Copy MainPage.xaml and replace the file in the destination.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>We can keep the App.xaml, and App.xaml.cs that Visual Studio generated for us in the Windows 10 project.</source>
          <target state="new">We can keep the App.xaml, and App.xaml.cs that Visual Studio generated for us in the Windows 10 project.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Edit the source code and markup files that you just copied and change any references to the Bookstore2WPSL8 namespace to Bookstore2Universal\_10.</source>
          <target state="new">Edit the source code and markup files that you just copied and change any references to the Bookstore2WPSL8 namespace to Bookstore2Universal\_10.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A quick way to do that is to use the <bpt id="p1">**</bpt>Replace In Files<ept id="p1">**</ept> feature.</source>
          <target state="new">A quick way to do that is to use the <bpt id="p1">**</bpt>Replace In Files<ept id="p1">**</ept> feature.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the imperative code in the view model source file, these porting changes are needed.</source>
          <target state="new">In the imperative code in the view model source file, these porting changes are needed.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Change <ph id="ph1">`System.ComponentModel.DesignerProperties`</ph> to <ph id="ph2">`DesignMode`</ph> and then use the <bpt id="p1">**</bpt>Resolve<ept id="p1">**</ept> command on it.</source>
          <target state="new">Change <ph id="ph1">`System.ComponentModel.DesignerProperties`</ph> to <ph id="ph2">`DesignMode`</ph> and then use the <bpt id="p1">**</bpt>Resolve<ept id="p1">**</ept> command on it.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Delete the <ph id="ph1">`IsInDesignTool`</ph> property and use IntelliSense to add the correct property name: <ph id="ph2">`DesignModeEnabled`</ph>.</source>
          <target state="new">Delete the <ph id="ph1">`IsInDesignTool`</ph> property and use IntelliSense to add the correct property name: <ph id="ph2">`DesignModeEnabled`</ph>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Resolve<ept id="p1">**</ept> command on <ph id="ph1">`ImageSource`</ph>.</source>
          <target state="new">Use the <bpt id="p1">**</bpt>Resolve<ept id="p1">**</ept> command on <ph id="ph1">`ImageSource`</ph>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>Resolve<ept id="p1">**</ept> command on <ph id="ph1">`BitmapImage`</ph>.</source>
          <target state="new">Use the <bpt id="p1">**</bpt>Resolve<ept id="p1">**</ept> command on <ph id="ph1">`BitmapImage`</ph>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Delete <ph id="ph1">`using System.Windows.Media;`</ph> and <ph id="ph2">`using System.Windows.Media.Imaging;`</ph>.</source>
          <target state="new">Delete <ph id="ph1">`using System.Windows.Media;`</ph> and <ph id="ph2">`using System.Windows.Media.Imaging;`</ph>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Change the value returned by the <bpt id="p1">**</bpt>Bookstore2Universal\_10.BookstoreViewModel.AppName<ept id="p1">**</ept> property from "BOOKSTORE2WPSL8" to "BOOKSTORE2UNIVERSAL".</source>
          <target state="new">Change the value returned by the <bpt id="p1">**</bpt>Bookstore2Universal\_10.BookstoreViewModel.AppName<ept id="p1">**</ept> property from "BOOKSTORE2WPSL8" to "BOOKSTORE2UNIVERSAL".</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Just as we did for <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](wpsl-to-uwp-case-study-bookstore1.md)</ept>, update the implementation of the <bpt id="p2">**</bpt>BookSku.CoverImage<ept id="p2">**</ept> property (see <bpt id="p3">[</bpt>Binding an Image to a view model<ept id="p3">](wpsl-to-uwp-case-study-bookstore1.md#binding-an-image)</ept>).</source>
          <target state="new">Just as we did for <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](wpsl-to-uwp-case-study-bookstore1.md)</ept>, update the implementation of the <bpt id="p2">**</bpt>BookSku.CoverImage<ept id="p2">**</ept> property (see <bpt id="p3">[</bpt>Binding an Image to a view model<ept id="p3">](wpsl-to-uwp-case-study-bookstore1.md#binding-an-image)</ept>).</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In MainPage.xaml, these initial porting changes are needed.</source>
          <target state="new">In MainPage.xaml, these initial porting changes are needed.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Change <ph id="ph1">`phone:PhoneApplicationPage`</ph> to <ph id="ph2">`Page`</ph> (including the occurrences in property element syntax).</source>
          <target state="new">Change <ph id="ph1">`phone:PhoneApplicationPage`</ph> to <ph id="ph2">`Page`</ph> (including the occurrences in property element syntax).</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Delete the <ph id="ph1">`phone`</ph> and <ph id="ph2">`shell`</ph> namespace prefix declarations.</source>
          <target state="new">Delete the <ph id="ph1">`phone`</ph> and <ph id="ph2">`shell`</ph> namespace prefix declarations.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Change "clr-namespace" to "using" in the remaining namespace prefix declaration.</source>
          <target state="new">Change "clr-namespace" to "using" in the remaining namespace prefix declaration.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Delete <ph id="ph1">`SupportedOrientations="Portrait"`</ph>, and <ph id="ph2">`Orientation="Portrait"`</ph>, and configure <bpt id="p1">**</bpt>Portrait<ept id="p1">**</ept> in the app package manifest in the new project.</source>
          <target state="new">Delete <ph id="ph1">`SupportedOrientations="Portrait"`</ph>, and <ph id="ph2">`Orientation="Portrait"`</ph>, and configure <bpt id="p1">**</bpt>Portrait<ept id="p1">**</ept> in the app package manifest in the new project.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Delete <ph id="ph1">`shell:SystemTray.IsVisible="True"`</ph>.</source>
          <target state="new">Delete <ph id="ph1">`shell:SystemTray.IsVisible="True"`</ph>.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The types of the jump list item converters (which are present in the markup as resources) have moved to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Controls.Primitives<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209818)</ept> namespace.</source>
          <target state="new">The types of the jump list item converters (which are present in the markup as resources) have moved to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Controls.Primitives<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209818)</ept> namespace.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>So, add the namespace prefix declaration Windows\_UI\_Xaml\_Controls\_Primitives and map it to <bpt id="p1">**</bpt>Windows.UI.Xaml.Controls.Primitives<ept id="p1">**</ept>.</source>
          <target state="new">So, add the namespace prefix declaration Windows\_UI\_Xaml\_Controls\_Primitives and map it to <bpt id="p1">**</bpt>Windows.UI.Xaml.Controls.Primitives<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>On the jump list item converter resources, change the prefix from <ph id="ph1">`phone:`</ph> to <ph id="ph2">`Windows_UI_Xaml_Controls_Primitives:`</ph>.</source>
          <target state="new">On the jump list item converter resources, change the prefix from <ph id="ph1">`phone:`</ph> to <ph id="ph2">`Windows_UI_Xaml_Controls_Primitives:`</ph>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Just as we did for <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](wpsl-to-uwp-case-study-bookstore1.md)</ept>, replace all references to the <ph id="ph1">`PhoneTextExtraLargeStyle`</ph><bpt id="p2"> **</bpt>TextBlock<ept id="p2">**</ept> style with a reference to <ph id="ph2">`SubtitleTextBlockStyle`</ph>, replace <ph id="ph3">`PhoneTextSubtleStyle`</ph> with <ph id="ph4">`SubtitleTextBlockStyle`</ph>, replace <ph id="ph5">`PhoneTextNormalStyle`</ph> with <ph id="ph6">`CaptionTextBlockStyle`</ph>, and replace <ph id="ph7">`PhoneTextTitle1Style`</ph> with <ph id="ph8">`HeaderTextBlockStyle`</ph>.</source>
          <target state="new">Just as we did for <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](wpsl-to-uwp-case-study-bookstore1.md)</ept>, replace all references to the <ph id="ph1">`PhoneTextExtraLargeStyle`</ph><bpt id="p2"> **</bpt>TextBlock<ept id="p2">**</ept> style with a reference to <ph id="ph2">`SubtitleTextBlockStyle`</ph>, replace <ph id="ph3">`PhoneTextSubtleStyle`</ph> with <ph id="ph4">`SubtitleTextBlockStyle`</ph>, replace <ph id="ph5">`PhoneTextNormalStyle`</ph> with <ph id="ph6">`CaptionTextBlockStyle`</ph>, and replace <ph id="ph7">`PhoneTextTitle1Style`</ph> with <ph id="ph8">`HeaderTextBlockStyle`</ph>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>There is one exception in <ph id="ph1">`BookTemplate`</ph>.</source>
          <target state="new">There is one exception in <ph id="ph1">`BookTemplate`</ph>.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The style of the second <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> should reference <ph id="ph1">`CaptionTextBlockStyle`</ph>.</source>
          <target state="new">The style of the second <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> should reference <ph id="ph1">`CaptionTextBlockStyle`</ph>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remove the FontFamily attribute from the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> inside <ph id="ph1">`AuthorGroupHeaderTemplate`</ph> and set the Background of the <bpt id="p2">**</bpt>Border<ept id="p2">**</ept> to reference <ph id="ph2">`SystemControlBackgroundAccentBrush`</ph> instead of <ph id="ph3">`PhoneAccentBrush`</ph>.</source>
          <target state="new">Remove the FontFamily attribute from the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> inside <ph id="ph1">`AuthorGroupHeaderTemplate`</ph> and set the Background of the <bpt id="p2">**</bpt>Border<ept id="p2">**</ept> to reference <ph id="ph2">`SystemControlBackgroundAccentBrush`</ph> instead of <ph id="ph3">`PhoneAccentBrush`</ph>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Because of <bpt id="p1">[</bpt>changes related to view pixels<ept id="p1">](wpsl-to-uwp-porting-xaml-and-ui.md#effective-pixels)</ept>, go through the markup and multiply any fixed size dimension (margins, width, height, etc) by 0.8.</source>
          <target state="new">Because of <bpt id="p1">[</bpt>changes related to view pixels<ept id="p1">](wpsl-to-uwp-porting-xaml-and-ui.md#effective-pixels)</ept>, go through the markup and multiply any fixed size dimension (margins, width, height, etc) by 0.8.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Replacing the LongListSelector</source>
          <target state="new">Replacing the LongListSelector</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Replacing the <bpt id="p1">**</bpt>LongListSelector<ept id="p1">**</ept> with a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SemanticZoom<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</ept> control will take several steps, so let's make a start on that.</source>
          <target state="new">Replacing the <bpt id="p1">**</bpt>LongListSelector<ept id="p1">**</ept> with a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SemanticZoom<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh702601)</ept> control will take several steps, so let's make a start on that.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>LongListSelector<ept id="p1">**</ept> binds directly to the grouped data source, but a <bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept> contains <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ListView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242878)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>GridView<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br242705)</ept> controls, which bind indirectly to the data via a <bpt id="p7">[</bpt><bpt id="p8">**</bpt>CollectionViewSource<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br209833)</ept> adapter.</source>
          <target state="new">A <bpt id="p1">**</bpt>LongListSelector<ept id="p1">**</ept> binds directly to the grouped data source, but a <bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept> contains <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ListView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242878)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>GridView<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br242705)</ept> controls, which bind indirectly to the data via a <bpt id="p7">[</bpt><bpt id="p8">**</bpt>CollectionViewSource<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br209833)</ept> adapter.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> needs to be present in the markup as a resource, so let's begin by adding that to the markup in MainPage.xaml inside <ph id="ph1">`&lt;Page.Resources&gt;`</ph>.</source>
          <target state="new">The <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> needs to be present in the markup as a resource, so let's begin by adding that to the markup in MainPage.xaml inside <ph id="ph1">`&lt;Page.Resources&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Note that the binding on <bpt id="p1">**</bpt>LongListSelector.ItemsSource<ept id="p1">**</ept> becomes the value of <bpt id="p2">**</bpt>CollectionViewSource.Source<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>LongListSelector.IsGroupingEnabled<ept id="p3">**</ept> becomes <bpt id="p4">**</bpt>CollectionViewSource.IsSourceGrouped<ept id="p4">**</ept>.</source>
          <target state="new">Note that the binding on <bpt id="p1">**</bpt>LongListSelector.ItemsSource<ept id="p1">**</ept> becomes the value of <bpt id="p2">**</bpt>CollectionViewSource.Source<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>LongListSelector.IsGroupingEnabled<ept id="p3">**</ept> becomes <bpt id="p4">**</bpt>CollectionViewSource.IsSourceGrouped<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> has a name (note: not a key, as you might expect) so that we can bind to it.</source>
          <target state="new">The <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> has a name (note: not a key, as you might expect) so that we can bind to it.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Next, replace the <ph id="ph1">`phone:LongListSelector`</ph> with this markup, which will give us a preliminary <bpt id="p1">**</bpt>SemanticZoom<ept id="p1">**</ept> to work with.</source>
          <target state="new">Next, replace the <ph id="ph1">`phone:LongListSelector`</ph> with this markup, which will give us a preliminary <bpt id="p1">**</bpt>SemanticZoom<ept id="p1">**</ept> to work with.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>LongListSelector<ept id="p1">**</ept> notion of flat list and jump list modes is answered in the <bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept> notion of a zoomed-in and a zoomed-out view, respectively.</source>
          <target state="new">The <bpt id="p1">**</bpt>LongListSelector<ept id="p1">**</ept> notion of flat list and jump list modes is answered in the <bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept> notion of a zoomed-in and a zoomed-out view, respectively.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The zoomed-in view is a property, and you set that property to an instance of a <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>.</source>
          <target state="new">The zoomed-in view is a property, and you set that property to an instance of a <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In this case, the zoomed-out view is also set to a <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>, and both <bpt id="p2">**</bpt>ListView<ept id="p2">**</ept> controls are bound to our <bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept>.</source>
          <target state="new">In this case, the zoomed-out view is also set to a <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>, and both <bpt id="p2">**</bpt>ListView<ept id="p2">**</ept> controls are bound to our <bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The zoomed-in view uses the same item template, group header template, and <bpt id="p1">**</bpt>HideEmptyGroups<ept id="p1">**</ept> setting (now named <bpt id="p2">**</bpt>HidesIfEmpty<ept id="p2">**</ept>) as the <bpt id="p3">**</bpt>LongListSelector<ept id="p3">**</ept>'s flat list does.</source>
          <target state="new">The zoomed-in view uses the same item template, group header template, and <bpt id="p1">**</bpt>HideEmptyGroups<ept id="p1">**</ept> setting (now named <bpt id="p2">**</bpt>HidesIfEmpty<ept id="p2">**</ept>) as the <bpt id="p3">**</bpt>LongListSelector<ept id="p3">**</ept>'s flat list does.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>And the zoomed-out view uses an item template very much like the one inside the <bpt id="p1">**</bpt>LongListSelector<ept id="p1">**</ept>'s jump list style (<ph id="ph1">`AuthorNameJumpListStyle`</ph>).</source>
          <target state="new">And the zoomed-out view uses an item template very much like the one inside the <bpt id="p1">**</bpt>LongListSelector<ept id="p1">**</ept>'s jump list style (<ph id="ph1">`AuthorNameJumpListStyle`</ph>).</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Also, note that the zoomed-out view binds to a special property of the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> named <bpt id="p2">**</bpt>CollectionGroups<ept id="p2">**</ept>, which is a collection containing the groups rather than the items.</source>
          <target state="new">Also, note that the zoomed-out view binds to a special property of the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> named <bpt id="p2">**</bpt>CollectionGroups<ept id="p2">**</ept>, which is a collection containing the groups rather than the items.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>We no longer need <ph id="ph1">`AuthorNameJumpListStyle`</ph>, at least not all of it.</source>
          <target state="new">We no longer need <ph id="ph1">`AuthorNameJumpListStyle`</ph>, at least not all of it.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>We only need the data template for the groups (which are authors in this app) in the zoomed-out view.</source>
          <target state="new">We only need the data template for the groups (which are authors in this app) in the zoomed-out view.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>So, we delete the <ph id="ph1">`AuthorNameJumpListStyle`</ph> style and replace it with this data template.</source>
          <target state="new">So, we delete the <ph id="ph1">`AuthorNameJumpListStyle`</ph> style and replace it with this data template.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Note that, since the data context of this data template is a group rather than an item, we bind to a special property named <bpt id="p1">**</bpt>Group<ept id="p1">**</ept>.</source>
          <target state="new">Note that, since the data context of this data template is a group rather than an item, we bind to a special property named <bpt id="p1">**</bpt>Group<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can build and run the app now.</source>
          <target state="new">You can build and run the app now.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Here's how it looks on the mobile emulator.</source>
          <target state="new">Here's how it looks on the mobile emulator.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>the uwp app on mobile with initial source code changes</source>
          <target state="new">the uwp app on mobile with initial source code changes</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The view model and the zoomed-in and zoomed-out views are working together correctly, although one issue is that we need to do a little more styling and templating work.</source>
          <target state="new">The view model and the zoomed-in and zoomed-out views are working together correctly, although one issue is that we need to do a little more styling and templating work.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, the correct styles and brushes are not yet being used, so the text is invisible on the group headers that you can click to zoom out.</source>
          <target state="new">For example, the correct styles and brushes are not yet being used, so the text is invisible on the group headers that you can click to zoom out.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If you run the app on a desktop device, then you'll see a second issue, which is that the app doesn't yet adapt its user-interface to give the best experience and use of space on larger devices where windows can be potentially much larger than the screen of a mobile device.</source>
          <target state="new">If you run the app on a desktop device, then you'll see a second issue, which is that the app doesn't yet adapt its user-interface to give the best experience and use of space on larger devices where windows can be potentially much larger than the screen of a mobile device.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>So, in the next few sections (<bpt id="p1">[</bpt>Initial styling and templating<ept id="p1">](#initial-styling-and-templating)</ept>, <bpt id="p2">[</bpt>Adaptive UI<ept id="p2">](#adaptive-ui)</ept>, and <bpt id="p3">[</bpt>Final styling<ept id="p3">](#final-styling)</ept>), we'll remedy those issues.</source>
          <target state="new">So, in the next few sections (<bpt id="p1">[</bpt>Initial styling and templating<ept id="p1">](#initial-styling-and-templating)</ept>, <bpt id="p2">[</bpt>Adaptive UI<ept id="p2">](#adaptive-ui)</ept>, and <bpt id="p3">[</bpt>Final styling<ept id="p3">](#final-styling)</ept>), we'll remedy those issues.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Initial styling and templating</source>
          <target state="new">Initial styling and templating</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To space out the group headers nicely, edit <ph id="ph1">`AuthorGroupHeaderTemplate`</ph> and set a <bpt id="p1">**</bpt>Margin<ept id="p1">**</ept> of <ph id="ph2">`"0,0,0,9.6"`</ph> on the <bpt id="p2">**</bpt>Border<ept id="p2">**</ept>.</source>
          <target state="new">To space out the group headers nicely, edit <ph id="ph1">`AuthorGroupHeaderTemplate`</ph> and set a <bpt id="p1">**</bpt>Margin<ept id="p1">**</ept> of <ph id="ph2">`"0,0,0,9.6"`</ph> on the <bpt id="p2">**</bpt>Border<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To space out the book items nicely, Edit <ph id="ph1">`BookTemplate`</ph> and set the <bpt id="p1">**</bpt>Margin<ept id="p1">**</ept> to <ph id="ph2">`"9.6,0"`</ph> on both <bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept>s.</source>
          <target state="new">To space out the book items nicely, Edit <ph id="ph1">`BookTemplate`</ph> and set the <bpt id="p1">**</bpt>Margin<ept id="p1">**</ept> to <ph id="ph2">`"9.6,0"`</ph> on both <bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept>s.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To lay out the app name and the page title a little better, inside <ph id="ph1">`TitlePanel`</ph>, remove the top <bpt id="p1">**</bpt>Margin<ept id="p1">**</ept> on the second <bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept> by setting the value to <ph id="ph2">`"7.2,0,0,0"`</ph>.</source>
          <target state="new">To lay out the app name and the page title a little better, inside <ph id="ph1">`TitlePanel`</ph>, remove the top <bpt id="p1">**</bpt>Margin<ept id="p1">**</ept> on the second <bpt id="p2">**</bpt>TextBlock<ept id="p2">**</ept> by setting the value to <ph id="ph2">`"7.2,0,0,0"`</ph>.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>And on <ph id="ph1">`TitlePanel`</ph> itself, set the margin to <ph id="ph2">`0`</ph> (or whatever value looks good to you)</source>
          <target state="new">And on <ph id="ph1">`TitlePanel`</ph> itself, set the margin to <ph id="ph2">`0`</ph> (or whatever value looks good to you)</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Change <ph id="ph1">`LayoutRoot`</ph>'s Background to <ph id="ph2">`"{ThemeResource ApplicationPageBackgroundThemeBrush}"`</ph>.</source>
          <target state="new">Change <ph id="ph1">`LayoutRoot`</ph>'s Background to <ph id="ph2">`"{ThemeResource ApplicationPageBackgroundThemeBrush}"`</ph>.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Adaptive UI</source>
          <target state="new">Adaptive UI</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Because we started out with a phone app, it's no surprise that our ported app's UI layout really only makes sense for small devices and narrow windows at this stage in the process.</source>
          <target state="new">Because we started out with a phone app, it's no surprise that our ported app's UI layout really only makes sense for small devices and narrow windows at this stage in the process.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>But, we'd really like the UI layout to adapt itself and make better use of space when the app is running in a wide window (which is only possible on a device with a large screen), and for it only to use the UI that we have currently when the app's window is narrow (which happens on a small device, and can also happen on a large device).</source>
          <target state="new">But, we'd really like the UI layout to adapt itself and make better use of space when the app is running in a wide window (which is only possible on a device with a large screen), and for it only to use the UI that we have currently when the app's window is narrow (which happens on a small device, and can also happen on a large device).</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>We can use the adaptive Visual State Manager feature to achieve this.</source>
          <target state="new">We can use the adaptive Visual State Manager feature to achieve this.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>We'll set properties on visual elements so that, by default, the UI is laid out in the narrow state using the templates that we're using right now.</source>
          <target state="new">We'll set properties on visual elements so that, by default, the UI is laid out in the narrow state using the templates that we're using right now.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Then, we'll detect when the app's window is wider-than-or-equal-to a specific size (measured in units of <bpt id="p1">[</bpt>effective pixels<ept id="p1">](wpsl-to-uwp-porting-xaml-and-ui.md#effective-pixels)</ept>), and in response, we'll change the properties of visual elements so that we get a larger, and wider, layout.</source>
          <target state="new">Then, we'll detect when the app's window is wider-than-or-equal-to a specific size (measured in units of <bpt id="p1">[</bpt>effective pixels<ept id="p1">](wpsl-to-uwp-porting-xaml-and-ui.md#effective-pixels)</ept>), and in response, we'll change the properties of visual elements so that we get a larger, and wider, layout.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>We'll put those property changes in a visual state, and we'll use an adaptive trigger to continuously monitor and determine whether to apply that visual state, or not, depending on the width of the window in effective pixels.</source>
          <target state="new">We'll put those property changes in a visual state, and we'll use an adaptive trigger to continuously monitor and determine whether to apply that visual state, or not, depending on the width of the window in effective pixels.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>We're triggering on window width in this case, but it's possible to trigger on window height, too.</source>
          <target state="new">We're triggering on window width in this case, but it's possible to trigger on window height, too.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A minimum window width of 548 epx is appropriate for this use case because that's the size of the smallest device we would want to show the wide layout on.</source>
          <target state="new">A minimum window width of 548 epx is appropriate for this use case because that's the size of the smallest device we would want to show the wide layout on.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Phones are typically smaller than 548 epx, so on a small device like that, we'd remain in the default narrow layout.</source>
          <target state="new">Phones are typically smaller than 548 epx, so on a small device like that, we'd remain in the default narrow layout.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>On a PC, the window will launch by default wide enough to trigger the switch to the wide state, which will display 250x250-sized items.</source>
          <target state="new">On a PC, the window will launch by default wide enough to trigger the switch to the wide state, which will display 250x250-sized items.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>From there, you'll be able to drag the window narrow enough to display a minimum of two columns of the 250x250 items.</source>
          <target state="new">From there, you'll be able to drag the window narrow enough to display a minimum of two columns of the 250x250 items.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Any narrower than that and the trigger will deactivate, the wide visual state will be removed, and the default narrow layout will be in effect.</source>
          <target state="new">Any narrower than that and the trigger will deactivate, the wide visual state will be removed, and the default narrow layout will be in effect.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Before tackling the adaptive Visual State Manager piece, we first need to design the wide state and that means adding some new visual elements and templates to our markup.</source>
          <target state="new">Before tackling the adaptive Visual State Manager piece, we first need to design the wide state and that means adding some new visual elements and templates to our markup.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>These steps describe how to do that.</source>
          <target state="new">These steps describe how to do that.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>By way of naming conventions for visual elements and templates, we'll include the word "wide" in the name of any element or template that is for the wide state.</source>
          <target state="new">By way of naming conventions for visual elements and templates, we'll include the word "wide" in the name of any element or template that is for the wide state.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If an element or template does not contain the word "wide", then you can assume that it is for the narrow state, which is the default state and whose property values are set as local values on visual elements in the page.</source>
          <target state="new">If an element or template does not contain the word "wide", then you can assume that it is for the narrow state, which is the default state and whose property values are set as local values on visual elements in the page.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Only the property values for the wide state are set via an actual Visual State in the markup.</source>
          <target state="new">Only the property values for the wide state are set via an actual Visual State in the markup.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Make a copy of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702601)</ept> control in the markup and set <ph id="ph1">`x:Name="narrowSeZo"`</ph> on the copy.</source>
          <target state="new">Make a copy of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702601)</ept> control in the markup and set <ph id="ph1">`x:Name="narrowSeZo"`</ph> on the copy.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>On the original, set <ph id="ph1">`x:Name="wideSeZo"`</ph> and also set <ph id="ph2">`Visibility="Collapsed"`</ph> so that the wide one is not visible by default.</source>
          <target state="new">On the original, set <ph id="ph1">`x:Name="wideSeZo"`</ph> and also set <ph id="ph2">`Visibility="Collapsed"`</ph> so that the wide one is not visible by default.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`wideSeZo`</ph>, change the <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>s to <bpt id="p2">**</bpt>GridView<ept id="p2">**</ept>s in both the zoomed-in view and the zoomed-out view.</source>
          <target state="new">In <ph id="ph1">`wideSeZo`</ph>, change the <bpt id="p1">**</bpt>ListView<ept id="p1">**</ept>s to <bpt id="p2">**</bpt>GridView<ept id="p2">**</ept>s in both the zoomed-in view and the zoomed-out view.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Make a copy of these three resources <ph id="ph1">`AuthorGroupHeaderTemplate`</ph>, <ph id="ph2">`ZoomedOutAuthorTemplate`</ph>, and <ph id="ph3">`BookTemplate`</ph> and append the word <ph id="ph4">`Wide`</ph> to the keys of the copies.</source>
          <target state="new">Make a copy of these three resources <ph id="ph1">`AuthorGroupHeaderTemplate`</ph>, <ph id="ph2">`ZoomedOutAuthorTemplate`</ph>, and <ph id="ph3">`BookTemplate`</ph> and append the word <ph id="ph4">`Wide`</ph> to the keys of the copies.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Also, update <ph id="ph1">`wideSeZo`</ph> so that it references the keys of these new resources.</source>
          <target state="new">Also, update <ph id="ph1">`wideSeZo`</ph> so that it references the keys of these new resources.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Replace the contents of <ph id="ph1">`AuthorGroupHeaderTemplateWide`</ph> with <ph id="ph2">`&lt;TextBlock Style="{StaticResource SubheaderTextBlockStyle}" Text="{Binding Name}"/&gt;`</ph>.</source>
          <target state="new">Replace the contents of <ph id="ph1">`AuthorGroupHeaderTemplateWide`</ph> with <ph id="ph2">`&lt;TextBlock Style="{StaticResource SubheaderTextBlockStyle}" Text="{Binding Name}"/&gt;`</ph>.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Replace the contents of <ph id="ph1">`ZoomedOutAuthorTemplateWide`</ph> with:</source>
          <target state="new">Replace the contents of <ph id="ph1">`ZoomedOutAuthorTemplateWide`</ph> with:</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Replace the contents of <ph id="ph1">`BookTemplateWide`</ph> with:</source>
          <target state="new">Replace the contents of <ph id="ph1">`BookTemplateWide`</ph> with:</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For the wide state, the groups in the zoomed-in view will need more vertical breathing space around them.</source>
          <target state="new">For the wide state, the groups in the zoomed-in view will need more vertical breathing space around them.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Creating and referencing an items panel template will give us the results we want.</source>
          <target state="new">Creating and referencing an items panel template will give us the results we want.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Here's how the markup looks.</source>
          <target state="new">Here's how the markup looks.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Finally, add the appropriate Visual State Manager markup as the first child of <ph id="ph1">`LayoutRoot`</ph>.</source>
          <target state="new">Finally, add the appropriate Visual State Manager markup as the first child of <ph id="ph1">`LayoutRoot`</ph>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Final styling</source>
          <target state="new">Final styling</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>All that remains are some final styling tweaks.</source>
          <target state="new">All that remains are some final styling tweaks.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`AuthorGroupHeaderTemplate`</ph>, set <ph id="ph2">`Foreground="White"`</ph> on the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> so that it looks correct when running on the mobile device family.</source>
          <target state="new">In <ph id="ph1">`AuthorGroupHeaderTemplate`</ph>, set <ph id="ph2">`Foreground="White"`</ph> on the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> so that it looks correct when running on the mobile device family.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`FontWeight="SemiBold"`</ph> to the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> in both <ph id="ph2">`AuthorGroupHeaderTemplate`</ph> and <ph id="ph3">`ZoomedOutAuthorTemplate`</ph>.</source>
          <target state="new">Add <ph id="ph1">`FontWeight="SemiBold"`</ph> to the <bpt id="p1">**</bpt>TextBlock<ept id="p1">**</ept> in both <ph id="ph2">`AuthorGroupHeaderTemplate`</ph> and <ph id="ph3">`ZoomedOutAuthorTemplate`</ph>.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`narrowSeZo`</ph>, the group headers and the authors in the zoomed-out view are left-aligned instead of stretched, so let's work on that.</source>
          <target state="new">In <ph id="ph1">`narrowSeZo`</ph>, the group headers and the authors in the zoomed-out view are left-aligned instead of stretched, so let's work on that.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>We'll create a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HeaderContainerStyle<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn251841)</ept> for the zoomed-in view with <bpt id="p3">[</bpt><bpt id="p4">**</bpt>HorizontalContentAlignment<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209417)</ept> set to <ph id="ph1">`Stretch`</ph>.</source>
          <target state="new">We'll create a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>HeaderContainerStyle<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn251841)</ept> for the zoomed-in view with <bpt id="p3">[</bpt><bpt id="p4">**</bpt>HorizontalContentAlignment<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209417)</ept> set to <ph id="ph1">`Stretch`</ph>.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>And we'll create an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemContainerStyle<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242817)</ept> for the zoomed-out view containing that same <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Setter<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208817)</ept>.</source>
          <target state="new">And we'll create an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemContainerStyle<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br242817)</ept> for the zoomed-out view containing that same <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Setter<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208817)</ept>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Here's what that looks like.</source>
          <target state="new">Here's what that looks like.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>That last sequence of styling operations leaves the app looking like this.</source>
          <target state="new">That last sequence of styling operations leaves the app looking like this.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>the ported windows 10 app running on a desktop device, zoomed-in view, two sizes of window</source>
          <target state="new">the ported windows 10 app running on a desktop device, zoomed-in view, two sizes of window</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The ported Windows 10 app running on a Desktop device, zoomed-in view, two sizes of window <ph id="ph1"> 
![</ph>the ported windows 10 app running on a desktop device, zoomed-out view, two sizes of window</source>
          <target state="new">The ported Windows 10 app running on a Desktop device, zoomed-in view, two sizes of window <ph id="ph1"> 
![</ph>the ported windows 10 app running on a desktop device, zoomed-out view, two sizes of window</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The ported Windows 10 app running on a Desktop device, zoomed-out view, two sizes of window</source>
          <target state="new">The ported Windows 10 app running on a Desktop device, zoomed-out view, two sizes of window</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>the ported windows 10 app running on a mobile device, zoomed-in view</source>
          <target state="new">the ported windows 10 app running on a mobile device, zoomed-in view</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The ported Windows 10 app running on a Mobile device, zoomed-in view</source>
          <target state="new">The ported Windows 10 app running on a Mobile device, zoomed-in view</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>the ported windows 10 app running on a mobile device, zoomed-out view</source>
          <target state="new">the ported windows 10 app running on a mobile device, zoomed-out view</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The ported Windows 10 app running on a Mobile device, zoomed-out view</source>
          <target state="new">The ported Windows 10 app running on a Mobile device, zoomed-out view</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Making the view model more flexible</source>
          <target state="new">Making the view model more flexible</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This section contains an example of facilities that open up to us by virtue of having moved our app to use the UWP.</source>
          <target state="new">This section contains an example of facilities that open up to us by virtue of having moved our app to use the UWP.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Here, we explain optional steps that you can follow to make your view model more flexible when accessed via a <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept>.</source>
          <target state="new">Here, we explain optional steps that you can follow to make your view model more flexible when accessed via a <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The view model (the source file is in ViewModel\\BookstoreViewModel.cs) that we ported from the Windows Phone Silverlight app Bookstore2WPSL8 contains a class named Author, which derives from <bpt id="p1">**</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept>, where <bpt id="p2">**</bpt>T<ept id="p2">**</ept> is BookSku.</source>
          <target state="new">The view model (the source file is in ViewModel\\BookstoreViewModel.cs) that we ported from the Windows Phone Silverlight app Bookstore2WPSL8 contains a class named Author, which derives from <bpt id="p1">**</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept>, where <bpt id="p2">**</bpt>T<ept id="p2">**</ept> is BookSku.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>That means that the Author class <bpt id="p1">*</bpt>is a<ept id="p1">*</ept> group of BookSku.</source>
          <target state="new">That means that the Author class <bpt id="p1">*</bpt>is a<ept id="p1">*</ept> group of BookSku.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>When we bind <bpt id="p1">**</bpt>CollectionViewSource.Source<ept id="p1">**</ept> to Authors, the only thing we're communicating is that each Author in Authors is a group of <bpt id="p2">*</bpt>something<ept id="p2">*</ept>.</source>
          <target state="new">When we bind <bpt id="p1">**</bpt>CollectionViewSource.Source<ept id="p1">**</ept> to Authors, the only thing we're communicating is that each Author in Authors is a group of <bpt id="p2">*</bpt>something<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>We leave it to the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> to determine that Author is, in this case, a group of BookSku.</source>
          <target state="new">We leave it to the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> to determine that Author is, in this case, a group of BookSku.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>That works: but it's not flexible.</source>
          <target state="new">That works: but it's not flexible.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>What if we want Author to be <bpt id="p1">*</bpt>both<ept id="p1">*</ept> a group of BookSku <bpt id="p2">*</bpt>and<ept id="p2">*</ept> a group of the addresses where the author has lived?</source>
          <target state="new">What if we want Author to be <bpt id="p1">*</bpt>both<ept id="p1">*</ept> a group of BookSku <bpt id="p2">*</bpt>and<ept id="p2">*</ept> a group of the addresses where the author has lived?</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Author can't <bpt id="p1">*</bpt>be<ept id="p1">*</ept> both of those groups.</source>
          <target state="new">Author can't <bpt id="p1">*</bpt>be<ept id="p1">*</ept> both of those groups.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>But, Author can <bpt id="p1">*</bpt>have<ept id="p1">*</ept> any number of groups.</source>
          <target state="new">But, Author can <bpt id="p1">*</bpt>have<ept id="p1">*</ept> any number of groups.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>And that's the solution: use the <bpt id="p1">*</bpt>has-a-group<ept id="p1">*</ept> pattern instead of, or in addition to, the <bpt id="p2">*</bpt>is-a-group<ept id="p2">*</ept> pattern that we're using currently.</source>
          <target state="new">And that's the solution: use the <bpt id="p1">*</bpt>has-a-group<ept id="p1">*</ept> pattern instead of, or in addition to, the <bpt id="p2">*</bpt>is-a-group<ept id="p2">*</ept> pattern that we're using currently.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Here's how:</source>
          <target state="new">Here's how:</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Change Author so that it no longer derives from <bpt id="p1">**</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept>.</source>
          <target state="new">Change Author so that it no longer derives from <bpt id="p1">**</bpt>List<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph><ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Add this field to Author: <ph id="ph1">`private ObservableCollection&lt;BookSku&gt; bookSkus = new ObservableCollection&lt;BookSku&gt;();`</ph>.</source>
          <target state="new">Add this field to Author: <ph id="ph1">`private ObservableCollection&lt;BookSku&gt; bookSkus = new ObservableCollection&lt;BookSku&gt;();`</ph>.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Add this property to Author: <ph id="ph1">`public ObservableCollection&lt;BookSku&gt; BookSkus { get { return this.bookSkus; } }`</ph>.</source>
          <target state="new">Add this property to Author: <ph id="ph1">`public ObservableCollection&lt;BookSku&gt; BookSkus { get { return this.bookSkus; } }`</ph>.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>And of course we can repeat the above two steps to add as many groups to Author as we need.</source>
          <target state="new">And of course we can repeat the above two steps to add as many groups to Author as we need.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Change the implementation of the AddBookSku method to <ph id="ph1">`this.BookSkus.Add(bookSku);`</ph>.</source>
          <target state="new">Change the implementation of the AddBookSku method to <ph id="ph1">`this.BookSkus.Add(bookSku);`</ph>.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Now that Author <bpt id="p1">*</bpt>has<ept id="p1">*</ept> at least one group, we need to communicate to the <bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept> which of those groups it should use.</source>
          <target state="new">Now that Author <bpt id="p1">*</bpt>has<ept id="p1">*</ept> at least one group, we need to communicate to the <bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept> which of those groups it should use.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>To do that, add this property to the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept>:</source>
          <target state="new">To do that, add this property to the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Those changes leave this app functionally unchanged, but you now know how you could extend Author, and the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept>, should you need to.</source>
          <target state="new">Those changes leave this app functionally unchanged, but you now know how you could extend Author, and the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept>, should you need to.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Let's make one last change to Author so that, if we use it <bpt id="p1">*</bpt>without<ept id="p1">*</ept> specifying <bpt id="p2">**</bpt>CollectionViewSource.ItemsPath<ept id="p2">**</ept>, a default group of our choosing will be used:</source>
          <target state="new">Let's make one last change to Author so that, if we use it <bpt id="p1">*</bpt>without<ept id="p1">*</ept> specifying <bpt id="p2">**</bpt>CollectionViewSource.ItemsPath<ept id="p2">**</ept>, a default group of our choosing will be used:</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>And now we can choose to remove <ph id="ph1">`ItemsPath="BookSkus"`</ph> if we like and the app will still behave the same way.</source>
          <target state="new">And now we can choose to remove <ph id="ph1">`ItemsPath="BookSkus"`</ph> if we like and the app will still behave the same way.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="new">Conclusion</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This case study involved a more ambitious user interface than the previous one.</source>
          <target state="new">This case study involved a more ambitious user interface than the previous one.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>All of the facilities and concepts of the Windows Phone Silverlight<bpt id="p1"> **</bpt>LongListSelector<ept id="p1">**</ept>—and more—were found to be available to a UWP app in the form of <bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept>, <bpt id="p3">**</bpt>ListView<ept id="p3">**</ept>, <bpt id="p4">**</bpt>GridView<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>CollectionViewSource<ept id="p5">**</ept>.</source>
          <target state="new">All of the facilities and concepts of the Windows Phone Silverlight<bpt id="p1"> **</bpt>LongListSelector<ept id="p1">**</ept>—and more—were found to be available to a UWP app in the form of <bpt id="p2">**</bpt>SemanticZoom<ept id="p2">**</ept>, <bpt id="p3">**</bpt>ListView<ept id="p3">**</ept>, <bpt id="p4">**</bpt>GridView<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>CollectionViewSource<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>We showed how to re-use, or copy-and-edit, both imperative code and markup in a UWP app to achieve functionality, UI, and interactions tailored to suit the narrowest and widest Windows device form factors and all sizes in-between.</source>
          <target state="new">We showed how to re-use, or copy-and-edit, both imperative code and markup in a UWP app to achieve functionality, UI, and interactions tailored to suit the narrowest and widest Windows device form factors and all sizes in-between.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>