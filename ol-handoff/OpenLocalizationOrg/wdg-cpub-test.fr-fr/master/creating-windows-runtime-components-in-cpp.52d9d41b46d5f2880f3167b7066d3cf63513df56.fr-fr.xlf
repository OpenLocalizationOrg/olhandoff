<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00dee3becd8f84a4f80c8a1c32fe33de36608a5b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\winrt-components\creating-windows-runtime-components-in-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating Windows Runtime Components in C++</source>
          <target state="new">Creating Windows Runtime Components in C++</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article shows how to use C++ to create a Windows Runtime component, which is a DLL that's callable from a Universal Windows app that's built by using JavaScript—or C#, Visual Basic, or C++.</source>
          <target state="new">This article shows how to use C++ to create a Windows Runtime component, which is a DLL that's callable from a Universal Windows app that's built by using JavaScript—or C#, Visual Basic, or C++.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creating Windows Runtime Components in C++</source>
          <target state="new">Creating Windows Runtime Components in C++</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target state="new">\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</source>
          <target state="new">Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This article shows how to use C++ to create a Windows Runtime component, which is a DLL that's callable from a Universal Windows app that's built by using JavaScript—or C#, Visual Basic, or C++.</source>
          <target state="new">This article shows how to use C++ to create a Windows Runtime component, which is a DLL that's callable from a Universal Windows app that's built by using JavaScript—or C#, Visual Basic, or C++.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Here are several reasons for building such a component:</source>
          <target state="new">Here are several reasons for building such a component:</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To get the performance advantage of C++ in complex or computationally intensive operations.</source>
          <target state="new">To get the performance advantage of C++ in complex or computationally intensive operations.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To reuse code that's already written and tested.</source>
          <target state="new">To reuse code that's already written and tested.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you build a solution that contains a JavaScript or .NET project, and a Windows Runtime component project, the JavaScript project files and the compiled DLL are merged into one package, which you can debug locally in the simulator or remotely on a tethered device.</source>
          <target state="new">When you build a solution that contains a JavaScript or .NET project, and a Windows Runtime component project, the JavaScript project files and the compiled DLL are merged into one package, which you can debug locally in the simulator or remotely on a tethered device.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can also distribute just the component project as an Extension SDK.</source>
          <target state="new">You can also distribute just the component project as an Extension SDK.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating a Software Development Kit<ept id="p1">](https://msdn.microsoft.com/library/hh768146.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Creating a Software Development Kit<ept id="p1">](https://msdn.microsoft.com/library/hh768146.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In general, when you code your C++ component, use the regular C++ library and built-in types, except at the abstract binary interface (ABI) boundary where you are passing data to and from code in another .winmd package.</source>
          <target state="new">In general, when you code your C++ component, use the regular C++ library and built-in types, except at the abstract binary interface (ABI) boundary where you are passing data to and from code in another .winmd package.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There, use Windows Runtime types and the special syntax that Visual C++ supports for creating and manipulating those types.</source>
          <target state="new">There, use Windows Runtime types and the special syntax that Visual C++ supports for creating and manipulating those types.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In addition, in your Visual C++ code, use types such as delegate and event to implement events that can be fired from your component and handled in JavaScript, Visual Basic, or C#.</source>
          <target state="new">In addition, in your Visual C++ code, use types such as delegate and event to implement events that can be fired from your component and handled in JavaScript, Visual Basic, or C#.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about the new Visual C++ syntax, see <bpt id="p1">[</bpt>Visual C++ Language Reference (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh699871.aspx)</ept>.</source>
          <target state="new">For more information about the new Visual C++ syntax, see <bpt id="p1">[</bpt>Visual C++ Language Reference (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh699871.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Casing and naming rules</source>
          <target state="new">Casing and naming rules</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="new">JavaScript</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>JavaScript is case-sensitive.</source>
          <target state="new">JavaScript is case-sensitive.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Therefore, you must follow these casing conventions:</source>
          <target state="new">Therefore, you must follow these casing conventions:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When you reference C++ namespaces and classes, use the same casing that's used on the C++ side.</source>
          <target state="new">When you reference C++ namespaces and classes, use the same casing that's used on the C++ side.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you call methods, use camel casing even if the method name is capitalized on the C++ side.</source>
          <target state="new">When you call methods, use camel casing even if the method name is capitalized on the C++ side.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, a C++ method GetDate() must be called from JavaScript as getDate().</source>
          <target state="new">For example, a C++ method GetDate() must be called from JavaScript as getDate().</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An activatable class name and namespace name can't contain UNICODE characters.</source>
          <target state="new">An activatable class name and namespace name can't contain UNICODE characters.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>.NET</source>
          <target state="new">.NET</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The .NET languages follow their normal casing rules.</source>
          <target state="new">The .NET languages follow their normal casing rules.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Instantiating the object</source>
          <target state="new">Instantiating the object</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Only Windows Runtime types can be passed across the ABI boundary.</source>
          <target state="new">Only Windows Runtime types can be passed across the ABI boundary.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The compiler will raise an error if the component has a type like std::wstring as a return type or parameter in a public method.</source>
          <target state="new">The compiler will raise an error if the component has a type like std::wstring as a return type or parameter in a public method.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The Visual C++ component extensions (C++/CX) built-in types include the usual scalars such as int and double, and also their typedef equivalents int32, float64, and so on.For more information, see <bpt id="p1">[</bpt>Type System (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh755822.aspx)</ept>.</source>
          <target state="new">The Visual C++ component extensions (C++/CX) built-in types include the usual scalars such as int and double, and also their typedef equivalents int32, float64, and so on.For more information, see <bpt id="p1">[</bpt>Type System (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh755822.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>C++ built-in types, library types, and Windows Runtime types</source>
          <target state="new">C++ built-in types, library types, and Windows Runtime types</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An activatable class (also known as a ref class) is one that can be instantiated from another language such as JavaScript, C# or Visual Basic.</source>
          <target state="new">An activatable class (also known as a ref class) is one that can be instantiated from another language such as JavaScript, C# or Visual Basic.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To be consumable from another language, a component must contain at least one activatable class.</source>
          <target state="new">To be consumable from another language, a component must contain at least one activatable class.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A Windows Runtime component can contain multiple public activatable classes as well as additional classes that are known only internally to the component.</source>
          <target state="new">A Windows Runtime component can contain multiple public activatable classes as well as additional classes that are known only internally to the component.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Apply the <bpt id="p1">[</bpt>WebHostHidden<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.metadata.webhosthiddenattribute.aspx)</ept> attribute to C++ types that are not intended to be visible to JavaScript.</source>
          <target state="new">Apply the <bpt id="p1">[</bpt>WebHostHidden<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.metadata.webhosthiddenattribute.aspx)</ept> attribute to C++ types that are not intended to be visible to JavaScript.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>All public classes must reside in the same root namespace which has the same name as the component metadata file.</source>
          <target state="new">All public classes must reside in the same root namespace which has the same name as the component metadata file.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, a class that's named A.B.C.MyClass can be instantiated only if it's defined in a metadata file that's named A.winmd or A.B.winmd or A.B.C.winmd.</source>
          <target state="new">For example, a class that's named A.B.C.MyClass can be instantiated only if it's defined in a metadata file that's named A.winmd or A.B.winmd or A.B.C.winmd.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The name of the DLL is not required to match the .winmd file name.</source>
          <target state="new">The name of the DLL is not required to match the .winmd file name.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Client code creates an instance of the component by using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> (<bpt id="p2">**</bpt>New<ept id="p2">**</ept> in Visual Basic) keyword just as for any class.</source>
          <target state="new">Client code creates an instance of the component by using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> (<bpt id="p2">**</bpt>New<ept id="p2">**</ept> in Visual Basic) keyword just as for any class.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An activatable class must be declared as <bpt id="p1">**</bpt>public ref class sealed<ept id="p1">**</ept>.</source>
          <target state="new">An activatable class must be declared as <bpt id="p1">**</bpt>public ref class sealed<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ref class<ept id="p1">**</ept> keyword tells the compiler to create the class as a Windows Runtime compatible type, and the sealed keyword specifies that the class cannot be inherited.</source>
          <target state="new">The <bpt id="p1">**</bpt>ref class<ept id="p1">**</ept> keyword tells the compiler to create the class as a Windows Runtime compatible type, and the sealed keyword specifies that the class cannot be inherited.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The Windows Runtime does not currently support a generalized inheritance model; a limited inheritance model supports creation of custom XAML controls.</source>
          <target state="new">The Windows Runtime does not currently support a generalized inheritance model; a limited inheritance model supports creation of custom XAML controls.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Ref classes and structs (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh699870.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Ref classes and structs (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh699870.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For C++, all the numeric primitives are defined in the default namespace.</source>
          <target state="new">For C++, all the numeric primitives are defined in the default namespace.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Platform<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh710417.aspx)</ept> namespace contains C++ classes that are specific to the Windows Runtime type system.</source>
          <target state="new">The <bpt id="p1">[</bpt>Platform<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh710417.aspx)</ept> namespace contains C++ classes that are specific to the Windows Runtime type system.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>These include <bpt id="p1">[</bpt>Platform::String<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh755812.aspx)</ept> class and <bpt id="p2">[</bpt>Platform::Object<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh748265.aspx)</ept> class.</source>
          <target state="new">These include <bpt id="p1">[</bpt>Platform::String<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh755812.aspx)</ept> class and <bpt id="p2">[</bpt>Platform::Object<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh748265.aspx)</ept> class.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The concrete collection types such as <bpt id="p1">[</bpt>Platform::Collections::Map<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh441508.aspx)</ept> class and <bpt id="p2">[</bpt>Platform::Collections::Vector<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh441570.aspx)</ept> class are defined in the <bpt id="p3">[</bpt>Platform::Collections<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/hh710418.aspx)</ept> namespace.</source>
          <target state="new">The concrete collection types such as <bpt id="p1">[</bpt>Platform::Collections::Map<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh441508.aspx)</ept> class and <bpt id="p2">[</bpt>Platform::Collections::Vector<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh441570.aspx)</ept> class are defined in the <bpt id="p3">[</bpt>Platform::Collections<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/xaml/hh710418.aspx)</ept> namespace.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The public interfaces that these types implement are defined in <bpt id="p1">[</bpt>Windows::Foundation::Collections Namespace (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh441496.aspx)</ept>.</source>
          <target state="new">The public interfaces that these types implement are defined in <bpt id="p1">[</bpt>Windows::Foundation::Collections Namespace (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/hh441496.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It is these interface types that are consumed by JavaScript, C# and Visual Basic.</source>
          <target state="new">It is these interface types that are consumed by JavaScript, C# and Visual Basic.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Type System (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh755822.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Type System (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh755822.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Method that returns a value of built-in type</source>
          <target state="new">Method that returns a value of built-in type</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Method that returns a custom value struct</source>
          <target state="new">Method that returns a custom value struct</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To pass user-defined value structs across the ABI, define a JavaScript object that has the same members as the value struct that's defined in C++.</source>
          <target state="new">To pass user-defined value structs across the ABI, define a JavaScript object that has the same members as the value struct that's defined in C++.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can then pass that object as an argument to a C++ method so that the object is implicitly converted to the C++ type.</source>
          <target state="new">You can then pass that object as an argument to a C++ method so that the object is implicitly converted to the C++ type.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Another approach is to define a class that implements IPropertySet (not shown).</source>
          <target state="new">Another approach is to define a class that implements IPropertySet (not shown).</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the .NET languages, you just create a variable of the type that's defined in the C++ component.</source>
          <target state="new">In the .NET languages, you just create a variable of the type that's defined in the C++ component.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Overloaded Methods</source>
          <target state="new">Overloaded Methods</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A C++ public ref class can contain overloaded methods, but JavaScript has limited ability to differentiate overloaded methods.</source>
          <target state="new">A C++ public ref class can contain overloaded methods, but JavaScript has limited ability to differentiate overloaded methods.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, it can tell the difference between these signatures:</source>
          <target state="new">For example, it can tell the difference between these signatures:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>But it can’t tell the difference between these:</source>
          <target state="new">But it can’t tell the difference between these:</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In ambiguous cases, you can ensure that JavaScript always calls a specific overload by applying the <bpt id="p1">[</bpt>Windows::Foundation::Metadata::DefaultOverload<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.metadata.defaultoverloadattribute.aspx)</ept> attribute to the method signature in the header file.</source>
          <target state="new">In ambiguous cases, you can ensure that JavaScript always calls a specific overload by applying the <bpt id="p1">[</bpt>Windows::Foundation::Metadata::DefaultOverload<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.metadata.defaultoverloadattribute.aspx)</ept> attribute to the method signature in the header file.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This JavaScript always calls the attributed overload:</source>
          <target state="new">This JavaScript always calls the attributed overload:</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>.NET</source>
          <target state="new">.NET</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The .NET languages recognize overloads in a C++ ref class just as in any .NET Framework class.</source>
          <target state="new">The .NET languages recognize overloads in a C++ ref class just as in any .NET Framework class.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="new">DateTime</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the Windows Runtime, a <bpt id="p1">[</bpt>Windows::Foundation::DateTime<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.datetime.aspx)</ept> object is just a 64-bit signed integer that represents the number of 100-nanosecond intervals either before or after January 1, 1601.</source>
          <target state="new">In the Windows Runtime, a <bpt id="p1">[</bpt>Windows::Foundation::DateTime<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.foundation.datetime.aspx)</ept> object is just a 64-bit signed integer that represents the number of 100-nanosecond intervals either before or after January 1, 1601.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>There are no methods on a Windows:Foundation::DateTime object.</source>
          <target state="new">There are no methods on a Windows:Foundation::DateTime object.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Instead, each language projects the DateTime in the way that is native to that language: the Date object in JavaScript and the System.DateTime and System.DateTimeOffset types in the .NET Framework.</source>
          <target state="new">Instead, each language projects the DateTime in the way that is native to that language: the Date object in JavaScript and the System.DateTime and System.DateTimeOffset types in the .NET Framework.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When you pass a DateTime value from C++ to JavaScript, JavaScript accepts it as a Date object and displays it by default as a long-form date string.</source>
          <target state="new">When you pass a DateTime value from C++ to JavaScript, JavaScript accepts it as a Date object and displays it by default as a long-form date string.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When a .NET language passes a System.DateTime to a C++ component, the method accepts it as a Windows::Foundation::DateTime.</source>
          <target state="new">When a .NET language passes a System.DateTime to a C++ component, the method accepts it as a Windows::Foundation::DateTime.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When the component passes a Windows::Foundation::DateTime to a .NET Framework method, the Framework method accepts it as a DateTimeOffset.</source>
          <target state="new">When the component passes a Windows::Foundation::DateTime to a .NET Framework method, the Framework method accepts it as a DateTimeOffset.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Collections and arrays</source>
          <target state="new">Collections and arrays</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Collections are always passed across the ABI boundary as handles to Windows Runtime types such as Windows::Foundation::Collections::IVector^ and Windows::Foundation::Collections::IMap^.</source>
          <target state="new">Collections are always passed across the ABI boundary as handles to Windows Runtime types such as Windows::Foundation::Collections::IVector^ and Windows::Foundation::Collections::IMap^.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, if you return a handle to a Platform::Collections::Map, it implicitly converts to a Windows::Foundation::Collections::IMap^.</source>
          <target state="new">For example, if you return a handle to a Platform::Collections::Map, it implicitly converts to a Windows::Foundation::Collections::IMap^.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The collection interfaces are defined in a namespace that's separate from the C++ classes that provide the concrete implementations.</source>
          <target state="new">The collection interfaces are defined in a namespace that's separate from the C++ classes that provide the concrete implementations.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>JavaScript and .NET languages consume the interfaces.</source>
          <target state="new">JavaScript and .NET languages consume the interfaces.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Collections (C++/CX)<ept id="p1">](https://msdn.microsoft.com//library/windows/apps/hh700103.aspx)</ept> and <bpt id="p2">[</bpt>Array and WriteOnlyArray (C++/CX)<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh700131.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Collections (C++/CX)<ept id="p1">](https://msdn.microsoft.com//library/windows/apps/hh700103.aspx)</ept> and <bpt id="p2">[</bpt>Array and WriteOnlyArray (C++/CX)<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh700131.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Passing IVector</source>
          <target state="new">Passing IVector</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The .NET languages see IVector<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> as IList<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="new">The .NET languages see IVector<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> as IList<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Passing IMap</source>
          <target state="new">Passing IMap</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The .NET languages see IMap and IDictionary<ph id="ph1">&amp;lt;</ph>K, V<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="new">The .NET languages see IMap and IDictionary<ph id="ph1">&amp;lt;</ph>K, V<ph id="ph2">&amp;gt;</ph>.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="new">Properties</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A public ref class in Visual C++ component extensions exposes public data members as properties, by using the property keyword.</source>
          <target state="new">A public ref class in Visual C++ component extensions exposes public data members as properties, by using the property keyword.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The concept is identical to .NET Framework properties.</source>
          <target state="new">The concept is identical to .NET Framework properties.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A trivial property resembles a data member because its functionality is implicit.</source>
          <target state="new">A trivial property resembles a data member because its functionality is implicit.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A non-trivial property has explicit get and set accessors and a named private variable that's the "backing store" for the value.</source>
          <target state="new">A non-trivial property has explicit get and set accessors and a named private variable that's the "backing store" for the value.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In this example, the private member variable \_propertyAValue is the backing store for PropertyA.</source>
          <target state="new">In this example, the private member variable \_propertyAValue is the backing store for PropertyA.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A property can fire an event when its value changes, and a client app can register to receive that event.</source>
          <target state="new">A property can fire an event when its value changes, and a client app can register to receive that event.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The .NET languages access properties on a native C++ object just as they would on a .NET Framework object.</source>
          <target state="new">The .NET languages access properties on a native C++ object just as they would on a .NET Framework object.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Delegates and events</source>
          <target state="new">Delegates and events</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A delegate is a Windows Runtime type that represents a function object.</source>
          <target state="new">A delegate is a Windows Runtime type that represents a function object.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can use delegates in connection with events, callbacks, and asynchronous method calls to specify an action to be performed later.</source>
          <target state="new">You can use delegates in connection with events, callbacks, and asynchronous method calls to specify an action to be performed later.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Like a function object, the delegate provides type-safety by enabling the compiler to verify the return type and parameter types of the function.</source>
          <target state="new">Like a function object, the delegate provides type-safety by enabling the compiler to verify the return type and parameter types of the function.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The declaration of a delegate resembles a function signature, the implementation resembles a class definition, and the invocation resembles a function invocation.</source>
          <target state="new">The declaration of a delegate resembles a function signature, the implementation resembles a class definition, and the invocation resembles a function invocation.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Adding an event listener</source>
          <target state="new">Adding an event listener</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can use the event keyword to declare a public member of a specified delegate type.</source>
          <target state="new">You can use the event keyword to declare a public member of a specified delegate type.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Client code subscribes to the event by using the standard mechanisms that are provided in the particular language.</source>
          <target state="new">Client code subscribes to the event by using the standard mechanisms that are provided in the particular language.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>This example uses the same C++ code as for the previous properties section.</source>
          <target state="new">This example uses the same C++ code as for the previous properties section.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In the .NET languages, subscribing to an event in a C++ component is the same as subscribing to an event in a .NET Framework class:</source>
          <target state="new">In the .NET languages, subscribing to an event in a C++ component is the same as subscribing to an event in a .NET Framework class:</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Adding multiple event listeners for one event</source>
          <target state="new">Adding multiple event listeners for one event</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>JavaScript has an addEventListener method that enables multiple handlers to subscribe to a single event.</source>
          <target state="new">JavaScript has an addEventListener method that enables multiple handlers to subscribe to a single event.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In C#, any number of event handlers can subscribe to the event by using the += operator as shown in the previous example.</source>
          <target state="new">In C#, any number of event handlers can subscribe to the event by using the += operator as shown in the previous example.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Enums</source>
          <target state="new">Enums</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A Windows Runtime enum in C++ is declared by using public class enum; it resembles a scoped enum in standard C++.</source>
          <target state="new">A Windows Runtime enum in C++ is declared by using public class enum; it resembles a scoped enum in standard C++.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Enum values are passed between C++ and JavaScript as integers.</source>
          <target state="new">Enum values are passed between C++ and JavaScript as integers.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can optionally declare a JavaScript object that contains the same named values as the C++ enum and use it as follows.</source>
          <target state="new">You can optionally declare a JavaScript object that contains the same named values as the C++ enum and use it as follows.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Both C# and Visual Basic have language support for enums.</source>
          <target state="new">Both C# and Visual Basic have language support for enums.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>These languages see a C++ public enum class just as they would see a .NET Framework enum.</source>
          <target state="new">These languages see a C++ public enum class just as they would see a .NET Framework enum.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Asynchronous methods</source>
          <target state="new">Asynchronous methods</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To consume asynchronous methods that are exposed by other Windows Runtime objects, use the <bpt id="p1">[</bpt>task Class (Concurrency Runtime)<ept id="p1">](https://msdn.microsoft.com/library/hh750113.aspx)</ept>.</source>
          <target state="new">To consume asynchronous methods that are exposed by other Windows Runtime objects, use the <bpt id="p1">[</bpt>task Class (Concurrency Runtime)<ept id="p1">](https://msdn.microsoft.com/library/hh750113.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For more information, see and <bpt id="p1">[</bpt>Task Parallelism (Concurrency Runtime)<ept id="p1">](https://msdn.microsoft.com/library/dd492427.aspx)</ept>.</source>
          <target state="new">For more information, see and <bpt id="p1">[</bpt>Task Parallelism (Concurrency Runtime)<ept id="p1">](https://msdn.microsoft.com/library/dd492427.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To implement asynchronous methods in C++, use the <bpt id="p1">[</bpt>create\_async<ept id="p1">](https://msdn.microsoft.com/library/hh750102.aspx)</ept> function that's defined in ppltasks.h.</source>
          <target state="new">To implement asynchronous methods in C++, use the <bpt id="p1">[</bpt>create\_async<ept id="p1">](https://msdn.microsoft.com/library/hh750102.aspx)</ept> function that's defined in ppltasks.h.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Asynchronous Operations in C++ for Windows Store Apps<ept id="p1">](https://msdn.microsoft.com/library/vstudio/hh750082.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Creating Asynchronous Operations in C++ for Windows Store Apps<ept id="p1">](https://msdn.microsoft.com/library/vstudio/hh750082.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Walkthrough: Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C#<ept id="p1">](walkthrough-creating-a-basic-windows-runtime-component-in-cpp-and-calling-it-from-javascript-or-csharp.md)</ept>.</source>
          <target state="new">For an example, see <bpt id="p1">[</bpt>Walkthrough: Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C#<ept id="p1">](walkthrough-creating-a-basic-windows-runtime-component-in-cpp-and-calling-it-from-javascript-or-csharp.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The .NET languages consume C++ asynchronous methods just as they would any asynchronous method that's defined in the .NET Framework.</source>
          <target state="new">The .NET languages consume C++ asynchronous methods just as they would any asynchronous method that's defined in the .NET Framework.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="new">Exceptions</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You can throw any exception type that's defined by the Windows Runtime.</source>
          <target state="new">You can throw any exception type that's defined by the Windows Runtime.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You cannot derive custom types from any Windows Runtime exception type.</source>
          <target state="new">You cannot derive custom types from any Windows Runtime exception type.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>However, you can throw COMException and provide a custom HRESULT that can be accessed by the code that catches the exception.</source>
          <target state="new">However, you can throw COMException and provide a custom HRESULT that can be accessed by the code that catches the exception.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>There's no way to specify a custom Message in a COMException.</source>
          <target state="new">There's no way to specify a custom Message in a COMException.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Debugging tips</source>
          <target state="new">Debugging tips</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>When you debug a JavaScript solution that has a component DLL, you can set the debugger to enable either stepping through script, or stepping through native code in the component, but not both at the same time.</source>
          <target state="new">When you debug a JavaScript solution that has a component DLL, you can set the debugger to enable either stepping through script, or stepping through native code in the component, but not both at the same time.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>To change the setting, select the JavaScript project node in Solution Explorer and then choose Properties, Debugging, Debugger Type.</source>
          <target state="new">To change the setting, select the JavaScript project node in Solution Explorer and then choose Properties, Debugging, Debugger Type.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Be sure to select appropriate capabilities in the package designer.</source>
          <target state="new">Be sure to select appropriate capabilities in the package designer.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For example, if you are attempting to open an image file in the user's Pictures library by using the Windows Runtime APIs, be sure to select the Pictures Library check box in the Capabilities pane of the manifest designer.</source>
          <target state="new">For example, if you are attempting to open an image file in the user's Pictures library by using the Windows Runtime APIs, be sure to select the Pictures Library check box in the Capabilities pane of the manifest designer.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If your JavaScript code doesn't seem to be recognizing the public properties or methods in the component, make sure that in JavaScript you are using camel casing.</source>
          <target state="new">If your JavaScript code doesn't seem to be recognizing the public properties or methods in the component, make sure that in JavaScript you are using camel casing.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For example, the LogCalc C++ method must be referenced as logCalc in JavaScript.</source>
          <target state="new">For example, the LogCalc C++ method must be referenced as logCalc in JavaScript.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If you remove a C++ Windows Runtime component project from a solution, you must also manually remove the project reference from the JavaScript project.</source>
          <target state="new">If you remove a C++ Windows Runtime component project from a solution, you must also manually remove the project reference from the JavaScript project.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Failure to do so prevents subsequent debug or build operations.</source>
          <target state="new">Failure to do so prevents subsequent debug or build operations.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If necessary, you can then add an assembly reference to the DLL.</source>
          <target state="new">If necessary, you can then add an assembly reference to the DLL.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</source>
          <target state="new">Walkthrough: Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>