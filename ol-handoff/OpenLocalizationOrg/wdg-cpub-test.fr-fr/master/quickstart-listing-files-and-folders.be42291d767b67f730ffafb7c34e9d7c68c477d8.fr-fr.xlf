<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ms.assetid: 4C59D5AC-58F7-4863-A884-E9E54228A5AD</source>
          <target state="new">ms.assetid: 4C59D5AC-58F7-4863-A884-E9E54228A5AD</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>title: Enumerate and query files and folders</source>
          <target state="new">title: Enumerate and query files and folders</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>description: Access files and folders in either a folder, library, device, or network location.</source>
          <target state="new">description: Access files and folders in either a folder, library, device, or network location.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can also query the files and folders in a location by constructing file and folder queries.</source>
          <target state="new">You can also query the files and folders in a location by constructing file and folder queries.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Enumerate and query files and folders</source>
          <target state="new">Enumerate and query files and folders</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Access files and folders in either a folder, library, device, or network location.</source>
          <target state="new">Access files and folders in either a folder, library, device, or network location.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also query the files and folders in a location by constructing file and folder queries.</source>
          <target state="new">You can also query the files and folders in a location by constructing file and folder queries.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Also see the <bpt id="p2">[</bpt>Folder enumeration sample<ept id="p2">](http://go.microsoft.com/fwlink/p/?linkid=619993)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Also see the <bpt id="p2">[</bpt>Folder enumeration sample<ept id="p2">](http://go.microsoft.com/fwlink/p/?linkid=619993)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Understand async programming for Universal Windows Platform (UWP) apps</source>
          <target state="new">Understand async programming for Universal Windows Platform (UWP) apps</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can learn how to write asynchronous apps in C# or Visual Basic, see <bpt id="p1">[</bpt>Call asynchronous APIs in C# or Visual Basic<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187337)</ept>.</source>
          <target state="new">You can learn how to write asynchronous apps in C# or Visual Basic, see <bpt id="p1">[</bpt>Call asynchronous APIs in C# or Visual Basic<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187337)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To learn how to write asynchronous apps in C++, see <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.</source>
          <target state="new">To learn how to write asynchronous apps in C++, see <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Access permissions to the location</source>
          <target state="new">Access permissions to the location</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, the code in these examples require the <bpt id="p1">**</bpt>picturesLibrary<ept id="p1">**</ept> capability, but your location may require a different capability or no capability at all.</source>
          <target state="new">For example, the code in these examples require the <bpt id="p1">**</bpt>picturesLibrary<ept id="p1">**</ept> capability, but your location may require a different capability or no capability at all.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To learn more, see <bpt id="p1">[</bpt>File access permissions<ept id="p1">](file-access-permissions.md)</ept>.</source>
          <target state="new">To learn more, see <bpt id="p1">[</bpt>File access permissions<ept id="p1">](file-access-permissions.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Enumerate files and folders in a location</source>
          <target state="new">Enumerate files and folders in a location</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Remember to declare the <bpt id="p2">**</bpt>picturesLibrary<ept id="p2">**</ept> capability.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Remember to declare the <bpt id="p2">**</bpt>picturesLibrary<ept id="p2">**</ept> capability.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this example we first use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolder.GetFilesAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227276)</ept> method to get all the files in the root folder of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PicturesLibrary<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders) and list the name of each file.</source>
          <target state="new">In this example we first use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolder.GetFilesAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227276)</ept> method to get all the files in the root folder of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>PicturesLibrary<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders) and list the name of each file.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Next, we use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetFoldersAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227280)</ept> method to get all the subfolders in the <bpt id="p3">**</bpt>PicturesLibrary<ept id="p3">**</ept> and list the name of each subfolder.</source>
          <target state="new">Next, we use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetFoldersAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227280)</ept> method to get all the subfolders in the <bpt id="p3">**</bpt>PicturesLibrary<ept id="p3">**</ept> and list the name of each subfolder.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
&gt;</ph> [!div class="tabbedCodeSnippets"] 
<ph id="ph2">&gt; ```cpp
&gt; //#include </ph></source>
          <target state="new"><ph id="ph1">
&gt;</ph> [!div class="tabbedCodeSnippets"] 
<ph id="ph2">&gt; ```cpp
&gt; //#include </ph></target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
&gt;</ph> //#include</source>
          <target state="new"><ph id="ph1">
&gt;</ph> //#include</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
&gt;</ph> //#include</source>
          <target state="new"><ph id="ph1">
&gt;</ph> //#include</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
&gt;</ph> using namespace Windows::Storage;</source>
          <target state="new"><ph id="ph1">
&gt;</ph> using namespace Windows::Storage;</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>&gt; using namespace Platform::Collection</source>
          <target state="new">&gt; using namespace Platform::Collection</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>;
&gt; using namespace concurre</source>
          <target state="new">;
&gt; using namespace concurre</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>cy;
&gt; using namespace std;
&gt; 
&gt; // Be sure to specify the Pictures Folder capability in the appxmanifext file.</source>
          <target state="new">cy;
&gt; using namespace std;
&gt; 
&gt; // Be sure to specify the Pictures Folder capability in the appxmanifext file.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&gt; StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;
&gt; 
&gt; // Use a shared_ptr so that the string stays in memory</source>
          <target state="new">&gt; StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;
&gt; 
&gt; // Use a shared_ptr so that the string stays in memory</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>&gt; // until the last task is complet</source>
          <target state="new">&gt; // until the last task is complet</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>&gt; auto outputString = make_sh<ph id="ph1">ared</ph></source>
          <target state="new">&gt; auto outputString = make_sh<ph id="ph1">ared</ph></target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>();
&gt; *outputString += L"Files:\n";
&gt; 
&gt; // Get a read-only vector of the file objects</source>
          <target state="new">();
&gt; *outputString += L"Files:\n";
&gt; 
&gt; // Get a read-only vector of the file objects</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>&gt; // and pass it to the continuatio</source>
          <target state="new">&gt; // and pass it to the continuatio</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>&gt; create_task(picturesFolder-&gt;GetFilesAsyn<ph id="ph1">c())  </ph></source>
          <target state="new">&gt; create_task(picturesFolder-&gt;GetFilesAsyn<ph id="ph1">c())  </ph></target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>&gt;     // outputString is captured by value, which creates</source>
          <target state="new">&gt;     // outputString is captured by value, which creates</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">copy</ph> 
&gt;     // of the shared_ptr and increments its referenc</source>
          <target state="new"><ph id="ph1">copy</ph> 
&gt;     // of the shared_ptr and increments its referenc</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> cou</ph>nt.</source>
          <target state="new"><ph id="ph1"> cou</ph>nt.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>&gt;     .then ([outputString] (IV<ph id="ph1">ectorView\</ph></source>
          <target state="new">&gt;     .then ([outputString] (IV<ph id="ph1">ectorView\</ph></target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>^ files)
&gt; {</source>
          <target state="new">^ files)
&gt; {</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt;</ph>     for ( unsigned int i = 0 ; i &lt; files-&gt;Size; i++)
&gt;     {
&gt;         *outputString += files-&gt;GetAt(i)-&gt;Name-&gt;Data();
&gt;         *outputString += L"\n";
&gt;     }
&gt; })</source>
          <target state="new"><ph id="ph1">&gt;</ph>     for ( unsigned int i = 0 ; i &lt; files-&gt;Size; i++)
&gt;     {
&gt;         *outputString += files-&gt;GetAt(i)-&gt;Name-&gt;Data();
&gt;         *outputString += L"\n";
&gt;     }
&gt; })</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt;</ph>     // We need to explicitly state the return ty</source>
          <target state="new"><ph id="ph1">&gt;</ph>     // We need to explicitly state the return ty</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> 
&gt;</ph>     // here: -&gt; IAsyncOpera<ph id="ph2">tion</ph></source>
          <target state="new"><ph id="ph1"> 
&gt;</ph>     // here: -&gt; IAsyncOpera<ph id="ph2">tion</ph></target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>^&gt;^ 
&gt; {</source>
          <target state="new">^&gt;^ 
&gt; {</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt;</ph>     return picturesFolder-&gt;GetFoldersAsync(</source>
          <target state="new"><ph id="ph1">&gt;</ph>     return picturesFolder-&gt;GetFoldersAsync(</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> })</ph>
&gt;     // Capture "this" to access m_OutputTextBlock from within the l</source>
          <target state="new"><ph id="ph1"> })</ph>
&gt;     // Capture "this" to access m_OutputTextBlock from within the l</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">mbda</ph>.</source>
          <target state="new"><ph id="ph1">mbda</ph>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>&gt;     .then([this, outputString](IVec<ph id="ph1">torView\</ph></source>
          <target state="new">&gt;     .then([this, outputString](IVec<ph id="ph1">torView\</ph></target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>^ folders)
&gt; {</source>
          <target state="new">^ folders)
&gt; {</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt;</ph>     *outputString += L"Folders:\n";
&gt; 
&gt;     for ( unsigned int i = 0; i &lt; folders-&gt;Size; i++)
&gt;     {
&gt;         *outputString += folders-&gt;GetAt(i)-&gt;Name-&gt;Data();
&gt;         *outputString += L"\n";
&gt;     }
&gt; 
&gt;     // Assume m_OutputTextBlock is a TextBlock defined in the XAML.</source>
          <target state="new"><ph id="ph1">&gt;</ph>     *outputString += L"Folders:\n";
&gt; 
&gt;     for ( unsigned int i = 0; i &lt; folders-&gt;Size; i++)
&gt;     {
&gt;         *outputString += folders-&gt;GetAt(i)-&gt;Name-&gt;Data();
&gt;         *outputString += L"\n";
&gt;     }
&gt; 
&gt;     // Assume m_OutputTextBlock is a TextBlock defined in the XAML.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>&gt;     m_OutputTextBlock-&gt;Text = ref new String((*outputString).c_str());
&gt; });
<ph id="ph1">&gt; ```
&gt; ```cs
&gt; StorageFolder picturesFolder = KnownFolders.PicturesLibrary;
&gt; StringBuilder outputText = new StringBuilder();
&gt; 
&gt; IReadOnlyList</ph></source>
          <target state="new">&gt;     m_OutputTextBlock-&gt;Text = ref new String((*outputString).c_str());
&gt; });
<ph id="ph1">&gt; ```
&gt; ```cs
&gt; StorageFolder picturesFolder = KnownFolders.PicturesLibrary;
&gt; StringBuilder outputText = new StringBuilder();
&gt; 
&gt; IReadOnlyList</ph></target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>fileList = 
&gt;     await picturesFolder.GetFilesAsync();
&gt; 
&gt; outputText.AppendLine("Files:");</source>
          <target state="new">fileList = 
&gt;     await picturesFolder.GetFilesAsync();
&gt; 
&gt; outputText.AppendLine("Files:");</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>&gt; foreach (StorageFile file in fileLis</source>
          <target state="new">&gt; foreach (StorageFile file in fileLis</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; {</ph>
&gt;     outputText.Append(file.Name +</source>
          <target state="new"><ph id="ph1">&gt; {</ph>
&gt;     outputText.Append(file.Name +</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>\n");
&gt; }
&gt; 
&gt; IReadOnlyList</source>
          <target state="new">\n");
&gt; }
&gt; 
&gt; IReadOnlyList</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>folderList = 
&gt;     await picturesFolder.GetFoldersAsync();
&gt;            
&gt; outputText.AppendLine("Folders:");</source>
          <target state="new">folderList = 
&gt;     await picturesFolder.GetFoldersAsync();
&gt;            
&gt; outputText.AppendLine("Folders:");</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>&gt; foreach (StorageFolder folder in folderLis</source>
          <target state="new">&gt; foreach (StorageFolder folder in folderLis</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt; {</ph>
&gt;     outputText.Append(folder.DisplayName +</source>
          <target state="new"><ph id="ph1">&gt; {</ph>
&gt;     outputText.Append(folder.DisplayName +</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>\<bpt id="p1">n");
&gt; }
&gt; ```
&gt; ```vb
&gt; Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary
&gt; Dim outputText As New StringBuilder
&gt; 
&gt; Dim fileList As IReadOnlyList(Of StorageFile) =
&gt;     Await picturesFolder.GetFilesAsync()
&gt; 
&gt; outputText.AppendLine("Files:")
&gt; For Each file As StorageFile In fileList
&gt; 
&gt;     outputText.Append(file.Name &amp; vbLf)
&gt; 
&gt; Next file
&gt; 
&gt; Dim folderList As IReadOnlyList(Of StorageFolder) =
&gt;     Await picturesFolder.GetFoldersAsync()
&gt; 
&gt; outputText.AppendLine("Folders:")
&gt; For Each folder As StorageFolder In folderList
&gt; 
&gt;     outputText.Append(folder.DisplayName &amp; vbLf)
&gt; 
&gt; Next folder
&gt; ```


&gt; **</bpt>Note<ept id="p1">**</ept>  In C# or Visual Basic, remember to put the <bpt id="p2">**</bpt>async<ept id="p2">**</ept> keyword in the method declaration of any method in which you use the <bpt id="p3">**</bpt>await<ept id="p3">**</ept> operator.</source>
          <target state="new">\<bpt id="p1">n");
&gt; }
&gt; ```
&gt; ```vb
&gt; Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary
&gt; Dim outputText As New StringBuilder
&gt; 
&gt; Dim fileList As IReadOnlyList(Of StorageFile) =
&gt;     Await picturesFolder.GetFilesAsync()
&gt; 
&gt; outputText.AppendLine("Files:")
&gt; For Each file As StorageFile In fileList
&gt; 
&gt;     outputText.Append(file.Name &amp; vbLf)
&gt; 
&gt; Next file
&gt; 
&gt; Dim folderList As IReadOnlyList(Of StorageFolder) =
&gt;     Await picturesFolder.GetFoldersAsync()
&gt; 
&gt; outputText.AppendLine("Folders:")
&gt; For Each folder As StorageFolder In folderList
&gt; 
&gt;     outputText.Append(folder.DisplayName &amp; vbLf)
&gt; 
&gt; Next folder
&gt; ```


&gt; **</bpt>Note<ept id="p1">**</ept>  In C# or Visual Basic, remember to put the <bpt id="p2">**</bpt>async<ept id="p2">**</ept> keyword in the method declaration of any method in which you use the <bpt id="p3">**</bpt>await<ept id="p3">**</ept> operator.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetItemsAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227286)</ept> method to get all items (both files and subfolders) in a particular location.</source>
          <target state="new">Alternatively, you can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetItemsAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227286)</ept> method to get all items (both files and subfolders) in a particular location.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>GetItemsAsync<ept id="p1">**</ept> method to get all files and subfolders in the root folder of the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>PicturesLibrary<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders).</source>
          <target state="new">The following example uses the <bpt id="p1">**</bpt>GetItemsAsync<ept id="p1">**</ept> method to get all files and subfolders in the root folder of the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>PicturesLibrary<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> (not in subfolders).</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Then the example lists the name of each file and subfolder.</source>
          <target state="new">Then the example lists the name of each file and subfolder.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If the item is a subfolder, the example appends <ph id="ph1">`"folder"`</ph> to the name.</source>
          <target state="new">If the item is a subfolder, the example appends <ph id="ph1">`"folder"`</ph> to the name.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>&gt; [!div class="tabbedCodeSnippets"] 
<ph id="ph1">&gt; ```cpp
&gt; // See previous example for comments, namespace and #include info.
&gt; StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;
&gt; auto outputString = make_shared</ph></source>
          <target state="new">&gt; [!div class="tabbedCodeSnippets"] 
<ph id="ph1">&gt; ```cpp
&gt; // See previous example for comments, namespace and #include info.
&gt; StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;
&gt; auto outputString = make_shared</ph></target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>();
&gt; 
&gt; create_task(picturesFolder-&gt;GetItemsAsync())</source>
          <target state="new">();
&gt; 
&gt; create_task(picturesFolder-&gt;GetItemsAsync())</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt;</ph>     .then ([this, outputString] (IVectorVi<ph id="ph2">ew</ph></source>
          <target state="new"><ph id="ph1">&gt;</ph>     .then ([this, outputString] (IVectorVi<ph id="ph2">ew</ph></target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>^ items)
&gt; {</source>
          <target state="new">^ items)
&gt; {</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt;</ph>     for ( unsigned int i = 0 ; i &lt; items-&gt;Size; i++)
&gt;     {
&gt;         *outputString += items-&gt;GetAt(i)-&gt;Name-&gt;Data();
&gt;         if(items-&gt;GetAt(i)-&gt;IsOfType(StorageItemTypes::Folder))
&gt;         {
&gt;             *outputString += L"  folder\n";
&gt;         }
&gt;         else
&gt;         {
&gt;             *outputString += L"\n";
&gt;         }
&gt;         m_OutputTextBlock-&gt;Text = ref new String((*outputString).c_str());
&gt;     }
&gt; });
<ph id="ph2">&gt; ```
&gt; ```cs
&gt; StorageFolder picturesFolder = KnownFolders.PicturesLibrary;
&gt; StringBuilder outputText = new StringBuilder();
&gt; 
&gt; IReadOnlyList</ph></source>
          <target state="new"><ph id="ph1">&gt;</ph>     for ( unsigned int i = 0 ; i &lt; items-&gt;Size; i++)
&gt;     {
&gt;         *outputString += items-&gt;GetAt(i)-&gt;Name-&gt;Data();
&gt;         if(items-&gt;GetAt(i)-&gt;IsOfType(StorageItemTypes::Folder))
&gt;         {
&gt;             *outputString += L"  folder\n";
&gt;         }
&gt;         else
&gt;         {
&gt;             *outputString += L"\n";
&gt;         }
&gt;         m_OutputTextBlock-&gt;Text = ref new String((*outputString).c_str());
&gt;     }
&gt; });
<ph id="ph2">&gt; ```
&gt; ```cs
&gt; StorageFolder picturesFolder = KnownFolders.PicturesLibrary;
&gt; StringBuilder outputText = new StringBuilder();
&gt; 
&gt; IReadOnlyList</ph></target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>itemsList = 
&gt;     await picturesFolder.GetItemsAsync();
&gt; 
&gt; foreach (var item in itemsList)</source>
          <target state="new">itemsList = 
&gt;     await picturesFolder.GetItemsAsync();
&gt; 
&gt; foreach (var item in itemsList)</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>&gt;</source>
          <target state="new">&gt;</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">{
&gt;</ph>     if (item is StorageFol</source>
          <target state="new"><ph id="ph1">{
&gt;</ph>     if (item is StorageFol</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">er)</ph>
&gt;</source>
          <target state="new"><ph id="ph1">er)</ph>
&gt;</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">    {
&gt;</ph>         outputText.Append(item.Name + " folder\n");
&gt; 
&gt;     }
&gt;     else
&gt;     {
&gt;         outputText.Append(item.Name + "\n");
&gt; 
&gt;     }
&gt; }
&gt; ```
&gt; ```vb
&gt; Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary
&gt; Dim outputText As New StringBuilder
&gt; 
&gt; Dim itemsList As IReadOnlyList(Of IStorageItem) =
&gt;     Await picturesFolder.GetItemsAsync()
&gt; 
&gt; For Each item In itemsList
&gt; 
&gt;     If TypeOf item Is StorageFolder Then
&gt; 
&gt;         outputText.Append(item.Name &amp; " folder" &amp; vbLf)
&gt; 
&gt;     Else
&gt; 
&gt;         outputText.Append(item.Name &amp; vbLf)
&gt; 
&gt;     End If
&gt; 
&gt; Next item
&gt; ```

## Query files in a location and enumerate matching files

In this example we query for all the files in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PicturesLibrary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> grouped by the month, and this time the example recurses into subfolders.</source>
          <target state="new"><ph id="ph1">    {
&gt;</ph>         outputText.Append(item.Name + " folder\n");
&gt; 
&gt;     }
&gt;     else
&gt;     {
&gt;         outputText.Append(item.Name + "\n");
&gt; 
&gt;     }
&gt; }
&gt; ```
&gt; ```vb
&gt; Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary
&gt; Dim outputText As New StringBuilder
&gt; 
&gt; Dim itemsList As IReadOnlyList(Of IStorageItem) =
&gt;     Await picturesFolder.GetItemsAsync()
&gt; 
&gt; For Each item In itemsList
&gt; 
&gt;     If TypeOf item Is StorageFolder Then
&gt; 
&gt;         outputText.Append(item.Name &amp; " folder" &amp; vbLf)
&gt; 
&gt;     Else
&gt; 
&gt;         outputText.Append(item.Name &amp; vbLf)
&gt; 
&gt;     End If
&gt; 
&gt; Next item
&gt; ```

## Query files in a location and enumerate matching files

In this example we query for all the files in the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PicturesLibrary<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227156)</ept> grouped by the month, and this time the example recurses into subfolders.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>First, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolder.CreateFolderQuery<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227262)</ept> and pass the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CommonFolderQuery.GroupByMonth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br207957)</ept> value to the method.</source>
          <target state="new">First, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolder.CreateFolderQuery<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227262)</ept> and pass the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CommonFolderQuery.GroupByMonth<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br207957)</ept> value to the method.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>That gives us a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolderQueryResult<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208066)</ept> object.</source>
          <target state="new">That gives us a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolderQueryResult<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208066)</ept> object.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Next we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolderQueryResult.GetFoldersAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208074)</ept> which returns <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StorageFolder<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227230)</ept> objects representing virtual folders.</source>
          <target state="new">Next we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StorageFolderQueryResult.GetFoldersAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208074)</ept> which returns <bpt id="p3">[</bpt><bpt id="p4">**</bpt>StorageFolder<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227230)</ept> objects representing virtual folders.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In this case we're grouping by month, so the virtual folders each represent a group of files with the same month.</source>
          <target state="new">In this case we're grouping by month, so the virtual folders each represent a group of files with the same month.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>&gt; [!div class="tabbedCodeSnippets"] 
<ph id="ph1">&gt; ```cpp
&gt; //#include </ph></source>
          <target state="new">&gt; [!div class="tabbedCodeSnippets"] 
<ph id="ph1">&gt; ```cpp
&gt; //#include </ph></target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
&gt;</ph> //#include</source>
          <target state="new"><ph id="ph1">
&gt;</ph> //#include</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
&gt;</ph> //#include</source>
          <target state="new"><ph id="ph1">
&gt;</ph> //#include</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
&gt;</ph> using namespace Windows::Storage;</source>
          <target state="new"><ph id="ph1">
&gt;</ph> using namespace Windows::Storage;</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>&gt; using namespace Windows::Storage::Searc</source>
          <target state="new">&gt; using namespace Windows::Storage::Searc</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>;
&gt; using namespace concurre</source>
          <target state="new">;
&gt; using namespace concurre</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>cy;
&gt; using namespace Platform::Collec</source>
          <target state="new">cy;
&gt; using namespace Platform::Collec</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>ions;
&gt; using namespace Windows::Foundation::Coll</source>
          <target state="new">ions;
&gt; using namespace Windows::Foundation::Coll</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>ctions;
&gt; using namespace std;
&gt; 
&gt; StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;
&gt; 
&gt; StorageFolderQueryResult^ queryResult =</source>
          <target state="new">ctions;
&gt; using namespace std;
&gt; 
&gt; StorageFolder^ picturesFolder = KnownFolders::PicturesLibrary;
&gt; 
&gt; StorageFolderQueryResult^ queryResult =</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt;</ph>     picturesFolder-&gt;CreateFolderQuery(CommonFolderQuery::GroupByMonth);
&gt; 
&gt; // Use shared_ptr so that outputString remains in memory</source>
          <target state="new"><ph id="ph1">&gt;</ph>     picturesFolder-&gt;CreateFolderQuery(CommonFolderQuery::GroupByMonth);
&gt; 
&gt; // Use shared_ptr so that outputString remains in memory</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>&gt; // until the task completes, which is after the function goes out of scop</source>
          <target state="new">&gt; // until the task completes, which is after the function goes out of scop</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>&gt; auto outputString = std::make_sh<ph id="ph1">ared</ph></source>
          <target state="new">&gt; auto outputString = std::make_sh<ph id="ph1">ared</ph></target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>();
&gt; 
&gt; create_task( queryResult-&gt;GetFoldersAsync()).then([this, outputString] (IVectorView</source>
          <target state="new">();
&gt; 
&gt; create_task( queryResult-&gt;GetFoldersAsync()).then([this, outputString] (IVectorView</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>^ view) 
&gt; {</source>
          <target state="new">^ view) 
&gt; {</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt;</ph>     for ( unsigned int i = 0; i &lt; view-&gt;Size; i++)
<ph id="ph2">&gt;     {
&gt;         create_task(view-&gt;GetAt(i)-&gt;GetFilesAsync()).then([this, i, view, outputString](IVectorView</ph></source>
          <target state="new"><ph id="ph1">&gt;</ph>     for ( unsigned int i = 0; i &lt; view-&gt;Size; i++)
<ph id="ph2">&gt;     {
&gt;         create_task(view-&gt;GetAt(i)-&gt;GetFilesAsync()).then([this, i, view, outputString](IVectorView</ph></target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>^ files)
&gt;         {
&gt;             *outputString += view-&gt;GetAt(i)-&gt;Name-&gt;Data();
&gt;             *outputString += L"(";
&gt;             *outputString += to_wstring(files-&gt;Size);
&gt;             *outputString += L")\r\n";
&gt;             for (unsigned int j = 0; j &lt; files-&gt;Size; j++)
&gt;             {
&gt;                 *outputString += L"     ";
&gt;                 *outputString += files-&gt;GetAt(j)-&gt;Name-&gt;Data();
&gt;                 *outputString += L"\r\n";
&gt;             }
&gt;         }).then([this, outputString]()
&gt;         {
&gt;             m_OutputTextBlock-&gt;Text = ref new String((*outputString).c_str());
&gt;         });
&gt;     }    
&gt; });
<ph id="ph1">&gt; ```
&gt; ```cs
&gt; StorageFolder picturesFolder = KnownFolders.PicturesLibrary;
&gt; 
&gt; StorageFolderQueryResult queryResult = 
&gt;     picturesFolder.CreateFolderQuery(CommonFolderQuery.GroupByMonth);
&gt;         
&gt; IReadOnlyList</ph></source>
          <target state="new">^ files)
&gt;         {
&gt;             *outputString += view-&gt;GetAt(i)-&gt;Name-&gt;Data();
&gt;             *outputString += L"(";
&gt;             *outputString += to_wstring(files-&gt;Size);
&gt;             *outputString += L")\r\n";
&gt;             for (unsigned int j = 0; j &lt; files-&gt;Size; j++)
&gt;             {
&gt;                 *outputString += L"     ";
&gt;                 *outputString += files-&gt;GetAt(j)-&gt;Name-&gt;Data();
&gt;                 *outputString += L"\r\n";
&gt;             }
&gt;         }).then([this, outputString]()
&gt;         {
&gt;             m_OutputTextBlock-&gt;Text = ref new String((*outputString).c_str());
&gt;         });
&gt;     }    
&gt; });
<ph id="ph1">&gt; ```
&gt; ```cs
&gt; StorageFolder picturesFolder = KnownFolders.PicturesLibrary;
&gt; 
&gt; StorageFolderQueryResult queryResult = 
&gt;     picturesFolder.CreateFolderQuery(CommonFolderQuery.GroupByMonth);
&gt;         
&gt; IReadOnlyList</ph></target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>folderList = 
&gt;     await queryResult.GetFoldersAsync();
&gt; 
&gt; StringBuilder outputText = new StringBuilder();
&gt; 
&gt; foreach (StorageFolder folder in folderList)</source>
          <target state="new">folderList = 
&gt;     await queryResult.GetFoldersAsync();
&gt; 
&gt; StringBuilder outputText = new StringBuilder();
&gt; 
&gt; foreach (StorageFolder folder in folderList)</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>&gt;</source>
          <target state="new">&gt;</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">{
&gt;</ph>     IReadOnly<ph id="ph2">List</ph></source>
          <target state="new"><ph id="ph1">{
&gt;</ph>     IReadOnly<ph id="ph2">List</ph></target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>fileList = await folder.GetFilesAsync();
&gt; 
&gt;     // Print the month and number of files in this group.</source>
          <target state="new">fileList = await folder.GetFilesAsync();
&gt; 
&gt;     // Print the month and number of files in this group.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>&gt;     outputText.AppendLine(folder.Name + " (" + fileList.Count + ")");
&gt; 
&gt;     foreach (StorageFile file in fileList)
&gt;     {
&gt;         // Print the name of the file.</source>
          <target state="new">&gt;     outputText.AppendLine(folder.Name + " (" + fileList.Count + ")");
&gt; 
&gt;     foreach (StorageFile file in fileList)
&gt;     {
&gt;         // Print the name of the file.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>&gt;         outputText.AppendLine("   " + file.Name);
&gt;     }
&gt; }
&gt; ```
&gt; ```vb
&gt; Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary
&gt; Dim outputText As New StringBuilder
&gt; 
&gt; Dim queryResult As StorageFolderQueryResult =
&gt;     picturesFolder.CreateFolderQuery(CommonFolderQuery.GroupByMonth)
&gt; 
&gt; Dim folderList As IReadOnlyList(Of StorageFolder) =
&gt;     Await queryResult.GetFoldersAsync()
&gt; 
&gt; For Each folder As StorageFolder In folderList
&gt; 
&gt;     Dim fileList As IReadOnlyList(Of StorageFile) =
&gt;         Await folder.GetFilesAsync()
&gt; 
&gt;     ' Print the month and number of files in this group.</source>
          <target state="new">&gt;         outputText.AppendLine("   " + file.Name);
&gt;     }
&gt; }
&gt; ```
&gt; ```vb
&gt; Dim picturesFolder As StorageFolder = KnownFolders.PicturesLibrary
&gt; Dim outputText As New StringBuilder
&gt; 
&gt; Dim queryResult As StorageFolderQueryResult =
&gt;     picturesFolder.CreateFolderQuery(CommonFolderQuery.GroupByMonth)
&gt; 
&gt; Dim folderList As IReadOnlyList(Of StorageFolder) =
&gt;     Await queryResult.GetFoldersAsync()
&gt; 
&gt; For Each folder As StorageFolder In folderList
&gt; 
&gt;     Dim fileList As IReadOnlyList(Of StorageFile) =
&gt;         Await folder.GetFilesAsync()
&gt; 
&gt;     ' Print the month and number of files in this group.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>&gt;     outputText.AppendLine(folder.Name &amp; " (" &amp; fileList.Count &amp; ")")
&gt; 
&gt;     For Each file As StorageFile In fileList
&gt; 
&gt;         ' Print the name of the file.</source>
          <target state="new">&gt;     outputText.AppendLine(folder.Name &amp; " (" &amp; fileList.Count &amp; ")")
&gt; 
&gt;     For Each file As StorageFile In fileList
&gt; 
&gt;         ' Print the name of the file.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>&gt;         outputText.AppendLine("   " &amp; file.Name)
&gt; 
&gt;     Next file
&gt; 
&gt; Next folder
&gt; ```

The output of the example looks similar to the following.</source>
          <target state="new">&gt;         outputText.AppendLine("   " &amp; file.Name)
&gt; 
&gt;     Next file
&gt; 
&gt; Next folder
&gt; ```

The output of the example looks similar to the following.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">``` syntax
July ‎2015 (2)
   MyImage3.png
   MyImage4.png
‎December ‎2014 (2)
   MyImage1.png
   MyImage2.png
```</ph></source>
          <target state="new"><ph id="ph1">``` syntax
July ‎2015 (2)
   MyImage3.png
   MyImage4.png
‎December ‎2014 (2)
   MyImage1.png
   MyImage2.png
```</ph></target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9f0823fd27e9eee35d04ea0537721f7fb3e00ce</xliffext:olfilehash>
  </header>
</xliff>