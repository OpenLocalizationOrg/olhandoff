<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be6fb5fc439de3213ef0815ea205ac51112bb202</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\winrt-components\walkthrough-creating-a-basic-windows-runtime-component-in-cpp-and-calling-it-from-javascript-or-csharp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</source>
          <target state="new">Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</source>
          <target state="new">This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</source>
          <target state="new">Walkthrough: Creating a basic Windows Runtime component in C++ and calling it from JavaScript or C</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target state="new">\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</source>
          <target state="new">Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</source>
          <target state="new">This walkthrough shows how to create a basic Windows Runtime Component DLL that's callable from JavaScript, C#, or Visual Basic.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Before you begin this walkthrough, make sure that you understand concepts such as the Abstract Binary Interface (ABI), ref classes, and the Visual C++ Component Extensions that make working with ref classes easier.</source>
          <target state="new">Before you begin this walkthrough, make sure that you understand concepts such as the Abstract Binary Interface (ABI), ref classes, and the Visual C++ Component Extensions that make working with ref classes easier.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Windows Runtime Components in C++<ept id="p1">](creating-windows-runtime-components-in-cpp.md)</ept> and <bpt id="p2">[</bpt>Visual C++ Language Reference (C++/CX)<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh699871.aspx)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Creating Windows Runtime Components in C++<ept id="p1">](creating-windows-runtime-components-in-cpp.md)</ept> and <bpt id="p2">[</bpt>Visual C++ Language Reference (C++/CX)<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh699871.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creating the C++ component DLL</source>
          <target state="new">Creating the C++ component DLL</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this example, we create the component project first, but you could create the JavaScript project first.</source>
          <target state="new">In this example, we create the component project first, but you could create the JavaScript project first.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The order doesn’t matter.</source>
          <target state="new">The order doesn’t matter.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Notice that the main class of the component contains examples of property and method definitions, and an event declaration.</source>
          <target state="new">Notice that the main class of the component contains examples of property and method definitions, and an event declaration.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These are provided just to show you how it's done.</source>
          <target state="new">These are provided just to show you how it's done.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>They are not required, and in this example, we'll replace all of the generated code with our own code.</source>
          <target state="new">They are not required, and in this example, we'll replace all of the generated code with our own code.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To create the C++ component project</source>
          <target state="new">To create the C++ component project</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On the Visual Studio menu bar, choose <bpt id="p1">**</bpt>File, New, Project<ept id="p1">**</ept>.</source>
          <target state="new">On the Visual Studio menu bar, choose <bpt id="p1">**</bpt>File, New, Project<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, in the left pane, expand <bpt id="p2">**</bpt>Visual C++<ept id="p2">**</ept> and then select the node for Universal Windows apps.</source>
          <target state="new">In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, in the left pane, expand <bpt id="p2">**</bpt>Visual C++<ept id="p2">**</ept> and then select the node for Universal Windows apps.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the center pane, select <bpt id="p1">**</bpt>Windows Runtime Component<ept id="p1">**</ept> and then name the project WinRT\_CPP.</source>
          <target state="new">In the center pane, select <bpt id="p1">**</bpt>Windows Runtime Component<ept id="p1">**</ept> and then name the project WinRT\_CPP.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
          <target state="new">Choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To add an activatable class to the component</source>
          <target state="new">To add an activatable class to the component</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An activatable class is one that client code can create by using a <bpt id="p1">**</bpt>new<ept id="p1">**</ept> expression (<bpt id="p2">**</bpt>New<ept id="p2">**</ept> in Visual Basic, or <bpt id="p3">**</bpt>ref new<ept id="p3">**</ept> in C++).</source>
          <target state="new">An activatable class is one that client code can create by using a <bpt id="p1">**</bpt>new<ept id="p1">**</ept> expression (<bpt id="p2">**</bpt>New<ept id="p2">**</ept> in Visual Basic, or <bpt id="p3">**</bpt>ref new<ept id="p3">**</ept> in C++).</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In your component, you declare it as <bpt id="p1">**</bpt>public ref class sealed<ept id="p1">**</ept>.</source>
          <target state="new">In your component, you declare it as <bpt id="p1">**</bpt>public ref class sealed<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In fact, the Class1.h and .cpp files already have a ref class.</source>
          <target state="new">In fact, the Class1.h and .cpp files already have a ref class.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can change the name, but in this example we’ll use the default name—Class1.</source>
          <target state="new">You can change the name, but in this example we’ll use the default name—Class1.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can define additional ref classes or regular classes in your component if they are required.</source>
          <target state="new">You can define additional ref classes or regular classes in your component if they are required.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information about ref classes, see <bpt id="p1">[</bpt>Type System (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh755822.aspx)</ept>.</source>
          <target state="new">For more information about ref classes, see <bpt id="p1">[</bpt>Type System (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh755822.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Add these \#include directives to Class1.h:</source>
          <target state="new">Add these \#include directives to Class1.h:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Running the app</source>
          <target state="new">Running the app</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Select either the C# project or JavaScript project as the startup project by opening the shortcut menu for the project node in Solution Explorer and choosing <bpt id="p1">**</bpt>Set As Startup Project<ept id="p1">**</ept>.</source>
          <target state="new">Select either the C# project or JavaScript project as the startup project by opening the shortcut menu for the project node in Solution Explorer and choosing <bpt id="p1">**</bpt>Set As Startup Project<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Then press F5 to run with debugging, or Ctrl+F5 to run without debugging.</source>
          <target state="new">Then press F5 to run with debugging, or Ctrl+F5 to run without debugging.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Inspecting your component in Object Browser (optional)</source>
          <target state="new">Inspecting your component in Object Browser (optional)</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In Object Browser, you can inspect all Windows Runtime types that are defined in .winmd files.</source>
          <target state="new">In Object Browser, you can inspect all Windows Runtime types that are defined in .winmd files.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This includes the types in the Platform namespace and the default namespace.</source>
          <target state="new">This includes the types in the Platform namespace and the default namespace.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, because the types in the Platform::Collections namespace are defined in the header file collections.h, not in a winmd file, they don’t appear in Object Browser.</source>
          <target state="new">However, because the types in the Platform::Collections namespace are defined in the header file collections.h, not in a winmd file, they don’t appear in Object Browser.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To inspect a component</source>
          <target state="new">To inspect a component</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>View, Object Browser<ept id="p1">**</ept> (Ctrl+Alt+J).</source>
          <target state="new">On the menu bar, choose <bpt id="p1">**</bpt>View, Object Browser<ept id="p1">**</ept> (Ctrl+Alt+J).</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the left pane of the Object Browser, expand the WinRT\_CPP node to show the types and methods that are defined on your component.</source>
          <target state="new">In the left pane of the Object Browser, expand the WinRT\_CPP node to show the types and methods that are defined on your component.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Debugging tips</source>
          <target state="new">Debugging tips</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For a better debugging experience, download the debugging symbols from the public Microsoft symbol servers:</source>
          <target state="new">For a better debugging experience, download the debugging symbols from the public Microsoft symbol servers:</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To download debugging symbols</source>
          <target state="new">To download debugging symbols</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Tools, Options<ept id="p1">**</ept>.</source>
          <target state="new">On the menu bar, choose <bpt id="p1">**</bpt>Tools, Options<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Options<ept id="p1">**</ept> dialog box, expand <bpt id="p2">**</bpt>Debugging<ept id="p2">**</ept> and select <bpt id="p3">**</bpt>Symbols<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Options<ept id="p1">**</ept> dialog box, expand <bpt id="p2">**</bpt>Debugging<ept id="p2">**</ept> and select <bpt id="p3">**</bpt>Symbols<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Microsoft Symbol Servers<ept id="p1">**</ept> and the choose the <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> button.</source>
          <target state="new">Select <bpt id="p1">**</bpt>Microsoft Symbol Servers<ept id="p1">**</ept> and the choose the <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> button.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It might take some time to download the symbols the first time.</source>
          <target state="new">It might take some time to download the symbols the first time.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For faster performance the next time you press F5, specify a local directory in which to cache the symbols.</source>
          <target state="new">For faster performance the next time you press F5, specify a local directory in which to cache the symbols.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When you debug a JavaScript solution that has a component DLL, you can set the debugger to enable either stepping through script or stepping through native code in the component, but not both at the same time.</source>
          <target state="new">When you debug a JavaScript solution that has a component DLL, you can set the debugger to enable either stepping through script or stepping through native code in the component, but not both at the same time.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To change the setting, open the shortcut menu for the JavaScript project node in Solution Explorer and choose <bpt id="p1">**</bpt>Properties, Debugging, Debugger Type<ept id="p1">**</ept>.</source>
          <target state="new">To change the setting, open the shortcut menu for the JavaScript project node in Solution Explorer and choose <bpt id="p1">**</bpt>Properties, Debugging, Debugger Type<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Be sure to select appropriate capabilities in the package designer.</source>
          <target state="new">Be sure to select appropriate capabilities in the package designer.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can open the package designer by opening the Package.appxmanifest file.</source>
          <target state="new">You can open the package designer by opening the Package.appxmanifest file.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, if you are attempting to programmatically access files in the Pictures folder, be sure to select the <bpt id="p1">**</bpt>Pictures Library<ept id="p1">**</ept> check box in the <bpt id="p2">**</bpt>Capabilities<ept id="p2">**</ept> pane of the package designer.</source>
          <target state="new">For example, if you are attempting to programmatically access files in the Pictures folder, be sure to select the <bpt id="p1">**</bpt>Pictures Library<ept id="p1">**</ept> check box in the <bpt id="p2">**</bpt>Capabilities<ept id="p2">**</ept> pane of the package designer.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If your JavaScript code doesn't recognize the public properties or methods in the component, make sure that in JavaScript you are using camel casing.</source>
          <target state="new">If your JavaScript code doesn't recognize the public properties or methods in the component, make sure that in JavaScript you are using camel casing.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`ComputeResult`</ph> C++ method must be referenced as <ph id="ph2">`computeResult`</ph> in JavaScript.</source>
          <target state="new">For example, the <ph id="ph1">`ComputeResult`</ph> C++ method must be referenced as <ph id="ph2">`computeResult`</ph> in JavaScript.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you remove a C++ Windows Runtime Component project from a solution, you must also manually remove the project reference from the JavaScript project.</source>
          <target state="new">If you remove a C++ Windows Runtime Component project from a solution, you must also manually remove the project reference from the JavaScript project.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Failure to do so prevents subsequent debug or build operations.</source>
          <target state="new">Failure to do so prevents subsequent debug or build operations.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If necessary, you can then add an assembly reference to the DLL.</source>
          <target state="new">If necessary, you can then add an assembly reference to the DLL.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Creating Windows Runtime Components in C++</source>
          <target state="new">Creating Windows Runtime Components in C++</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>