<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>title: Create and consume an app service</source>
          <target state="new">title: Create and consume an app service</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>description: Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.</source>
          <target state="new">description: Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ms.assetid: 6E48B8B6-D3BF-4AE2-85FB-D463C448C9D3</source>
          <target state="new">ms.assetid: 6E48B8B6-D3BF-4AE2-85FB-D463C448C9D3</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Create and consume an app service</source>
          <target state="new">Create and consume an app service</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.</source>
          <target state="new">Learn how to write a Universal Windows Platform (UWP) app that can provide services to other UWP apps, and how to consume those services.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create a new app service provider project</source>
          <target state="new">Create a new app service provider project</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this how-to, we'll create everything in one solution for simplicity.</source>
          <target state="new">In this how-to, we'll create everything in one solution for simplicity.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In Microsoft Visual Studio 2015, create a new UWP app project and name it AppServiceProvider.</source>
          <target state="new">In Microsoft Visual Studio 2015, create a new UWP app project and name it AppServiceProvider.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>(In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, select <bpt id="p2">**</bpt>Templates &amp;gt; Other Languages &amp;gt; Visual C# &amp;gt; Windows &amp;gt; Windows Universal &amp;gt; Blank app (Windows Universal)<ept id="p2">**</ept>).</source>
          <target state="new">(In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, select <bpt id="p2">**</bpt>Templates &amp;gt; Other Languages &amp;gt; Visual C# &amp;gt; Windows &amp;gt; Windows Universal &amp;gt; Blank app (Windows Universal)<ept id="p2">**</ept>).</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This will be the app that provides the app service.</source>
          <target state="new">This will be the app that provides the app service.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Add an app service extension to package.appxmanifest</source>
          <target state="new">Add an app service extension to package.appxmanifest</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the AppServiceProvider project's Package.appxmanifest file, add the following AppService extension to the <bpt id="p1">**</bpt>&amp;lt;Application&amp;gt;<ept id="p1">**</ept> element.</source>
          <target state="new">In the AppServiceProvider project's Package.appxmanifest file, add the following AppService extension to the <bpt id="p1">**</bpt>&amp;lt;Application&amp;gt;<ept id="p1">**</ept> element.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This example advertises the <ph id="ph1">`com.Microsoft.Inventory`</ph> service and is what identifies this app as an app service provider.</source>
          <target state="new">This example advertises the <ph id="ph1">`com.Microsoft.Inventory`</ph> service and is what identifies this app as an app service provider.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The actual service will be implemented as a background task.</source>
          <target state="new">The actual service will be implemented as a background task.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The app service app exposes the service to other apps.</source>
          <target state="new">The app service app exposes the service to other apps.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>We recommend using a reverse domain name style for the service name.</source>
          <target state="new">We recommend using a reverse domain name style for the service name.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Category<ept id="p1">**</ept> attribute identifies this application as an app service provider.</source>
          <target state="new">The <bpt id="p1">**</bpt>Category<ept id="p1">**</ept> attribute identifies this application as an app service provider.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>EntryPoint<ept id="p1">**</ept> attribute identifies the class that implements the service, which we'll implement next.</source>
          <target state="new">The <bpt id="p1">**</bpt>EntryPoint<ept id="p1">**</ept> attribute identifies the class that implements the service, which we'll implement next.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create the app service</source>
          <target state="new">Create the app service</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An app service is implemented as a background task.</source>
          <target state="new">An app service is implemented as a background task.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This enables a foreground application to invoke an app service in another application to perform tasks behind the scenes.</source>
          <target state="new">This enables a foreground application to invoke an app service in another application to perform tasks behind the scenes.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add a new Windows Runtime Component project to the solution (<bpt id="p1">**</bpt>File &amp;gt; Add &amp;gt; New Project<ept id="p1">**</ept>) named MyAppService.</source>
          <target state="new">Add a new Windows Runtime Component project to the solution (<bpt id="p1">**</bpt>File &amp;gt; Add &amp;gt; New Project<ept id="p1">**</ept>) named MyAppService.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(In the <bpt id="p1">**</bpt>Add New Project<ept id="p1">**</ept> dialog box, choose <bpt id="p2">**</bpt>Installed &amp;gt; Other Languages &amp;gt; Visual C# &amp;gt; Windows &amp;gt; Windows Universal &amp;gt; Windows Runtime Component (Windows Universal)<ept id="p2">**</ept></source>
          <target state="new">(In the <bpt id="p1">**</bpt>Add New Project<ept id="p1">**</ept> dialog box, choose <bpt id="p2">**</bpt>Installed &amp;gt; Other Languages &amp;gt; Visual C# &amp;gt; Windows &amp;gt; Windows Universal &amp;gt; Windows Runtime Component (Windows Universal)<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the AppServiceProvider project, add a reference to the MyAppService project.</source>
          <target state="new">In the AppServiceProvider project, add a reference to the MyAppService project.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the MyappService project, add the following <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statements to the top of Class1.cs:</source>
          <target state="new">In the MyappService project, add the following <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statements to the top of Class1.cs:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Replace the stub code for <bpt id="p1">**</bpt>Class1<ept id="p1">**</ept> with a new background task class named <bpt id="p2">**</bpt>Inventory<ept id="p2">**</ept>:</source>
          <target state="new">Replace the stub code for <bpt id="p1">**</bpt>Class1<ept id="p1">**</ept> with a new background task class named <bpt id="p2">**</bpt>Inventory<ept id="p2">**</ept>:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This class is where the app service will do its work.</source>
          <target state="new">This class is where the app service will do its work.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Run()<ept id="p1">**</ept> is called when the background task is created.</source>
          <target state="new"><bpt id="p1">**</bpt>Run()<ept id="p1">**</ept> is called when the background task is created.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because background tasks are terminated after <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> completes, the code takes a deferral so that the background task will stay up to serve requests.</source>
          <target state="new">Because background tasks are terminated after <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> completes, the code takes a deferral so that the background task will stay up to serve requests.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OnTaskCanceled()<ept id="p1">**</ept> is called when the task is canceled.</source>
          <target state="new"><bpt id="p1">**</bpt>OnTaskCanceled()<ept id="p1">**</ept> is called when the task is canceled.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The task is cancelled when the client app disposes the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AppServiceConnection<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn921704)</ept>, the client app is suspended, the OS is shut down or sleeps, or the OS runs out of resources to run the task.</source>
          <target state="new">The task is cancelled when the client app disposes the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AppServiceConnection<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn921704)</ept>, the client app is suspended, the OS is shut down or sleeps, or the OS runs out of resources to run the task.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Write the code for the app service</source>
          <target state="new">Write the code for the app service</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OnRequestedReceived()<ept id="p1">**</ept> is where the code for the app service goes.</source>
          <target state="new"><bpt id="p1">**</bpt>OnRequestedReceived()<ept id="p1">**</ept> is where the code for the app service goes.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Replace the stub <bpt id="p1">**</bpt>OnRequestedReceived()<ept id="p1">**</ept> in MyAppService's Class1.cs with the code from this example.</source>
          <target state="new">Replace the stub <bpt id="p1">**</bpt>OnRequestedReceived()<ept id="p1">**</ept> in MyAppService's Class1.cs with the code from this example.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This code gets an index for an inventory item and passes it, along with a command string, to the service to retrieve the name and the price of the specified inventory item.</source>
          <target state="new">This code gets an index for an inventory item and passes it, along with a command string, to the service to retrieve the name and the price of the specified inventory item.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Error handling code has been removed for brevity.</source>
          <target state="new">Error handling code has been removed for brevity.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Note that <bpt id="p1">**</bpt>OnRequestedReceived()<ept id="p1">**</ept> is <bpt id="p2">**</bpt>async<ept id="p2">**</ept> because we make an awaitable method call to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SendResponseAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn921722)</ept> in this example.</source>
          <target state="new">Note that <bpt id="p1">**</bpt>OnRequestedReceived()<ept id="p1">**</ept> is <bpt id="p2">**</bpt>async<ept id="p2">**</ept> because we make an awaitable method call to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>SendResponseAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn921722)</ept> in this example.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A deferral is taken so that the service can use <bpt id="p1">**</bpt>async<ept id="p1">**</ept> methods in the OnRequestReceived handler.</source>
          <target state="new">A deferral is taken so that the service can use <bpt id="p1">**</bpt>async<ept id="p1">**</ept> methods in the OnRequestReceived handler.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It ensures that the call to OnRequestReceived does not complete until it is done processing the message.</source>
          <target state="new">It ensures that the call to OnRequestReceived does not complete until it is done processing the message.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SendResponseAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn921722)</ept> is used to send a response alongside the completion.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>SendResponseAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn921722)</ept> is used to send a response alongside the completion.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SendResponseAsync<ept id="p1">**</ept> does not signal the completion of the call.</source>
          <target state="new"><bpt id="p1">**</bpt>SendResponseAsync<ept id="p1">**</ept> does not signal the completion of the call.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>It is the completion of the deferral that signals to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SendMessageAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn921712)</ept> that OnRequestReceived has completed.</source>
          <target state="new">It is the completion of the deferral that signals to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SendMessageAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn921712)</ept> that OnRequestReceived has completed.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>App services use a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ValueSet<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> to exchange information.</source>
          <target state="new">App services use a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ValueSet<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> to exchange information.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The size of the data you may pass is only limited by system resources.</source>
          <target state="new">The size of the data you may pass is only limited by system resources.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>There are no predefined keys for you to use in your <bpt id="p1">**</bpt>ValueSet<ept id="p1">**</ept>.</source>
          <target state="new">There are no predefined keys for you to use in your <bpt id="p1">**</bpt>ValueSet<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You must determine which key values you will use to define the protocol for your app service.</source>
          <target state="new">You must determine which key values you will use to define the protocol for your app service.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The caller must be written with that protocol in mind.</source>
          <target state="new">The caller must be written with that protocol in mind.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In this example, we have chosen a key named "Command" that has a value that indicates whether we want the app service to provide the name of the inventory item or its price.</source>
          <target state="new">In this example, we have chosen a key named "Command" that has a value that indicates whether we want the app service to provide the name of the inventory item or its price.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The index of the inventory name is stored under the "ID" key.</source>
          <target state="new">The index of the inventory name is stored under the "ID" key.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The return value is stored under the "Result" key.</source>
          <target state="new">The return value is stored under the "Result" key.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AppServiceClosedStatus<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn921703)</ept> enum is returned to the caller to indicate whether the call to the app service succeeded or failed.</source>
          <target state="new">An <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AppServiceClosedStatus<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn921703)</ept> enum is returned to the caller to indicate whether the call to the app service succeeded or failed.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An example of how the call to the app service could fail is if the OS aborts the service endpoint, resources are exceeded, and so forth.</source>
          <target state="new">An example of how the call to the app service could fail is if the OS aborts the service endpoint, resources are exceeded, and so forth.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can return additional error information via the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ValueSet<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept>.</source>
          <target state="new">You can return additional error information via the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ValueSet<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept>.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In this example, we use a key named "Status" to return more detailed error information to the caller.</source>
          <target state="new">In this example, we use a key named "Status" to return more detailed error information to the caller.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The call to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SendResponseAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn921722)</ept> returns the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ValueSet<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> to the caller.</source>
          <target state="new">The call to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SendResponseAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn921722)</ept> returns the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ValueSet<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/dn636131)</ept> to the caller.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Deploy the service app and get the package family name</source>
          <target state="new">Deploy the service app and get the package family name</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The app service provider app must be deployed before you can call it from a client.</source>
          <target state="new">The app service provider app must be deployed before you can call it from a client.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You will also need the package family name of the app service app in order to call it.</source>
          <target state="new">You will also need the package family name of the app service app in order to call it.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>One way to get the package family name of the app service application is to call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.ApplicationModel.Package.Current.Id.FamilyName<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br224670)</ept> from within the <bpt id="p3">**</bpt>AppServiceProvider<ept id="p3">**</ept> project (for example, from <ph id="ph1">`public App()`</ph> in App.xaml.cs) and note the result.</source>
          <target state="new">One way to get the package family name of the app service application is to call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.ApplicationModel.Package.Current.Id.FamilyName<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br224670)</ept> from within the <bpt id="p3">**</bpt>AppServiceProvider<ept id="p3">**</ept> project (for example, from <ph id="ph1">`public App()`</ph> in App.xaml.cs) and note the result.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To run AppServiceProvider in Microsoft Visual Studio, set it as the startup project in the Solution Explorer window and run the project.</source>
          <target state="new">To run AppServiceProvider in Microsoft Visual Studio, set it as the startup project in the Solution Explorer window and run the project.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Another way to get the package family name is to deploy the solution (<bpt id="p1">**</bpt>Build &amp;gt; Deploy solution<ept id="p1">**</ept>) and note the full package name in the output window (<bpt id="p2">**</bpt>View &amp;gt; Output<ept id="p2">**</ept>).</source>
          <target state="new">Another way to get the package family name is to deploy the solution (<bpt id="p1">**</bpt>Build &amp;gt; Deploy solution<ept id="p1">**</ept>) and note the full package name in the output window (<bpt id="p2">**</bpt>View &amp;gt; Output<ept id="p2">**</ept>).</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You must remove the platform information from the string in the output window to derive the package name.</source>
          <target state="new">You must remove the platform information from the string in the output window to derive the package name.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, if the full package name reported in the output window was "9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\_1.0.0.0\_x86\_\_yd7nk54bq29ra", you would extract "1.0.0.0\_x86\_\_" leaving "9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\_yd7nk54bq29ra" as the package family name.</source>
          <target state="new">For example, if the full package name reported in the output window was "9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\_1.0.0.0\_x86\_\_yd7nk54bq29ra", you would extract "1.0.0.0\_x86\_\_" leaving "9fe3058b-3de0-4e05-bea7-84a06f0ee4f0\_yd7nk54bq29ra" as the package family name.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Write a client to call the app service</source>
          <target state="new">Write a client to call the app service</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Add a new blank Windows Universal app project to the solution (<bpt id="p1">**</bpt>File &amp;gt; Add &amp;gt; New Project<ept id="p1">**</ept>) named ClientApp.</source>
          <target state="new">Add a new blank Windows Universal app project to the solution (<bpt id="p1">**</bpt>File &amp;gt; Add &amp;gt; New Project<ept id="p1">**</ept>) named ClientApp.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>(In the <bpt id="p1">**</bpt>Add New Project<ept id="p1">**</ept> dialog box, choose <bpt id="p2">**</bpt>Installed &amp;gt; Other languages &amp;gt; Visual C# &amp;gt; Windows &amp;gt; Windows Universal &amp;gt; Blank App (Windows Universal)<ept id="p2">**</ept>).</source>
          <target state="new">(In the <bpt id="p1">**</bpt>Add New Project<ept id="p1">**</ept> dialog box, choose <bpt id="p2">**</bpt>Installed &amp;gt; Other languages &amp;gt; Visual C# &amp;gt; Windows &amp;gt; Windows Universal &amp;gt; Blank App (Windows Universal)<ept id="p2">**</ept>).</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In the ClientApp project, add the following <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement to the top of MainPage.xaml.cs:</source>
          <target state="new">In the ClientApp project, add the following <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement to the top of MainPage.xaml.cs:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Add a text box and a button to MainPage.xaml.</source>
          <target state="new">Add a text box and a button to MainPage.xaml.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Add a button click handler for the button and add the keyword <bpt id="p1">**</bpt>async<ept id="p1">**</ept> to the button handler's signature.</source>
          <target state="new">Add a button click handler for the button and add the keyword <bpt id="p1">**</bpt>async<ept id="p1">**</ept> to the button handler's signature.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Replace the stub of your button click handler with the following code.</source>
          <target state="new">Replace the stub of your button click handler with the following code.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Be sure to include the <ph id="ph1">`inventoryService`</ph> field declaration.</source>
          <target state="new">Be sure to include the <ph id="ph1">`inventoryService`</ph> field declaration.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Support your app with background tasks</source>
          <target state="new">Support your app with background tasks</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8638da16ff2e8b52f8998b06b8a1f996201556d3</xliffext:olfilehash>
  </header>
</xliff>