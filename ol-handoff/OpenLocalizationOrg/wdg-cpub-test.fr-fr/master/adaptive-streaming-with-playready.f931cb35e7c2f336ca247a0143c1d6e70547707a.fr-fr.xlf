<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16e745134da1d9486337ada18f8ccc0b4b16d2ae</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\audio-video-camera\adaptive-streaming-with-playready.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>This article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app.</source>
          <target state="new">This article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Adaptive Streaming with PlayReady</source>
          <target state="new">Adaptive Streaming with PlayReady</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Adaptive Streaming with PlayReady</source>
          <target state="new">Adaptive Streaming with PlayReady</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target state="new">\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</source>
          <target state="new">Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app.</source>
          <target state="new">This article describes how to add adaptive streaming of multimedia content with Microsoft PlayReady content protection to a Universal Windows Platform (UWP) app.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This feature currently supports playback of Http Live Streaming (HLS) and Dynamic Streaming over HTTP (DASH) content.</source>
          <target state="new">This feature currently supports playback of Http Live Streaming (HLS) and Dynamic Streaming over HTTP (DASH) content.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This article only deals with the aspects of adaptive streaming specific to PlayReady.</source>
          <target state="new">This article only deals with the aspects of adaptive streaming specific to PlayReady.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For information about implementing adaptive streaming in general, see <bpt id="p1">[</bpt>Adaptive Streaming<ept id="p1">](adaptive-streaming.md)</ept>.</source>
          <target state="new">For information about implementing adaptive streaming in general, see <bpt id="p1">[</bpt>Adaptive Streaming<ept id="p1">](adaptive-streaming.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You will need the following using statements:</source>
          <target state="new">You will need the following using statements:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>LicenseRequest<ept id="p1">**</ept> namespace is from <bpt id="p2">**</bpt>CommonLicenseRequest.cs<ept id="p2">**</ept>, a PlayReady file provided by Microsoft to licensees.</source>
          <target state="new">The <bpt id="p1">**</bpt>LicenseRequest<ept id="p1">**</ept> namespace is from <bpt id="p2">**</bpt>CommonLicenseRequest.cs<ept id="p2">**</ept>, a PlayReady file provided by Microsoft to licensees.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You will need to declare a few global variables:</source>
          <target state="new">You will need to declare a few global variables:</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You will also want to declare the following constant:</source>
          <target state="new">You will also want to declare the following constant:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Setting up the MediaProtectionManager</source>
          <target state="new">Setting up the MediaProtectionManager</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To add PlayReady content protection to your UWP app, you will need to set up a <bpt id="p1">[</bpt>MediaProtectionManager<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br207040)</ept> object.</source>
          <target state="new">To add PlayReady content protection to your UWP app, you will need to set up a <bpt id="p1">[</bpt>MediaProtectionManager<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br207040)</ept> object.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You do this when initializing your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AdaptiveMediaSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn946912)</ept> object.</source>
          <target state="new">You do this when initializing your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AdaptiveMediaSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn946912)</ept> object.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following code sets up a <bpt id="p1">[</bpt>MediaProtectionManager<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br207040)</ept>:</source>
          <target state="new">The following code sets up a <bpt id="p1">[</bpt>MediaProtectionManager<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br207040)</ept>:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This code can simply be copied to your app, since it is mandatory for setting up content protection.</source>
          <target state="new">This code can simply be copied to your app, since it is mandatory for setting up content protection.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ComponentLoadFailed<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br207041)</ept> event is fired when the load of binary data fails.</source>
          <target state="new">The <bpt id="p1">[</bpt>ComponentLoadFailed<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br207041)</ept> event is fired when the load of binary data fails.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>We need to add an event handler to handle this, signaling that the load did not complete:</source>
          <target state="new">We need to add an event handler to handle this, signaling that the load did not complete:</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Similarly, we need to add an event handler for the <bpt id="p1">[</bpt>ServiceRequested<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br207045)</ept> event, which fires when a service is requested.</source>
          <target state="new">Similarly, we need to add an event handler for the <bpt id="p1">[</bpt>ServiceRequested<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br207045)</ept> event, which fires when a service is requested.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This code checks what kind of request it is, and responds appropriately:</source>
          <target state="new">This code checks what kind of request it is, and responds appropriately:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Individualization service requests</source>
          <target state="new">Individualization service requests</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code reactively makes a PlayReady individualization service request.</source>
          <target state="new">The following code reactively makes a PlayReady individualization service request.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We pass in the request as a parameter to the function.</source>
          <target state="new">We pass in the request as a parameter to the function.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>We surround the call in a try/catch block, and if there are no exceptions, we say the request completed successfully:</source>
          <target state="new">We surround the call in a try/catch block, and if there are no exceptions, we say the request completed successfully:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Alternatively, we may want to proactively make an individualization service request, in which case we call the function below in place of the code calling <ph id="ph1">`ReactiveIndivRequest`</ph> in <ph id="ph2">`ProtectionManager_ServiceRequested`</ph>:</source>
          <target state="new">Alternatively, we may want to proactively make an individualization service request, in which case we call the function below in place of the code calling <ph id="ph1">`ReactiveIndivRequest`</ph> in <ph id="ph2">`ProtectionManager_ServiceRequested`</ph>:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>License acquisition service requests</source>
          <target state="new">License acquisition service requests</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If instead the request was a <bpt id="p1">[</bpt>PlayReadyLicenseAcquisitionServiceRequest<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn986285)</ept>, we call the below function to request and acquire the PlayReady license.</source>
          <target state="new">If instead the request was a <bpt id="p1">[</bpt>PlayReadyLicenseAcquisitionServiceRequest<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn986285)</ept>, we call the below function to request and acquire the PlayReady license.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>We tell the MediaProtectionServiceCompletion object that we passed in whether the request was successful or not, and we complete the request:</source>
          <target state="new">We tell the MediaProtectionServiceCompletion object that we passed in whether the request was successful or not, and we complete the request:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Initializing the AdaptiveMediaSource</source>
          <target state="new">Initializing the AdaptiveMediaSource</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Finally, you will need a function to initialize the <bpt id="p1">[</bpt>AdaptiveMediaSource<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn946912)</ept>, created from a given <bpt id="p2">[</bpt>Uri<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/system.uri.aspx)</ept> and <bpt id="p3">[</bpt>MediaElement<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242926)</ept>.</source>
          <target state="new">Finally, you will need a function to initialize the <bpt id="p1">[</bpt>AdaptiveMediaSource<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn946912)</ept>, created from a given <bpt id="p2">[</bpt>Uri<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/xaml/system.uri.aspx)</ept> and <bpt id="p3">[</bpt>MediaElement<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242926)</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Uri<ept id="p1">**</ept> should be the link to the media file (HLS or DASH); the <bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept> should be defined in your XAML.</source>
          <target state="new">The <bpt id="p1">**</bpt>Uri<ept id="p1">**</ept> should be the link to the media file (HLS or DASH); the <bpt id="p2">**</bpt>MediaElement<ept id="p2">**</ept> should be defined in your XAML.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can call this function in whichever event handles the start of adaptive streaming—for instance, in a button click event.</source>
          <target state="new">You can call this function in whichever event handles the start of adaptive streaming—for instance, in a button click event.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>