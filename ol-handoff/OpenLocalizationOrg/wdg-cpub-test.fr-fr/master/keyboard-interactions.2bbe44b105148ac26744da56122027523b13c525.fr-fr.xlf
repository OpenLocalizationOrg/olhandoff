<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24ba2386709b046259bca0c81abafd8bcd3bb31d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\input-and-devices\keyboard-interactions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Respond to keystroke actions from hardware or software keyboards in your apps using both keyboard and class event handlers.</source>
          <target state="new">Respond to keystroke actions from hardware or software keyboards in your apps using both keyboard and class event handlers.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Keyboard interactions</source>
          <target state="new">Keyboard interactions</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Keyboard interactions</source>
          <target state="new">Keyboard interactions</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Keyboard input is an important part of the overall user interaction experience for apps.</source>
          <target state="new">Keyboard input is an important part of the overall user interaction experience for apps.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The keyboard is indispensable to people with certain disabilities or users who just consider it a more efficient way to interact with an app.</source>
          <target state="new">The keyboard is indispensable to people with certain disabilities or users who just consider it a more efficient way to interact with an app.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, users should be able to navigate your app by using Tab and arrow keys, activate UI elements by using Spacebar and Enter, and access commands by using keyboard shortcuts.</source>
          <target state="new">For example, users should be able to navigate your app by using Tab and arrow keys, activate UI elements by using Spacebar and Enter, and access commands by using keyboard shortcuts.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>keyboard hero image</source>
          <target state="new">keyboard hero image</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Important APIs</source>
          <target state="new">Important APIs</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>KeyDown</source>
          <target state="new">KeyDown</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>KeyUp</source>
          <target state="new">KeyUp</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>KeyRoutedEventArgs</source>
          <target state="new">KeyRoutedEventArgs</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A well-designed keyboard UI is an important aspect of software accessibility.</source>
          <target state="new">A well-designed keyboard UI is an important aspect of software accessibility.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It enables users with vision impairments or who have certain motor disabilities to navigate an app and interact with its features.</source>
          <target state="new">It enables users with vision impairments or who have certain motor disabilities to navigate an app and interact with its features.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Such users might not be able to operate a mouse and instead rely on various assistive technologies such as keyboard enhancement tools, on-screen keyboards, screen enlargers, screen readers, and voice input utilities.</source>
          <target state="new">Such users might not be able to operate a mouse and instead rely on various assistive technologies such as keyboard enhancement tools, on-screen keyboards, screen enlargers, screen readers, and voice input utilities.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Users can interact with universal apps through a hardware keyboard and two software keyboards: the On-Screen Keyboard (OSK) and the touch keyboard.</source>
          <target state="new">Users can interact with universal apps through a hardware keyboard and two software keyboards: the On-Screen Keyboard (OSK) and the touch keyboard.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On-Screen Keyboard</source>
          <target state="new">On-Screen Keyboard</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The On-Screen Keyboard is a visual, software keyboard that you can use instead of the physical keyboard to type and enter data using touch, mouse, pen/stylus or other pointing device (a touch screen is not required).</source>
          <target state="new">The On-Screen Keyboard is a visual, software keyboard that you can use instead of the physical keyboard to type and enter data using touch, mouse, pen/stylus or other pointing device (a touch screen is not required).</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The On-Screen Keyboard is provided for systems that don't have a physical keyboard, or for users whose mobility impairments prevent them from using traditional physical input devices.</source>
          <target state="new">The On-Screen Keyboard is provided for systems that don't have a physical keyboard, or for users whose mobility impairments prevent them from using traditional physical input devices.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The On-Screen Keyboard emulates most, if not all, the functionality of a hardware keyboard.</source>
          <target state="new">The On-Screen Keyboard emulates most, if not all, the functionality of a hardware keyboard.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The On-Screen Keyboard can be turned on from the Keyboard page in Settings <ph id="ph1">&amp;gt;</ph> Ease of access.</source>
          <target state="new">The On-Screen Keyboard can be turned on from the Keyboard page in Settings <ph id="ph1">&amp;gt;</ph> Ease of access.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The On-Screen Keyboard has priority over the touch keyboard, which won't be shown if the On-Screen Keyboard is present.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The On-Screen Keyboard has priority over the touch keyboard, which won't be shown if the On-Screen Keyboard is present.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>the on-screen keyboard</source>
          <target state="new">the on-screen keyboard</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>On-Screen Keyboard</source>
          <target state="new">On-Screen Keyboard</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Touch keyboard</source>
          <target state="new">Touch keyboard</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The touch keyboard is a visual, software keyboard used for text entry with touch input.</source>
          <target state="new">The touch keyboard is a visual, software keyboard used for text entry with touch input.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is not a replacement for the On-Screen Keyboard as it's used for text input only (it doesn't emulate the hardware keyboard).</source>
          <target state="new">It is not a replacement for the On-Screen Keyboard as it's used for text input only (it doesn't emulate the hardware keyboard).</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Depending on the device, the touch keyboard appears when a text field or other editable text control gets focus, or when the user manually enables it through the <bpt id="p1">**</bpt>Notification Center<ept id="p1">**</ept>:</source>
          <target state="new">Depending on the device, the touch keyboard appears when a text field or other editable text control gets focus, or when the user manually enables it through the <bpt id="p1">**</bpt>Notification Center<ept id="p1">**</ept>:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>touch keyboard icon in the notification center</source>
          <target state="new">touch keyboard icon in the notification center</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The user might have to go to the <bpt id="p2">**</bpt>Tablet mode<ept id="p2">**</ept> screen in Settings <ph id="ph1">&amp;gt;</ph> System and turn on "Make Windows more touch-friendly when using your device as a tablet" to enable the automatic appearance of the touch keyboard.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The user might have to go to the <bpt id="p2">**</bpt>Tablet mode<ept id="p2">**</ept> screen in Settings <ph id="ph1">&amp;gt;</ph> System and turn on "Make Windows more touch-friendly when using your device as a tablet" to enable the automatic appearance of the touch keyboard.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If your app sets focus programmatically to a text input control, the touch keyboard is not invoked.</source>
          <target state="new">If your app sets focus programmatically to a text input control, the touch keyboard is not invoked.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This eliminates unexpected behaviors not instigated directly by the user.</source>
          <target state="new">This eliminates unexpected behaviors not instigated directly by the user.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, the keyboard does automatically hide when focus is moved programmatically to a non-text input control.</source>
          <target state="new">However, the keyboard does automatically hide when focus is moved programmatically to a non-text input control.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The touch keyboard typically remains visible while the user navigates between controls in a form.</source>
          <target state="new">The touch keyboard typically remains visible while the user navigates between controls in a form.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This behavior can vary based on the other control types within the form.</source>
          <target state="new">This behavior can vary based on the other control types within the form.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following is a list of non-edit controls that can receive focus during a text entry session using the touch keyboard without dismissing the keyboard.</source>
          <target state="new">The following is a list of non-edit controls that can receive focus during a text entry session using the touch keyboard without dismissing the keyboard.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Rather than needlessly churn the UI and potentially disorient the user, the touch keyboard remains in view because the user is likely to go back and forth between these controls and text entry with the touch keyboard.</source>
          <target state="new">Rather than needlessly churn the UI and potentially disorient the user, the touch keyboard remains in view because the user is likely to go back and forth between these controls and text entry with the touch keyboard.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Check box</source>
          <target state="new">Check box</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Combo box</source>
          <target state="new">Combo box</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Radio button</source>
          <target state="new">Radio button</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Scroll bar</source>
          <target state="new">Scroll bar</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Tree</source>
          <target state="new">Tree</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Tree item</source>
          <target state="new">Tree item</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Menu</source>
          <target state="new">Menu</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Menu bar</source>
          <target state="new">Menu bar</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Menu item</source>
          <target state="new">Menu item</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Toolbar</source>
          <target state="new">Toolbar</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="new">List</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>List item</source>
          <target state="new">List item</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Here are examples of different modes for the touch keyboard.</source>
          <target state="new">Here are examples of different modes for the touch keyboard.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The first image is the default layout, the second is the thumb layout (which might not be available in all languages).</source>
          <target state="new">The first image is the default layout, the second is the thumb layout (which might not be available in all languages).</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Here are examples of different modes for the touch keyboard.</source>
          <target state="new">Here are examples of different modes for the touch keyboard.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The first image is the default layout, the second is the thumb layout (which might not be available in all languages).</source>
          <target state="new">The first image is the default layout, the second is the thumb layout (which might not be available in all languages).</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The touch keyboard in default layout mode:</source>
          <target state="new">The touch keyboard in default layout mode:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The touch keyboard in expanded layout mode:</source>
          <target state="new">The touch keyboard in expanded layout mode:</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The touch keyboard in default thumb layout mode:</source>
          <target state="new">The touch keyboard in default thumb layout mode:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The touch keyboard in numeric thumb layout mode:</source>
          <target state="new">The touch keyboard in numeric thumb layout mode:</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Successful keyboard interactions enable users to accomplish basic app scenarios using only the keyboard; that is, users can reach all interactive elements and activate default functionality.</source>
          <target state="new">Successful keyboard interactions enable users to accomplish basic app scenarios using only the keyboard; that is, users can reach all interactive elements and activate default functionality.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A number of factors can affect the degree of success, including keyboard navigation, access keys for accessibility, and accelerator (or shortcut) keys for advanced users.</source>
          <target state="new">A number of factors can affect the degree of success, including keyboard navigation, access keys for accessibility, and accelerator (or shortcut) keys for advanced users.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The touch keyboard does not support toggle and most system commands (see <bpt id="p2">[</bpt>Patterns<ept id="p2">](#keyboard_command_patterns)</ept>).</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The touch keyboard does not support toggle and most system commands (see <bpt id="p2">[</bpt>Patterns<ept id="p2">](#keyboard_command_patterns)</ept>).</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Navigation</source>
          <target state="new">Navigation</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To use a control (including navigation elements) with the keyboard, the control must have focus.</source>
          <target state="new">To use a control (including navigation elements) with the keyboard, the control must have focus.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>One way for a control to receive keyboard focus is to make it accessible via tab navigation.</source>
          <target state="new">One way for a control to receive keyboard focus is to make it accessible via tab navigation.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A well designed keyboard navigation model provides a logical and predictable tab order that enables a user to explore and use your app quickly and efficiently.</source>
          <target state="new">A well designed keyboard navigation model provides a logical and predictable tab order that enables a user to explore and use your app quickly and efficiently.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>All interactive controls should have tab stops (unless they are in a group), whereas non-interactive controls, such as labels, should not.</source>
          <target state="new">All interactive controls should have tab stops (unless they are in a group), whereas non-interactive controls, such as labels, should not.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A set of related controls can be made into a control group and assigned a single tab stop.</source>
          <target state="new">A set of related controls can be made into a control group and assigned a single tab stop.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Control groups are used for sets of controls that behave like a single control, such as radio buttons.</source>
          <target state="new">Control groups are used for sets of controls that behave like a single control, such as radio buttons.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>They can also be used when there too many controls to navigate efficiently with the Tab key alone.</source>
          <target state="new">They can also be used when there too many controls to navigate efficiently with the Tab key alone.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The arrow keys, Home, End, Page Up, and Page Down move input focus among the controls within a group (it is not possible to navigate out of a control group using these keys).</source>
          <target state="new">The arrow keys, Home, End, Page Up, and Page Down move input focus among the controls within a group (it is not possible to navigate out of a control group using these keys).</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You should set initial keyboard focus on the element that users will intuitively (or most likely) interact with first when your app starts.</source>
          <target state="new">You should set initial keyboard focus on the element that users will intuitively (or most likely) interact with first when your app starts.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Often, this is the main content view of the app so that a user can immediately start using the arrow keys to scroll the app content.</source>
          <target state="new">Often, this is the main content view of the app so that a user can immediately start using the arrow keys to scroll the app content.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Don’t set initial keyboard focus on an element with potentially negative, or even disastrous, results.</source>
          <target state="new">Don’t set initial keyboard focus on an element with potentially negative, or even disastrous, results.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This can prevent loss of data or system access.</source>
          <target state="new">This can prevent loss of data or system access.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Try to rank and present the most important commands, controls, and content first in both the tab order and the display order (or visual hierarchy).</source>
          <target state="new">Try to rank and present the most important commands, controls, and content first in both the tab order and the display order (or visual hierarchy).</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>However, the actual display position can depend on the parent layout container and certain properties of the child elements that influence the layout.</source>
          <target state="new">However, the actual display position can depend on the parent layout container and certain properties of the child elements that influence the layout.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In particular, layouts that use a grid metaphor or a table metaphor can have a reading order quite different from the tab order.</source>
          <target state="new">In particular, layouts that use a grid metaphor or a table metaphor can have a reading order quite different from the tab order.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is not always a problem, but you should test your app's functionality, both as a touchable UI and as a keyboard-accessible UI.</source>
          <target state="new">This is not always a problem, but you should test your app's functionality, both as a touchable UI and as a keyboard-accessible UI.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Tab order should follow reading order, whenever possible.</source>
          <target state="new">Tab order should follow reading order, whenever possible.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This can reduce confusion and is dependent on locale and language.</source>
          <target state="new">This can reduce confusion and is dependent on locale and language.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Associate keyboard buttons with appropriate UI (back and forward buttons) in your app.</source>
          <target state="new">Associate keyboard buttons with appropriate UI (back and forward buttons) in your app.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Try to make navigating back to the start screen of your app and between key content as easy and straightforward as possible.</source>
          <target state="new">Try to make navigating back to the start screen of your app and between key content as easy and straightforward as possible.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Use the arrow keys as keyboard shortcuts for proper inner navigation among child elements of composite elements.</source>
          <target state="new">Use the arrow keys as keyboard shortcuts for proper inner navigation among child elements of composite elements.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If tree view nodes have separate child elements for handling expand–collapse and node activation, use the left and right arrow keys to provide keyboard expand–collapse functionality.</source>
          <target state="new">If tree view nodes have separate child elements for handling expand–collapse and node activation, use the left and right arrow keys to provide keyboard expand–collapse functionality.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This is consistent with the platform controls.</source>
          <target state="new">This is consistent with the platform controls.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Because the touch keyboard occludes a large portion of the screen, the Universal Windows Platform (UWP) ensures that the input field with focus scrolls into view as a user navigates through the controls on the form, including controls that are not currently in view.</source>
          <target state="new">Because the touch keyboard occludes a large portion of the screen, the Universal Windows Platform (UWP) ensures that the input field with focus scrolls into view as a user navigates through the controls on the form, including controls that are not currently in view.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Custom controls should emulate this behavior.</source>
          <target state="new">Custom controls should emulate this behavior.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>a form with and without the touch keyboard showing</source>
          <target state="new">a form with and without the touch keyboard showing</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In some cases, there are UI elements that should stay on the screen the entire time.</source>
          <target state="new">In some cases, there are UI elements that should stay on the screen the entire time.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Design the UI so that the form controls are contained in a panning region and the important UI elements are static.</source>
          <target state="new">Design the UI so that the form controls are contained in a panning region and the important UI elements are static.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>a form that contains areas that should always stay in view</source>
          <target state="new">a form that contains areas that should always stay in view</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Activation</source>
          <target state="new">Activation</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A control can be activated in a number of different ways, whether it currently has focus or not.</source>
          <target state="new">A control can be activated in a number of different ways, whether it currently has focus or not.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Spacebar, Enter, and Esc</source>
          <target state="new">Spacebar, Enter, and Esc</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The spacebar should activate the control with input focus.</source>
          <target state="new">The spacebar should activate the control with input focus.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The Enter key should activate a default control or the control with input focus.</source>
          <target state="new">The Enter key should activate a default control or the control with input focus.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A default control is the control with initial focus or one that responds exclusively to the Enter key (typically it changes with input focus).</source>
          <target state="new">A default control is the control with initial focus or one that responds exclusively to the Enter key (typically it changes with input focus).</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In addition, the Esc key should close or exit transitory UI, such as menus and dialogs.</source>
          <target state="new">In addition, the Esc key should close or exit transitory UI, such as menus and dialogs.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The Calculator app shown here uses the spacebar to activate the button with focus, locks the Enter key to the “=” button, and locks the Esc key to the “C” button.</source>
          <target state="new">The Calculator app shown here uses the spacebar to activate the button with focus, locks the Enter key to the “=” button, and locks the Esc key to the “C” button.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>the calculator app</source>
          <target state="new">the calculator app</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Keyboard modifiers</source>
          <target state="new">Keyboard modifiers</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Keyboard modifiers fall into the following categories:</source>
          <target state="new">Keyboard modifiers fall into the following categories:</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Category</source>
          <target state="new">Category</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Shortcut key</source>
          <target state="new">Shortcut key</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Perform a common action without UI such as "Ctrl-S" for <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</source>
          <target state="new">Perform a common action without UI such as "Ctrl-S" for <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Implement keyboard shortcuts for key app functionality.</source>
          <target state="new">Implement keyboard shortcuts for key app functionality.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Not every command has, or requires, a shortcut.</source>
          <target state="new">Not every command has, or requires, a shortcut.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Access key/Hot key</source>
          <target state="new">Access key/Hot key</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Assigned to every visible, top-level control such as "Alt-F" for the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu.</source>
          <target state="new">Assigned to every visible, top-level control such as "Alt-F" for the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An access key does not invoke or activate a command.</source>
          <target state="new">An access key does not invoke or activate a command.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Accelerator key</source>
          <target state="new">Accelerator key</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Perform default system or app-defined commands such as "Alt-PrtScrn" for screen capture, "Alt-Tab" to switch apps, or "F1" for help.</source>
          <target state="new">Perform default system or app-defined commands such as "Alt-PrtScrn" for screen capture, "Alt-Tab" to switch apps, or "F1" for help.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A command associated with an accelerator key does not have to be a menu item.</source>
          <target state="new">A command associated with an accelerator key does not have to be a menu item.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Application key/Menu key</source>
          <target state="new">Application key/Menu key</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Show context menu.</source>
          <target state="new">Show context menu.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Window key/Command key</source>
          <target state="new">Window key/Command key</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Activate system commands such as <bpt id="p1">**</bpt>System Menu<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Lock Screen<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>Show Desktop<ept id="p3">**</ept>.</source>
          <target state="new">Activate system commands such as <bpt id="p1">**</bpt>System Menu<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Lock Screen<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>Show Desktop<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Access keys and accelerator keys support interaction with controls directly instead of navigating to them using the Tab key.</source>
          <target state="new">Access keys and accelerator keys support interaction with controls directly instead of navigating to them using the Tab key.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>While some controls have intrinsic labels, such as command buttons, check boxes, and radio buttons, other controls have external labels, such as list views.</source>
          <target state="new">While some controls have intrinsic labels, such as command buttons, check boxes, and radio buttons, other controls have external labels, such as list views.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For controls with external labels, the access key is assigned to the label, which, when invoked, sets focus to an element or value within the associated control.</source>
          <target state="new">For controls with external labels, the access key is assigned to the label, which, when invoked, sets focus to an element or value within the associated control.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The example here, shows the access keys for the <bpt id="p1">**</bpt>Page Layout<ept id="p1">**</ept> tab in <bpt id="p2">**</bpt>Word<ept id="p2">**</ept>.</source>
          <target state="new">The example here, shows the access keys for the <bpt id="p1">**</bpt>Page Layout<ept id="p1">**</ept> tab in <bpt id="p2">**</bpt>Word<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>the access keys for the page layout tab in word</source>
          <target state="new">the access keys for the page layout tab in word</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Here, the Indent Left text field value is highlighted after entering the access key identified in the associated label.</source>
          <target state="new">Here, the Indent Left text field value is highlighted after entering the access key identified in the associated label.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>the indent left text field value is highlighted after entering the access key identified in the associated label</source>
          <target state="new">the indent left text field value is highlighted after entering the access key identified in the associated label</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Usability and accessibility</source>
          <target state="new">Usability and accessibility</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A well-designed keyboard interaction experience is an important aspect of software accessibility.</source>
          <target state="new">A well-designed keyboard interaction experience is an important aspect of software accessibility.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>It enables users with vision impairments or who have certain motor disabilities to navigate an app and interact with its features.</source>
          <target state="new">It enables users with vision impairments or who have certain motor disabilities to navigate an app and interact with its features.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Such users might be unable to operate a mouse and must, instead, rely on various assistive technologies that include keyboard enhancement tools and on-screen keyboards (along with screen enlargers, screen readers, and voice input utilities).</source>
          <target state="new">Such users might be unable to operate a mouse and must, instead, rely on various assistive technologies that include keyboard enhancement tools and on-screen keyboards (along with screen enlargers, screen readers, and voice input utilities).</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For these users, comprehensiveness is more important than consistency.</source>
          <target state="new">For these users, comprehensiveness is more important than consistency.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Experienced users often have a strong preference for using the keyboard, because keyboard-based commands can be entered more quickly and don't require removing their hands from the keyboard.</source>
          <target state="new">Experienced users often have a strong preference for using the keyboard, because keyboard-based commands can be entered more quickly and don't require removing their hands from the keyboard.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For these users, efficiency and consistency are crucial; comprehensiveness is important only for the most frequently used commands.</source>
          <target state="new">For these users, efficiency and consistency are crucial; comprehensiveness is important only for the most frequently used commands.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>There are subtle distinctions when designing for usability and accessibility, which is why two different keyboard access mechanisms are supported.</source>
          <target state="new">There are subtle distinctions when designing for usability and accessibility, which is why two different keyboard access mechanisms are supported.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Access keys have the following characteristics:</source>
          <target state="new">Access keys have the following characteristics:</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>An access key is a shortcut to a UI element in your app.</source>
          <target state="new">An access key is a shortcut to a UI element in your app.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>They use the Alt key plus an alphanumeric key.</source>
          <target state="new">They use the Alt key plus an alphanumeric key.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>They are primarily for accessibility.</source>
          <target state="new">They are primarily for accessibility.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>They are assigned to all menus and most dialog box controls.</source>
          <target state="new">They are assigned to all menus and most dialog box controls.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>They aren't intended to be memorized, so they are documented directly in the UI by underlining the corresponding control label character.</source>
          <target state="new">They aren't intended to be memorized, so they are documented directly in the UI by underlining the corresponding control label character.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>They have effect only in the current window, and navigate to the corresponding menu item or control.</source>
          <target state="new">They have effect only in the current window, and navigate to the corresponding menu item or control.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>They aren't assigned consistently because they can't always be.</source>
          <target state="new">They aren't assigned consistently because they can't always be.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>However, access keys should be assigned consistently for commonly used commands, especially commit buttons.</source>
          <target state="new">However, access keys should be assigned consistently for commonly used commands, especially commit buttons.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>They are localized.</source>
          <target state="new">They are localized.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Because access keys aren't intended to be memorized, they are assigned to a character that is early in the label to make them easy to find, even if there is a keyword that appears later in the label.</source>
          <target state="new">Because access keys aren't intended to be memorized, they are assigned to a character that is early in the label to make them easy to find, even if there is a keyword that appears later in the label.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>In contrast, accelerator keys have the following characteristics:</source>
          <target state="new">In contrast, accelerator keys have the following characteristics:</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>An accelerator key is a shortcut to an app command.</source>
          <target state="new">An accelerator key is a shortcut to an app command.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>They primarily use Ctrl and Function key sequences (Windows system shortcut keys also use Alt+non-alphanumeric keys and the Windows logo key).</source>
          <target state="new">They primarily use Ctrl and Function key sequences (Windows system shortcut keys also use Alt+non-alphanumeric keys and the Windows logo key).</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>They are primarily for efficiency for advanced users.</source>
          <target state="new">They are primarily for efficiency for advanced users.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>They are assigned only to the most commonly used commands.</source>
          <target state="new">They are assigned only to the most commonly used commands.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>They are intended to be memorized, and are documented only in menus, tooltips, and Help.</source>
          <target state="new">They are intended to be memorized, and are documented only in menus, tooltips, and Help.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>They have effect throughout the entire program, but have no effect if they don't apply.</source>
          <target state="new">They have effect throughout the entire program, but have no effect if they don't apply.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>They must be assigned consistently because they are memorized and not directly documented.</source>
          <target state="new">They must be assigned consistently because they are memorized and not directly documented.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>They aren't localized.</source>
          <target state="new">They aren't localized.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Because accelerator keys are intended to be memorized, the most frequently used accelerator keys ideally use letters from the first or most memorable characters within the command's keywords, such as Ctrl+C for Copy and Ctrl+Q for Request.</source>
          <target state="new">Because accelerator keys are intended to be memorized, the most frequently used accelerator keys ideally use letters from the first or most memorable characters within the command's keywords, such as Ctrl+C for Copy and Ctrl+Q for Request.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Users should be able to accomplish all tasks supported by your app using only the hardware keyboard or the On-Screen Keyboard.</source>
          <target state="new">Users should be able to accomplish all tasks supported by your app using only the hardware keyboard or the On-Screen Keyboard.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>You should provide an easy way for users who rely on screen readers and other assistive technology to discover your app's accelerator keys.</source>
          <target state="new">You should provide an easy way for users who rely on screen readers and other assistive technology to discover your app's accelerator keys.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Communicate accelerator keys by using tooltips, accessible names, accessible descriptions, or some other form of on-screen communication.</source>
          <target state="new">Communicate accelerator keys by using tooltips, accessible names, accessible descriptions, or some other form of on-screen communication.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>At a minimum, access and accelerator keys should be well documented in your app's Help content.</source>
          <target state="new">At a minimum, access and accelerator keys should be well documented in your app's Help content.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Don’t assign well-known or standard accelerator keys to other functionality.</source>
          <target state="new">Don’t assign well-known or standard accelerator keys to other functionality.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For example, Ctrl+F is typically used for find or search.</source>
          <target state="new">For example, Ctrl+F is typically used for find or search.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Don’t bother trying to assign access keys to all interactive controls in a dense UI.</source>
          <target state="new">Don’t bother trying to assign access keys to all interactive controls in a dense UI.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Just ensure the most important and the most used have access keys, or use control groups and assign an access key to the control group label.</source>
          <target state="new">Just ensure the most important and the most used have access keys, or use control groups and assign an access key to the control group label.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Don't change commands using keyboard modifiers.</source>
          <target state="new">Don't change commands using keyboard modifiers.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Doing so is undiscoverable and can cause confusion.</source>
          <target state="new">Doing so is undiscoverable and can cause confusion.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Don't disable a control while it has input focus.</source>
          <target state="new">Don't disable a control while it has input focus.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This can interfere with keyboard input.</source>
          <target state="new">This can interfere with keyboard input.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>To ensure successful keyboard interaction experiences, it is critical to test your app thoroughly and exclusively with the keyboard.</source>
          <target state="new">To ensure successful keyboard interaction experiences, it is critical to test your app thoroughly and exclusively with the keyboard.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Text input</source>
          <target state="new">Text input</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Always query the device capabilities when relying on keyboard input.</source>
          <target state="new">Always query the device capabilities when relying on keyboard input.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>On some devices (such as phone), the touch keyboard can only be used for text input as it does not provide many of the accelerators or command keys found on a hardware keyboard (such as alt, the function keys, or the Windows Logo key).</source>
          <target state="new">On some devices (such as phone), the touch keyboard can only be used for text input as it does not provide many of the accelerators or command keys found on a hardware keyboard (such as alt, the function keys, or the Windows Logo key).</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Don't make users navigate the app using the touch keyboard.</source>
          <target state="new">Don't make users navigate the app using the touch keyboard.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Depending on the control getting focus, the touch keyboard might get dismissed.</source>
          <target state="new">Depending on the control getting focus, the touch keyboard might get dismissed.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Try to display the keyboard throughout the entire interaction with your form.</source>
          <target state="new">Try to display the keyboard throughout the entire interaction with your form.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This eliminates UI churn that can disorient the user in the middle of a form or text entry flow.</source>
          <target state="new">This eliminates UI churn that can disorient the user in the middle of a form or text entry flow.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Ensure that users can always see the input field that they're typing into.</source>
          <target state="new">Ensure that users can always see the input field that they're typing into.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The touch keyboard occludes half of the screen, so the input field with focus should scroll into view as the user traverses the form.</source>
          <target state="new">The touch keyboard occludes half of the screen, so the input field with focus should scroll into view as the user traverses the form.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A standard hardware keyboard or OSK consists of seven types of keys, each supporting unique functionality:</source>
          <target state="new">A standard hardware keyboard or OSK consists of seven types of keys, each supporting unique functionality:</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Character key: sends a literal character to the window with input focus.</source>
          <target state="new">Character key: sends a literal character to the window with input focus.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Modifier key: alters the function of a primary key when pressed simultaneously, such as Ctrl, Alt, Shift, and the Windows logo key.</source>
          <target state="new">Modifier key: alters the function of a primary key when pressed simultaneously, such as Ctrl, Alt, Shift, and the Windows logo key.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Navigation key: moves input focus or text input location, such as the Tab, Home, End, Page Up, Page Down, and directional arrow keys.</source>
          <target state="new">Navigation key: moves input focus or text input location, such as the Tab, Home, End, Page Up, Page Down, and directional arrow keys.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Editing key: manipulates text, such as the Shift, Tab, Enter, Insert, Backspace, and Delete keys.</source>
          <target state="new">Editing key: manipulates text, such as the Shift, Tab, Enter, Insert, Backspace, and Delete keys.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Function key: performs a special function, such as F1 through F12 keys.</source>
          <target state="new">Function key: performs a special function, such as F1 through F12 keys.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Toggle key: puts the system into a mode, such as Caps Lock, ScrLk, and Num Lock keys.</source>
          <target state="new">Toggle key: puts the system into a mode, such as Caps Lock, ScrLk, and Num Lock keys.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Command key: performs a system task or command activation, such as Spacebar, Enter, Esc, Pause/Break, and Print Screen keys.</source>
          <target state="new">Command key: performs a system task or command activation, such as Spacebar, Enter, Esc, Pause/Break, and Print Screen keys.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In addition to these categories, a secondary class of keys and key combinations exist that can be used as shortcuts to app functionality:</source>
          <target state="new">In addition to these categories, a secondary class of keys and key combinations exist that can be used as shortcuts to app functionality:</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Access key: exposes controls or menu items by pressing the Alt key with a character key, indicated by underlining of the access key character assignment in a menu, or displaying of the access key character(s) in an overlay.</source>
          <target state="new">Access key: exposes controls or menu items by pressing the Alt key with a character key, indicated by underlining of the access key character assignment in a menu, or displaying of the access key character(s) in an overlay.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Accelerator key: exposes app commands by pressing a function key or the Ctrl key with a character key.</source>
          <target state="new">Accelerator key: exposes app commands by pressing a function key or the Ctrl key with a character key.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Your app might or might not have UI that corresponds to the command.</source>
          <target state="new">Your app might or might not have UI that corresponds to the command.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Another class of key combinations, known as secure attention sequence (SAS), cannot be intercepted by an app.</source>
          <target state="new">Another class of key combinations, known as secure attention sequence (SAS), cannot be intercepted by an app.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This is a security feature intended to protect the user's system during login, and include Ctrl-Alt-Del and Win-L.</source>
          <target state="new">This is a security feature intended to protect the user's system during login, and include Ctrl-Alt-Del and Win-L.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The Notepad app is shown here with the expanded File menu that includes both access keys and accelerator keys.</source>
          <target state="new">The Notepad app is shown here with the expanded File menu that includes both access keys and accelerator keys.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>the notepad app with expanded file menu that includes both access keys and accelerator keys.</source>
          <target state="new">the notepad app with expanded file menu that includes both access keys and accelerator keys.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Keyboard commands</source>
          <target state="new">Keyboard commands</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The following is a comprehensive list of the keyboard interactions provided across the various devices that support keyboard input.</source>
          <target state="new">The following is a comprehensive list of the keyboard interactions provided across the various devices that support keyboard input.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Some devices and platforms require native keystrokes and interactions, these are noted.</source>
          <target state="new">Some devices and platforms require native keystrokes and interactions, these are noted.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>When designing custom controls and interactions, use this keyboard language consistently to make your app feel familiar, dependable, and easy to learn.</source>
          <target state="new">When designing custom controls and interactions, use this keyboard language consistently to make your app feel familiar, dependable, and easy to learn.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Don't redefine the default keyboard shortcuts.</source>
          <target state="new">Don't redefine the default keyboard shortcuts.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The following tables list frequently used keyboard commands.</source>
          <target state="new">The following tables list frequently used keyboard commands.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>For a complete list of keyboard commands, see <bpt id="p1">[</bpt>Windows Keyboard Shortcut Keys<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=325424)</ept>.</source>
          <target state="new">For a complete list of keyboard commands, see <bpt id="p1">[</bpt>Windows Keyboard Shortcut Keys<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=325424)</ept>.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Navigation commands</source>
          <target state="new">Navigation commands</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Action</source>
          <target state="new">Action</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Key command</source>
          <target state="new">Key command</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Back</source>
          <target state="new">Back</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Alt+Left or the back button on special keyboards</source>
          <target state="new">Alt+Left or the back button on special keyboards</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Forward</source>
          <target state="new">Forward</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Alt+Right</source>
          <target state="new">Alt+Right</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Up</source>
          <target state="new">Up</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Alt+Up</source>
          <target state="new">Alt+Up</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Cancel or Escape from current mode</source>
          <target state="new">Cancel or Escape from current mode</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Esc</source>
          <target state="new">Esc</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Move through items in a list</source>
          <target state="new">Move through items in a list</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Arrow key (Left, Right, Up, Down)</source>
          <target state="new">Arrow key (Left, Right, Up, Down)</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Jump to next list of items</source>
          <target state="new">Jump to next list of items</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Ctrl+Left</source>
          <target state="new">Ctrl+Left</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Semantic zoom</source>
          <target state="new">Semantic zoom</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Ctrl++ or Ctrl+-</source>
          <target state="new">Ctrl++ or Ctrl+-</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Jump to a named item in a collection</source>
          <target state="new">Jump to a named item in a collection</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Start typing item name</source>
          <target state="new">Start typing item name</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Next page</source>
          <target state="new">Next page</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Page Up, Page Down or Spacebar</source>
          <target state="new">Page Up, Page Down or Spacebar</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Next tab</source>
          <target state="new">Next tab</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Ctrl+Tab</source>
          <target state="new">Ctrl+Tab</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Previous tab</source>
          <target state="new">Previous tab</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Ctrl+Shift+Tab</source>
          <target state="new">Ctrl+Shift+Tab</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Open app bar</source>
          <target state="new">Open app bar</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Windows+Z</source>
          <target state="new">Windows+Z</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Activate or Navigate into an item</source>
          <target state="new">Activate or Navigate into an item</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="new">Enter</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Select</source>
          <target state="new">Select</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Spacebar</source>
          <target state="new">Spacebar</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Continuously select</source>
          <target state="new">Continuously select</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Shift+Arrow key</source>
          <target state="new">Shift+Arrow key</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Select all</source>
          <target state="new">Select all</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Ctrl+A</source>
          <target state="new">Ctrl+A</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Common commands</source>
          <target state="new">Common commands</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Action</source>
          <target state="new">Action</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Key command</source>
          <target state="new">Key command</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Pin an item</source>
          <target state="new">Pin an item</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Ctrl+Shift+1</source>
          <target state="new">Ctrl+Shift+1</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Save</source>
          <target state="new">Save</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Ctrl+S</source>
          <target state="new">Ctrl+S</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Find</source>
          <target state="new">Find</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Ctrl+F</source>
          <target state="new">Ctrl+F</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Print</source>
          <target state="new">Print</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Ctrl+P</source>
          <target state="new">Ctrl+P</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Copy</source>
          <target state="new">Copy</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Ctrl+C</source>
          <target state="new">Ctrl+C</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Cut</source>
          <target state="new">Cut</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Ctrl+X</source>
          <target state="new">Ctrl+X</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>New item</source>
          <target state="new">New item</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Ctrl+N</source>
          <target state="new">Ctrl+N</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Paste</source>
          <target state="new">Paste</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Ctrl+V</source>
          <target state="new">Ctrl+V</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Open</source>
          <target state="new">Open</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Ctrl+O</source>
          <target state="new">Ctrl+O</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Open address (for example, a URL in Internet Explorer)</source>
          <target state="new">Open address (for example, a URL in Internet Explorer)</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Ctrl+L or Alt+D</source>
          <target state="new">Ctrl+L or Alt+D</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Media navigation commands</source>
          <target state="new">Media navigation commands</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Action</source>
          <target state="new">Action</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Key command</source>
          <target state="new">Key command</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Play/Pause</source>
          <target state="new">Play/Pause</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Ctrl+P</source>
          <target state="new">Ctrl+P</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Next item</source>
          <target state="new">Next item</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Ctrl+F</source>
          <target state="new">Ctrl+F</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Preview item</source>
          <target state="new">Preview item</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Ctrl+B</source>
          <target state="new">Ctrl+B</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Note: The media navigation key commands for Play/Pause and Next item are the same as the key commands for Print and Find, respectively.</source>
          <target state="new">Note: The media navigation key commands for Play/Pause and Next item are the same as the key commands for Print and Find, respectively.</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Common commands should take priority over media navigation commands.</source>
          <target state="new">Common commands should take priority over media navigation commands.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For example, if an app supports both plays media and prints, the key command Ctrl+P should print.</source>
          <target state="new">For example, if an app supports both plays media and prints, the key command Ctrl+P should print.</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Visual feedback</source>
          <target state="new">Visual feedback</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Use focus rectangles only with keyboard interactions.</source>
          <target state="new">Use focus rectangles only with keyboard interactions.</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>If the user initiates a touch interaction, make the keyboard UI gradually fade away.</source>
          <target state="new">If the user initiates a touch interaction, make the keyboard UI gradually fade away.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>This keeps the UI clean and uncluttered.</source>
          <target state="new">This keeps the UI clean and uncluttered.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Don't display visual feedback if an element doesn't support interaction (such as static text).</source>
          <target state="new">Don't display visual feedback if an element doesn't support interaction (such as static text).</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Again, this keeps the UI clean and uncluttered.</source>
          <target state="new">Again, this keeps the UI clean and uncluttered.</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Try to display visual feedback concurrently for all elements that represent the same input target.</source>
          <target state="new">Try to display visual feedback concurrently for all elements that represent the same input target.</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Try to provide on-screen buttons (such as + and -) as hints for emulating touch-based manipulations such as panning, rotating, zooming, and so on.</source>
          <target state="new">Try to provide on-screen buttons (such as + and -) as hints for emulating touch-based manipulations such as panning, rotating, zooming, and so on.</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>For more general guidance on visual feedback, see <bpt id="p1">[</bpt>Guidelines for visual feedback<ept id="p1">](guidelines-for-visualfeedback.md)</ept>.</source>
          <target state="new">For more general guidance on visual feedback, see <bpt id="p1">[</bpt>Guidelines for visual feedback<ept id="p1">](guidelines-for-visualfeedback.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Keyboard events and focus</source>
          <target state="new">Keyboard events and focus</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The following keyboard events can occur for both hardware and touch keyboards.</source>
          <target state="new">The following keyboard events can occur for both hardware and touch keyboards.</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Event</source>
          <target state="new">Event</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>KeyDown</source>
          <target state="new">KeyDown</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Occurs when a key is pressed.</source>
          <target state="new">Occurs when a key is pressed.</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>KeyUp</source>
          <target state="new">KeyUp</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Occurs when a key is released.</source>
          <target state="new">Occurs when a key is released.</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Important</source>
          <target state="new">Important</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Some Windows Runtime controls handle input events internally.</source>
          <target state="new">Some Windows Runtime controls handle input events internally.</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>In these cases, it might appear that an input event doesn't occur because your event listener doesn't invoke the associated handler.</source>
          <target state="new">In these cases, it might appear that an input event doesn't occur because your event listener doesn't invoke the associated handler.</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Typically, this subset of keys is processed by the class handler to provide built in support of basic keyboard accessibility.</source>
          <target state="new">Typically, this subset of keys is processed by the class handler to provide built in support of basic keyboard accessibility.</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> class overrides the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnKeyDown<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh967982)</ept> events for both the Space key and the Enter key (as well as <bpt id="p5">[</bpt><bpt id="p6">**</bpt>OnPointerPressed<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/hh967989)</ept>) and routes them to the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Click<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> event of the control.</source>
          <target state="new">For example, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Button<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> class overrides the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnKeyDown<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh967982)</ept> events for both the Space key and the Enter key (as well as <bpt id="p5">[</bpt><bpt id="p6">**</bpt>OnPointerPressed<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/hh967989)</ept>) and routes them to the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Click<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> event of the control.</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>When a key press is handled by the control class, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events are not raised.</source>
          <target state="new">When a key press is handled by the control class, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events are not raised.</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>This provides a built-in keyboard equivalent for invoking the button, similar to tapping it with a finger or clicking it with a mouse.</source>
          <target state="new">This provides a built-in keyboard equivalent for invoking the button, similar to tapping it with a finger or clicking it with a mouse.</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Keys other than Space or Enter still fire <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events.</source>
          <target state="new">Keys other than Space or Enter still fire <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events.</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>For more info about how class-based handling of events works (specifically, the "Input event handlers in controls" section), see <bpt id="p1">[</bpt>Events and routed events overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185584)</ept>.</source>
          <target state="new">For more info about how class-based handling of events works (specifically, the "Input event handlers in controls" section), see <bpt id="p1">[</bpt>Events and routed events overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185584)</ept>.</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Controls in your UI generate keyboard events only when they have input focus.</source>
          <target state="new">Controls in your UI generate keyboard events only when they have input focus.</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>An individual control gains focus when the user clicks or taps directly on that control in the layout, or uses the Tab key to step into a tab sequence within the content area.</source>
          <target state="new">An individual control gains focus when the user clicks or taps directly on that control in the layout, or uses the Tab key to step into a tab sequence within the content area.</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>You can also call a control's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Focus<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702161)</ept> method to force focus.</source>
          <target state="new">You can also call a control's <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Focus<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702161)</ept> method to force focus.</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>This is necessary when you implement shortcut keys, because keyboard focus is not set by default when your UI loads.</source>
          <target state="new">This is necessary when you implement shortcut keys, because keyboard focus is not set by default when your UI loads.</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>For more info, see the <bpt id="p1">[</bpt>Shortcut keys example<ept id="p1">](#shortcut_keys_example)</ept> later in this topic.</source>
          <target state="new">For more info, see the <bpt id="p1">[</bpt>Shortcut keys example<ept id="p1">](#shortcut_keys_example)</ept> later in this topic.</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>For a control to receive input focus, it must be enabled, visible, and have <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsTabStop<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209422)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>HitTestVisible<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208933)</ept> property values of <bpt id="p5">**</bpt>true<ept id="p5">**</ept>.</source>
          <target state="new">For a control to receive input focus, it must be enabled, visible, and have <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IsTabStop<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209422)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>HitTestVisible<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208933)</ept> property values of <bpt id="p5">**</bpt>true<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>This is the default state for most controls.</source>
          <target state="new">This is the default state for most controls.</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>When a control has input focus, it can raise and respond to keyboard input events as described later in this topic.</source>
          <target state="new">When a control has input focus, it can raise and respond to keyboard input events as described later in this topic.</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>You can also respond to a control that is receiving or losing focus by handling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GotFocus<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208927)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>LostFocus<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208943)</ept> events.</source>
          <target state="new">You can also respond to a control that is receiving or losing focus by handling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GotFocus<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208927)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>LostFocus<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208943)</ept> events.</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>By default, the tab sequence of controls is the order in which they appear in the Extensible Application Markup Language (XAML).</source>
          <target state="new">By default, the tab sequence of controls is the order in which they appear in the Extensible Application Markup Language (XAML).</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>However, you can modify this order by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209461)</ept> property.</source>
          <target state="new">However, you can modify this order by using the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TabIndex<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209461)</ept> property.</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Implementing keyboard accessibility<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh868161)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Implementing keyboard accessibility<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh868161)</ept>.</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Keyboard event handlers</source>
          <target state="new">Keyboard event handlers</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>An input event handler implements a delegate that provides the following information:</source>
          <target state="new">An input event handler implements a delegate that provides the following information:</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The sender of the event.</source>
          <target state="new">The sender of the event.</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The sender reports the object where the event handler is attached.</source>
          <target state="new">The sender reports the object where the event handler is attached.</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Event data.</source>
          <target state="new">Event data.</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>For keyboard events, that data will be an instance of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyRoutedEventArgs<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943072)</ept>.</source>
          <target state="new">For keyboard events, that data will be an instance of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyRoutedEventArgs<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943072)</ept>.</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The delegate for handlers is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyEventHandler<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227904)</ept>.</source>
          <target state="new">The delegate for handlers is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyEventHandler<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227904)</ept>.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The most relevant properties of <bpt id="p1">**</bpt>KeyRoutedEventArgs<ept id="p1">**</ept> for most handler scenarios are <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Key<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh943074)</ept> and possibly <bpt id="p4">[</bpt><bpt id="p5">**</bpt>KeyStatus<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/hh943075)</ept>.</source>
          <target state="new">The most relevant properties of <bpt id="p1">**</bpt>KeyRoutedEventArgs<ept id="p1">**</ept> for most handler scenarios are <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Key<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh943074)</ept> and possibly <bpt id="p4">[</bpt><bpt id="p5">**</bpt>KeyStatus<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/hh943075)</ept>.</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>OriginalSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208810)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>OriginalSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208810)</ept>.</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Because the keyboard events are routed events, the event data provides <bpt id="p1">**</bpt>OriginalSource<ept id="p1">**</ept>.</source>
          <target state="new">Because the keyboard events are routed events, the event data provides <bpt id="p1">**</bpt>OriginalSource<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>If you deliberately allow events to bubble up through an object tree, <bpt id="p1">**</bpt>OriginalSource<ept id="p1">**</ept> is sometimes the object of concern rather than sender.</source>
          <target state="new">If you deliberately allow events to bubble up through an object tree, <bpt id="p1">**</bpt>OriginalSource<ept id="p1">**</ept> is sometimes the object of concern rather than sender.</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>However, that depends on your design.</source>
          <target state="new">However, that depends on your design.</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>For more information about how you might use <bpt id="p1">**</bpt>OriginalSource<ept id="p1">**</ept> rather than sender, see the "Keyboard Routed Events" section of this topic, or <bpt id="p2">[</bpt>Events and routed events overview<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt185584)</ept>.</source>
          <target state="new">For more information about how you might use <bpt id="p1">**</bpt>OriginalSource<ept id="p1">**</ept> rather than sender, see the "Keyboard Routed Events" section of this topic, or <bpt id="p2">[</bpt>Events and routed events overview<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/mt185584)</ept>.</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Attaching a keyboard event handler</source>
          <target state="new">Attaching a keyboard event handler</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>You can attach keyboard event-handler functions for any object that includes the event as a member.</source>
          <target state="new">You can attach keyboard event-handler functions for any object that includes the event as a member.</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>This includes any <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> derived class.</source>
          <target state="new">This includes any <bpt id="p1">[</bpt><bpt id="p2">**</bpt>UIElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept> derived class.</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The following XAML example shows how to attach handlers for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> event for a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept>.</source>
          <target state="new">The following XAML example shows how to attach handlers for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> event for a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Grid<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br242704)</ept>.</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>You can also attach an event handler in code.</source>
          <target state="new">You can also attach an event handler in code.</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Events and routed events overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185584)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Events and routed events overview<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt185584)</ept>.</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Defining a keyboard event handler</source>
          <target state="new">Defining a keyboard event handler</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The following example shows the incomplete event handler definition for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> event handler that was attached in the preceding example.</source>
          <target state="new">The following example shows the incomplete event handler definition for the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> event handler that was attached in the preceding example.</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Using KeyRoutedEventArgs</source>
          <target state="new">Using KeyRoutedEventArgs</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>All keyboard events use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyRoutedEventArgs<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943072)</ept> for event data, and <bpt id="p3">**</bpt>KeyRoutedEventArgs<ept id="p3">**</ept> contains the following properties:</source>
          <target state="new">All keyboard events use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyRoutedEventArgs<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943072)</ept> for event data, and <bpt id="p3">**</bpt>KeyRoutedEventArgs<ept id="p3">**</ept> contains the following properties:</target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="new">Key</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>KeyStatus</source>
          <target state="new">KeyStatus</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Handled</source>
          <target state="new">Handled</target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>OriginalSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208810)</ept> (inherited from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RoutedEventArgs<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208809)</ept>)</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>OriginalSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208810)</ept> (inherited from <bpt id="p3">[</bpt><bpt id="p4">**</bpt>RoutedEventArgs<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208809)</ept>)</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="new">Key</target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> event is raised if a key is pressed.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> event is raised if a key is pressed.</target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Likewise, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> is raised if a key is released.</source>
          <target state="new">Likewise, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> is raised if a key is released.</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Usually, you listen to the events to process a specific key value.</source>
          <target state="new">Usually, you listen to the events to process a specific key value.</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>To determine which key is pressed or released, check the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Key<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943074)</ept> value in the event data.</source>
          <target state="new">To determine which key is pressed or released, check the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Key<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943074)</ept> value in the event data.</target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Key<ept id="p1">**</ept> returns a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>VirtualKey<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br241812)</ept> value.</source>
          <target state="new"><bpt id="p1">**</bpt>Key<ept id="p1">**</ept> returns a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>VirtualKey<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br241812)</ept> value.</target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>VirtualKey<ept id="p1">**</ept> enumeration includes all the supported keys.</source>
          <target state="new">The <bpt id="p1">**</bpt>VirtualKey<ept id="p1">**</ept> enumeration includes all the supported keys.</target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Modifier keys</source>
          <target state="new">Modifier keys</target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Modifier keys are keys such as Ctrl or Shift that users typically press in combination with other keys.</source>
          <target state="new">Modifier keys are keys such as Ctrl or Shift that users typically press in combination with other keys.</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Your app can use these combinations as keyboard shortcuts to invoke app commands.</source>
          <target state="new">Your app can use these combinations as keyboard shortcuts to invoke app commands.</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>You detect shortcut key combinations by using code in your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> event handlers.</source>
          <target state="new">You detect shortcut key combinations by using code in your <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> event handlers.</target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>You can then track the pressed state of the modifier keys you are interested in.</source>
          <target state="new">You can then track the pressed state of the modifier keys you are interested in.</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>When a keyboard event occurs for a non-modifier key, you can check whether a modifier key is in the pressed state at the same time.</source>
          <target state="new">When a keyboard event occurs for a non-modifier key, you can check whether a modifier key is in the pressed state at the same time.</target>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The Alt key is represented by the <bpt id="p2">**</bpt>VirtualKey.Menu<ept id="p2">**</ept> value.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The Alt key is represented by the <bpt id="p2">**</bpt>VirtualKey.Menu<ept id="p2">**</ept> value.</target>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Shortcut keys example</source>
          <target state="new">Shortcut keys example</target>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to implement shortcut keys.</source>
          <target state="new">The following example demonstrates how to implement shortcut keys.</target>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>In this example, users can control media playback using Play, Pause, and Stop buttons or Ctrl+P, Ctrl+A, and Ctrl+S keyboard shortcuts.</source>
          <target state="new">In this example, users can control media playback using Play, Pause, and Stop buttons or Ctrl+P, Ctrl+A, and Ctrl+S keyboard shortcuts.</target>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The button XAML shows the shortcuts by using tooltips and <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209081)</ept> properties in the button labels.</source>
          <target state="new">The button XAML shows the shortcuts by using tooltips and <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AutomationProperties<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209081)</ept> properties in the button labels.</target>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>This self-documentation is important to increase the usability and accessibility of your app.</source>
          <target state="new">This self-documentation is important to increase the usability and accessibility of your app.</target>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Keyboard accessibility<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt244347)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Keyboard accessibility<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt244347)</ept>.</target>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Note also that the page sets input focus to itself when it is loaded.</source>
          <target state="new">Note also that the page sets input focus to itself when it is loaded.</target>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Without this step, no control has initial input focus, and the app does not raise input events until the user sets the input focus manually (for example, by tabbing to or clicking a control).</source>
          <target state="new">Without this step, no control has initial input focus, and the app does not raise input events until the user sets the input focus manually (for example, by tabbing to or clicking a control).</target>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Setting <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationProperties.AcceleratorKey<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh759762)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>AutomationProperties.AccessKey<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/hh759763)</ept> in XAML provides string information, which documents the shortcut key for invoking that particular action.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Setting <bpt id="p2">[</bpt><bpt id="p3">**</bpt>AutomationProperties.AcceleratorKey<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh759762)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>AutomationProperties.AccessKey<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/hh759763)</ept> in XAML provides string information, which documents the shortcut key for invoking that particular action.</target>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>The information is captured by Microsoft UI Automation clients such as Narrator, and is typically provided directly to the user.</source>
          <target state="new">The information is captured by Microsoft UI Automation clients such as Narrator, and is typically provided directly to the user.</target>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Setting <bpt id="p1">**</bpt>AutomationProperties.AcceleratorKey<ept id="p1">**</ept> or <bpt id="p2">**</bpt>AutomationProperties.AccessKey<ept id="p2">**</ept> does not have any action on its own.</source>
          <target state="new">Setting <bpt id="p1">**</bpt>AutomationProperties.AcceleratorKey<ept id="p1">**</ept> or <bpt id="p2">**</bpt>AutomationProperties.AccessKey<ept id="p2">**</ept> does not have any action on its own.</target>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>You will still need to attach handlers for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events in order to actually implement the keyboard shortcut behavior in your app.</source>
          <target state="new">You will still need to attach handlers for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events in order to actually implement the keyboard shortcut behavior in your app.</target>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Also, the underline text decoration for an access key is not provided automatically.</source>
          <target state="new">Also, the underline text decoration for an access key is not provided automatically.</target>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>You must explicitly underline the text for the specific key in your mnemonic as inline <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Underline<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209982)</ept> formatting if you wish to show underlined text in the UI.</source>
          <target state="new">You must explicitly underline the text for the specific key in your mnemonic as inline <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Underline<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209982)</ept> formatting if you wish to show underlined text in the UI.</target>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Keyboard routed events</source>
          <target state="new">Keyboard routed events</target>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Certain events are routed events, including <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept>.</source>
          <target state="new">Certain events are routed events, including <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept>.</target>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Routed events use the bubbling routing strategy.</source>
          <target state="new">Routed events use the bubbling routing strategy.</target>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The bubbling routing strategy means that an event originates from a child object and is then routed up to successive parent objects in the object tree.</source>
          <target state="new">The bubbling routing strategy means that an event originates from a child object and is then routed up to successive parent objects in the object tree.</target>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>This presents another opportunity to handle the same event and interact with the same event data.</source>
          <target state="new">This presents another opportunity to handle the same event and interact with the same event data.</target>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Consider the following XAML example, which handles <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events for a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Canvas<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> and two <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Button<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> objects.</source>
          <target state="new">Consider the following XAML example, which handles <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events for a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Canvas<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209267)</ept> and two <bpt id="p5">[</bpt><bpt id="p6">**</bpt>Button<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> objects.</target>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>In this case, if you release a key while focus is held by either <bpt id="p1">**</bpt>Button<ept id="p1">**</ept> object, it raises the <bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept> event.</source>
          <target state="new">In this case, if you release a key while focus is held by either <bpt id="p1">**</bpt>Button<ept id="p1">**</ept> object, it raises the <bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept> event.</target>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The event is then bubbled up to the parent <bpt id="p1">**</bpt>Canvas<ept id="p1">**</ept>.</source>
          <target state="new">The event is then bubbled up to the parent <bpt id="p1">**</bpt>Canvas<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The following example shows how to implement the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> event handler for the corresponding XAML content in the preceding example.</source>
          <target state="new">The following example shows how to implement the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> event handler for the corresponding XAML content in the preceding example.</target>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Notice the use of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OriginalSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208810)</ept> property in the preceding handler.</source>
          <target state="new">Notice the use of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OriginalSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208810)</ept> property in the preceding handler.</target>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Here, <bpt id="p1">**</bpt>OriginalSource<ept id="p1">**</ept> reports the object that raised the event.</source>
          <target state="new">Here, <bpt id="p1">**</bpt>OriginalSource<ept id="p1">**</ept> reports the object that raised the event.</target>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>The object could not be the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StackPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209635)</ept> because the <bpt id="p3">**</bpt>StackPanel<ept id="p3">**</ept> is not a control and cannot have focus.</source>
          <target state="new">The object could not be the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>StackPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209635)</ept> because the <bpt id="p3">**</bpt>StackPanel<ept id="p3">**</ept> is not a control and cannot have focus.</target>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Only one of the two buttons within the <bpt id="p1">**</bpt>StackPanel<ept id="p1">**</ept> could possibly have raised the event, but which one?</source>
          <target state="new">Only one of the two buttons within the <bpt id="p1">**</bpt>StackPanel<ept id="p1">**</ept> could possibly have raised the event, but which one?</target>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>You use <bpt id="p1">**</bpt>OriginalSource<ept id="p1">**</ept> to distinguish the actual event source object, if you are handling the event on a parent object.</source>
          <target state="new">You use <bpt id="p1">**</bpt>OriginalSource<ept id="p1">**</ept> to distinguish the actual event source object, if you are handling the event on a parent object.</target>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The Handled property in event data</source>
          <target state="new">The Handled property in event data</target>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Depending on your event handling strategy, you might want only one event handler to react to a bubbling event.</source>
          <target state="new">Depending on your event handling strategy, you might want only one event handler to react to a bubbling event.</target>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>For instance, if you have a specific <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> handler attached to one of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Button<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> controls, it would have the first opportunity to handle that event.</source>
          <target state="new">For instance, if you have a specific <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> handler attached to one of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Button<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept> controls, it would have the first opportunity to handle that event.</target>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>In this case, you might not want the parent panel to also handle the event.</source>
          <target state="new">In this case, you might not want the parent panel to also handle the event.</target>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>For this scenario, you can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Handled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943073)</ept> property in the event data.</source>
          <target state="new">For this scenario, you can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Handled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943073)</ept> property in the event data.</target>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The purpose of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Handled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943073)</ept> property in a routed event data class is to report that another handler you registered earlier on the event route has already acted.</source>
          <target state="new">The purpose of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Handled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943073)</ept> property in a routed event data class is to report that another handler you registered earlier on the event route has already acted.</target>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>This influences the behavior of the routed event system.</source>
          <target state="new">This influences the behavior of the routed event system.</target>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>When you set <bpt id="p1">**</bpt>Handled<ept id="p1">**</ept> to <bpt id="p2">**</bpt>true<ept id="p2">**</ept> in an event handler, that event stops routing and is not sent to successive parent elements.</source>
          <target state="new">When you set <bpt id="p1">**</bpt>Handled<ept id="p1">**</ept> to <bpt id="p2">**</bpt>true<ept id="p2">**</ept> in an event handler, that event stops routing and is not sent to successive parent elements.</target>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>AddHandler and already-handled keyboard events</source>
          <target state="new">AddHandler and already-handled keyboard events</target>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>You can use a special technique for attaching handlers that can act on events that you already marked as handled.</source>
          <target state="new">You can use a special technique for attaching handlers that can act on events that you already marked as handled.</target>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>This technique uses the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AddHandler<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702399)</ept> method to register a handler, rather than using XAML attributes or language-specific syntax for adding handlers, such as += in C#.</source>
          <target state="new">This technique uses the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AddHandler<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702399)</ept> method to register a handler, rather than using XAML attributes or language-specific syntax for adding handlers, such as += in C#.</target>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>A limitation of this technique in general is that the <bpt id="p1">**</bpt>AddHandler<ept id="p1">**</ept> API takes a parameter of type <bpt id="p2">[</bpt><bpt id="p3">**</bpt>RoutedEvent<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208808)</ept> that identifies the routed event in question.</source>
          <target state="new">A limitation of this technique in general is that the <bpt id="p1">**</bpt>AddHandler<ept id="p1">**</ept> API takes a parameter of type <bpt id="p2">[</bpt><bpt id="p3">**</bpt>RoutedEvent<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br208808)</ept> that identifies the routed event in question.</target>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Not all routed events provide a <bpt id="p1">**</bpt>RoutedEvent<ept id="p1">**</ept> identifier, and this consideration thus affects which routed events can still be handled in the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Handled<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh943073)</ept> case.</source>
          <target state="new">Not all routed events provide a <bpt id="p1">**</bpt>RoutedEvent<ept id="p1">**</ept> identifier, and this consideration thus affects which routed events can still be handled in the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Handled<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh943073)</ept> case.</target>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events have routed event identifiers (<bpt id="p5">[</bpt><bpt id="p6">**</bpt>KeyDownEvent<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/hh702416)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>KeyUpEvent<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/hh702418)</ept>) on <bpt id="p9">[</bpt><bpt id="p10">**</bpt>UIElement<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept>.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events have routed event identifiers (<bpt id="p5">[</bpt><bpt id="p6">**</bpt>KeyDownEvent<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/hh702416)</ept> and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>KeyUpEvent<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/hh702418)</ept>) on <bpt id="p9">[</bpt><bpt id="p10">**</bpt>UIElement<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/br208911)</ept>.</target>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>However, other events such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox.TextChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209706)</ept> do not have routed event identifiers and thus cannot be used with the <bpt id="p3">**</bpt>AddHandler<ept id="p3">**</ept> technique.</source>
          <target state="new">However, other events such as <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox.TextChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209706)</ept> do not have routed event identifiers and thus cannot be used with the <bpt id="p3">**</bpt>AddHandler<ept id="p3">**</ept> technique.</target>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Commanding</source>
          <target state="new">Commanding</target>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>A small number of UI elements provide built-in support for commanding.</source>
          <target state="new">A small number of UI elements provide built-in support for commanding.</target>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>Commanding uses input-related routed events in its underlying implementation.</source>
          <target state="new">Commanding uses input-related routed events in its underlying implementation.</target>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>It enables processing of related UI input, such as a certain pointer action or a specific accelerator key, by invoking a single command handler.</source>
          <target state="new">It enables processing of related UI input, such as a certain pointer action or a specific accelerator key, by invoking a single command handler.</target>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>If commanding is available for a UI element, consider using its commanding APIs instead of any discrete input events.</source>
          <target state="new">If commanding is available for a UI element, consider using its commanding APIs instead of any discrete input events.</target>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ButtonBase.Command<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227740)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ButtonBase.Command<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227740)</ept>.</target>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>You can also implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICommand<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227885)</ept> to encapsulate command functionality that you invoke from ordinary event handlers.</source>
          <target state="new">You can also implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICommand<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227885)</ept> to encapsulate command functionality that you invoke from ordinary event handlers.</target>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>This enables you to use commanding even when there is no <bpt id="p1">**</bpt>Command<ept id="p1">**</ept> property available.</source>
          <target state="new">This enables you to use commanding even when there is no <bpt id="p1">**</bpt>Command<ept id="p1">**</ept> property available.</target>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Text input and controls</source>
          <target state="new">Text input and controls</target>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Certain controls react to keyboard events with their own handling.</source>
          <target state="new">Certain controls react to keyboard events with their own handling.</target>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>For instance, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209683)</ept> is a control that is designed to capture and then visually represent text that was entered by using the keyboard.</source>
          <target state="new">For instance, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209683)</ept> is a control that is designed to capture and then visually represent text that was entered by using the keyboard.</target>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>It uses <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyDown<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> in its own logic to capture keystrokes, then also raises its own <bpt id="p5">[</bpt><bpt id="p6">**</bpt>TextChanged<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209706)</ept> event if the text actually changed.</source>
          <target state="new">It uses <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyDown<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> in its own logic to capture keystrokes, then also raises its own <bpt id="p5">[</bpt><bpt id="p6">**</bpt>TextChanged<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209706)</ept> event if the text actually changed.</target>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>You can still generally add handlers for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyDown<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> to a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>TextBox<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209683)</ept>, or any related control that is intended to process text input.</source>
          <target state="new">You can still generally add handlers for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyDown<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> to a <bpt id="p5">[</bpt><bpt id="p6">**</bpt>TextBox<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br209683)</ept>, or any related control that is intended to process text input.</target>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>However, as part of its intended design, a control might not respond to all key values that are directed to it through key events.</source>
          <target state="new">However, as part of its intended design, a control might not respond to all key values that are directed to it through key events.</target>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Behavior is specific to each control.</source>
          <target state="new">Behavior is specific to each control.</target>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>As an example, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ButtonBase<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227736)</ept> (the base class for <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Button<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept>) processes <bpt id="p5">[</bpt><bpt id="p6">**</bpt>KeyUp<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> so that it can check for the Spacebar or Enter key.</source>
          <target state="new">As an example, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ButtonBase<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227736)</ept> (the base class for <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Button<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br209265)</ept>) processes <bpt id="p5">[</bpt><bpt id="p6">**</bpt>KeyUp<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> so that it can check for the Spacebar or Enter key.</target>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ButtonBase<ept id="p1">**</ept> considers <bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept> equivalent to a mouse left button down for purposes of raising a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Click<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> event.</source>
          <target state="new"><bpt id="p1">**</bpt>ButtonBase<ept id="p1">**</ept> considers <bpt id="p2">**</bpt>KeyUp<ept id="p2">**</ept> equivalent to a mouse left button down for purposes of raising a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Click<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227737)</ept> event.</target>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>This processing of the event is accomplished when <bpt id="p1">**</bpt>ButtonBase<ept id="p1">**</ept> overrides the virtual method <bpt id="p2">[</bpt><bpt id="p3">**</bpt>OnKeyUp<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh967983)</ept>.</source>
          <target state="new">This processing of the event is accomplished when <bpt id="p1">**</bpt>ButtonBase<ept id="p1">**</ept> overrides the virtual method <bpt id="p2">[</bpt><bpt id="p3">**</bpt>OnKeyUp<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh967983)</ept>.</target>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>In its implementation, it sets <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Handled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943073)</ept> to <bpt id="p3">**</bpt>true<ept id="p3">**</ept>.</source>
          <target state="new">In its implementation, it sets <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Handled<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh943073)</ept> to <bpt id="p3">**</bpt>true<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>The result is that any parent of a button that is listening for a key event, in the case of a Spacebar, would not receive the already-handled event for its own handlers.</source>
          <target state="new">The result is that any parent of a button that is listening for a key event, in the case of a Spacebar, would not receive the already-handled event for its own handlers.</target>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Another example is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209683)</ept>.</source>
          <target state="new">Another example is <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209683)</ept>.</target>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Some keys, such as the ARROW keys, are not considered text by <bpt id="p1">**</bpt>TextBox<ept id="p1">**</ept> and are instead considered specific to the control UI behavior.</source>
          <target state="new">Some keys, such as the ARROW keys, are not considered text by <bpt id="p1">**</bpt>TextBox<ept id="p1">**</ept> and are instead considered specific to the control UI behavior.</target>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TextBox<ept id="p1">**</ept> marks these event cases as handled.</source>
          <target state="new">The <bpt id="p1">**</bpt>TextBox<ept id="p1">**</ept> marks these event cases as handled.</target>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Custom controls can implement their own similar override behavior for key events by overriding <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnKeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh967982)</ept><ph id="ph1"> / </ph><bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnKeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh967983)</ept>.</source>
          <target state="new">Custom controls can implement their own similar override behavior for key events by overriding <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OnKeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh967982)</ept><ph id="ph1"> / </ph><bpt id="p3">[</bpt><bpt id="p4">**</bpt>OnKeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh967983)</ept>.</target>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>If your custom control processes specific accelerator keys, or has control or focus behavior that is similar to the scenario described for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209683)</ept>, you should place this logic in your own <bpt id="p3">**</bpt>OnKeyDown<ept id="p3">**</ept><ph id="ph1"> / </ph><bpt id="p4">**</bpt>OnKeyUp<ept id="p4">**</ept> overrides.</source>
          <target state="new">If your custom control processes specific accelerator keys, or has control or focus behavior that is similar to the scenario described for <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209683)</ept>, you should place this logic in your own <bpt id="p3">**</bpt>OnKeyDown<ept id="p3">**</ept><ph id="ph1"> / </ph><bpt id="p4">**</bpt>OnKeyUp<ept id="p4">**</ept> overrides.</target>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>The touch keyboard</source>
          <target state="new">The touch keyboard</target>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Text input controls provide automatic support for the touch keyboard.</source>
          <target state="new">Text input controls provide automatic support for the touch keyboard.</target>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>When the user sets the input focus to a text control by using touch input, the touch keyboard appears automatically.</source>
          <target state="new">When the user sets the input focus to a text control by using touch input, the touch keyboard appears automatically.</target>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>When the input focus is not on a text control, the touch keyboard is hidden.</source>
          <target state="new">When the input focus is not on a text control, the touch keyboard is hidden.</target>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>When the touch keyboard appears, it automatically repositions your UI to ensure that the focused element remains visible.</source>
          <target state="new">When the touch keyboard appears, it automatically repositions your UI to ensure that the focused element remains visible.</target>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>This can cause other important areas of your UI to move off screen.</source>
          <target state="new">This can cause other important areas of your UI to move off screen.</target>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>However, you can disable the default behavior and make your own UI adjustments when the touch keyboard appears.</source>
          <target state="new">However, you can disable the default behavior and make your own UI adjustments when the touch keyboard appears.</target>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Responding to the appearance of the on-screen keyboard sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=231633)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Responding to the appearance of the on-screen keyboard sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=231633)</ept>.</target>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>If you create a custom control that requires text input, but does not derive from a standard text input control, you can add touch keyboard support by implementing the correct UI Automation control patterns.</source>
          <target state="new">If you create a custom control that requires text input, but does not derive from a standard text input control, you can add touch keyboard support by implementing the correct UI Automation control patterns.</target>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Respond to the presence of the touch keyboard<ept id="p1">](respond-to-the-presence-of-the-touch-keyboard.md)</ept> and the <bpt id="p2">[</bpt>Touch keyboard sample<ept id="p2">](http://go.microsoft.com/fwlink/p/?linkid=246019)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Respond to the presence of the touch keyboard<ept id="p1">](respond-to-the-presence-of-the-touch-keyboard.md)</ept> and the <bpt id="p2">[</bpt>Touch keyboard sample<ept id="p2">](http://go.microsoft.com/fwlink/p/?linkid=246019)</ept>.</target>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Key presses on the touch keyboard raise <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events just like key presses on hardware keyboards.</source>
          <target state="new">Key presses on the touch keyboard raise <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDown<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208941)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyUp<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208942)</ept> events just like key presses on hardware keyboards.</target>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>However, the touch keyboard will not raise input events for Ctrl+A, Ctrl+Z, Ctrl+X, Ctrl+C, and Ctrl+V, which are reserved for text manipulation in the input control.</source>
          <target state="new">However, the touch keyboard will not raise input events for Ctrl+A, Ctrl+Z, Ctrl+X, Ctrl+C, and Ctrl+V, which are reserved for text manipulation in the input control.</target>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>You can make it much faster and easier for users to enter data in your app by setting the input scope of the text control to match the kind of data you expect the user to enter.</source>
          <target state="new">You can make it much faster and easier for users to enter data in your app by setting the input scope of the text control to match the kind of data you expect the user to enter.</target>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The input scope provides a hint at the type of text input expected by the control so the system can provide a specialized touch keyboard layout for the input type.</source>
          <target state="new">The input scope provides a hint at the type of text input expected by the control so the system can provide a specialized touch keyboard layout for the input type.</target>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>For example, if a text box is used only to enter a 4-digit PIN, set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>InputScope<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702632)</ept> property to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Number<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh702028)</ept>.</source>
          <target state="new">For example, if a text box is used only to enter a 4-digit PIN, set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>InputScope<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702632)</ept> property to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Number<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh702028)</ept>.</target>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>This tells the system to show the numeric keypad layout, which makes it easier for the user to enter the PIN.</source>
          <target state="new">This tells the system to show the numeric keypad layout, which makes it easier for the user to enter the PIN.</target>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>For more detail, see <bpt id="p1">[</bpt>Use input scope to change the touch keyboard<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt280229)</ept>.</source>
          <target state="new">For more detail, see <bpt id="p1">[</bpt>Use input scope to change the touch keyboard<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt280229)</ept>.</target>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Additional articles in this section</source>
          <target state="new">Additional articles in this section</target>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Topic</source>
          <target state="new">Topic</target>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Respond to the presence of the touch keyboard</source>
          <target state="new">Respond to the presence of the touch keyboard</target>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Learn how to tailor the UI of your app when showing or hiding the touch keyboard.</source>
          <target state="new">Learn how to tailor the UI of your app when showing or hiding the touch keyboard.</target>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Related articles</source>
          <target state="new">Related articles</target>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Developers</source>
          <target state="new">Developers</target>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Identify input devices</source>
          <target state="new">Identify input devices</target>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Respond to the presence of the touch keyboard</source>
          <target state="new">Respond to the presence of the touch keyboard</target>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Designers</source>
          <target state="new">Designers</target>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Keyboard design guidelines</source>
          <target state="new">Keyboard design guidelines</target>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Samples</source>
          <target state="new">Samples</target>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Basic input sample</source>
          <target state="new">Basic input sample</target>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Low latency input sample</source>
          <target state="new">Low latency input sample</target>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Focus visuals sample</source>
          <target state="new">Focus visuals sample</target>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Archive Samples</source>
          <target state="new">Archive Samples</target>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Input sample</source>
          <target state="new">Input sample</target>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Input: Device capabilities sample</source>
          <target state="new">Input: Device capabilities sample</target>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Input: Touch keyboard sample</source>
          <target state="new">Input: Touch keyboard sample</target>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Responding to the appearance of the on-screen keyboard sample</source>
          <target state="new">Responding to the appearance of the on-screen keyboard sample</target>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>XAML text editing sample</source>
          <target state="new">XAML text editing sample</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>