<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58f31b6a9b85aa3b33a7ed1e230708ab29f6fcd4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\tutorial--adding-controls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Add controls</source>
          <target state="new">Add controls</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Now, we take a look at how the game sample implements move-look controls in a 3-D game, and how to develop basic touch, mouse, and game controller controls.</source>
          <target state="new">Now, we take a look at how the game sample implements move-look controls in a 3-D game, and how to develop basic touch, mouse, and game controller controls.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Add controls</source>
          <target state="new">Add controls</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Now, we take a look at how the game sample implements move-look controls in a 3-D game, and how to develop basic touch, mouse, and game controller controls.</source>
          <target state="new">Now, we take a look at how the game sample implements move-look controls in a 3-D game, and how to develop basic touch, mouse, and game controller controls.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Objective</source>
          <target state="new">Objective</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To implement mouse/keyboard, touch, and Xbox controller controls in a Universal Windows Platform (UWP) game with DirectX.</source>
          <target state="new">To implement mouse/keyboard, touch, and Xbox controller controls in a Universal Windows Platform (UWP) game with DirectX.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>UWP game apps and controls</source>
          <target state="new">UWP game apps and controls</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A good UWP game supports a broad variety of interfaces.</source>
          <target state="new">A good UWP game supports a broad variety of interfaces.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A potential player might have Windows 10 on a tablet with no physical buttons, or a media PC with an Xbox controller attached, or the latest desktop gaming rig with a high-performance mouse and gaming keyboard.</source>
          <target state="new">A potential player might have Windows 10 on a tablet with no physical buttons, or a media PC with an Xbox controller attached, or the latest desktop gaming rig with a high-performance mouse and gaming keyboard.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Your game should support all of these devices if the game design allows it.</source>
          <target state="new">Your game should support all of these devices if the game design allows it.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This sample supports all three.</source>
          <target state="new">This sample supports all three.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It's a simple first-person shooting game, and the move-look controls that are standard for this genre are easily implemented for all three types of input.</source>
          <target state="new">It's a simple first-person shooting game, and the move-look controls that are standard for this genre are easily implemented for all three types of input.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more info about controls, and move-look controls specifically, see <bpt id="p1">[</bpt>Move-look controls for games<ept id="p1">](tutorial--adding-move-look-controls-to-your-directx-game.md)</ept> and <bpt id="p2">[</bpt>Touch controls for games<ept id="p2">](tutorial--adding-touch-controls-to-your-directx-game.md)</ept>.</source>
          <target state="new">For more info about controls, and move-look controls specifically, see <bpt id="p1">[</bpt>Move-look controls for games<ept id="p1">](tutorial--adding-move-look-controls-to-your-directx-game.md)</ept> and <bpt id="p2">[</bpt>Touch controls for games<ept id="p2">](tutorial--adding-touch-controls-to-your-directx-game.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Common control behaviors</source>
          <target state="new">Common control behaviors</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Touch controls and mouse/keyboard controls have a very similar core implementation.</source>
          <target state="new">Touch controls and mouse/keyboard controls have a very similar core implementation.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In a UWP app, a pointer is simply a point on the screen.</source>
          <target state="new">In a UWP app, a pointer is simply a point on the screen.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can move it by sliding the mouse or sliding your finger on the touch screen.</source>
          <target state="new">You can move it by sliding the mouse or sliding your finger on the touch screen.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>As a result, you can register for a single set of events, and not worry about whether the player is using a mouse or a touch screen to move and press the pointer.</source>
          <target state="new">As a result, you can register for a single set of events, and not worry about whether the player is using a mouse or a touch screen to move and press the pointer.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> class in the game sample is initialized, it registers for four pointer-specific events and one mouse-specific event:</source>
          <target state="new">When the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> class in the game sample is initialized, it registers for four pointer-specific events and one mouse-specific event:</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::PointerPressed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208278)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::PointerPressed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208278)</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The left or right mouse button was pressed (and held), or the touch surface was touched.</source>
          <target state="new">The left or right mouse button was pressed (and held), or the touch surface was touched.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::PointerMoved<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208276)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::PointerMoved<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208276)</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The mouse moved, or a drag action was made on the touch surface.</source>
          <target state="new">The mouse moved, or a drag action was made on the touch surface.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The left mouse button was released, or the object contacting the touch surface was lifted.</source>
          <target state="new">The left mouse button was released, or the object contacting the touch surface was lifted.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::PointerExited<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208275)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::PointerExited<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208275)</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The pointer moved out of the main window.</source>
          <target state="new">The pointer moved out of the main window.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::Devices::Input::MouseMoved<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh758356)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::Devices::Input::MouseMoved<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh758356)</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The mouse moved a certain distance.</source>
          <target state="new">The mouse moved a certain distance.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Be aware that we are only interested in mouse movement delta values, and not the current x-y position.</source>
          <target state="new">Be aware that we are only interested in mouse movement delta values, and not the current x-y position.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The Xbox controller is handled separately, using the <bpt id="p1">[</bpt>XInput<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh405053)</ept> APIs.</source>
          <target state="new">The Xbox controller is handled separately, using the <bpt id="p1">[</bpt>XInput<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh405053)</ept> APIs.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>We talk about the implementation of game controller controls in a bit.</source>
          <target state="new">We talk about the implementation of game controller controls in a bit.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the game sample, the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> class has three controller-specific states, regardless of the control type:</source>
          <target state="new">In the game sample, the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> class has three controller-specific states, regardless of the control type:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>None<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>None<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is the initialized state for the controller.</source>
          <target state="new">This is the initialized state for the controller.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The game is not anticipating any controller input.</source>
          <target state="new">The game is not anticipating any controller input.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WaitForInput<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>WaitForInput<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The game is paused and is waiting for the player to continue.</source>
          <target state="new">The game is paused and is waiting for the player to continue.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Active<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Active<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The game is running, processing player input.</source>
          <target state="new">The game is running, processing player input.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Active<ept id="p1">**</ept> state is the state when the player is actively playing the game.</source>
          <target state="new">The <bpt id="p1">**</bpt>Active<ept id="p1">**</ept> state is the state when the player is actively playing the game.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>During this state, the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> instance is processing input events from all enabled input devices and interpreting the player's intentions based on the aggregated event data.</source>
          <target state="new">During this state, the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> instance is processing input events from all enabled input devices and interpreting the player's intentions based on the aggregated event data.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>As a result, it updates the velocity and look direction (the view plane normal) of the player's view and shares the updated data with the game after Update is called from the game loop.</source>
          <target state="new">As a result, it updates the velocity and look direction (the view plane normal) of the player's view and shares the updated data with the game after Update is called from the game loop.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Be aware that the player can take more than one action at the same time.</source>
          <target state="new">Be aware that the player can take more than one action at the same time.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, he or she could be firing spheres while moving the camera.</source>
          <target state="new">For example, he or she could be firing spheres while moving the camera.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>All of these inputs are tracked in the <bpt id="p1">**</bpt>Active<ept id="p1">**</ept> state, with different pointer IDs corresponding to different pointer actions.</source>
          <target state="new">All of these inputs are tracked in the <bpt id="p1">**</bpt>Active<ept id="p1">**</ept> state, with different pointer IDs corresponding to different pointer actions.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is necessary because from a player's perspective, a pointer event in the firing rectangle is different from one in the move rectangle or in the rest of the screen.</source>
          <target state="new">This is necessary because from a player's perspective, a pointer event in the firing rectangle is different from one in the move rectangle or in the rest of the screen.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerPressed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208278)</ept> event is received, the <bpt id="p3">**</bpt>MoveLookController<ept id="p3">**</ept> obtains the pointer ID value created by the window.</source>
          <target state="new">When a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerPressed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208278)</ept> event is received, the <bpt id="p3">**</bpt>MoveLookController<ept id="p3">**</ept> obtains the pointer ID value created by the window.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The pointer ID represents a specific type of input.</source>
          <target state="new">The pointer ID represents a specific type of input.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, on a multi-touch device, there may be several different active inputs at the same time.</source>
          <target state="new">For example, on a multi-touch device, there may be several different active inputs at the same time.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The IDs are used to keep track of which input the player is using.</source>
          <target state="new">The IDs are used to keep track of which input the player is using.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If one event is in the move rectangle of the touch screen, a pointer ID is assigned to track any pointer events in move rectangle.</source>
          <target state="new">If one event is in the move rectangle of the touch screen, a pointer ID is assigned to track any pointer events in move rectangle.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Other pointer events in the fire rectangle are tracked separately, with a separate pointer ID.</source>
          <target state="new">Other pointer events in the fire rectangle are tracked separately, with a separate pointer ID.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>(We talk about this some more in the section on touch controls.)</source>
          <target state="new">(We talk about this some more in the section on touch controls.)</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Input from the mouse has yet another ID and is also handled separately.</source>
          <target state="new">Input from the mouse has yet another ID and is also handled separately.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>After the pointer events have been mapped to a specific game action, it's time to update the data the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> object shares with the main game loop.</source>
          <target state="new">After the pointer events have been mapped to a specific game action, it's time to update the data the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> object shares with the main game loop.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When called, the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> method in the game sample processes the input and updates the velocity and look direction variables (<bpt id="p2">**</bpt>m\_velocity<ept id="p2">**</ept> and <bpt id="p3">**</bpt>m\_lookdirection<ept id="p3">**</ept>), which the game loop then retrieves by calling the public <bpt id="p4">**</bpt>Velocity<ept id="p4">**</ept> and <bpt id="p5">**</bpt>LookDirection<ept id="p5">**</ept> methods on the <bpt id="p6">**</bpt>MoveLookController<ept id="p6">**</ept> instance.</source>
          <target state="new">When called, the <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> method in the game sample processes the input and updates the velocity and look direction variables (<bpt id="p2">**</bpt>m\_velocity<ept id="p2">**</ept> and <bpt id="p3">**</bpt>m\_lookdirection<ept id="p3">**</ept>), which the game loop then retrieves by calling the public <bpt id="p4">**</bpt>Velocity<ept id="p4">**</ept> and <bpt id="p5">**</bpt>LookDirection<ept id="p5">**</ept> methods on the <bpt id="p6">**</bpt>MoveLookController<ept id="p6">**</ept> instance.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The game loop can test to see if the player is firing by calling the <bpt id="p1">**</bpt>IsFiring<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>MoveLookController<ept id="p2">**</ept> instance.</source>
          <target state="new">The game loop can test to see if the player is firing by calling the <bpt id="p1">**</bpt>IsFiring<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>MoveLookController<ept id="p2">**</ept> instance.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> checks to see if the player has pressed the fire button on one of the three input types.</source>
          <target state="new">The <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> checks to see if the player has pressed the fire button on one of the three input types.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the player moves the pointer outside the main window of the game, or presses the pause button (the P key or the Xbox controller start button), the game must be paused.</source>
          <target state="new">If the player moves the pointer outside the main window of the game, or presses the pause button (the P key or the Xbox controller start button), the game must be paused.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> registered the press, and informs the game loop when it calls the <bpt id="p2">**</bpt>IsPauseRequested<ept id="p2">**</ept> method.</source>
          <target state="new">The <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> registered the press, and informs the game loop when it calls the <bpt id="p2">**</bpt>IsPauseRequested<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>At that point, if <bpt id="p1">**</bpt>IsPauseRequested<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>true<ept id="p2">**</ept>, the game loop then calls <bpt id="p3">**</bpt>WaitForPress<ept id="p3">**</ept> on the <bpt id="p4">**</bpt>MoveLookController<ept id="p4">**</ept> to move the controller into the <bpt id="p5">**</bpt>WaitForInput<ept id="p5">**</ept> state.</source>
          <target state="new">At that point, if <bpt id="p1">**</bpt>IsPauseRequested<ept id="p1">**</ept> returns <bpt id="p2">**</bpt>true<ept id="p2">**</ept>, the game loop then calls <bpt id="p3">**</bpt>WaitForPress<ept id="p3">**</ept> on the <bpt id="p4">**</bpt>MoveLookController<ept id="p4">**</ept> to move the controller into the <bpt id="p5">**</bpt>WaitForInput<ept id="p5">**</ept> state.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Then, the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> waits for the player to select one of the menu items to load, continue, or exit the game, and stop processing gameplay input events until it returns to the <bpt id="p2">**</bpt>Active<ept id="p2">**</ept> state.</source>
          <target state="new">Then, the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> waits for the player to select one of the menu items to load, continue, or exit the game, and stop processing gameplay input events until it returns to the <bpt id="p2">**</bpt>Active<ept id="p2">**</ept> state.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>complete code sample for this section<ept id="p1">](#code_sample)</ept>.</source>
          <target state="new">See the <bpt id="p1">[</bpt>complete code sample for this section<ept id="p1">](#code_sample)</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Now, let's look at the implementation of each of the three control types in a little more detail.</source>
          <target state="new">Now, let's look at the implementation of each of the three control types in a little more detail.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Implementing relative mouse controls</source>
          <target state="new">Implementing relative mouse controls</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If mouse movement is detected, we want use that movement to determine the new pitch and yaw of the camera.</source>
          <target state="new">If mouse movement is detected, we want use that movement to determine the new pitch and yaw of the camera.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>We do that by implementing relative mouse controls, where we handle the relative distance the mouse has moved—the delta between the start of the movement and the stop—as opposed to recording the absolute x-y pixel coordinates of the motion.</source>
          <target state="new">We do that by implementing relative mouse controls, where we handle the relative distance the mouse has moved—the delta between the start of the movement and the stop—as opposed to recording the absolute x-y pixel coordinates of the motion.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To do that, we obtain the changes in the X (the horizontal motion) and the Y (the vertical motion) coordinates by examining the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MouseDelta::X<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh758353)</ept> and <bpt id="p3">**</bpt>MouseDelta::Y<ept id="p3">**</ept> fields on the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Windows::Device::Input::MouseEventArgs::MouseDelta<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/hh758358)</ept> argument object returned by the <bpt id="p6">[</bpt><bpt id="p7">**</bpt>MouseMoved<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/hh758356)</ept> event.</source>
          <target state="new">To do that, we obtain the changes in the X (the horizontal motion) and the Y (the vertical motion) coordinates by examining the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>MouseDelta::X<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh758353)</ept> and <bpt id="p3">**</bpt>MouseDelta::Y<ept id="p3">**</ept> fields on the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>Windows::Device::Input::MouseEventArgs::MouseDelta<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/hh758358)</ept> argument object returned by the <bpt id="p6">[</bpt><bpt id="p7">**</bpt>MouseMoved<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/hh758356)</ept> event.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Implementing touch controls</source>
          <target state="new">Implementing touch controls</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Touch controls are the trickiest to develop, because they are the most complex and require the most fine-tuning to be effective.</source>
          <target state="new">Touch controls are the trickiest to develop, because they are the most complex and require the most fine-tuning to be effective.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In the game sample, a rectangle in the lower left quadrant of the screen is used as a directional pad, where sliding your thumb left and right in this space slides the camera left and right, and sliding your thumb up and down moves the camera forward and backward.</source>
          <target state="new">In the game sample, a rectangle in the lower left quadrant of the screen is used as a directional pad, where sliding your thumb left and right in this space slides the camera left and right, and sliding your thumb up and down moves the camera forward and backward.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A rectangle in the lower right quadrant of the screen can be pressed to fire the spheres.</source>
          <target state="new">A rectangle in the lower right quadrant of the screen can be pressed to fire the spheres.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Aiming (pitch and yaw) are controlled by sliding your finger on the parts of the screen not reserved for moving and firing; as your finger moves, the camera (with fixed cross hairs) moves similarly.</source>
          <target state="new">Aiming (pitch and yaw) are controlled by sliding your finger on the parts of the screen not reserved for moving and firing; as your finger moves, the camera (with fixed cross hairs) moves similarly.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The move and fire rectangles are created by two methods in the sample code:</source>
          <target state="new">The move and fire rectangles are created by two methods in the sample code:</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>We treat touch device pointer events for the other regions of the screen as look commands.</source>
          <target state="new">We treat touch device pointer events for the other regions of the screen as look commands.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the screen is resized, these rectangles must be computed again (and redrawn).</source>
          <target state="new">If the screen is resized, these rectangles must be computed again (and redrawn).</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If a touch device pointer event is raised in one of these regions and the game state is set to <bpt id="p1">**</bpt>Active<ept id="p1">**</ept>, it's assigned a pointer ID, as we discussed earlier.</source>
          <target state="new">If a touch device pointer event is raised in one of these regions and the game state is set to <bpt id="p1">**</bpt>Active<ept id="p1">**</ept>, it's assigned a pointer ID, as we discussed earlier.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerPressed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208278)</ept> event has occurred in one of the three control regions, the move rectangle, the fire rectangle, or the rest of the screen (the look control), the <bpt id="p3">**</bpt>MoveLookController<ept id="p3">**</ept> assigns the pointer ID for the pointer that fired the event to a specific variable that corresponds to the region of the screen the event was fired in.</source>
          <target state="new">If a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerPressed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208278)</ept> event has occurred in one of the three control regions, the move rectangle, the fire rectangle, or the rest of the screen (the look control), the <bpt id="p3">**</bpt>MoveLookController<ept id="p3">**</ept> assigns the pointer ID for the pointer that fired the event to a specific variable that corresponds to the region of the screen the event was fired in.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, if the event occurred in the move rectangle, the <bpt id="p1">**</bpt>m\_movePointerID<ept id="p1">**</ept> variable is set to the pointer ID that fired the event.</source>
          <target state="new">For example, if the event occurred in the move rectangle, the <bpt id="p1">**</bpt>m\_movePointerID<ept id="p1">**</ept> variable is set to the pointer ID that fired the event.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A Boolean "in use" variable (<bpt id="p1">**</bpt>m\_lookInUse<ept id="p1">**</ept>, in the example) is also set to indicate that the control has not been released yet.</source>
          <target state="new">A Boolean "in use" variable (<bpt id="p1">**</bpt>m\_lookInUse<ept id="p1">**</ept>, in the example) is also set to indicate that the control has not been released yet.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Now, let's look at how the game sample handles the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerMoved<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208276)</ept> touch screen event.</source>
          <target state="new">Now, let's look at how the game sample handles the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerMoved<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208276)</ept> touch screen event.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> checks the pointer ID to determine where the event occurred, and takes one of the following actions:</source>
          <target state="new">The <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> checks the pointer ID to determine where the event occurred, and takes one of the following actions:</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerMoved<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208276)</ept> event occurred in the move or fire rectangle, update the pointer position for the controller.</source>
          <target state="new">If the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerMoved<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208276)</ept> event occurred in the move or fire rectangle, update the pointer position for the controller.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerMoved<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208276)</ept> event occurred somewhere in the rest of the screen (defined as the look controls), calculate the change in pitch and yaw of the look direction vector.</source>
          <target state="new">If the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerMoved<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208276)</ept> event occurred somewhere in the rest of the screen (defined as the look controls), calculate the change in pitch and yaw of the look direction vector.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Lastly, let's look at how the game sample handles the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept> touch screen event.</source>
          <target state="new">Lastly, let's look at how the game sample handles the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept> touch screen event.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the ID of the pointer that fired the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept> event is the ID of the previously recorded move pointer, the <bpt id="p3">**</bpt>MoveLookController<ept id="p3">**</ept> sets the velocity to 0 because the player has stopped touching the move rectangle.</source>
          <target state="new">If the ID of the pointer that fired the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept> event is the ID of the previously recorded move pointer, the <bpt id="p3">**</bpt>MoveLookController<ept id="p3">**</ept> sets the velocity to 0 because the player has stopped touching the move rectangle.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If it didn't set the velocity to 0, the player would keep moving!</source>
          <target state="new">If it didn't set the velocity to 0, the player would keep moving!</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If you want to implement some form of inertia, this is where you add the method that begins returning the velocity to 0 over future calls to <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> from the game loop.</source>
          <target state="new">If you want to implement some form of inertia, this is where you add the method that begins returning the velocity to 0 over future calls to <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> from the game loop.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Otherwise, if the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept> event fired in the fire rectangle or the look region, the <bpt id="p3">**</bpt>MoveLookController<ept id="p3">**</ept> resets the specific pointer IDs.</source>
          <target state="new">Otherwise, if the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept> event fired in the fire rectangle or the look region, the <bpt id="p3">**</bpt>MoveLookController<ept id="p3">**</ept> resets the specific pointer IDs.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>That's the basics of how touch screen controls are implemented in the game sample.</source>
          <target state="new">That's the basics of how touch screen controls are implemented in the game sample.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Let's move on to mouse and keyboard controls.</source>
          <target state="new">Let's move on to mouse and keyboard controls.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Implementing mouse and keyboard controls</source>
          <target state="new">Implementing mouse and keyboard controls</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The game sample implements these mouse and keyboard controls:</source>
          <target state="new">The game sample implements these mouse and keyboard controls:</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The W, S, A, and D keys move the player view forward, backward, left, and right, respectively.</source>
          <target state="new">The W, S, A, and D keys move the player view forward, backward, left, and right, respectively.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Pressing X and the space bar move the view up and down, respectively.</source>
          <target state="new">Pressing X and the space bar move the view up and down, respectively.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Pressing the P key pauses the game.</source>
          <target state="new">Pressing the P key pauses the game.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Moving the mouse puts the player in control of the rotation (the pitch and yaw) of the camera view.</source>
          <target state="new">Moving the mouse puts the player in control of the rotation (the pitch and yaw) of the camera view.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Clicking the left button fires a sphere.</source>
          <target state="new">Clicking the left button fires a sphere.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To use the keyboard, the game sample registers for two extra events: <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208271)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow::KeyDown<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208270)</ept>, which handle the press and the release of a key, respectively.</source>
          <target state="new">To use the keyboard, the game sample registers for two extra events: <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreWindow::KeyUp<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208271)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreWindow::KeyDown<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208270)</ept>, which handle the press and the release of a key, respectively.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The mouse is treated a little differently from the touch controls, even though it uses a pointer.</source>
          <target state="new">The mouse is treated a little differently from the touch controls, even though it uses a pointer.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Obviously, it doesn't use the move and fire rectangles, as that would be very cumbersome for the player: how could they press the move and fire controls at the same time?</source>
          <target state="new">Obviously, it doesn't use the move and fire rectangles, as that would be very cumbersome for the player: how could they press the move and fire controls at the same time?</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>As noted earlier, the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> controller engages the look controls whenever the mouse is moved, and engages the fire controls when the left mouse button is pressed, as shown here.</source>
          <target state="new">As noted earlier, the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> controller engages the look controls whenever the mouse is moved, and engages the fire controls when the left mouse button is pressed, as shown here.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Now, let's look at how the game sample handles the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept> mouse event.</source>
          <target state="new">Now, let's look at how the game sample handles the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>PointerReleased<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208279)</ept> mouse event.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>When the player stops pressing one of the mouse buttons, the input is complete: the spheres stop firing.</source>
          <target state="new">When the player stops pressing one of the mouse buttons, the input is complete: the spheres stop firing.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>But, because look is always enabled, the game continues to use the same mouse pointer to track the ongoing look events.</source>
          <target state="new">But, because look is always enabled, the game continues to use the same mouse pointer to track the ongoing look events.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Now, let's look at the last of control types: the Xbox controller.</source>
          <target state="new">Now, let's look at the last of control types: the Xbox controller.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It's handled separately from the touch and mouse controls, because it doesn't use the pointer object.</source>
          <target state="new">It's handled separately from the touch and mouse controls, because it doesn't use the pointer object.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Implementing Xbox controller controls</source>
          <target state="new">Implementing Xbox controller controls</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In the game sample, Xbox controller support is added by calls to the <bpt id="p1">[</bpt>XInput<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh405053)</ept> APIs, which are set of APIs designed to simplify programming for game controllers.</source>
          <target state="new">In the game sample, Xbox controller support is added by calls to the <bpt id="p1">[</bpt>XInput<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh405053)</ept> APIs, which are set of APIs designed to simplify programming for game controllers.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In the game sample, we use the Xbox controller's left analog stick for player movement, the right analog stick for the look controls, and the right trigger to fire.</source>
          <target state="new">In the game sample, we use the Xbox controller's left analog stick for player movement, the right analog stick for the look controls, and the right trigger to fire.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>We use the start button to pause and resume the game.</source>
          <target state="new">We use the start button to pause and resume the game.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>MoveLookController<ept id="p2">**</ept> instance immediately checks to see if a game controller is connected, and then checks the controller state.</source>
          <target state="new">The <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>MoveLookController<ept id="p2">**</ept> instance immediately checks to see if a game controller is connected, and then checks the controller state.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If the game controller is in the <bpt id="p1">**</bpt>Active<ept id="p1">**</ept> state, this method checks to see if a user moved the left analog stick in a specific direction.</source>
          <target state="new">If the game controller is in the <bpt id="p1">**</bpt>Active<ept id="p1">**</ept> state, this method checks to see if a user moved the left analog stick in a specific direction.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>But the movement on the stick in a specific direction must register as larger than the radius of the dead zone; otherwise, nothing will happen.</source>
          <target state="new">But the movement on the stick in a specific direction must register as larger than the radius of the dead zone; otherwise, nothing will happen.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This dead zone radius is necessary to present "drifting," which is when the controller picks up minute movements from the player's thumb as it rests on the stick.</source>
          <target state="new">This dead zone radius is necessary to present "drifting," which is when the controller picks up minute movements from the player's thumb as it rests on the stick.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If we don't have this dead zone, the player can get annoyed very quickly, as the controls feel very fidgety.</source>
          <target state="new">If we don't have this dead zone, the player can get annoyed very quickly, as the controls feel very fidgety.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> method then performs the same check on the right stick, to see if the player has changed the direction the camera is looking, as long as the movement on the stick is longer than another dead zone radius.</source>
          <target state="new">The <bpt id="p1">**</bpt>Update<ept id="p1">**</ept> method then performs the same check on the right stick, to see if the player has changed the direction the camera is looking, as long as the movement on the stick is longer than another dead zone radius.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Update<ept id="p1">**</ept> computes the new pitch and yaw, and then checks to see if the user pressed the right analog trigger, our fire button.</source>
          <target state="new"><bpt id="p1">**</bpt>Update<ept id="p1">**</ept> computes the new pitch and yaw, and then checks to see if the user pressed the right analog trigger, our fire button.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>And that's how this sample implements a full set of control options.</source>
          <target state="new">And that's how this sample implements a full set of control options.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Again, remember that a good UWP app supports a range of control options, so players with different form factors and devices can play in the way they prefer!</source>
          <target state="new">Again, remember that a good UWP app supports a range of control options, so players with different form factors and devices can play in the way they prefer!</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>We've reviewed every major component of a UWP DirectX game except one: audio!</source>
          <target state="new">We've reviewed every major component of a UWP DirectX game except one: audio!</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Music and sound effects are important to any game, so let's discuss <bpt id="p1">[</bpt>adding sound<ept id="p1">](tutorial--adding-sound.md)</ept>!</source>
          <target state="new">Music and sound effects are important to any game, so let's discuss <bpt id="p1">[</bpt>adding sound<ept id="p1">](tutorial--adding-sound.md)</ept>!</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Complete sample code for this section</source>
          <target state="new">Complete sample code for this section</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>MoveLookController.h</source>
          <target state="new">MoveLookController.h</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>MoveLookController.cpp</source>
          <target state="new">MoveLookController.cpp</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new">Note</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
          <target state="new">This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</source>
          <target state="new">If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Create a simple UWP game with DirectX</source>
          <target state="new">Create a simple UWP game with DirectX</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>