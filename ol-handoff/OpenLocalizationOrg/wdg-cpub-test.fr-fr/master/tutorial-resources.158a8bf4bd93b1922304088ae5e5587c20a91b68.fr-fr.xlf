<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44bee6ee68e6c5868bc0d5f4fc552da138b9d32b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\tutorial-resources.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Extend the game sample</source>
          <target state="new">Extend the game sample</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
          <target state="new">Congratulations!</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>At this point, you understand the key components of a basic Universal Windows Platform (UWP) DirectX 3D game.</source>
          <target state="new">At this point, you understand the key components of a basic Universal Windows Platform (UWP) DirectX 3D game.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Extend the game sample</source>
          <target state="new">Extend the game sample</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
          <target state="new">Congratulations!</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>At this point, you understand the key components of a basic Universal Windows Platform (UWP) DirectX 3D game.</source>
          <target state="new">At this point, you understand the key components of a basic Universal Windows Platform (UWP) DirectX 3D game.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can set up the framework for a game, including the view provider and rendering pipeline, and implement a basic game loop.</source>
          <target state="new">You can set up the framework for a game, including the view provider and rendering pipeline, and implement a basic game loop.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also create a basic user interface overlay, and incorporate sounds and controls.</source>
          <target state="new">You can also create a basic user interface overlay, and incorporate sounds and controls.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You're on your way to creating a game of your own, and here are some resources to further your knowledge of DirectX game development.</source>
          <target state="new">You're on your way to creating a game of your own, and here are some resources to further your knowledge of DirectX game development.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DirectX Graphics and Gaming</source>
          <target state="new">DirectX Graphics and Gaming</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Direct3D 11 Overview</source>
          <target state="new">Direct3D 11 Overview</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Direct3D 11 Reference</source>
          <target state="new">Direct3D 11 Reference</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Extending the game sample: using XAML for the overlay</source>
          <target state="new">Extending the game sample: using XAML for the overlay</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>One alternative that we didn't discuss in depth is the use of XAML instead of Direct2D for the overlay.</source>
          <target state="new">One alternative that we didn't discuss in depth is the use of XAML instead of Direct2D for the overlay.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>XAML has many benefits over Direct2D for drawing user interface elements, and the most important one is that it makes incorporating the Windows 10 look and feel into your DirectX game more convenient.</source>
          <target state="new">XAML has many benefits over Direct2D for drawing user interface elements, and the most important one is that it makes incorporating the Windows 10 look and feel into your DirectX game more convenient.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Many of the common elements, styles, and behaviors that define a UWP app are tightly integrated into the XAML model, making it far less work for a game developer to implement.</source>
          <target state="new">Many of the common elements, styles, and behaviors that define a UWP app are tightly integrated into the XAML model, making it far less work for a game developer to implement.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If your own game design has a complicated user interface, consider using XAML instead of Direct2D.</source>
          <target state="new">If your own game design has a complicated user interface, consider using XAML instead of Direct2D.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>So, what is the difference between the implementation of a user interface with Direct2D, and implementing that same interface with XAML?</source>
          <target state="new">So, what is the difference between the implementation of a user interface with Direct2D, and implementing that same interface with XAML?</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You define the overlay in a XAML file, \*.xaml, rather than as a collection of Direct2D primitives and DirectWrite strings manually placed and written to a Direct2D target buffer.</source>
          <target state="new">You define the overlay in a XAML file, \*.xaml, rather than as a collection of Direct2D primitives and DirectWrite strings manually placed and written to a Direct2D target buffer.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you understand XAML, you'll find it much easier to create and configure more complicated overlays, especially if you use Visual Studio's XAML editing tools.</source>
          <target state="new">If you understand XAML, you'll find it much easier to create and configure more complicated overlays, especially if you use Visual Studio's XAML editing tools.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The user interface elements come from standardized elements that are part of the Windows Runtime XAML APIs, including <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Xaml<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209045)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows::UI::Xaml::Controls<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227716)</ept>.</source>
          <target state="new">The user interface elements come from standardized elements that are part of the Windows Runtime XAML APIs, including <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Xaml<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br209045)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows::UI::Xaml::Controls<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br227716)</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The code that handles the behavior of the XAML user interface elements is defined in a codebehind file, Main.xaml.cpp.</source>
          <target state="new">The code that handles the behavior of the XAML user interface elements is defined in a codebehind file, Main.xaml.cpp.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>XAML, as a tightly integrated Windows Runtime component, naturally handles resize and view state change events, transforming the overlay accordingly, so you don't have to manually specify how to redraw the overlay's components.</source>
          <target state="new">XAML, as a tightly integrated Windows Runtime component, naturally handles resize and view state change events, transforming the overlay accordingly, so you don't have to manually specify how to redraw the overlay's components.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The swap chain is not directly attached to a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Core::CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object, or at least you don't have to do this.</source>
          <target state="new">The swap chain is not directly attached to a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::UI::Core::CoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br208225)</ept> object, or at least you don't have to do this.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Instead, a DirectX app that incorporates XAML associates a swap chain when a new <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainBackgroundPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702626)</ept> object is constructed.</source>
          <target state="new">Instead, a DirectX app that incorporates XAML associates a swap chain when a new <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainBackgroundPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702626)</ept> object is constructed.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SwapChainBackgroundPanel<ept id="p1">**</ept> object is set as the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Content<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209051)</ept> property of the current window object created at launch by the app singleton, and the window is passed to <bpt id="p4">**</bpt>Simple3DGame::Initialize<ept id="p4">**</ept> as a <bpt id="p5">**</bpt>CoreWindow<ept id="p5">**</ept> object.</source>
          <target state="new">The <bpt id="p1">**</bpt>SwapChainBackgroundPanel<ept id="p1">**</ept> object is set as the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Content<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br209051)</ept> property of the current window object created at launch by the app singleton, and the window is passed to <bpt id="p4">**</bpt>Simple3DGame::Initialize<ept id="p4">**</ept> as a <bpt id="p5">**</bpt>CoreWindow<ept id="p5">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You declare the XAML for the <bpt id="p1">**</bpt>SwapChainBackgroundPanel<ept id="p1">**</ept> like this in <bpt id="p2">**</bpt>Main.app.xaml<ept id="p2">**</ept> file:</source>
          <target state="new">You declare the XAML for the <bpt id="p1">**</bpt>SwapChainBackgroundPanel<ept id="p1">**</ept> like this in <bpt id="p2">**</bpt>Main.app.xaml<ept id="p2">**</ept> file:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To attach the configured swap chain to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainBackgroundPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702626)</ept> panel instance defined by your XAML, you must obtain a pointer to the underlying native <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ISwapChainBackgroundPanel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848326)</ept> interface implementation and call <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SetSwapChain<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/hh848327)</ept> on it, passing it your configured swap chain.</source>
          <target state="new">To attach the configured swap chain to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SwapChainBackgroundPanel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702626)</ept> panel instance defined by your XAML, you must obtain a pointer to the underlying native <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ISwapChainBackgroundPanel<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh848326)</ept> interface implementation and call <bpt id="p5">[</bpt><bpt id="p6">**</bpt>SetSwapChain<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/hh848327)</ept> on it, passing it your configured swap chain.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>From a method derived from <bpt id="p1">**</bpt>DirectXBase::CreateWindowSizeDependentResources<ept id="p1">**</ept> specifically for DirectX/XAML interop:</source>
          <target state="new">From a method derived from <bpt id="p1">**</bpt>DirectXBase::CreateWindowSizeDependentResources<ept id="p1">**</ept> specifically for DirectX/XAML interop:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more info about this process, see <bpt id="p1">[</bpt>DirectX and XAML interop<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh825871)</ept>.</source>
          <target state="new">For more info about this process, see <bpt id="p1">[</bpt>DirectX and XAML interop<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh825871)</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Complete code for the XAML game sample XAML codebehinds</source>
          <target state="new">Complete code for the XAML game sample XAML codebehinds</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Here's the complete code for the codebehinds found in the XAML version of the Direct3D 11.1 shooting game sample.</source>
          <target state="new">Here's the complete code for the codebehinds found in the XAML version of the Direct3D 11.1 shooting game sample.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>(Unlike the version of the game sample discussed in the rest of these topics, the XAML version defines its framework in the <bpt id="p1">**</bpt>App.xaml.cpp<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MainPage.xaml.cpp<ept id="p2">**</ept> files, instead of <bpt id="p3">**</bpt>DirectXApp.cpp<ept id="p3">**</ept> and <bpt id="p4">**</bpt>GameInfoOverlay.cpp<ept id="p4">**</ept>, respectively.)</source>
          <target state="new">(Unlike the version of the game sample discussed in the rest of these topics, the XAML version defines its framework in the <bpt id="p1">**</bpt>App.xaml.cpp<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MainPage.xaml.cpp<ept id="p2">**</ept> files, instead of <bpt id="p3">**</bpt>DirectXApp.cpp<ept id="p3">**</ept> and <bpt id="p4">**</bpt>GameInfoOverlay.cpp<ept id="p4">**</ept>, respectively.)</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>App.xaml.h</source>
          <target state="new">App.xaml.h</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>App.xaml.cpp</source>
          <target state="new">App.xaml.cpp</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>MainPage.xaml</source>
          <target state="new">MainPage.xaml</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>MainPage.xaml.h</source>
          <target state="new">MainPage.xaml.h</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Main.xaml.cpp codebehind</source>
          <target state="new">Main.xaml.cpp codebehind</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To download a version of the sample game that uses XAML for the overlay, go to the <bpt id="p1">[</bpt>Direct3D shooting game sample (XAML)<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=241418)</ept>.</source>
          <target state="new">To download a version of the sample game that uses XAML for the overlay, go to the <bpt id="p1">[</bpt>Direct3D shooting game sample (XAML)<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=241418)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>