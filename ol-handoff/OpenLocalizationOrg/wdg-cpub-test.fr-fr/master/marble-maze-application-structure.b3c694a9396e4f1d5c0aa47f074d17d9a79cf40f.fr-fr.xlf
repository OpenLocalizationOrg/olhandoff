<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92e5e7eb25ef5a808e7fc8e1e9f47c453d4a5942</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\marble-maze-application-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Marble Maze application structure</source>
          <target state="new">Marble Maze application structure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The structure of a DirectX Universal Windows Platform (UWP) app differs from that of a traditional desktop application.</source>
          <target state="new">The structure of a DirectX Universal Windows Platform (UWP) app differs from that of a traditional desktop application.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Marble Maze application structure</source>
          <target state="new">Marble Maze application structure</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The structure of a DirectX Universal Windows Platform (UWP) app differs from that of a traditional desktop application.</source>
          <target state="new">The structure of a DirectX Universal Windows Platform (UWP) app differs from that of a traditional desktop application.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Instead of working with handle types such as <bpt id="p1">**</bpt>HWND<ept id="p1">**</ept> and functions such as <bpt id="p2">**</bpt>CreateWindow<ept id="p2">**</ept>, the Windows Runtime provides interfaces such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows::UI::Core::ICoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208296)</ept> so that you can develop UWP apps in a more modern, object-oriented manner.</source>
          <target state="new">Instead of working with handle types such as <bpt id="p1">**</bpt>HWND<ept id="p1">**</ept> and functions such as <bpt id="p2">**</bpt>CreateWindow<ept id="p2">**</ept>, the Windows Runtime provides interfaces such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows::UI::Core::ICoreWindow<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br208296)</ept> so that you can develop UWP apps in a more modern, object-oriented manner.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This section of the documentation shows how the Marble Maze application code is structured.</source>
          <target state="new">This section of the documentation shows how the Marble Maze application code is structured.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The sample code that corresponds to this document is found in the <bpt id="p2">[</bpt>DirectX Marble Maze game sample<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=624011)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The sample code that corresponds to this document is found in the <bpt id="p2">[</bpt>DirectX Marble Maze game sample<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=624011)</ept>.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Here are some of the key points that this document discusses for when you structure your game code:</source>
          <target state="new">Here are some of the key points that this document discusses for when you structure your game code:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the initialization phase, set up runtime and library components that your game uses.</source>
          <target state="new">In the initialization phase, set up runtime and library components that your game uses.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Also load game-specific resources.</source>
          <target state="new">Also load game-specific resources.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>UWP apps must start processing events within 5 seconds of launch.</source>
          <target state="new">UWP apps must start processing events within 5 seconds of launch.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Therefore, load only essential resources when you load your app.</source>
          <target state="new">Therefore, load only essential resources when you load your app.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Games should load large resources in the background and display a progress screen.</source>
          <target state="new">Games should load large resources in the background and display a progress screen.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the game loop, respond to Windows events, read user input, update scene objects, and render the scene.</source>
          <target state="new">In the game loop, respond to Windows events, read user input, update scene objects, and render the scene.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use event handlers to respond to window events.</source>
          <target state="new">Use event handlers to respond to window events.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(These replace the window messages from desktop Windows applications.)</source>
          <target state="new">(These replace the window messages from desktop Windows applications.)</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use a state machine to control the flow and order of the game logic.</source>
          <target state="new">Use a state machine to control the flow and order of the game logic.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>File organization</source>
          <target state="new">File organization</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Some of the components in Marble Maze can be reused with any game with little or no modification.</source>
          <target state="new">Some of the components in Marble Maze can be reused with any game with little or no modification.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For your own game, you can adapt the organization and ideas that these files provide.</source>
          <target state="new">For your own game, you can adapt the organization and ideas that these files provide.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following table briefly describes the important source code files.</source>
          <target state="new">The following table briefly describes the important source code files.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Files</source>
          <target state="new">Files</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Audio.h, Audio.cpp</source>
          <target state="new">Audio.h, Audio.cpp</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>Audio<ept id="p1">**</ept> class, which manages audio resources.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>Audio<ept id="p1">**</ept> class, which manages audio resources.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>BasicLoader.h, BasicLoader.cpp</source>
          <target state="new">BasicLoader.h, BasicLoader.cpp</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>BasicLoader<ept id="p1">**</ept> class, which provides utility methods that help you load textures, meshes, and shaders.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>BasicLoader<ept id="p1">**</ept> class, which provides utility methods that help you load textures, meshes, and shaders.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>BasicMath.h</source>
          <target state="new">BasicMath.h</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Defines structures and functions that help you work with vector and matrix data and computations.</source>
          <target state="new">Defines structures and functions that help you work with vector and matrix data and computations.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Many of these functions are compatible with HLSL shader types.</source>
          <target state="new">Many of these functions are compatible with HLSL shader types.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>BasicReaderWriter.h, BasicReaderWriter.cpp</source>
          <target state="new">BasicReaderWriter.h, BasicReaderWriter.cpp</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>BasicReaderWriter<ept id="p1">**</ept> class, which uses the Windows Runtime to read and write file data in a UWP app.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>BasicReaderWriter<ept id="p1">**</ept> class, which uses the Windows Runtime to read and write file data in a UWP app.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>BasicShapes.h, BasicShapes.cpp</source>
          <target state="new">BasicShapes.h, BasicShapes.cpp</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>BasicShapes<ept id="p1">**</ept> class, which provides utility methods for creating basic shapes such as cubes and spheres.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>BasicShapes<ept id="p1">**</ept> class, which provides utility methods for creating basic shapes such as cubes and spheres.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(These files are not used by the Marble Maze implementation).</source>
          <target state="new">(These files are not used by the Marble Maze implementation).</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>BasicTimer.h, BasicTimer.cpp</source>
          <target state="new">BasicTimer.h, BasicTimer.cpp</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>BasicTimer<ept id="p1">**</ept> class, which provides an easy way to get total and elapsed times.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>BasicTimer<ept id="p1">**</ept> class, which provides an easy way to get total and elapsed times.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Camera.h, Camera.cpp</source>
          <target state="new">Camera.h, Camera.cpp</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>Camera<ept id="p1">**</ept> class, which provides the position and orientation of a camera.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>Camera<ept id="p1">**</ept> class, which provides the position and orientation of a camera.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Collision.h, Collision.cpp</source>
          <target state="new">Collision.h, Collision.cpp</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Manages collision info between the marble and other objects, such as the maze.</source>
          <target state="new">Manages collision info between the marble and other objects, such as the maze.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>DDSTextureLoader.h, DDSTextureLoader.cpp</source>
          <target state="new">DDSTextureLoader.h, DDSTextureLoader.cpp</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>CreateDDSTextureFromMemory<ept id="p1">**</ept> function, which loads textures that are in .dds format from a memory buffer.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>CreateDDSTextureFromMemory<ept id="p1">**</ept> function, which loads textures that are in .dds format from a memory buffer.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>DirectXApp.h, DirectXApp.cpp</source>
          <target state="new">DirectXApp.h, DirectXApp.cpp</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>DirectXApp<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DirectXAppSource<ept id="p2">**</ept> classes, which encapsulate the view (window, thread, and events) of the app.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>DirectXApp<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DirectXAppSource<ept id="p2">**</ept> classes, which encapsulate the view (window, thread, and events) of the app.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>DirectXBase.h, DirectXBase.cpp</source>
          <target state="new">DirectXBase.h, DirectXBase.cpp</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>DirectXBase<ept id="p1">**</ept> class, which provides infrastructure that is common to many DirectX UWP apps.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>DirectXBase<ept id="p1">**</ept> class, which provides infrastructure that is common to many DirectX UWP apps.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>DirectXSample.h</source>
          <target state="new">DirectXSample.h</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Defines utility functions that can be used by DirectX UWP apps.</source>
          <target state="new">Defines utility functions that can be used by DirectX UWP apps.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>LoadScreen.h, LoadScreen.cpp</source>
          <target state="new">LoadScreen.h, LoadScreen.cpp</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>LoadScreen<ept id="p1">**</ept> class, which displays a loading screen during app initialization.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>LoadScreen<ept id="p1">**</ept> class, which displays a loading screen during app initialization.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>MarbleMaze.h, MarbleMaze.cpp</source>
          <target state="new">MarbleMaze.h, MarbleMaze.cpp</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class, which manages game-specific resources and defines much of the game logic.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class, which manages game-specific resources and defines much of the game logic.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>MediaStreamer.h, MediaStreamer.cpp</source>
          <target state="new">MediaStreamer.h, MediaStreamer.cpp</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>MediaStreamer<ept id="p1">**</ept> class, which uses Media Foundation to help the game manage audio resources.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>MediaStreamer<ept id="p1">**</ept> class, which uses Media Foundation to help the game manage audio resources.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>PersistentState.h, PersistentState.cpp</source>
          <target state="new">PersistentState.h, PersistentState.cpp</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>PersistentState<ept id="p1">**</ept> class, which reads and writes primitive data types from and to a backing store.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>PersistentState<ept id="p1">**</ept> class, which reads and writes primitive data types from and to a backing store.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Physics.h, Physics.cpp</source>
          <target state="new">Physics.h, Physics.cpp</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>Physics<ept id="p1">**</ept> class, which implements the physics simulation between the marble and the maze.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>Physics<ept id="p1">**</ept> class, which implements the physics simulation between the marble and the maze.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Primitives.h</source>
          <target state="new">Primitives.h</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Defines geometric types that are used by the game.</source>
          <target state="new">Defines geometric types that are used by the game.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>SampleOverlay.h, SampleOverlay.cpp</source>
          <target state="new">SampleOverlay.h, SampleOverlay.cpp</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>SampleOverlay<ept id="p1">**</ept> class, which provides common 2-D and user-interface data and operations.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>SampleOverlay<ept id="p1">**</ept> class, which provides common 2-D and user-interface data and operations.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>SDKMesh.h, SDKMesh.cpp</source>
          <target state="new">SDKMesh.h, SDKMesh.cpp</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Defines the <bpt id="p1">**</bpt>SDKMesh<ept id="p1">**</ept> class, which loads and renders meshes that are in SDK Mesh (.sdkmesh) format.</source>
          <target state="new">Defines the <bpt id="p1">**</bpt>SDKMesh<ept id="p1">**</ept> class, which loads and renders meshes that are in SDK Mesh (.sdkmesh) format.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>UserInterface.h, UserInterface.cpp</source>
          <target state="new">UserInterface.h, UserInterface.cpp</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Defines functionality that's related to the user interface, such as the menu system and the high score table.</source>
          <target state="new">Defines functionality that's related to the user interface, such as the menu system and the high score table.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Design-time versus run-time resource formats</source>
          <target state="new">Design-time versus run-time resource formats</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When you can, use run-time formats instead of design-time formats to more efficiently load game resources.</source>
          <target state="new">When you can, use run-time formats instead of design-time formats to more efficiently load game resources.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>design-time<ept id="p1">*</ept> format is the format you use when you design your resource.</source>
          <target state="new">A <bpt id="p1">*</bpt>design-time<ept id="p1">*</ept> format is the format you use when you design your resource.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Typically, 3-D designers work with design-time formats.</source>
          <target state="new">Typically, 3-D designers work with design-time formats.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Some design-time formats are also text-based so that you can modify them in any text-based editor.</source>
          <target state="new">Some design-time formats are also text-based so that you can modify them in any text-based editor.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Design-time formats can be verbose and contain more information than your game requires.</source>
          <target state="new">Design-time formats can be verbose and contain more information than your game requires.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>run-time<ept id="p1">*</ept> format is the binary format that is read by your game.</source>
          <target state="new">A <bpt id="p1">*</bpt>run-time<ept id="p1">*</ept> format is the binary format that is read by your game.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Run-time formats are typically more compact and more efficient to load than the corresponding design-time formats.</source>
          <target state="new">Run-time formats are typically more compact and more efficient to load than the corresponding design-time formats.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is why the majority of games use run-time assets at run time.</source>
          <target state="new">This is why the majority of games use run-time assets at run time.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Although your game can directly read a design-time format, there are several benefits to using a separate run-time format.</source>
          <target state="new">Although your game can directly read a design-time format, there are several benefits to using a separate run-time format.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Because run-time formats are often more compact, they require less disk space and require less time to transfer over a network.</source>
          <target state="new">Because run-time formats are often more compact, they require less disk space and require less time to transfer over a network.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Also, run-time formats are often represented as memory-mapped data structures.</source>
          <target state="new">Also, run-time formats are often represented as memory-mapped data structures.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Therefore, they can be loaded into memory much faster than, for example, an XML-based text file.</source>
          <target state="new">Therefore, they can be loaded into memory much faster than, for example, an XML-based text file.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Finally, because separate run-time formats are typically binary-encoded, they are more difficult for the end-user to modify.</source>
          <target state="new">Finally, because separate run-time formats are typically binary-encoded, they are more difficult for the end-user to modify.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>HLSL shaders are one example of resources that use different design-time and run-time formats.</source>
          <target state="new">HLSL shaders are one example of resources that use different design-time and run-time formats.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Marble Maze uses .hlsl as the design-time format, and .cso as the run-time format.</source>
          <target state="new">Marble Maze uses .hlsl as the design-time format, and .cso as the run-time format.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A .hlsl file holds source code for the shader; a .cso file holds the corresponding shader byte code.</source>
          <target state="new">A .hlsl file holds source code for the shader; a .cso file holds the corresponding shader byte code.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When you convert .hlsl files offline and provide .cso files with your game, you avoid the need to convert HLSL source files to byte code when your game loads.</source>
          <target state="new">When you convert .hlsl files offline and provide .cso files with your game, you avoid the need to convert HLSL source files to byte code when your game loads.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For instructional reasons, the Marble Maze project includes both the design-time format and the run-time format for many resources, but you only have to maintain the design-time formats in the source project for your own game because you can convert them to run-time formats when you need them.</source>
          <target state="new">For instructional reasons, the Marble Maze project includes both the design-time format and the run-time format for many resources, but you only have to maintain the design-time formats in the source project for your own game because you can convert them to run-time formats when you need them.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This documentation shows how to convert the design-time formats to the run-time formats.</source>
          <target state="new">This documentation shows how to convert the design-time formats to the run-time formats.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Application life cycle</source>
          <target state="new">Application life cycle</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Marble Maze follows the life cycle of a typical UWP app.</source>
          <target state="new">Marble Maze follows the life cycle of a typical UWP app.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more info about the life cycle of a UWP app, see <bpt id="p1">[</bpt>App lifecycle<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt243287)</ept>.</source>
          <target state="new">For more info about the life cycle of a UWP app, see <bpt id="p1">[</bpt>App lifecycle<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt243287)</ept>.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>When a UWP game initializes, it typically initializes runtime components such as Direct3D, Direct2D, and any input, audio, or physics libraries that it uses.</source>
          <target state="new">When a UWP game initializes, it typically initializes runtime components such as Direct3D, Direct2D, and any input, audio, or physics libraries that it uses.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>It also loads game-specific resources that are required before the game begins.</source>
          <target state="new">It also loads game-specific resources that are required before the game begins.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This initialization occurs one time during a game session.</source>
          <target state="new">This initialization occurs one time during a game session.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>After initialization, games typically run the <bpt id="p1">*</bpt>game loop<ept id="p1">*</ept>.</source>
          <target state="new">After initialization, games typically run the <bpt id="p1">*</bpt>game loop<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In this loop, games typically perform four actions: process Windows events, collect input, update scene objects, and render the scene.</source>
          <target state="new">In this loop, games typically perform four actions: process Windows events, collect input, update scene objects, and render the scene.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When the game updates the scene, it can apply the current input state to the scene objects and simulate physical events, such as object collisions.</source>
          <target state="new">When the game updates the scene, it can apply the current input state to the scene objects and simulate physical events, such as object collisions.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The game can also perform other activities such as playing sound effects or sending data over the network.</source>
          <target state="new">The game can also perform other activities such as playing sound effects or sending data over the network.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When the game renders the scene, it captures the current state of the scene and draws it to the display device.</source>
          <target state="new">When the game renders the scene, it captures the current state of the scene and draws it to the display device.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following sections describe these activities in greater detail.</source>
          <target state="new">The following sections describe these activities in greater detail.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Adding to the template</source>
          <target state="new">Adding to the template</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>DirectX 11 App (Universal Windows)<ept id="p1">*</ept> template creates a core window that you can render to with Direct3D.</source>
          <target state="new">The <bpt id="p1">*</bpt>DirectX 11 App (Universal Windows)<ept id="p1">*</ept> template creates a core window that you can render to with Direct3D.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The template also includes the <bpt id="p1">**</bpt>DeviceResources<ept id="p1">**</ept> class that creates all of the Direct3D device resources needed for rendering 3D content in a UWP app.</source>
          <target state="new">The template also includes the <bpt id="p1">**</bpt>DeviceResources<ept id="p1">**</ept> class that creates all of the Direct3D device resources needed for rendering 3D content in a UWP app.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AppMain<ept id="p1">**</ept> class creates the <bpt id="p2">**</bpt>MarbleMaze<ept id="p2">**</ept> class object, starts the loading of resources, loops to update the timer, and calls the <bpt id="p3">**</bpt>MarbleMaze<ept id="p3">**</ept> render method each frame.</source>
          <target state="new">The <bpt id="p1">**</bpt>AppMain<ept id="p1">**</ept> class creates the <bpt id="p2">**</bpt>MarbleMaze<ept id="p2">**</ept> class object, starts the loading of resources, loops to update the timer, and calls the <bpt id="p3">**</bpt>MarbleMaze<ept id="p3">**</ept> render method each frame.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CreateWindowSizeDependentResources<ept id="p1">**</ept>, Update, and Render methods for this class call the corresponding methods in the <bpt id="p2">**</bpt>MarbleMaze<ept id="p2">**</ept> class.</source>
          <target state="new">The <bpt id="p1">**</bpt>CreateWindowSizeDependentResources<ept id="p1">**</ept>, Update, and Render methods for this class call the corresponding methods in the <bpt id="p2">**</bpt>MarbleMaze<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following example shows where the <bpt id="p1">**</bpt>AppMain<ept id="p1">**</ept> constructor creates the <bpt id="p2">**</bpt>MarbleMaze<ept id="p2">**</ept> class object.</source>
          <target state="new">The following example shows where the <bpt id="p1">**</bpt>AppMain<ept id="p1">**</ept> constructor creates the <bpt id="p2">**</bpt>MarbleMaze<ept id="p2">**</ept> class object.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The device resources class is passed to the class so it can use the Direct3D objects for rendering.</source>
          <target state="new">The device resources class is passed to the class so it can use the Direct3D objects for rendering.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AppMain<ept id="p1">**</ept> class also starts loading the deferred resources for the game.</source>
          <target state="new">The <bpt id="p1">**</bpt>AppMain<ept id="p1">**</ept> class also starts loading the deferred resources for the game.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>See the next section for more detail.</source>
          <target state="new">See the next section for more detail.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DirectXPage<ept id="p1">**</ept> constructor sets up the event handlers, creates the <bpt id="p2">**</bpt>DeviceResources<ept id="p2">**</ept> class, and creates the <bpt id="p3">**</bpt>AppMain<ept id="p3">**</ept> class.</source>
          <target state="new">The <bpt id="p1">**</bpt>DirectXPage<ept id="p1">**</ept> constructor sets up the event handlers, creates the <bpt id="p2">**</bpt>DeviceResources<ept id="p2">**</ept> class, and creates the <bpt id="p3">**</bpt>AppMain<ept id="p3">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When the handlers for these events are called, they pass the input to the <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class.</source>
          <target state="new">When the handlers for these events are called, they pass the input to the <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Loading game assets in the background</source>
          <target state="new">Loading game assets in the background</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>To ensure that your game can respond to window events within 5 seconds after it is launched, we recommend that you load your game assets asynchronously, or in the background.</source>
          <target state="new">To ensure that your game can respond to window events within 5 seconds after it is launched, we recommend that you load your game assets asynchronously, or in the background.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>As assets load in the background, your game can respond to window events.</source>
          <target state="new">As assets load in the background, your game can respond to window events.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  You can also display the main menu when it is ready, and allow the remaining assets to continue loading in the background.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  You can also display the main menu when it is ready, and allow the remaining assets to continue loading in the background.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If the user selects an option from the menu before all resources are loaded, you can indicate that scene resources are continuing to load by displaying a progress bar, for example.</source>
          <target state="new">If the user selects an option from the menu before all resources are loaded, you can indicate that scene resources are continuing to load by displaying a progress bar, for example.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Even if your game contains relatively few game assets, it is good practice to load them asynchronously for two reasons.</source>
          <target state="new">Even if your game contains relatively few game assets, it is good practice to load them asynchronously for two reasons.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>One reason is that it is difficult to guarantee that all of your resources will load quickly on all devices and all configurations.</source>
          <target state="new">One reason is that it is difficult to guarantee that all of your resources will load quickly on all devices and all configurations.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Also, by incorporating asynchronous loading early, your code is ready to scale as you add functionality.</source>
          <target state="new">Also, by incorporating asynchronous loading early, your code is ready to scale as you add functionality.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Asynchronous asset loading begins with the <bpt id="p1">**</bpt>AppMain::Load<ept id="p1">**</ept> method.</source>
          <target state="new">Asynchronous asset loading begins with the <bpt id="p1">**</bpt>AppMain::Load<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This method uses the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>task Class (Concurrency Runtime)<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh750113.aspx)</ept> class to load game assets in the background.</source>
          <target state="new">This method uses the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>task Class (Concurrency Runtime)<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh750113.aspx)</ept> class to load game assets in the background.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class defines the <bpt id="p2">*</bpt>m\_deferredResourcesReady<ept id="p2">*</ept> flag to indicate that asynchronous loading is complete.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class defines the <bpt id="p2">*</bpt>m\_deferredResourcesReady<ept id="p2">*</ept> flag to indicate that asynchronous loading is complete.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method loads the game resources and then sets this flag.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method loads the game resources and then sets this flag.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The update (<bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept>) and render (<bpt id="p2">**</bpt>MarbleMaze::Render<ept id="p2">**</ept>) phases of the app check this flag.</source>
          <target state="new">The update (<bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept>) and render (<bpt id="p2">**</bpt>MarbleMaze::Render<ept id="p2">**</ept>) phases of the app check this flag.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>When this flag is set, the game continues as normal.</source>
          <target state="new">When this flag is set, the game continues as normal.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If the flag is not yet set, the game shows the loading screen.</source>
          <target state="new">If the flag is not yet set, the game shows the loading screen.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For more information about asynchronous programming for UWP apps, see <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.</source>
          <target state="new">For more information about asynchronous programming for UWP apps, see <bpt id="p1">[</bpt>Asynchronous programming in C++<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt187334)</ept>.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept>   If you’re writing game code that is part of a Windows Runtime C++ Library (in other words, a DLL), consider whether to read <bpt id="p2">[</bpt>Creating Asynchronous Operations in C++ for Windows Store Apps<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh750113.aspx)</ept> to learn how to create asynchronous operations that can be consumed by apps and other libraries.</source>
          <target state="new"><bpt id="p1">**</bpt>Tip<ept id="p1">**</ept>   If you’re writing game code that is part of a Windows Runtime C++ Library (in other words, a DLL), consider whether to read <bpt id="p2">[</bpt>Creating Asynchronous Operations in C++ for Windows Store Apps<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh750113.aspx)</ept> to learn how to create asynchronous operations that can be consumed by apps and other libraries.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The game loop</source>
          <target state="new">The game loop</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DirectPage::OnRendering<ept id="p1">**</ept> method runs the main game loop.</source>
          <target state="new">The <bpt id="p1">**</bpt>DirectPage::OnRendering<ept id="p1">**</ept> method runs the main game loop.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This method is called every frame.</source>
          <target state="new">This method is called every frame.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>To help separate view and window code from game-specific code, we implemented the <bpt id="p1">**</bpt>DirectXApp::Run<ept id="p1">**</ept> method to forward update and render calls to the <bpt id="p2">**</bpt>MarbleMaze<ept id="p2">**</ept> object.</source>
          <target state="new">To help separate view and window code from game-specific code, we implemented the <bpt id="p1">**</bpt>DirectXApp::Run<ept id="p1">**</ept> method to forward update and render calls to the <bpt id="p2">**</bpt>MarbleMaze<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DirectPage::OnRendering<ept id="p1">**</ept> method also defines the game timer, which is used for animation and physics simulation.</source>
          <target state="new">The <bpt id="p1">**</bpt>DirectPage::OnRendering<ept id="p1">**</ept> method also defines the game timer, which is used for animation and physics simulation.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The following example shows the <bpt id="p1">**</bpt>DirectPage::OnRendering<ept id="p1">**</ept> method, which includes the main game loop.</source>
          <target state="new">The following example shows the <bpt id="p1">**</bpt>DirectPage::OnRendering<ept id="p1">**</ept> method, which includes the main game loop.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The game loop updates the total time and frame time variables, and then updates and renders the scene.</source>
          <target state="new">The game loop updates the total time and frame time variables, and then updates and renders the scene.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This also makes sure that content is only rendered when the window is visible.</source>
          <target state="new">This also makes sure that content is only rendered when the window is visible.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The state machine</source>
          <target state="new">The state machine</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Games typically contain a <bpt id="p1">*</bpt>state machine<ept id="p1">*</ept> (also known as a <bpt id="p2">*</bpt>finite state machine<ept id="p2">*</ept>, or FSM) to control the flow and order of the game logic.</source>
          <target state="new">Games typically contain a <bpt id="p1">*</bpt>state machine<ept id="p1">*</ept> (also known as a <bpt id="p2">*</bpt>finite state machine<ept id="p2">*</ept>, or FSM) to control the flow and order of the game logic.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A state machine contains a given number of states and the ability to transition among them.</source>
          <target state="new">A state machine contains a given number of states and the ability to transition among them.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>A state machine typically starts from an <bpt id="p1">*</bpt>initial<ept id="p1">*</ept> state, transitions to one or more <bpt id="p2">*</bpt>intermediate<ept id="p2">*</ept> states, and possibly ends at a <bpt id="p3">*</bpt>terminal<ept id="p3">*</ept> state.</source>
          <target state="new">A state machine typically starts from an <bpt id="p1">*</bpt>initial<ept id="p1">*</ept> state, transitions to one or more <bpt id="p2">*</bpt>intermediate<ept id="p2">*</ept> states, and possibly ends at a <bpt id="p3">*</bpt>terminal<ept id="p3">*</ept> state.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A game loop often uses a state machine so that it can perform the logic that is specific to the current game state.</source>
          <target state="new">A game loop often uses a state machine so that it can perform the logic that is specific to the current game state.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Marble Maze defines the <bpt id="p1">**</bpt>GameState<ept id="p1">**</ept> enumeration, which defines each possible state of the game.</source>
          <target state="new">Marble Maze defines the <bpt id="p1">**</bpt>GameState<ept id="p1">**</ept> enumeration, which defines each possible state of the game.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MainMenu<ept id="p1">**</ept> state, for example, defines that the main menu appears, and that the game is not active.</source>
          <target state="new">The <bpt id="p1">**</bpt>MainMenu<ept id="p1">**</ept> state, for example, defines that the main menu appears, and that the game is not active.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Conversely, the <bpt id="p1">**</bpt>InGameActive<ept id="p1">**</ept> state defines that the game is active, and that the menu does not appear.</source>
          <target state="new">Conversely, the <bpt id="p1">**</bpt>InGameActive<ept id="p1">**</ept> state defines that the game is active, and that the menu does not appear.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class defines the <bpt id="p2">**</bpt>m\_gameState<ept id="p2">**</ept> member variable to hold the active game state.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class defines the <bpt id="p2">**</bpt>m\_gameState<ept id="p2">**</ept> member variable to hold the active game state.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MarbleMaze::Render<ept id="p2">**</ept> methods use the switch statement to perform logic for the current state.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> and <bpt id="p2">**</bpt>MarbleMaze::Render<ept id="p2">**</ept> methods use the switch statement to perform logic for the current state.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The following example shows what this switch statement might look like for the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method (details are removed to illustrate the structure).</source>
          <target state="new">The following example shows what this switch statement might look like for the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method (details are removed to illustrate the structure).</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>When game logic or rendering depends on a specific game state, we emphasize it in this documentation.</source>
          <target state="new">When game logic or rendering depends on a specific game state, we emphasize it in this documentation.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Handling app and window events</source>
          <target state="new">Handling app and window events</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The Windows Runtime provides an object-oriented event-handling system so that you can more easily manage Windows messages.</source>
          <target state="new">The Windows Runtime provides an object-oriented event-handling system so that you can more easily manage Windows messages.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To consume an event in an application, you must provide an event handler, or event-handling method, that responds to the event.</source>
          <target state="new">To consume an event in an application, you must provide an event handler, or event-handling method, that responds to the event.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You must also register the event handler with the event source.</source>
          <target state="new">You must also register the event handler with the event source.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>This process is often referred to as event wiring.</source>
          <target state="new">This process is often referred to as event wiring.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Supporting suspend, resume, and restart</source>
          <target state="new">Supporting suspend, resume, and restart</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Marble Maze is suspended when the user switches away from it or when Windows enters a low power state.</source>
          <target state="new">Marble Maze is suspended when the user switches away from it or when Windows enters a low power state.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The game is resumed when the user moves it to the foreground or when Windows comes out of a low power state.</source>
          <target state="new">The game is resumed when the user moves it to the foreground or when Windows comes out of a low power state.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Generally, you don't close apps.</source>
          <target state="new">Generally, you don't close apps.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Windows can terminate the app when it's in the suspended state and Windows requires the resources, such as memory, that the app is using.</source>
          <target state="new">Windows can terminate the app when it's in the suspended state and Windows requires the resources, such as memory, that the app is using.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Windows notifies an app when it is about to be suspended or resumed, but it doesn't notify the app when it's about to be terminated.</source>
          <target state="new">Windows notifies an app when it is about to be suspended or resumed, but it doesn't notify the app when it's about to be terminated.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Therefore, your app must be able to save—at the point when Windows notifies your app that it is about to be suspended—any data that would be required to restore the current user state when the app is restarted.</source>
          <target state="new">Therefore, your app must be able to save—at the point when Windows notifies your app that it is about to be suspended—any data that would be required to restore the current user state when the app is restarted.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If your app has significant user state that is expensive to save, you may also need to save state regularly, even before your app receives the suspend notification.</source>
          <target state="new">If your app has significant user state that is expensive to save, you may also need to save state regularly, even before your app receives the suspend notification.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Marble Maze responds to suspend and resume notifications for two reasons:</source>
          <target state="new">Marble Maze responds to suspend and resume notifications for two reasons:</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>When the app is suspended, the game saves the current game state and pauses audio playback.</source>
          <target state="new">When the app is suspended, the game saves the current game state and pauses audio playback.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>When the app is resumed, the game resumes audio playback.</source>
          <target state="new">When the app is resumed, the game resumes audio playback.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>When the app is closed and later restarted, the game resumes from its previous state.</source>
          <target state="new">When the app is closed and later restarted, the game resumes from its previous state.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Marble Maze performs the following tasks to support suspend and resume:</source>
          <target state="new">Marble Maze performs the following tasks to support suspend and resume:</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>It saves its state to persistent storage at key points in the game, such as when the user reaches a checkpoint.</source>
          <target state="new">It saves its state to persistent storage at key points in the game, such as when the user reaches a checkpoint.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>It responds to suspend notifications by saving its state to persistent storage.</source>
          <target state="new">It responds to suspend notifications by saving its state to persistent storage.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>It responds to resume notifications by loading its state from persistent storage.</source>
          <target state="new">It responds to resume notifications by loading its state from persistent storage.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>It also loads the previous state during startup.</source>
          <target state="new">It also loads the previous state during startup.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>To support suspend and resume, Marble Maze defines the <bpt id="p1">**</bpt>PersistentState<ept id="p1">**</ept> class.</source>
          <target state="new">To support suspend and resume, Marble Maze defines the <bpt id="p1">**</bpt>PersistentState<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>(See PersistentState.h and PersistentState.cpp).</source>
          <target state="new">(See PersistentState.h and PersistentState.cpp).</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This class uses the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::Foundation::Collections::IPropertySet<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br226054)</ept> interface to read and write properties.</source>
          <target state="new">This class uses the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows::Foundation::Collections::IPropertySet<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br226054)</ept> interface to read and write properties.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>PersistentState<ept id="p1">**</ept> class provides methods that read and write primitive data types (such as <bpt id="p2">**</bpt>bool<ept id="p2">**</ept>, <bpt id="p3">**</bpt>int<ept id="p3">**</ept>, <bpt id="p4">**</bpt>float<ept id="p4">**</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>XMFLOAT3<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ee419475)</ept>, and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Platform::String<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/hh755812.aspx)</ept>), from and to a backing store.</source>
          <target state="new">The <bpt id="p1">**</bpt>PersistentState<ept id="p1">**</ept> class provides methods that read and write primitive data types (such as <bpt id="p2">**</bpt>bool<ept id="p2">**</ept>, <bpt id="p3">**</bpt>int<ept id="p3">**</ept>, <bpt id="p4">**</bpt>float<ept id="p4">**</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>XMFLOAT3<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ee419475)</ept>, and <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Platform::String<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/apps/hh755812.aspx)</ept>), from and to a backing store.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class holds a <bpt id="p2">**</bpt>PersistentState<ept id="p2">**</ept> object.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class holds a <bpt id="p2">**</bpt>PersistentState<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> constructor initializes this object and provides the local application data store as the backing data store.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> constructor initializes this object and provides the local application data store as the backing data store.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Marble Maze saves its state when the marble passes over a checkpoint or the goal (in the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method), and when the window loses focus (in the <bpt id="p2">**</bpt>MarbleMaze::OnFocusChange<ept id="p2">**</ept> method).</source>
          <target state="new">Marble Maze saves its state when the marble passes over a checkpoint or the goal (in the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method), and when the window loses focus (in the <bpt id="p2">**</bpt>MarbleMaze::OnFocusChange<ept id="p2">**</ept> method).</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If your game holds a large amount of state data, we recommend that you occasionally save state to persistent storage in a similar manner because you only have a few seconds to respond to the suspend notification.</source>
          <target state="new">If your game holds a large amount of state data, we recommend that you occasionally save state to persistent storage in a similar manner because you only have a few seconds to respond to the suspend notification.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Therefore, when your app receives a suspend notification, it only has to save the state data that has changed.</source>
          <target state="new">Therefore, when your app receives a suspend notification, it only has to save the state data that has changed.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>To respond to suspend and resume notifications, the <bpt id="p1">**</bpt>DirectXPage<ept id="p1">**</ept> class defines the <bpt id="p2">**</bpt>SaveInternalState<ept id="p2">**</ept> and <bpt id="p3">**</bpt>LoadInternalState<ept id="p3">**</ept> methods that are called on suspend and resume.</source>
          <target state="new">To respond to suspend and resume notifications, the <bpt id="p1">**</bpt>DirectXPage<ept id="p1">**</ept> class defines the <bpt id="p2">**</bpt>SaveInternalState<ept id="p2">**</ept> and <bpt id="p3">**</bpt>LoadInternalState<ept id="p3">**</ept> methods that are called on suspend and resume.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::OnSuspending<ept id="p1">**</ept> method handles the suspend event and the <bpt id="p2">**</bpt>MarbleMaze::OnResuming<ept id="p2">**</ept> method handles the resume event.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::OnSuspending<ept id="p1">**</ept> method handles the suspend event and the <bpt id="p2">**</bpt>MarbleMaze::OnResuming<ept id="p2">**</ept> method handles the resume event.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::OnSuspending<ept id="p1">**</ept> method saves game state and suspends audio.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::OnSuspending<ept id="p1">**</ept> method saves game state and suspends audio.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::SaveState<ept id="p1">**</ept> method saves game state values such as the current position and velocity of the marble, the most recent checkpoint, and the high-score table.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::SaveState<ept id="p1">**</ept> method saves game state values such as the current position and velocity of the marble, the most recent checkpoint, and the high-score table.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>When the game resumes, it only has to resume audio.</source>
          <target state="new">When the game resumes, it only has to resume audio.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>It doesn't have to load state from persistent storage because the state is already loaded in memory.</source>
          <target state="new">It doesn't have to load state from persistent storage because the state is already loaded in memory.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>How the game suspends and resumes audio is explained in the document <bpt id="p1">[</bpt>Adding audio to the Marble Maze sample<ept id="p1">](adding-audio-to-the-marble-maze-sample.md)</ept>.</source>
          <target state="new">How the game suspends and resumes audio is explained in the document <bpt id="p1">[</bpt>Adding audio to the Marble Maze sample<ept id="p1">](adding-audio-to-the-marble-maze-sample.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>To support restart, the <bpt id="p1">**</bpt>MarbleMaze::Initialize<ept id="p1">**</ept> method, which is called during startup, calls the <bpt id="p2">**</bpt>MarbleMaze::LoadState<ept id="p2">**</ept> method.</source>
          <target state="new">To support restart, the <bpt id="p1">**</bpt>MarbleMaze::Initialize<ept id="p1">**</ept> method, which is called during startup, calls the <bpt id="p2">**</bpt>MarbleMaze::LoadState<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::LoadState<ept id="p1">**</ept> method reads and applies the state to the game objects.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::LoadState<ept id="p1">**</ept> method reads and applies the state to the game objects.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This method also sets the current game state to paused if the game was paused or active when it was suspended.</source>
          <target state="new">This method also sets the current game state to paused if the game was paused or active when it was suspended.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>We pause the game so that the user is not surprised by unexpected activity.</source>
          <target state="new">We pause the game so that the user is not surprised by unexpected activity.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>It also moves to the main menu if the game was not in a gameplay state when it was suspended.</source>
          <target state="new">It also moves to the main menu if the game was not in a gameplay state when it was suspended.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  Marble Maze doesn't distinguish between cold starting—that is, starting for the first time without a prior suspend event—and resuming from a suspended state.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  Marble Maze doesn't distinguish between cold starting—that is, starting for the first time without a prior suspend event—and resuming from a suspended state.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>This is recommended design for all UWP apps.</source>
          <target state="new">This is recommended design for all UWP apps.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>For more examples that demonstrate how to store and retrieve settings and files from the local application data store, see <bpt id="p1">[</bpt>Quickstart: Local application data<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh465118)</ept>.</source>
          <target state="new">For more examples that demonstrate how to store and retrieve settings and files from the local application data store, see <bpt id="p1">[</bpt>Quickstart: Local application data<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh465118)</ept>.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>For more info about application data, see <bpt id="p1">[</bpt>Store and retrieve settings and other app data<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt299098)</ept>.</source>
          <target state="new">For more info about application data, see <bpt id="p1">[</bpt>Store and retrieve settings and other app data<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt299098)</ept>.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>Adding visual content to the Marble Maze sample<ept id="p1">](adding-visual-content-to-the-marble-maze-sample.md)</ept> for information about some of the key practices to keep in mind when you work with visual resources.</source>
          <target state="new">Read <bpt id="p1">[</bpt>Adding visual content to the Marble Maze sample<ept id="p1">](adding-visual-content-to-the-marble-maze-sample.md)</ept> for information about some of the key practices to keep in mind when you work with visual resources.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Adding visual content to the Marble Maze sample</source>
          <target state="new">Adding visual content to the Marble Maze sample</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Marble Maze sample fundamentals</source>
          <target state="new">Marble Maze sample fundamentals</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Developing Marble Maze, a UWP game in C++ and DirectX</source>
          <target state="new">Developing Marble Maze, a UWP game in C++ and DirectX</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>