<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a3fe5511da03533b19bfb1abeb2222ff9a92f6fa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\draw-to-the-screen.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Draw to the screen</source>
          <target state="new">Draw to the screen</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Finally, we port the code that draws the spinning cube to the screen.</source>
          <target state="new">Finally, we port the code that draws the spinning cube to the screen.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Draw to the screen</source>
          <target state="new">Draw to the screen</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Important APIs</source>
          <target state="new">Important APIs</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ID3D11Texture2D</source>
          <target state="new">ID3D11Texture2D</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ID3D11RenderTargetView</source>
          <target state="new">ID3D11RenderTargetView</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>IDXGISwapChain1</source>
          <target state="new">IDXGISwapChain1</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Finally, we port the code that draws the spinning cube to the screen.</source>
          <target state="new">Finally, we port the code that draws the spinning cube to the screen.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In OpenGL ES 2.0, your drawing context is defined as an EGLContext type, which contains the window and surface parameters as well the resources necessary for drawing to the render targets that will be used to compose the final image displayed to the window.</source>
          <target state="new">In OpenGL ES 2.0, your drawing context is defined as an EGLContext type, which contains the window and surface parameters as well the resources necessary for drawing to the render targets that will be used to compose the final image displayed to the window.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You use this context to configure the graphics resources to correctly display the results of your shader pipeline on the display.</source>
          <target state="new">You use this context to configure the graphics resources to correctly display the results of your shader pipeline on the display.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>One of the primary resources is the "back buffer" (or "frame buffer object") that contains the final, composited render targets, ready for presentation to the display.</source>
          <target state="new">One of the primary resources is the "back buffer" (or "frame buffer object") that contains the final, composited render targets, ready for presentation to the display.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>With Direct3D, the process of configuring the graphics resources for drawing to the display is more didactic, and requires quite a few more APIs.</source>
          <target state="new">With Direct3D, the process of configuring the graphics resources for drawing to the display is more didactic, and requires quite a few more APIs.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>(A Microsoft Visual Studio Direct3D template can significantly simplify this process, though!) To obtain a context (called a Direct3D device context), you must first obtain an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> object, and use it to create and configure an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> object.</source>
          <target state="new">(A Microsoft Visual Studio Direct3D template can significantly simplify this process, though!) To obtain a context (called a Direct3D device context), you must first obtain an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept> object, and use it to create and configure an <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept> object.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These two objects are used in conjunction to configure the specific resources you need for drawing to the display.</source>
          <target state="new">These two objects are used in conjunction to configure the specific resources you need for drawing to the display.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In short, the DXGI APIs contain primarily APIs for managing resources that directly pertain to the graphics adapter, and Direct3D contains the APIs that allow you to interface between the GPU and your main program running on the CPU.</source>
          <target state="new">In short, the DXGI APIs contain primarily APIs for managing resources that directly pertain to the graphics adapter, and Direct3D contains the APIs that allow you to interface between the GPU and your main program running on the CPU.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For the purposes of comparison in this sample, here are the relevant types from each API:</source>
          <target state="new">For the purposes of comparison in this sample, here are the relevant types from each API:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept>: provides a virtual representation of the graphics device and its resources.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept>: provides a virtual representation of the graphics device and its resources.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>: provides the interface to configure buffers and issue rendering commands.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>: provides the interface to configure buffers and issue rendering commands.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept>: the swap chain is analogous to the back buffer in OpenGL ES 2.0.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept>: the swap chain is analogous to the back buffer in OpenGL ES 2.0.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It is the region of memory on the graphics adapter that contains the final rendered image(s) for display.</source>
          <target state="new">It is the region of memory on the graphics adapter that contains the final rendered image(s) for display.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is called the "swap chain" because it has several buffers that can be written to and "swapped" to present the latest render to the screen.</source>
          <target state="new">It is called the "swap chain" because it has several buffers that can be written to and "swapped" to present the latest render to the screen.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11RenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept>: this contains the 2D bitmap buffer that the Direct3D device context draws into, and which is presented by the swap chain.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11RenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept>: this contains the 2D bitmap buffer that the Direct3D device context draws into, and which is presented by the swap chain.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>As with OpenGL ES 2.0, you can have multiple render targets, some of which are not bound to the swap chain but are used for multi-pass shading techniques.</source>
          <target state="new">As with OpenGL ES 2.0, you can have multiple render targets, some of which are not bound to the swap chain but are used for multi-pass shading techniques.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the template, the renderer object contains the following fields:</source>
          <target state="new">In the template, the renderer object contains the following fields:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Direct3D 11: Device and device context declarations</source>
          <target state="new">Direct3D 11: Device and device context declarations</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Here's how the back buffer is configured as a render target and provided to the swap chain.</source>
          <target state="new">Here's how the back buffer is configured as a render target and provided to the swap chain.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The Direct3D runtime implicitly creates an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff471343)</ept> for the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Texture2D<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</ept>, which represents the texture as a "back buffer" that the swap chain can use for display.</source>
          <target state="new">The Direct3D runtime implicitly creates an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISurface1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff471343)</ept> for the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11Texture2D<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</ept>, which represents the texture as a "back buffer" that the swap chain can use for display.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The initialization and configuration of the Direct3D device and device context, as well as the render targets, can be found in the custom <bpt id="p1">**</bpt>CreateDeviceResources<ept id="p1">**</ept> and <bpt id="p2">**</bpt>CreateWindowSizeDependentResources<ept id="p2">**</ept> methods in the Direct3D template.</source>
          <target state="new">The initialization and configuration of the Direct3D device and device context, as well as the render targets, can be found in the custom <bpt id="p1">**</bpt>CreateDeviceResources<ept id="p1">**</ept> and <bpt id="p2">**</bpt>CreateWindowSizeDependentResources<ept id="p2">**</ept> methods in the Direct3D template.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more info on Direct3D device context as it relates to EGL and the EGLContext type, read <bpt id="p1">[</bpt>Port EGL code to DXGI and Direct3D<ept id="p1">](moving-from-egl-to-dxgi.md)</ept>.</source>
          <target state="new">For more info on Direct3D device context as it relates to EGL and the EGLContext type, read <bpt id="p1">[</bpt>Port EGL code to DXGI and Direct3D<ept id="p1">](moving-from-egl-to-dxgi.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Instructions</source>
          <target state="new">Instructions</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Step 1: Rendering the scene and displaying it</source>
          <target state="new">Step 1: Rendering the scene and displaying it</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>After updating the cube data (in this case, by rotating it slightly around the y axis), the Render method sets the viewport to the dimensions of he drawing context (an EGLContext).</source>
          <target state="new">After updating the cube data (in this case, by rotating it slightly around the y axis), the Render method sets the viewport to the dimensions of he drawing context (an EGLContext).</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This context contains the color buffer that will be displayed to the window surface (an EGLSurface), using the configured display (EGLDisplay).</source>
          <target state="new">This context contains the color buffer that will be displayed to the window surface (an EGLSurface), using the configured display (EGLDisplay).</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>At this time, the example updates the vertex data attributes, re-binds the index buffer, draws the cube, and swaps in color buffer drawn by the shading pipeline to the display surface.</source>
          <target state="new">At this time, the example updates the vertex data attributes, re-binds the index buffer, draws the cube, and swaps in color buffer drawn by the shading pipeline to the display surface.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>OpenGL ES 2.0: Rendering a frame for display</source>
          <target state="new">OpenGL ES 2.0: Rendering a frame for display</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In Direct3D 11, the process is very similar.</source>
          <target state="new">In Direct3D 11, the process is very similar.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(We're assuming that you're using the viewport and render target configuration from the Direct3D template.</source>
          <target state="new">(We're assuming that you're using the viewport and render target configuration from the Direct3D template.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Update the constant buffers (the model-view-projection matrix, in this case) with calls to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::UpdateSubresource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446790)</ept>.</source>
          <target state="new">Update the constant buffers (the model-view-projection matrix, in this case) with calls to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::UpdateSubresource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446790)</ept>.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Set the vertex buffer with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::IASetVertexBuffers<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476456)</ept>.</source>
          <target state="new">Set the vertex buffer with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::IASetVertexBuffers<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476456)</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Set the index buffer with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::IASetIndexBuffer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476453)</ept>.</source>
          <target state="new">Set the index buffer with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::IASetIndexBuffer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476453)</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Set the specific triangle topology (a triangle list) with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::IASetPrimitiveTopology<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476455)</ept>.</source>
          <target state="new">Set the specific triangle topology (a triangle list) with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::IASetPrimitiveTopology<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476455)</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Set the input layout of the vertex buffer with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::IASetInputLayout<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476454)</ept>.</source>
          <target state="new">Set the input layout of the vertex buffer with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::IASetInputLayout<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476454)</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Bind the vertex shader with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::VSSetShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476493)</ept>.</source>
          <target state="new">Bind the vertex shader with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::VSSetShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476493)</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Bind the fragment shader with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::PSSetShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476472)</ept>.</source>
          <target state="new">Bind the fragment shader with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::PSSetShader<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476472)</ept>.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Send the indexed vertices through the shaders and output the color results to the render target buffer with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::DrawIndexed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476409)</ept>.</source>
          <target state="new">Send the indexed vertices through the shaders and output the color results to the render target buffer with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext1::DrawIndexed<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476409)</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Display the render target buffer with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept>.</source>
          <target state="new">Display the render target buffer with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Direct3D 11: Rendering a frame for display</source>
          <target state="new">Direct3D 11: Rendering a frame for display</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Once <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept> is called, your frame is output to the configured display.</source>
          <target state="new">Once <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept> is called, your frame is output to the configured display.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Previous step</source>
          <target state="new">Previous step</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Port the GLSL</source>
          <target state="new">Port the GLSL</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="new">Remarks</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This example glosses over much of the complexity that goes into configuring device resources, especially for Universal Windows Platform (UWP) DirectX apps.</source>
          <target state="new">This example glosses over much of the complexity that goes into configuring device resources, especially for Universal Windows Platform (UWP) DirectX apps.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>We suggest you review the full template code, especially the parts that perform the window and device resource setup and management.</source>
          <target state="new">We suggest you review the full template code, especially the parts that perform the window and device resource setup and management.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>UWP apps have to support rotation events as well as suspend/resume events, and the template demonstrates best practices for handling the loss of an interface or a change in the display parameters.</source>
          <target state="new">UWP apps have to support rotation events as well as suspend/resume events, and the template demonstrates best practices for handling the loss of an interface or a change in the display parameters.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>How to: port a simple OpenGL ES 2.0 renderer to Direct3D 11</source>
          <target state="new">How to: port a simple OpenGL ES 2.0 renderer to Direct3D 11</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Port the shader objects</source>
          <target state="new">Port the shader objects</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Port the GLSL</source>
          <target state="new">Port the GLSL</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Draw to the screen</source>
          <target state="new">Draw to the screen</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>