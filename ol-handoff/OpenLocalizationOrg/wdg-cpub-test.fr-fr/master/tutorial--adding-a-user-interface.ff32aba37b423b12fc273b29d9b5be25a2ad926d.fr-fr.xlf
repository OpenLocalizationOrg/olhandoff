<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb15668e1b1e02d8c5087839776ff38a69ec2310</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\tutorial--adding-a-user-interface.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Add a user interface</source>
          <target state="new">Add a user interface</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You've seen how the sample game implements the main game object as well as the basic rendering framework.</source>
          <target state="new">You've seen how the sample game implements the main game object as well as the basic rendering framework.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Add a user interface</source>
          <target state="new">Add a user interface</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You've seen how the sample game implements the main game object as well as the basic rendering framework.</source>
          <target state="new">You've seen how the sample game implements the main game object as well as the basic rendering framework.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Now, let's look at how the sample game provides feedback about game state to the player.</source>
          <target state="new">Now, let's look at how the sample game provides feedback about game state to the player.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Here, you learn how you can add simple menu options and heads-up display components on top of the 3-D graphics pipeline output.</source>
          <target state="new">Here, you learn how you can add simple menu options and heads-up display components on top of the 3-D graphics pipeline output.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Objective</source>
          <target state="new">Objective</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To add basic user interface graphics and behaviors to a Universal Windows Platform (UWP) DirectX game.</source>
          <target state="new">To add basic user interface graphics and behaviors to a Universal Windows Platform (UWP) DirectX game.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The user interface overlay</source>
          <target state="new">The user interface overlay</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>While there are many ways to display text and user interface elements in a DirectX game, we are going to focus on one, <bpt id="p1">[</bpt>Direct2D<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dd370990.aspx)</ept> (with <bpt id="p2">[</bpt>DirectWrite<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/dd368038)</ept> for the text elements).</source>
          <target state="new">While there are many ways to display text and user interface elements in a DirectX game, we are going to focus on one, <bpt id="p1">[</bpt>Direct2D<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dd370990.aspx)</ept> (with <bpt id="p2">[</bpt>DirectWrite<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/dd368038)</ept> for the text elements).</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>First, let's be clear about what Direct2D is not.</source>
          <target state="new">First, let's be clear about what Direct2D is not.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It's not specifically designed for user interfaces or layouts, like HTML or XAML.</source>
          <target state="new">It's not specifically designed for user interfaces or layouts, like HTML or XAML.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It doesn't provide user interface components, like list boxes or buttons; and it doesn't provide layout components like divs, tables, or grids.</source>
          <target state="new">It doesn't provide user interface components, like list boxes or buttons; and it doesn't provide layout components like divs, tables, or grids.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Direct2D is a set of 2-D drawing APIs used to draw pixel-based primitives and effects.</source>
          <target state="new">Direct2D is a set of 2-D drawing APIs used to draw pixel-based primitives and effects.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When starting out with Direct2D, keep it simple.</source>
          <target state="new">When starting out with Direct2D, keep it simple.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Complex layouts and interface behaviors need time and planning.</source>
          <target state="new">Complex layouts and interface behaviors need time and planning.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If your game requires a complex user interface to play, like those found in simulation and strategy games, consider XAML instead.</source>
          <target state="new">If your game requires a complex user interface to play, like those found in simulation and strategy games, consider XAML instead.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(For info about developing a user interface with XAML in a UWP DirectX game, see <bpt id="p1">[</bpt>Extending the game sample<ept id="p1">](tutorial-resources.md)</ept>.)</source>
          <target state="new">(For info about developing a user interface with XAML in a UWP DirectX game, see <bpt id="p1">[</bpt>Extending the game sample<ept id="p1">](tutorial-resources.md)</ept>.)</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this game sample, we have two major UI components: the heads-up display for the score and in-game controls; and an overlay used to display game state text and options (such as pause info and level start options).</source>
          <target state="new">In this game sample, we have two major UI components: the heads-up display for the score and in-game controls; and an overlay used to display game state text and options (such as pause info and level start options).</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Using Direct2D for a heads-up display</source>
          <target state="new">Using Direct2D for a heads-up display</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This is the in-game heads-up display for the game sample without the game visuals.</source>
          <target state="new">This is the in-game heads-up display for the game sample without the game visuals.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It's simple and uncluttered, allowing the player to focus on navigating the 3-D world and shooting the targets.</source>
          <target state="new">It's simple and uncluttered, allowing the player to focus on navigating the 3-D world and shooting the targets.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A good interface or heads-up display must never obfuscate the ability of the player to process and react to the events in the game.</source>
          <target state="new">A good interface or heads-up display must never obfuscate the ability of the player to process and react to the events in the game.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>a screen shot of the game overlay</source>
          <target state="new">a screen shot of the game overlay</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As you can see, the overlay consists of basic primitives: two intersecting line segments for the cross hairs, and two rectangles for the <bpt id="p1">[</bpt>move-look controller<ept id="p1">](tutorial--adding-controls.md)</ept>.</source>
          <target state="new">As you can see, the overlay consists of basic primitives: two intersecting line segments for the cross hairs, and two rectangles for the <bpt id="p1">[</bpt>move-look controller<ept id="p1">](tutorial--adding-controls.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the upper-right corner, DirectWrite text informs the player of the current number of successful hits, the number of shots the player has made, the time remaining in the level, and the current level number.</source>
          <target state="new">In the upper-right corner, DirectWrite text informs the player of the current number of successful hits, the number of shots the player has made, the time remaining in the level, and the current level number.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The in-game heads-up display state of the overlay is drawn in the <bpt id="p1">**</bpt>Render<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>GameHud<ept id="p2">**</ept> class, and is coded like this:</source>
          <target state="new">The in-game heads-up display state of the overlay is drawn in the <bpt id="p1">**</bpt>Render<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>GameHud<ept id="p2">**</ept> class, and is coded like this:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this code, the Direct2D render target established for the overlay is updated to reflect the changes in the number of hits, the time remaining, and the level number.</source>
          <target state="new">In this code, the Direct2D render target established for the overlay is updated to reflect the changes in the number of hits, the time remaining, and the level number.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The rectangles are drawn with calls to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DrawRect<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd371902)</ept>, and the cross hairs are drawn with a pair of calls to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DrawLine<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/dd371895)</ept>.</source>
          <target state="new">The rectangles are drawn with calls to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DrawRect<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd371902)</ept>, and the cross hairs are drawn with a pair of calls to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DrawLine<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/dd371895)</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   You probably noticed the call to <bpt id="p2">**</bpt>GameHud::Render<ept id="p2">**</ept> takes a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows::Foundation::Rect<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225994)</ept> parameter, which contains the size of the main window rectangle.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   You probably noticed the call to <bpt id="p2">**</bpt>GameHud::Render<ept id="p2">**</ept> takes a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Windows::Foundation::Rect<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br225994)</ept> parameter, which contains the size of the main window rectangle.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This demonstrates an essential part of UI programming: obtaining the size of window in a measurement called DIPs (device independent pixels), where a DIP is defined as 1/96 of an inch.</source>
          <target state="new">This demonstrates an essential part of UI programming: obtaining the size of window in a measurement called DIPs (device independent pixels), where a DIP is defined as 1/96 of an inch.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Direct2D scales the drawing units to actual pixels when the drawing occurs, and it does so by using the Windows dots per inch (DPI) setting.</source>
          <target state="new">Direct2D scales the drawing units to actual pixels when the drawing occurs, and it does so by using the Windows dots per inch (DPI) setting.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Similarly, when you draw text using DirectWrite, you specify DIPs rather than points for the size of the font.</source>
          <target state="new">Similarly, when you draw text using DirectWrite, you specify DIPs rather than points for the size of the font.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>DIPs are expressed as floating point numbers.</source>
          <target state="new">DIPs are expressed as floating point numbers.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Displaying game state information with an overlay</source>
          <target state="new">Displaying game state information with an overlay</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Besides the heads-up display, the game sample has an overlay that represents five game states, and all of which feature a large black rectangle primitive with text for the player to read.</source>
          <target state="new">Besides the heads-up display, the game sample has an overlay that represents five game states, and all of which feature a large black rectangle primitive with text for the player to read.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>(Be aware that the move-look controller rectangles are not drawn, because they are not active in these states.) These overlay states are:</source>
          <target state="new">(Be aware that the move-look controller rectangles are not drawn, because they are not active in these states.) These overlay states are:</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The game start overlay.</source>
          <target state="new">The game start overlay.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>We show this when the player starts the game.</source>
          <target state="new">We show this when the player starts the game.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It contains the high score across game sessions.</source>
          <target state="new">It contains the high score across game sessions.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>a screen shot of the start screen for simple3dgamedx</source>
          <target state="new">a screen shot of the start screen for simple3dgamedx</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The pause state.</source>
          <target state="new">The pause state.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>a screen shot of the pause screen for simple3dgamedx</source>
          <target state="new">a screen shot of the pause screen for simple3dgamedx</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The level start state.</source>
          <target state="new">The level start state.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>We show this when the player starts a new level.</source>
          <target state="new">We show this when the player starts a new level.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>a screen shot of the level start screen for simple3dgamedx</source>
          <target state="new">a screen shot of the level start screen for simple3dgamedx</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The game over state.</source>
          <target state="new">The game over state.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>We show this when the player fails a level.</source>
          <target state="new">We show this when the player fails a level.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>a screen shot of the game over screen for simple3dgamedx</source>
          <target state="new">a screen shot of the game over screen for simple3dgamedx</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The game stat display state.</source>
          <target state="new">The game stat display state.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>We show this when the player wins.</source>
          <target state="new">We show this when the player wins.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It contains the final score the player has achieved.</source>
          <target state="new">It contains the final score the player has achieved.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>the victory screen for simple3dgamedx</source>
          <target state="new">the victory screen for simple3dgamedx</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Let's look at how we initialize and draw the overlay for these five states.</source>
          <target state="new">Let's look at how we initialize and draw the overlay for these five states.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Initializing and drawing the overlay</source>
          <target state="new">Initializing and drawing the overlay</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The five explicit states have some things in common: one, they all use a black rectangle in the center of the screen as their background; two, the displayed text is either title text or body text; and three, the text uses the Segoe UI font and is drawn on top of the back rectangle.</source>
          <target state="new">The five explicit states have some things in common: one, they all use a black rectangle in the center of the screen as their background; two, the displayed text is either title text or body text; and three, the text uses the Segoe UI font and is drawn on top of the back rectangle.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>As a result, the resources they need and the methods that implement them are very similar.</source>
          <target state="new">As a result, the resources they need and the methods that implement them are very similar.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The game sample has four methods( <bpt id="p1">**</bpt>GameInfoOverlay::Initialize<ept id="p1">**</ept>, <bpt id="p2">**</bpt>GameInfoOverlay::SetDpi<ept id="p2">**</ept>, <bpt id="p3">**</bpt>GameInfoOverlay::RecreateDirectXResources<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>GameInfoOverlay::RecreateDpiDependentResources<ept id="p4">**</ept>) that it uses to initialize, set the dots per inch, recreate the DirectWrite resources (the text elements), and construct this overlay for display, respectively.</source>
          <target state="new">The game sample has four methods( <bpt id="p1">**</bpt>GameInfoOverlay::Initialize<ept id="p1">**</ept>, <bpt id="p2">**</bpt>GameInfoOverlay::SetDpi<ept id="p2">**</ept>, <bpt id="p3">**</bpt>GameInfoOverlay::RecreateDirectXResources<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>GameInfoOverlay::RecreateDpiDependentResources<ept id="p4">**</ept>) that it uses to initialize, set the dots per inch, recreate the DirectWrite resources (the text elements), and construct this overlay for display, respectively.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This is the code for these four methods:</source>
          <target state="new">This is the code for these four methods:</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> method obtains a factory from the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID2D1Device<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404478)</ept> object passed to it, which it uses to create an <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ID2D1DeviceContext<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/desktop/hh404479)</ept> that the overlay object itself can draw into, and sets the <bpt id="p6">**</bpt>m\_dWriteFactory<ept id="p6">**</ept> field to the provided <bpt id="p7">[</bpt><bpt id="p8">**</bpt>IDWriteFactory<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/desktop/dd368183)</ept> reference.</source>
          <target state="new">The <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> method obtains a factory from the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID2D1Device<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404478)</ept> object passed to it, which it uses to create an <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ID2D1DeviceContext<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/desktop/hh404479)</ept> that the overlay object itself can draw into, and sets the <bpt id="p6">**</bpt>m\_dWriteFactory<ept id="p6">**</ept> field to the provided <bpt id="p7">[</bpt><bpt id="p8">**</bpt>IDWriteFactory<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/desktop/dd368183)</ept> reference.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It also sets the DPI for the context.</source>
          <target state="new">It also sets the DPI for the context.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Then, it calls <bpt id="p1">**</bpt>RecreateDeviceResources<ept id="p1">**</ept> to assemble and draw the overlay.</source>
          <target state="new">Then, it calls <bpt id="p1">**</bpt>RecreateDeviceResources<ept id="p1">**</ept> to assemble and draw the overlay.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RecreateDeviceResources<ept id="p1">**</ept> uses the DirectWrite factory object to create formatters (brushes) for the title and body text strings that will be displayed on the overlay.</source>
          <target state="new"><bpt id="p1">**</bpt>RecreateDeviceResources<ept id="p1">**</ept> uses the DirectWrite factory object to create formatters (brushes) for the title and body text strings that will be displayed on the overlay.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It creates a white brush to draw the text, a black brush to draw the background, and an orange brush to draw action messages.</source>
          <target state="new">It creates a white brush to draw the text, a black brush to draw the background, and an orange brush to draw action messages.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Then, it calls <bpt id="p1">**</bpt>RecreateDpiDependentResources<ept id="p1">**</ept> to prepare a bitmap to draw the text on by calling <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID2D1DeviceContext::CreateBitmap<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404480)</ept>.</source>
          <target state="new">Then, it calls <bpt id="p1">**</bpt>RecreateDpiDependentResources<ept id="p1">**</ept> to prepare a bitmap to draw the text on by calling <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID2D1DeviceContext::CreateBitmap<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404480)</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Lastly, <bpt id="p1">**</bpt>RecreateDpiDependentResources<ept id="p1">**</ept> sets the render target for the Direct2D device context to the bitmap and clears it, which then sets each pixel in the bitmap to the color black.</source>
          <target state="new">Lastly, <bpt id="p1">**</bpt>RecreateDpiDependentResources<ept id="p1">**</ept> sets the render target for the Direct2D device context to the bitmap and clears it, which then sets each pixel in the bitmap to the color black.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Now, all the overlay needs is some text to display!</source>
          <target state="new">Now, all the overlay needs is some text to display!</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Representing game state in the overlay</source>
          <target state="new">Representing game state in the overlay</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Each of the five overlay states in the game sample has a corresponding method on the <bpt id="p1">**</bpt>GameInfoOverlay<ept id="p1">**</ept> object.</source>
          <target state="new">Each of the five overlay states in the game sample has a corresponding method on the <bpt id="p1">**</bpt>GameInfoOverlay<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>These methods draw a variation of the overlay to communicate explicit info to the player about the game itself.</source>
          <target state="new">These methods draw a variation of the overlay to communicate explicit info to the player about the game itself.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This communication is, of course, represented as two strings: a title string, and a body string.</source>
          <target state="new">This communication is, of course, represented as two strings: a title string, and a body string.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Because the sample already configured the resources and layout for this info in the <bpt id="p1">**</bpt>RecreateDeviceResources<ept id="p1">**</ept> method, it only needs to provide the overlay state-specific strings.</source>
          <target state="new">Because the sample already configured the resources and layout for this info in the <bpt id="p1">**</bpt>RecreateDeviceResources<ept id="p1">**</ept> method, it only needs to provide the overlay state-specific strings.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Now, in the definition of the <bpt id="p1">**</bpt>GameInfoOverlay<ept id="p1">**</ept> class, the sample declared three rectangular areas that correspond to specific regions of the overlay, as shown here:</source>
          <target state="new">Now, in the definition of the <bpt id="p1">**</bpt>GameInfoOverlay<ept id="p1">**</ept> class, the sample declared three rectangular areas that correspond to specific regions of the overlay, as shown here:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>These areas each have a specific purpose:</source>
          <target state="new">These areas each have a specific purpose:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>titleRectangle<ept id="p1">**</ept> is where the title text is drawn.</source>
          <target state="new"><bpt id="p1">**</bpt>titleRectangle<ept id="p1">**</ept> is where the title text is drawn.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>bodyRectangle<ept id="p1">**</ept> is where the body text is drawn.</source>
          <target state="new"><bpt id="p1">**</bpt>bodyRectangle<ept id="p1">**</ept> is where the body text is drawn.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>actionRectangle<ept id="p1">**</ept> is where the text that informs the player to take a specific action is drawn.</source>
          <target state="new"><bpt id="p1">**</bpt>actionRectangle<ept id="p1">**</ept> is where the text that informs the player to take a specific action is drawn.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>(It's in the bottom left of the overlay bitmap.)</source>
          <target state="new">(It's in the bottom left of the overlay bitmap.)</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>With these areas in mind, let's look at one of the state-specific methods, <bpt id="p1">**</bpt>GameInfoOverlay::SetGameStats<ept id="p1">**</ept>, and see how the overlay is drawn.</source>
          <target state="new">With these areas in mind, let's look at one of the state-specific methods, <bpt id="p1">**</bpt>GameInfoOverlay::SetGameStats<ept id="p1">**</ept>, and see how the overlay is drawn.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Using the Direct2D device context that the <bpt id="p1">**</bpt>GameInfoOverlay<ept id="p1">**</ept> object initialized and configured using <bpt id="p2">**</bpt>Initialize<ept id="p2">**</ept> and <bpt id="p3">**</bpt>RecreateDirectXResources<ept id="p3">**</ept>, this method fills the title and body rectangles with black using the background brush.</source>
          <target state="new">Using the Direct2D device context that the <bpt id="p1">**</bpt>GameInfoOverlay<ept id="p1">**</ept> object initialized and configured using <bpt id="p2">**</bpt>Initialize<ept id="p2">**</ept> and <bpt id="p3">**</bpt>RecreateDirectXResources<ept id="p3">**</ept>, this method fills the title and body rectangles with black using the background brush.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It draws the text for the "High Score" string to the title rectangle and a string containing the updates game state information to the body rectangle using the white text brush.</source>
          <target state="new">It draws the text for the "High Score" string to the title rectangle and a string containing the updates game state information to the body rectangle using the white text brush.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The action rectangle is updated by a subsequent call to <bpt id="p1">**</bpt>GameInfoOverlay::SetAction<ept id="p1">**</ept> from a method on the <bpt id="p2">**</bpt>DirectXApp<ept id="p2">**</ept> object, which provides the game state info needed by <bpt id="p3">**</bpt>SetAction<ept id="p3">**</ept> to determine the right message to the player (such as "Tap to continue").</source>
          <target state="new">The action rectangle is updated by a subsequent call to <bpt id="p1">**</bpt>GameInfoOverlay::SetAction<ept id="p1">**</ept> from a method on the <bpt id="p2">**</bpt>DirectXApp<ept id="p2">**</ept> object, which provides the game state info needed by <bpt id="p3">**</bpt>SetAction<ept id="p3">**</ept> to determine the right message to the player (such as "Tap to continue").</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The overlay for any given state is chosen in the <bpt id="p1">**</bpt>SetGameInfoOverlay<ept id="p1">**</ept> method on <bpt id="p2">**</bpt>DirectXApp<ept id="p2">**</ept>, like this:</source>
          <target state="new">The overlay for any given state is chosen in the <bpt id="p1">**</bpt>SetGameInfoOverlay<ept id="p1">**</ept> method on <bpt id="p2">**</bpt>DirectXApp<ept id="p2">**</ept>, like this:</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>And now the game sample has a way to communicate text info to the player based on game state.</source>
          <target state="new">And now the game sample has a way to communicate text info to the player based on game state.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the next topic, <bpt id="p1">[</bpt>Adding controls<ept id="p1">](tutorial--adding-controls.md)</ept>, we look at how the player interacts with the game sample, and how input changes game state.</source>
          <target state="new">In the next topic, <bpt id="p1">[</bpt>Adding controls<ept id="p1">](tutorial--adding-controls.md)</ept>, we look at how the player interacts with the game sample, and how input changes game state.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Complete sample code for this section</source>
          <target state="new">Complete sample code for this section</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>GameHud.h</source>
          <target state="new">GameHud.h</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>GameHud.cpp</source>
          <target state="new">GameHud.cpp</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>GameInfoOverlay.h</source>
          <target state="new">GameInfoOverlay.h</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>GameInfoOverlay.cpp</source>
          <target state="new">GameInfoOverlay.cpp</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Create a simple UWP game with DirectX</source>
          <target state="new">Create a simple UWP game with DirectX</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>