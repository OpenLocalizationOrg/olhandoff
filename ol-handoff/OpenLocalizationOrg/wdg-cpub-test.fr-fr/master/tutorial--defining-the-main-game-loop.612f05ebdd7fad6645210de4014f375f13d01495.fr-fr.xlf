<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9661b9e5622483883d4887d99076610a41aa06d9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\tutorial--defining-the-main-game-loop.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Define the main game object</source>
          <target state="new">Define the main game object</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Now, we look at the details of the game sample's main object and how the rules it implements translate into interactions with the game world.</source>
          <target state="new">Now, we look at the details of the game sample's main object and how the rules it implements translate into interactions with the game world.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Define the main game object</source>
          <target state="new">Define the main game object</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>At this point, we've laid out the basic framework of the sample game, and we implemented a state machine that handles the high-level user and system behaviors.</source>
          <target state="new">At this point, we've laid out the basic framework of the sample game, and we implemented a state machine that handles the high-level user and system behaviors.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>But we haven't examined the part that makes the game sample an actual game: the rules and mechanics, and how they're implemented!</source>
          <target state="new">But we haven't examined the part that makes the game sample an actual game: the rules and mechanics, and how they're implemented!</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Now, we look at the details of the game sample's main object and how the rules it implements translate into interactions with the game world.</source>
          <target state="new">Now, we look at the details of the game sample's main object and how the rules it implements translate into interactions with the game world.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Objective</source>
          <target state="new">Objective</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To apply the basic development techniques when implementing the rules and mechanics of a simple Universal Windows Platform (UWP) game using DirectX.</source>
          <target state="new">To apply the basic development techniques when implementing the rules and mechanics of a simple Universal Windows Platform (UWP) game using DirectX.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Considering the game's flow</source>
          <target state="new">Considering the game's flow</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The majority of the game's basic structure is defined in these files:</source>
          <target state="new">The majority of the game's basic structure is defined in these files:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>App.cpp</source>
          <target state="new">App.cpp</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Simple3DGame.cpp</source>
          <target state="new">Simple3DGame.cpp</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">[</bpt>Defining the game's UWP app framework<ept id="p1">](tutorial--building-the-games-metro-style-app-framework.md)</ept>, we reviewed the game framework defined in <bpt id="p2">**</bpt>App.cpp<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">[</bpt>Defining the game's UWP app framework<ept id="p1">](tutorial--building-the-games-metro-style-app-framework.md)</ept>, we reviewed the game framework defined in <bpt id="p2">**</bpt>App.cpp<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Simple3DGame.cpp<ept id="p1">**</ept> provides the code for a class, <bpt id="p2">**</bpt>Simple3DGame<ept id="p2">**</ept>, which specifies the implementation of the game play itself.</source>
          <target state="new"><bpt id="p1">**</bpt>Simple3DGame.cpp<ept id="p1">**</ept> provides the code for a class, <bpt id="p2">**</bpt>Simple3DGame<ept id="p2">**</ept>, which specifies the implementation of the game play itself.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Earlier, we considered the treatment of the sample game as a UWP app.</source>
          <target state="new">Earlier, we considered the treatment of the sample game as a UWP app.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Now, we look at the code that makes it a game.</source>
          <target state="new">Now, we look at the code that makes it a game.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The complete code for <bpt id="p1">**</bpt>Simple3DGame.h/.cpp<ept id="p1">**</ept> is provided in <bpt id="p2">[</bpt>Complete sample code for this section<ept id="p2">](#code_sample)</ept>.</source>
          <target state="new">The complete code for <bpt id="p1">**</bpt>Simple3DGame.h/.cpp<ept id="p1">**</ept> is provided in <bpt id="p2">[</bpt>Complete sample code for this section<ept id="p2">](#code_sample)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Let's take a look at the definition of the <bpt id="p1">**</bpt>Simple3DGame<ept id="p1">**</ept> class.</source>
          <target state="new">Let's take a look at the definition of the <bpt id="p1">**</bpt>Simple3DGame<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Defining the core game object</source>
          <target state="new">Defining the core game object</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When the app singleton starts, the view provider's <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> method creates an instance of the main game class, the <bpt id="p2">**</bpt>Simple3DGame<ept id="p2">**</ept> object.</source>
          <target state="new">When the app singleton starts, the view provider's <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> method creates an instance of the main game class, the <bpt id="p2">**</bpt>Simple3DGame<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This object contains the methods that communicate changes in game state to the state machine defined in the app framework, or from the app to the game object itself.</source>
          <target state="new">This object contains the methods that communicate changes in game state to the state machine defined in the app framework, or from the app to the game object itself.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It also contains methods that return info for updating the game's overlay bitmap and heads-up display, and for updating the animations and physics (the dynamics) in the game.</source>
          <target state="new">It also contains methods that return info for updating the game's overlay bitmap and heads-up display, and for updating the animations and physics (the dynamics) in the game.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The code for obtaining the graphics device resources used by the game is found in GameRenderer.cpp, which we discuss next in <bpt id="p1">[</bpt>Assembling the rendering framework<ept id="p1">](tutorial--assembling-the-rendering-pipeline.md)</ept>.</source>
          <target state="new">The code for obtaining the graphics device resources used by the game is found in GameRenderer.cpp, which we discuss next in <bpt id="p1">[</bpt>Assembling the rendering framework<ept id="p1">](tutorial--assembling-the-rendering-pipeline.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The code for <bpt id="p1">**</bpt>Simple3DGame<ept id="p1">**</ept> looks like this:</source>
          <target state="new">The code for <bpt id="p1">**</bpt>Simple3DGame<ept id="p1">**</ept> looks like this:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>First, let's review the internal methods defined on <bpt id="p1">**</bpt>Simple3DGame<ept id="p1">**</ept>.</source>
          <target state="new">First, let's review the internal methods defined on <bpt id="p1">**</bpt>Simple3DGame<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Sets the starting values of the global variables and initializes the game objects.</source>
          <target state="new">Sets the starting values of the global variables and initializes the game objects.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LoadGame<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>LoadGame<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Initializes a new level and starts loading it.</source>
          <target state="new">Initializes a new level and starts loading it.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LoadLevelAsync<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>LoadLevelAsync<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Starts an async task (see the <bpt id="p1">[</bpt>Parallel Patterns Library<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dd492418.aspx)</ept> for more details) to initialize the level and then invoke an async task on the renderer to load the device specific level resources.</source>
          <target state="new">Starts an async task (see the <bpt id="p1">[</bpt>Parallel Patterns Library<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dd492418.aspx)</ept> for more details) to initialize the level and then invoke an async task on the renderer to load the device specific level resources.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This method runs in a separate thread; as a result, only <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476379)</ept> methods (as opposed to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</ept> methods) can be called from this thread.</source>
          <target state="new">This method runs in a separate thread; as a result, only <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476379)</ept> methods (as opposed to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</ept> methods) can be called from this thread.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Any device context methods are called in the <bpt id="p1">**</bpt>FinalizeLoadLevel<ept id="p1">**</ept> method.</source>
          <target state="new">Any device context methods are called in the <bpt id="p1">**</bpt>FinalizeLoadLevel<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FinalizeLoadLevel<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>FinalizeLoadLevel<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Completes any work for level loading that needs to be done on the main thread.</source>
          <target state="new">Completes any work for level loading that needs to be done on the main thread.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This includes any calls to Direct3D 11 device context (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</ept>) methods.</source>
          <target state="new">This includes any calls to Direct3D 11 device context (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</ept>) methods.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StartLevel<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>StartLevel<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Starts the game play for a new level.</source>
          <target state="new">Starts the game play for a new level.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PauseGame<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>PauseGame<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Pauses the game.</source>
          <target state="new">Pauses the game.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RunGame<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>RunGame<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Runs an iteration of the game loop.</source>
          <target state="new">Runs an iteration of the game loop.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It's called from <bpt id="p1">**</bpt>App::Update<ept id="p1">**</ept> one time every iteration of the game loop if the game state is <bpt id="p2">**</bpt>Active<ept id="p2">**</ept>.</source>
          <target state="new">It's called from <bpt id="p1">**</bpt>App::Update<ept id="p1">**</ept> one time every iteration of the game loop if the game state is <bpt id="p2">**</bpt>Active<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OnSuspending<ept id="p1">**</ept> and <bpt id="p2">**</bpt>OnResuming<ept id="p2">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>OnSuspending<ept id="p1">**</ept> and <bpt id="p2">**</bpt>OnResuming<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Suspends and resumes the game's audio, respectively.</source>
          <target state="new">Suspends and resumes the game's audio, respectively.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>And the private methods:</source>
          <target state="new">And the private methods:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LoadSavedState<ept id="p1">**</ept> and <bpt id="p2">**</bpt>SaveState<ept id="p2">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>LoadSavedState<ept id="p1">**</ept> and <bpt id="p2">**</bpt>SaveState<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Loads and saves the current state of the game, respectively.</source>
          <target state="new">Loads and saves the current state of the game, respectively.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SaveHighScore<ept id="p1">**</ept> and <bpt id="p2">**</bpt>LoadHighScore<ept id="p2">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>SaveHighScore<ept id="p1">**</ept> and <bpt id="p2">**</bpt>LoadHighScore<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Saves and loads the high score across games, respectively.</source>
          <target state="new">Saves and loads the high score across games, respectively.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>InitializeAmmo<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>InitializeAmmo<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Resets the state of each sphere object used as ammunition back to its original state for the beginning of each round.</source>
          <target state="new">Resets the state of each sphere object used as ammunition back to its original state for the beginning of each round.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UpdateDynamics<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>UpdateDynamics<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This is an important method, because it updates all the game objects based on canned animation routines, physics, and control input.</source>
          <target state="new">This is an important method, because it updates all the game objects based on canned animation routines, physics, and control input.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This is the heart of the interactivity that defines the game.</source>
          <target state="new">This is the heart of the interactivity that defines the game.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>We talk about it more in the <bpt id="p1">[</bpt>Updating the game<ept id="p1">](#update_game)</ept> section.</source>
          <target state="new">We talk about it more in the <bpt id="p1">[</bpt>Updating the game<ept id="p1">](#update_game)</ept> section.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The other public methods are property getters that return game play and overlay specific information to the app framework for display.</source>
          <target state="new">The other public methods are property getters that return game play and overlay specific information to the app framework for display.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Defining the game state variables</source>
          <target state="new">Defining the game state variables</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>One function of the game object is to serve as a container for the data that defines a game session, level, or lifetime, depending on how you define your game at a high level.</source>
          <target state="new">One function of the game object is to serve as a container for the data that defines a game session, level, or lifetime, depending on how you define your game at a high level.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In this case, the game state data is for the lifetime of the game, initialized one time when a user launches the game.</source>
          <target state="new">In this case, the game state data is for the lifetime of the game, initialized one time when a user launches the game.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Here's the complete set of definitions for the game object's state variables.</source>
          <target state="new">Here's the complete set of definitions for the game object's state variables.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>At the top of the code example, there are four objects whose instances are updated as the game loop runs.</source>
          <target state="new">At the top of the code example, there are four objects whose instances are updated as the game loop runs.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> object.</source>
          <target state="new">The <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This object represents the player input.</source>
          <target state="new">This object represents the player input.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>(For more info about the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> object, see <bpt id="p2">[</bpt>Adding controls<ept id="p2">](tutorial--adding-controls.md)</ept>.)</source>
          <target state="new">(For more info about the <bpt id="p1">**</bpt>MoveLookController<ept id="p1">**</ept> object, see <bpt id="p2">[</bpt>Adding controls<ept id="p2">](tutorial--adding-controls.md)</ept>.)</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GameRenderer<ept id="p1">**</ept> object.</source>
          <target state="new">The <bpt id="p1">**</bpt>GameRenderer<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This object represents the Direct3D 11 renderer derived from the <bpt id="p1">**</bpt>DirectXBase<ept id="p1">**</ept> class that handles all the device-specific objects and their rendering.</source>
          <target state="new">This object represents the Direct3D 11 renderer derived from the <bpt id="p1">**</bpt>DirectXBase<ept id="p1">**</ept> class that handles all the device-specific objects and their rendering.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>(For more info, see <bpt id="p1">[</bpt>Assembling the rendering pipeline<ept id="p1">](tutorial--assembling-the-rendering-pipeline.md)</ept>).</source>
          <target state="new">(For more info, see <bpt id="p1">[</bpt>Assembling the rendering pipeline<ept id="p1">](tutorial--assembling-the-rendering-pipeline.md)</ept>).</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Camera<ept id="p1">**</ept> object.</source>
          <target state="new">The <bpt id="p1">**</bpt>Camera<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This object represents the player's first-person view of the game world.</source>
          <target state="new">This object represents the player's first-person view of the game world.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>(For more info about the <bpt id="p1">**</bpt>Camera<ept id="p1">**</ept> object, see <bpt id="p2">[</bpt>Assembling the rendering pipeline<ept id="p2">](tutorial--assembling-the-rendering-pipeline.md)</ept>.)</source>
          <target state="new">(For more info about the <bpt id="p1">**</bpt>Camera<ept id="p1">**</ept> object, see <bpt id="p2">[</bpt>Assembling the rendering pipeline<ept id="p2">](tutorial--assembling-the-rendering-pipeline.md)</ept>.)</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Audio<ept id="p1">**</ept> object.</source>
          <target state="new">The <bpt id="p1">**</bpt>Audio<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This object controls the audio playback for the game.</source>
          <target state="new">This object controls the audio playback for the game.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>(For more info about the <bpt id="p1">**</bpt>Audio<ept id="p1">**</ept> object, see <bpt id="p2">[</bpt>Adding sound<ept id="p2">](tutorial--adding-sound.md)</ept>.)</source>
          <target state="new">(For more info about the <bpt id="p1">**</bpt>Audio<ept id="p1">**</ept> object, see <bpt id="p2">[</bpt>Adding sound<ept id="p2">](tutorial--adding-sound.md)</ept>.)</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The rest of the game variables contain the lists of the primitives and their respective in-game amounts, and game play specific data and constraints.</source>
          <target state="new">The rest of the game variables contain the lists of the primitives and their respective in-game amounts, and game play specific data and constraints.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Let's see how the sample configures these variables when the game is initialized.</source>
          <target state="new">Let's see how the sample configures these variables when the game is initialized.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Initializing and starting the game</source>
          <target state="new">Initializing and starting the game</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When a player starts the game, the game object must initialize its state, create and add the overlay, set the variables that track the player's performance, and instantiate the objects that it will use to build the levels.</source>
          <target state="new">When a player starts the game, the game object must initialize its state, create and add the overlay, set the variables that track the player's performance, and instantiate the objects that it will use to build the levels.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The sample game sets up the components of the game object in this order:</source>
          <target state="new">The sample game sets up the components of the game object in this order:</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A new audio playback object is created.</source>
          <target state="new">A new audio playback object is created.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Arrays for the game's graphic primitives are created, including arrays for the level primitives, ammo, and obstacles.</source>
          <target state="new">Arrays for the game's graphic primitives are created, including arrays for the level primitives, ammo, and obstacles.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A location for saving game state data is created, named <bpt id="p1">*</bpt>Game<ept id="p1">*</ept>, and placed in the app data settings storage location specified by <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ApplicationData::Current<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br241619)</ept>.</source>
          <target state="new">A location for saving game state data is created, named <bpt id="p1">*</bpt>Game<ept id="p1">*</ept>, and placed in the app data settings storage location specified by <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ApplicationData::Current<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br241619)</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A game timer and the initial in-game overlay bitmap are created.</source>
          <target state="new">A game timer and the initial in-game overlay bitmap are created.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A new camera is created with a specific set of view and projection parameters.</source>
          <target state="new">A new camera is created with a specific set of view and projection parameters.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The input device (the controller) is set to the same starting pitch and yaw as the camera, so the player has a 1-to-1 correspondence between the starting control position and the camera position.</source>
          <target state="new">The input device (the controller) is set to the same starting pitch and yaw as the camera, so the player has a 1-to-1 correspondence between the starting control position and the camera position.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The player object is created and set to active.</source>
          <target state="new">The player object is created and set to active.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>We use a sphere object to detect the player's proximity to walls and obstacles and to keep the camera from getting put in a position that might break immersion.</source>
          <target state="new">We use a sphere object to detect the player's proximity to walls and obstacles and to keep the camera from getting put in a position that might break immersion.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The game world primitive is created.</source>
          <target state="new">The game world primitive is created.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The cylinder obstacles are created.</source>
          <target state="new">The cylinder obstacles are created.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The targets (<bpt id="p1">**</bpt>Face<ept id="p1">**</ept> objects) are created and numbered.</source>
          <target state="new">The targets (<bpt id="p1">**</bpt>Face<ept id="p1">**</ept> objects) are created and numbered.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The ammo spheres are created.</source>
          <target state="new">The ammo spheres are created.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The levels are created.</source>
          <target state="new">The levels are created.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The high score is loaded.</source>
          <target state="new">The high score is loaded.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Any prior saved game state is loaded.</source>
          <target state="new">Any prior saved game state is loaded.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The game now has instances of all the key components: the world, the player, the obstacles, the targets, and the ammo spheres.</source>
          <target state="new">The game now has instances of all the key components: the world, the player, the obstacles, the targets, and the ammo spheres.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>It also has instances of the levels, which represent configurations of all of the above components and their behaviors for each specific level.</source>
          <target state="new">It also has instances of the levels, which represent configurations of all of the above components and their behaviors for each specific level.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Let's see how the game builds the levels.</source>
          <target state="new">Let's see how the game builds the levels.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Building and loading the game's levels</source>
          <target state="new">Building and loading the game's levels</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Most of the heavy lifting for the level construction is done in the <bpt id="p1">**</bpt>Level.h/.cpp<ept id="p1">**</ept> file, which we won't delve into, because it focuses on a very specific implementation.</source>
          <target state="new">Most of the heavy lifting for the level construction is done in the <bpt id="p1">**</bpt>Level.h/.cpp<ept id="p1">**</ept> file, which we won't delve into, because it focuses on a very specific implementation.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The important thing is that the code for each level is run as a separate <bpt id="p1">**</bpt>LevelN<ept id="p1">**</ept> object.</source>
          <target state="new">The important thing is that the code for each level is run as a separate <bpt id="p1">**</bpt>LevelN<ept id="p1">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you'd like to extend the game, you can create a <bpt id="p1">**</bpt>Level<ept id="p1">**</ept> object that took an assigned number as a parameter and randomly placed the obstacles and targets.</source>
          <target state="new">If you'd like to extend the game, you can create a <bpt id="p1">**</bpt>Level<ept id="p1">**</ept> object that took an assigned number as a parameter and randomly placed the obstacles and targets.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Or, you can have it load level configuration data from a resource file, or even the Internet!</source>
          <target state="new">Or, you can have it load level configuration data from a resource file, or even the Internet!</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The complete code for <bpt id="p1">**</bpt>Level.h/.cpp<ept id="p1">**</ept> is provided in <bpt id="p2">[</bpt>Complete sample code for this section<ept id="p2">](#code_sample)</ept>.</source>
          <target state="new">The complete code for <bpt id="p1">**</bpt>Level.h/.cpp<ept id="p1">**</ept> is provided in <bpt id="p2">[</bpt>Complete sample code for this section<ept id="p2">](#code_sample)</ept>.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Defining the game play</source>
          <target state="new">Defining the game play</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>At this point, we have all the components we need to assemble the game.</source>
          <target state="new">At this point, we have all the components we need to assemble the game.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The levels have been constructed in memory from the primitives, and are ready for the player to start interacting with them in some fashion.</source>
          <target state="new">The levels have been constructed in memory from the primitives, and are ready for the player to start interacting with them in some fashion.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Now, the best games react instantly to player input, and provide immediate feedback.</source>
          <target state="new">Now, the best games react instantly to player input, and provide immediate feedback.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This is true for any type of a game, from twitch-action, real-time shoot-em-ups to thoughtful, turn-based strategy games.</source>
          <target state="new">This is true for any type of a game, from twitch-action, real-time shoot-em-ups to thoughtful, turn-based strategy games.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">[</bpt>Defining the game's UWP framework<ept id="p1">](tutorial--building-the-games-metro-style-app-framework.md)</ept>, we looked at the overall state machine that governs the flow of the game.</source>
          <target state="new">In <bpt id="p1">[</bpt>Defining the game's UWP framework<ept id="p1">](tutorial--building-the-games-metro-style-app-framework.md)</ept>, we looked at the overall state machine that governs the flow of the game.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Remember, the sample implements this flow as a loop inside the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Run<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702093)</ept> method of the <bpt id="p3">**</bpt>App<ept id="p3">**</ept> class, which itself is an implementation of a DirectX view provider.</source>
          <target state="new">Remember, the sample implements this flow as a loop inside the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Run<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh702093)</ept> method of the <bpt id="p3">**</bpt>App<ept id="p3">**</ept> class, which itself is an implementation of a DirectX view provider.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The important state transitions must be controlled by the player, and must provide clear feedback.</source>
          <target state="new">The important state transitions must be controlled by the player, and must provide clear feedback.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Any delay in this feedback breaks the sense of immersion.</source>
          <target state="new">Any delay in this feedback breaks the sense of immersion.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Here is a diagram representing the basic flow of the game and its high-level states.</source>
          <target state="new">Here is a diagram representing the basic flow of the game and its high-level states.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>a diagram showing the main state machine for our game</source>
          <target state="new">a diagram showing the main state machine for our game</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>When the sample game starts play, the game object can be in one of three states:</source>
          <target state="new">When the sample game starts play, the game object can be in one of three states:</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Waiting for resources<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Waiting for resources<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This state is activated when the game object is initialized or when the components of a level are being loaded.</source>
          <target state="new">This state is activated when the game object is initialized or when the components of a level are being loaded.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If this state was triggered by a request to load a prior game, the game stats overlay is displayed; if it was triggered by a request to play a level, the level start overlay is displayed.</source>
          <target state="new">If this state was triggered by a request to load a prior game, the game stats overlay is displayed; if it was triggered by a request to play a level, the level start overlay is displayed.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The completion of resource loading causes the game to pass through the <bpt id="p1">**</bpt>Resources loaded<ept id="p1">**</ept> state and then transition into the <bpt id="p2">**</bpt>Waiting for press<ept id="p2">**</ept> state.</source>
          <target state="new">The completion of resource loading causes the game to pass through the <bpt id="p1">**</bpt>Resources loaded<ept id="p1">**</ept> state and then transition into the <bpt id="p2">**</bpt>Waiting for press<ept id="p2">**</ept> state.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Waiting for press<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Waiting for press<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This state is activated when the game is paused, either by the player or by the system (after, say, loading resources).</source>
          <target state="new">This state is activated when the game is paused, either by the player or by the system (after, say, loading resources).</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>When the player is ready to exit this state, the player is prompted to load a new game state (LoadGame), start or restart the loaded level (StartLevel), or continue the current level (ContinueGame).</source>
          <target state="new">When the player is ready to exit this state, the player is prompted to load a new game state (LoadGame), start or restart the loaded level (StartLevel), or continue the current level (ContinueGame).</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dynamics<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Dynamics<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If a player's press input is completed and the resulting action is to start or continue a level, the game object transitions into the <bpt id="p1">*</bpt>Dynamics<ept id="p1">*</ept> state.</source>
          <target state="new">If a player's press input is completed and the resulting action is to start or continue a level, the game object transitions into the <bpt id="p1">*</bpt>Dynamics<ept id="p1">*</ept> state.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The game is played in this state, and the game world and player objects are updated here based on animation routines and player input.</source>
          <target state="new">The game is played in this state, and the game world and player objects are updated here based on animation routines and player input.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This state is left when the player triggers a pause event, either by pressing P, by taking an action that deactivates the main window, or by completing a level or the game.</source>
          <target state="new">This state is left when the player triggers a pause event, either by pressing P, by taking an action that deactivates the main window, or by completing a level or the game.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Now, let's look at specific code in the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> class (see: <bpt id="p2">[</bpt>Defining the game's UWP framework<ept id="p2">](tutorial--building-the-games-metro-style-app-framework.md)</ept>) for the <bpt id="p3">**</bpt>Update<ept id="p3">**</ept> method that implements this state machine.</source>
          <target state="new">Now, let's look at specific code in the <bpt id="p1">**</bpt>App<ept id="p1">**</ept> class (see: <bpt id="p2">[</bpt>Defining the game's UWP framework<ept id="p2">](tutorial--building-the-games-metro-style-app-framework.md)</ept>) for the <bpt id="p3">**</bpt>Update<ept id="p3">**</ept> method that implements this state machine.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The first thing this method does is call the <bpt id="p1">[</bpt>MoveLookController<ept id="p1">](tutorial--adding-controls.md)</ept> instance's own <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> method, which updates the data from the controller.</source>
          <target state="new">The first thing this method does is call the <bpt id="p1">[</bpt>MoveLookController<ept id="p1">](tutorial--adding-controls.md)</ept> instance's own <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> method, which updates the data from the controller.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This data includes the direction the player's view (the camera) is facing and the velocity of the player's movement.</source>
          <target state="new">This data includes the direction the player's view (the camera) is facing and the velocity of the player's movement.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>When the game is in the Dynamics state, that is, when the player is playing, the work is handled in the <bpt id="p1">**</bpt>RunGame<ept id="p1">**</ept> method, with this call:</source>
          <target state="new">When the game is in the Dynamics state, that is, when the player is playing, the work is handled in the <bpt id="p1">**</bpt>RunGame<ept id="p1">**</ept> method, with this call:</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RunGame<ept id="p1">**</ept> handles the set of data that defines the current state of the game play for the current iteration of the game loop.</source>
          <target state="new"><bpt id="p1">**</bpt>RunGame<ept id="p1">**</ept> handles the set of data that defines the current state of the game play for the current iteration of the game loop.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>It flows like this:</source>
          <target state="new">It flows like this:</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The method updates the timer that counts down the seconds until the level is completed, and tests to see if the level's time has expired.</source>
          <target state="new">The method updates the timer that counts down the seconds until the level is completed, and tests to see if the level's time has expired.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This is one of the rules of the game: when time runs out without all the targets getting shot, the game is over.</source>
          <target state="new">This is one of the rules of the game: when time runs out without all the targets getting shot, the game is over.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If time has run out, the method sets the <bpt id="p1">**</bpt>TimeExpired<ept id="p1">**</ept> game state, and returns to the <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> method in the previous code.</source>
          <target state="new">If time has run out, the method sets the <bpt id="p1">**</bpt>TimeExpired<ept id="p1">**</ept> game state, and returns to the <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> method in the previous code.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If time remains, the move-look controller is polled for an update to the camera position; specifically, an update to the angle of the view normal projecting from the camera plane (where the player is looking), and the distance that angle has moved from the previous time the controller was polled.</source>
          <target state="new">If time remains, the move-look controller is polled for an update to the camera position; specifically, an update to the angle of the view normal projecting from the camera plane (where the player is looking), and the distance that angle has moved from the previous time the controller was polled.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The camera is updated based on the new data from the move-look controller.</source>
          <target state="new">The camera is updated based on the new data from the move-look controller.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The dynamics, or the animations and behaviors of objects in the game world independent of player control, are updated.</source>
          <target state="new">The dynamics, or the animations and behaviors of objects in the game world independent of player control, are updated.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>In the game sample, this is the motion of the ammo spheres that have been fired, the animation of the pillar obstacles and the movement of the targets.</source>
          <target state="new">In the game sample, this is the motion of the ammo spheres that have been fired, the animation of the pillar obstacles and the movement of the targets.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The method checks to see if the criteria for the successful completion of a level have been met.</source>
          <target state="new">The method checks to see if the criteria for the successful completion of a level have been met.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If so, it finalizes the score for the level and checks to see if this is the last level (of 6).</source>
          <target state="new">If so, it finalizes the score for the level and checks to see if this is the last level (of 6).</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If it's the last level, the method returns the <bpt id="p1">**</bpt>GameComplete<ept id="p1">**</ept> game state; otherwise, it returns the <bpt id="p2">**</bpt>LevelComplete<ept id="p2">**</ept> game state.</source>
          <target state="new">If it's the last level, the method returns the <bpt id="p1">**</bpt>GameComplete<ept id="p1">**</ept> game state; otherwise, it returns the <bpt id="p2">**</bpt>LevelComplete<ept id="p2">**</ept> game state.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If the level isn't complete, the method sets the game state to <bpt id="p1">**</bpt>Active<ept id="p1">**</ept> and returns.</source>
          <target state="new">If the level isn't complete, the method sets the game state to <bpt id="p1">**</bpt>Active<ept id="p1">**</ept> and returns.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Here's what <bpt id="p1">**</bpt>RunGame<ept id="p1">**</ept>, found in <bpt id="p2">**</bpt>Simple3DGame.cpp<ept id="p2">**</ept>, looks like in code.</source>
          <target state="new">Here's what <bpt id="p1">**</bpt>RunGame<ept id="p1">**</ept>, found in <bpt id="p2">**</bpt>Simple3DGame.cpp<ept id="p2">**</ept>, looks like in code.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Here's the key call: <ph id="ph1">`UpdateDynamics()`</ph>.</source>
          <target state="new">Here's the key call: <ph id="ph1">`UpdateDynamics()`</ph>.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>It's what brings the game world to life.</source>
          <target state="new">It's what brings the game world to life.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Let's review it!</source>
          <target state="new">Let's review it!</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Updating the game world</source>
          <target state="new">Updating the game world</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A fast and fluid game experience is one where the world feels <bpt id="p1">*</bpt>alive<ept id="p1">*</ept>, where the game itself is in motion independent of player input.</source>
          <target state="new">A fast and fluid game experience is one where the world feels <bpt id="p1">*</bpt>alive<ept id="p1">*</ept>, where the game itself is in motion independent of player input.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Trees wave in the wind, waves crest along shore lines, machinery smokes and shines, and alien monsters stretch and salivate.</source>
          <target state="new">Trees wave in the wind, waves crest along shore lines, machinery smokes and shines, and alien monsters stretch and salivate.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Imagine what a game would be like if everything was frozen, with the graphics only moving when the player provided input.</source>
          <target state="new">Imagine what a game would be like if everything was frozen, with the graphics only moving when the player provided input.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>It'd be weird and not very, well, immersive.</source>
          <target state="new">It'd be weird and not very, well, immersive.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Immersion, for the player, comes from the feeling of being an agent in a living, breathing world.</source>
          <target state="new">Immersion, for the player, comes from the feeling of being an agent in a living, breathing world.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The game loop should always keep updating the game world and running the animation routines, be they canned or based on physical algorithms or just plain random, except when the game is specifically paused.</source>
          <target state="new">The game loop should always keep updating the game world and running the animation routines, be they canned or based on physical algorithms or just plain random, except when the game is specifically paused.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In the game sample, this principle is called <bpt id="p1">*</bpt>dynamics<ept id="p1">*</ept>, and it encompasses the rise and fall of the pillar obstacles, and the motion and physical behaviors of the ammo spheres as they are fired.</source>
          <target state="new">In the game sample, this principle is called <bpt id="p1">*</bpt>dynamics<ept id="p1">*</ept>, and it encompasses the rise and fall of the pillar obstacles, and the motion and physical behaviors of the ammo spheres as they are fired.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>It also encompasses the interaction between objects, including collisions between the player sphere and the world, or between the ammo and the obstacles and targets.</source>
          <target state="new">It also encompasses the interaction between objects, including collisions between the player sphere and the world, or between the ammo and the obstacles and targets.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The code that implements these dynamics looks like this:</source>
          <target state="new">The code that implements these dynamics looks like this:</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>(This code example has been abbreviated for readability.</source>
          <target state="new">(This code example has been abbreviated for readability.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The full working code is found in the complete code sample at the bottom of this topic.)</source>
          <target state="new">The full working code is found in the complete code sample at the bottom of this topic.)</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This method deals with four sets of computations:</source>
          <target state="new">This method deals with four sets of computations:</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The positions of the fired ammo spheres in the world.</source>
          <target state="new">The positions of the fired ammo spheres in the world.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The animation of the pillar obstacles.</source>
          <target state="new">The animation of the pillar obstacles.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The intersection of the player and the world boundaries.</source>
          <target state="new">The intersection of the player and the world boundaries.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The collisions of the ammo spheres with the obstacles, the targets, other ammo spheres, and the world.</source>
          <target state="new">The collisions of the ammo spheres with the obstacles, the targets, other ammo spheres, and the world.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The animation of the obstacles is a loop defined in <bpt id="p1">**</bpt>Animate.h/.cpp<ept id="p1">**</ept>.</source>
          <target state="new">The animation of the obstacles is a loop defined in <bpt id="p1">**</bpt>Animate.h/.cpp<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The behavior of the ammo and any collisions are defined by simplified physics algorithms, supplied in the previous code and parameterized by a set of global constants for the game world, including gravity and material properties.</source>
          <target state="new">The behavior of the ammo and any collisions are defined by simplified physics algorithms, supplied in the previous code and parameterized by a set of global constants for the game world, including gravity and material properties.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This is all computed in the game world coordinate space.</source>
          <target state="new">This is all computed in the game world coordinate space.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Now that we've updated all the objects in the scene and calculated any collisions, we need to use that info to draw the corresponding visual changes.</source>
          <target state="new">Now that we've updated all the objects in the scene and calculated any collisions, we need to use that info to draw the corresponding visual changes.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>After Update completes in the current iteration of the game loop, the sample immediately calls <bpt id="p1">**</bpt>Render<ept id="p1">**</ept> to take the updated object data and generate a new scene to present to the player.</source>
          <target state="new">After Update completes in the current iteration of the game loop, the sample immediately calls <bpt id="p1">**</bpt>Render<ept id="p1">**</ept> to take the updated object data and generate a new scene to present to the player.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Let's look at the render method now.</source>
          <target state="new">Let's look at the render method now.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Rendering the game world's graphics</source>
          <target state="new">Rendering the game world's graphics</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>We recommend that the graphics in a game update as often as possible, which, at maximum, is every time the main game loop iterates.</source>
          <target state="new">We recommend that the graphics in a game update as often as possible, which, at maximum, is every time the main game loop iterates.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>As the loop iterates, the game is updated, with or without player input.</source>
          <target state="new">As the loop iterates, the game is updated, with or without player input.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This allows the animations and behaviors that are calculated to be displayed smoothly.</source>
          <target state="new">This allows the animations and behaviors that are calculated to be displayed smoothly.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Imagine if we had a simple scene of water that only moved when the player pressed a button.</source>
          <target state="new">Imagine if we had a simple scene of water that only moved when the player pressed a button.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>That would make for terribly boring visuals.</source>
          <target state="new">That would make for terribly boring visuals.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>A good game looks smooth and fluid.</source>
          <target state="new">A good game looks smooth and fluid.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Recall the sample game's loop, as shown here.</source>
          <target state="new">Recall the sample game's loop, as shown here.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>If the game's main window is visible, and isn't snapped or deactivated, the game continues to update and render the results of that update.</source>
          <target state="new">If the game's main window is visible, and isn't snapped or deactivated, the game continues to update and render the results of that update.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The method we examine now renders a representation of that state immediately after the state is updated in <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> with a call to <bpt id="p2">**</bpt>Update<ept id="p2">**</ept>, which we discussed in the previous section.</source>
          <target state="new">The method we examine now renders a representation of that state immediately after the state is updated in <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> with a call to <bpt id="p2">**</bpt>Update<ept id="p2">**</ept>, which we discussed in the previous section.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The complete code for this method is in <bpt id="p1">[</bpt>Assembling the rendering framework<ept id="p1">](tutorial--assembling-the-rendering-pipeline.md)</ept>.</source>
          <target state="new">The complete code for this method is in <bpt id="p1">[</bpt>Assembling the rendering framework<ept id="p1">](tutorial--assembling-the-rendering-pipeline.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>This method draws the projection of the 3D world, and then draws the Direct2D overlay on top of it.</source>
          <target state="new">This method draws the projection of the 3D world, and then draws the Direct2D overlay on top of it.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>When completed, it presents the final swap chain with the combined buffers for display.</source>
          <target state="new">When completed, it presents the final swap chain with the combined buffers for display.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Be aware that there are two states for the sample game's Direct2D overlay: one where the game displays the game info overlay that contains the bitmap for the pause menu, and one where the game displays the cross hairs along with the rectangles for the touchscreen move-look controller.</source>
          <target state="new">Be aware that there are two states for the sample game's Direct2D overlay: one where the game displays the game info overlay that contains the bitmap for the pause menu, and one where the game displays the cross hairs along with the rectangles for the touchscreen move-look controller.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The score text is drawn in both states.</source>
          <target state="new">The score text is drawn in both states.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>By now, you're probably curious about the actual rendering engine: how those calls to the <bpt id="p1">**</bpt>Render<ept id="p1">**</ept> methods on the updated primitives get turned into pixels on your screen.</source>
          <target state="new">By now, you're probably curious about the actual rendering engine: how those calls to the <bpt id="p1">**</bpt>Render<ept id="p1">**</ept> methods on the updated primitives get turned into pixels on your screen.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>We cover that in detail in <bpt id="p1">[</bpt>Assembling the rendering framework<ept id="p1">](tutorial--assembling-the-rendering-pipeline.md)</ept>.</source>
          <target state="new">We cover that in detail in <bpt id="p1">[</bpt>Assembling the rendering framework<ept id="p1">](tutorial--assembling-the-rendering-pipeline.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If you're more interested in how the player controls update the game state, then check out <bpt id="p1">[</bpt>Adding controls<ept id="p1">](tutorial--adding-controls.md)</ept>.</source>
          <target state="new">If you're more interested in how the player controls update the game state, then check out <bpt id="p1">[</bpt>Adding controls<ept id="p1">](tutorial--adding-controls.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Complete code sample for this section</source>
          <target state="new">Complete code sample for this section</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Simple3DGame.h</source>
          <target state="new">Simple3DGame.h</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Simple3DGame.cpp</source>
          <target state="new">Simple3DGame.cpp</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Level.h</source>
          <target state="new">Level.h</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Level.cpp</source>
          <target state="new">Level.cpp</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Level1.h</source>
          <target state="new">Level1.h</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Level1.cpp</source>
          <target state="new">Level1.cpp</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Level2.h</source>
          <target state="new">Level2.h</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Level2.cpp</source>
          <target state="new">Level2.cpp</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Level3.h</source>
          <target state="new">Level3.h</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Level3.cpp</source>
          <target state="new">Level3.cpp</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Level4.h</source>
          <target state="new">Level4.h</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Level4.cpp</source>
          <target state="new">Level4.cpp</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Level5.h</source>
          <target state="new">Level5.h</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Level5.cpp</source>
          <target state="new">Level5.cpp</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Level6.h</source>
          <target state="new">Level6.h</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Level6.cpp</source>
          <target state="new">Level6.cpp</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Animate.h</source>
          <target state="new">Animate.h</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Animate.cpp</source>
          <target state="new">Animate.cpp</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new">Note</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
          <target state="new">This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</source>
          <target state="new">If you’re developing for Windows 8.x or Windows Phone 8.x, see the <bpt id="p1">[</bpt>archived documentation<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept>.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Create a simple UWP game with DirectX</source>
          <target state="new">Create a simple UWP game with DirectX</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>