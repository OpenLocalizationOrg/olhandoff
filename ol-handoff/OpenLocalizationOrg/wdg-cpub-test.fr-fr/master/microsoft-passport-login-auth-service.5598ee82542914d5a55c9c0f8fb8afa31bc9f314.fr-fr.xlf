<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>title: Create a Microsoft Passport login service</source>
          <target state="new">title: Create a Microsoft Passport login service</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>description: This is Part 2 of a complete walkthrough on how to use Microsoft Passport as an alternative to traditional username and password authentication systems in Windows 10 UWP (Universal Windows platform) apps.</source>
          <target state="new">description: This is Part 2 of a complete walkthrough on how to use Microsoft Passport as an alternative to traditional username and password authentication systems in Windows 10 UWP (Universal Windows platform) apps.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ms.assetid: ECC9EF3D-E0A1-4BC4-94FA-3215E6CFF0E4</source>
          <target state="new">ms.assetid: ECC9EF3D-E0A1-4BC4-94FA-3215E6CFF0E4</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Create a Microsoft Passport login service</source>
          <target state="new">Create a Microsoft Passport login service</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target state="new">\[Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</source>
          <target state="new">Microsoft makes no warranties, express or implied, with respect to the information provided here.\]</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is Part 2 of a complete walkthrough on how to use Microsoft Passport as an alternative to traditional username and password authentication systems in Windows 10 UWP (Universal Windows platform) apps.</source>
          <target state="new">This is Part 2 of a complete walkthrough on how to use Microsoft Passport as an alternative to traditional username and password authentication systems in Windows 10 UWP (Universal Windows platform) apps.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This article picks up where Part 1, <bpt id="p1">[</bpt>Microsoft Passport login app<ept id="p1">](microsoft-passport-login.md)</ept>, left off and extends the functionality to demonstrate how you can integrate Microsoft Passport into your existing application.</source>
          <target state="new">This article picks up where Part 1, <bpt id="p1">[</bpt>Microsoft Passport login app<ept id="p1">](microsoft-passport-login.md)</ept>, left off and extends the functionality to demonstrate how you can integrate Microsoft Passport into your existing application.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In order to build this project, you'll need some experience with C#, and XAML.</source>
          <target state="new">In order to build this project, you'll need some experience with C#, and XAML.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You'll also need to be using Visual Studio 2015 (Community Edition or greater) on a Windows 10 machine.</source>
          <target state="new">You'll also need to be using Visual Studio 2015 (Community Edition or greater) on a Windows 10 machine.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Exercise 1: Server Side Logic</source>
          <target state="new">Exercise 1: Server Side Logic</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this exercise you will be starting with the Passport application built in the first lab and creating a local mock server and database.</source>
          <target state="new">In this exercise you will be starting with the Passport application built in the first lab and creating a local mock server and database.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This hands on lab is designed to teach how Microsoft Passport could be integrated into an existing system.</source>
          <target state="new">This hands on lab is designed to teach how Microsoft Passport could be integrated into an existing system.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>By using a mock server and mock database a lot of unrelated setup is eliminated.</source>
          <target state="new">By using a mock server and mock database a lot of unrelated setup is eliminated.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In your own applications you will need to replace the mock objects with the real services and databases.</source>
          <target state="new">In your own applications you will need to replace the mock objects with the real services and databases.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To begin, open up the PassportLogin solution from the first Passport Hands On Lab.</source>
          <target state="new">To begin, open up the PassportLogin solution from the first Passport Hands On Lab.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You will start by implementing the mock server and mock database.</source>
          <target state="new">You will start by implementing the mock server and mock database.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Create a new folder called "AuthService".</source>
          <target state="new">Create a new folder called "AuthService".</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In solution explorer right click on the solution "PassportLogin (Universal Windows)" and select Add &gt; New Folder.</source>
          <target state="new">In solution explorer right click on the solution "PassportLogin (Universal Windows)" and select Add &gt; New Folder.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create UserAccount and PassportDevices classes that will act as models for data to be saved in the mock database.</source>
          <target state="new">Create UserAccount and PassportDevices classes that will act as models for data to be saved in the mock database.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The UserAccount will be similar to the user model implemented on a traditional authentication server.</source>
          <target state="new">The UserAccount will be similar to the user model implemented on a traditional authentication server.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Right click on the AuthService folder and add a new class called "UserAccount.cs."</source>
          <target state="new">Right click on the AuthService folder and add a new class called "UserAccount.cs."</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Change the class definition to be public and then add the following public properties.</source>
          <target state="new">Change the class definition to be public and then add the following public properties.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You will need the following reference.</source>
          <target state="new">You will need the following reference.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You may have noticed the commented out list of PassportDevices.</source>
          <target state="new">You may have noticed the commented out list of PassportDevices.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is a modification you will need to make to an existing user model in your current implementation.</source>
          <target state="new">This is a modification you will need to make to an existing user model in your current implementation.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The list of PassportDevices will contain a deviceID, the public key made from Microsoft Passport, and a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyCredentialAttestationResult<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn973034)</ept>.</source>
          <target state="new">The list of PassportDevices will contain a deviceID, the public key made from Microsoft Passport, and a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyCredentialAttestationResult<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn973034)</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For this hands on lab you will need to implement the keyAttestationResult as they are only provided by Microsoft Passport on devices that have a TPM (Trusted Platform Modules) chip.</source>
          <target state="new">For this hands on lab you will need to implement the keyAttestationResult as they are only provided by Microsoft Passport on devices that have a TPM (Trusted Platform Modules) chip.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>KeyCredentialAttestationResult<ept id="p1">**</ept> is a combination of multiple properties and would need to be split in order to save and load them with a database.</source>
          <target state="new">The <bpt id="p1">**</bpt>KeyCredentialAttestationResult<ept id="p1">**</ept> is a combination of multiple properties and would need to be split in order to save and load them with a database.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create a new class in the AuthService folder called "PassportDevice.cs".</source>
          <target state="new">Create a new class in the AuthService folder called "PassportDevice.cs".</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is the model for the passport devices as discussed above.</source>
          <target state="new">This is the model for the passport devices as discussed above.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Change the class definition to be public and add the following properties.</source>
          <target state="new">Change the class definition to be public and add the following properties.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Return to in UserAccount.cs and uncomment the list of Passport devices.</source>
          <target state="new">Return to in UserAccount.cs and uncomment the list of Passport devices.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>With the model for the UserAccount and the PassportDevice created, you need to create another new class in the AuthService that will act as the mock database.</source>
          <target state="new">With the model for the UserAccount and the PassportDevice created, you need to create another new class in the AuthService that will act as the mock database.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>As this is a mock database from where you will be saving and loading a list of user accounts locally.</source>
          <target state="new">As this is a mock database from where you will be saving and loading a list of user accounts locally.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the real world this would be your database implementation.</source>
          <target state="new">In the real world this would be your database implementation.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Create a new class in AuthService called "MockStore.cs".</source>
          <target state="new">Create a new class in AuthService called "MockStore.cs".</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Change the class definition to public.</source>
          <target state="new">Change the class definition to public.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As the mock store will save and load a list of user accounts locally you can implement the logic to save and load that list using an XmlSerializer.</source>
          <target state="new">As the mock store will save and load a list of user accounts locally you can implement the logic to save and load that list using an XmlSerializer.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You will also need to remember the filename and save location.</source>
          <target state="new">You will also need to remember the filename and save location.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In MockStore.cs implement the following:</source>
          <target state="new">In MockStore.cs implement the following:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the load method you may have noticed that an InitializeSampleUserAccounts method was commented out.</source>
          <target state="new">In the load method you may have noticed that an InitializeSampleUserAccounts method was commented out.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You will need to create this method in the MockStore.cs.</source>
          <target state="new">You will need to create this method in the MockStore.cs.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This method will populate the user accounts list so that a login can take place.</source>
          <target state="new">This method will populate the user accounts list so that a login can take place.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the real world the user database would already be populated.</source>
          <target state="new">In the real world the user database would already be populated.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this step you will also be creating a constructor that will initialise the user list and call load.</source>
          <target state="new">In this step you will also be creating a constructor that will initialise the user list and call load.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Now that the InitalizeSampleUserAccounts method exists uncomment the method call in the LoadAccountListAsync method.</source>
          <target state="new">Now that the InitalizeSampleUserAccounts method exists uncomment the method call in the LoadAccountListAsync method.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The user accounts list in mock store can now be saved and loaded.</source>
          <target state="new">The user accounts list in mock store can now be saved and loaded.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Other parts of the application will need to have access to this list so there will need to be some methods to retrieve this data.</source>
          <target state="new">Other parts of the application will need to have access to this list so there will need to be some methods to retrieve this data.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Underneath the InitializeSampleUserAccounts method, add the following get methods.</source>
          <target state="new">Underneath the InitializeSampleUserAccounts method, add the following get methods.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>They will allow you to get a userid, a single user, a list of users for a specific Passport device, and also get the public key for the user on a specific device.</source>
          <target state="new">They will allow you to get a userid, a single user, a list of users for a specific Passport device, and also get the public key for the user on a specific device.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The next methods to implement will handle simple operations to add account, remove account, and also remove device.</source>
          <target state="new">The next methods to implement will handle simple operations to add account, remove account, and also remove device.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remove device is needed as Microsoft Passport is device specific.</source>
          <target state="new">Remove device is needed as Microsoft Passport is device specific.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For each device to which you log in, a new public and private key pair will be created by Microsoft Passport.</source>
          <target state="new">For each device to which you log in, a new public and private key pair will be created by Microsoft Passport.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It is like having a different password for each device you sign in on, the only thing is you don’t need to remember all those passwords the server does.</source>
          <target state="new">It is like having a different password for each device you sign in on, the only thing is you don’t need to remember all those passwords the server does.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Add the following methods into the MockStore.cs</source>
          <target state="new">Add the following methods into the MockStore.cs</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In the MockStore class add a method that will add Passport related information to an existing UserAccount.</source>
          <target state="new">In the MockStore class add a method that will add Passport related information to an existing UserAccount.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This method will be called PassportUpdateDetails and will take parameters to identify the user, and the Passport details.</source>
          <target state="new">This method will be called PassportUpdateDetails and will take parameters to identify the user, and the Passport details.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The KeyAttestationResult has been commented out when creating a PassportDevice, in a real world application you would require this.</source>
          <target state="new">The KeyAttestationResult has been commented out when creating a PassportDevice, in a real world application you would require this.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">845f281e6bda3d1d3fde31c95a200626c3595cd8</xliffext:olfilehash>
  </header>
</xliff>