<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3aae15c6a71990b56ab3a3db41a8949418f90cbe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\controls-and-patterns\controls-and-events-intro.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You create the UI for your app by using controls such as buttons, text boxes, and combo boxes to display data and get user input.</source>
          <target state="new">You create the UI for your app by using controls such as buttons, text boxes, and combo boxes to display data and get user input.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Here, we show you how to add controls to your app.</source>
          <target state="new">Here, we show you how to add controls to your app.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Add controls and handle events</source>
          <target state="new">Add controls and handle events</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Intro to controls and events</source>
          <target state="new">Intro to controls and events</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You create the UI for your app by using controls such as buttons, text boxes, and combo boxes to display data and get user input.</source>
          <target state="new">You create the UI for your app by using controls such as buttons, text boxes, and combo boxes to display data and get user input.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here, we show you how to add controls to your app.</source>
          <target state="new">Here, we show you how to add controls to your app.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are 3 key steps to adding controls to your app:</source>
          <target state="new">There are 3 key steps to adding controls to your app:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Add a control to your app UI.</source>
          <target state="new">Add a control to your app UI.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Set properties on the control, such as width, height, or foreground color.</source>
          <target state="new">Set properties on the control, such as width, height, or foreground color.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Add code to the control's event handlers so that it does something.</source>
          <target state="new">Add code to the control's event handlers so that it does something.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Add a control</source>
          <target state="new">Add a control</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can add a control to an app in several ways:</source>
          <target state="new">You can add a control to an app in several ways:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use a design tool like Blend for Visual Studio or the Microsoft Visual Studio Extensible Application Markup Language (XAML) designer.</source>
          <target state="new">Use a design tool like Blend for Visual Studio or the Microsoft Visual Studio Extensible Application Markup Language (XAML) designer.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add the control to the XAML markup in the Visual Studio XAML editor.</source>
          <target state="new">Add the control to the XAML markup in the Visual Studio XAML editor.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Add the control in code.</source>
          <target state="new">Add the control in code.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Controls that you add in code are visible when the app runs, but are not visible in the Visual Studio XAML designer.</source>
          <target state="new">Controls that you add in code are visible when the app runs, but are not visible in the Visual Studio XAML designer.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In Visual Studio, when you add and manipulate controls in your app, you can use many of the program's features, including the Toolbox, XAML designer, XAML editor, and the Properties window.</source>
          <target state="new">In Visual Studio, when you add and manipulate controls in your app, you can use many of the program's features, including the Toolbox, XAML designer, XAML editor, and the Properties window.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Visual Studio Toolbox displays many of the controls that you can use in your app.</source>
          <target state="new">The Visual Studio Toolbox displays many of the controls that you can use in your app.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To add a control to your app, double-click it in the Toolbox.</source>
          <target state="new">To add a control to your app, double-click it in the Toolbox.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, when you double-click the TextBox control, this XAML is added to the XAML view.</source>
          <target state="new">For example, when you double-click the TextBox control, this XAML is added to the XAML view.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also drag the control from the Toolbox to the XAML designer.</source>
          <target state="new">You can also drag the control from the Toolbox to the XAML designer.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Set the name of a control</source>
          <target state="new">Set the name of a control</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To work with a control in code, you set its <bpt id="p1">[</bpt>x:Name<ept id="p1">](../xaml-platform/x-name-attribute.md)</ept> attribute and reference it by name in your code.</source>
          <target state="new">To work with a control in code, you set its <bpt id="p1">[</bpt>x:Name<ept id="p1">](../xaml-platform/x-name-attribute.md)</ept> attribute and reference it by name in your code.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can set the name in the Visual Studio Properties window or in XAML.</source>
          <target state="new">You can set the name in the Visual Studio Properties window or in XAML.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here's how to set the name of the currently selected control by using the Name text box at the top of the Properties window.</source>
          <target state="new">Here's how to set the name of the currently selected control by using the Name text box at the top of the Properties window.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To name a control</source>
          <target state="new">To name a control</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Select the element to name.</source>
          <target state="new">Select the element to name.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the Properties panel, type a name into the Name text box.</source>
          <target state="new">In the Properties panel, type a name into the Name text box.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Press Enter to commit the name.</source>
          <target state="new">Press Enter to commit the name.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Name property in the Visual Studio designer</source>
          <target state="new">Name property in the Visual Studio designer</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Here's how to set the name of a control in the XAML editor by adding the x:Name attribute.</source>
          <target state="new">Here's how to set the name of a control in the XAML editor by adding the x:Name attribute.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Set the control properties</source>
          <target state="new">Set the control properties</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You use properties to specify the appearance, content, and other attributes of controls.</source>
          <target state="new">You use properties to specify the appearance, content, and other attributes of controls.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you add a control using a design tool, some properties that control size, position, and content might be set for you by Visual Studio.</source>
          <target state="new">When you add a control using a design tool, some properties that control size, position, and content might be set for you by Visual Studio.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can change some properties, such as Width, Height or Margin, by selecting and manipulating the control in the Design view.</source>
          <target state="new">You can change some properties, such as Width, Height or Margin, by selecting and manipulating the control in the Design view.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This illustration shows some of the resizing tools available in Design view.</source>
          <target state="new">This illustration shows some of the resizing tools available in Design view.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Resizing tools in the Visual Studio designer</source>
          <target state="new">Resizing tools in the Visual Studio designer</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You might want to let the control be sized and positioned automatically.</source>
          <target state="new">You might want to let the control be sized and positioned automatically.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In this case, you can reset the size and position properties that Visual Studio set for you.</source>
          <target state="new">In this case, you can reset the size and position properties that Visual Studio set for you.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To reset a property</source>
          <target state="new">To reset a property</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the Properties panel, click the property marker next to the property value.</source>
          <target state="new">In the Properties panel, click the property marker next to the property value.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The property menu opens.</source>
          <target state="new">The property menu opens.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the property menu, click Reset.</source>
          <target state="new">In the property menu, click Reset.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Visual Studio property reset menu option</source>
          <target state="new">Visual Studio property reset menu option</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can set control properties in the Properties window, in XAML, or in code.</source>
          <target state="new">You can set control properties in the Properties window, in XAML, or in code.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, to change the foreground color for a Button, you set the control's Foreground property.</source>
          <target state="new">For example, to change the foreground color for a Button, you set the control's Foreground property.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This illustration shows how to set the Foreground property by using the color picker in the Properties window.</source>
          <target state="new">This illustration shows how to set the Foreground property by using the color picker in the Properties window.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Color picker in the Visual Studio designer</source>
          <target state="new">Color picker in the Visual Studio designer</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Here's how to set the Foreground property in the XAML editor.</source>
          <target state="new">Here's how to set the Foreground property in the XAML editor.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Notice the Visual Studio IntelliSense window that opens to help you with the syntax.</source>
          <target state="new">Notice the Visual Studio IntelliSense window that opens to help you with the syntax.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Intellisense in XAML part 1</source>
          <target state="new">Intellisense in XAML part 1</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Intellisense in XAML part 2</source>
          <target state="new">Intellisense in XAML part 2</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Here's the resulting XAML after you set the Foreground property.</source>
          <target state="new">Here's the resulting XAML after you set the Foreground property.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Here's how to set the Foreground property in code.</source>
          <target state="new">Here's how to set the Foreground property in code.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Create an event handler</source>
          <target state="new">Create an event handler</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Each control has events that enable you to respond to actions from your user or other changes in your app.</source>
          <target state="new">Each control has events that enable you to respond to actions from your user or other changes in your app.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, a Button control has a Click event that is raised when a user clicks the Button.</source>
          <target state="new">For example, a Button control has a Click event that is raised when a user clicks the Button.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You create a method, called an event handler, to handle the event.</source>
          <target state="new">You create a method, called an event handler, to handle the event.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can associate a control's event with an event handler method in the Properties window, in XAML, or in code.</source>
          <target state="new">You can associate a control's event with an event handler method in the Properties window, in XAML, or in code.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more info about events, see <bpt id="p1">[</bpt>Events and routed events overview<ept id="p1">](../xaml-platform/events-and-routed-events-overview.md)</ept>.</source>
          <target state="new">For more info about events, see <bpt id="p1">[</bpt>Events and routed events overview<ept id="p1">](../xaml-platform/events-and-routed-events-overview.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To create an event handler, select the control and then click the Events tab at the top of the Properties window.</source>
          <target state="new">To create an event handler, select the control and then click the Events tab at the top of the Properties window.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The Properties window lists all of the events available for that control.</source>
          <target state="new">The Properties window lists all of the events available for that control.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Here are some of the events for a Button.</source>
          <target state="new">Here are some of the events for a Button.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Visual Studio event list</source>
          <target state="new">Visual Studio event list</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To create an event handler with the default name, double-click the text box next to the event name in the Properties window.</source>
          <target state="new">To create an event handler with the default name, double-click the text box next to the event name in the Properties window.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To create an event handler with a custom name, type the name of your choice into the text box and press enter.</source>
          <target state="new">To create an event handler with a custom name, type the name of your choice into the text box and press enter.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The event handler is created and the code-behind file is opened in the code editor.</source>
          <target state="new">The event handler is created and the code-behind file is opened in the code editor.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The event handler method has 2 parameters.</source>
          <target state="new">The event handler method has 2 parameters.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The first is <ph id="ph1">`sender`</ph>, which is a reference to the object where the handler is attached.</source>
          <target state="new">The first is <ph id="ph1">`sender`</ph>, which is a reference to the object where the handler is attached.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`sender`</ph> parameter is an <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> type.</source>
          <target state="new">The <ph id="ph1">`sender`</ph> parameter is an <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> type.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You typically cast <ph id="ph1">`sender`</ph> to a more precise type if you expect to check or change the state on the <ph id="ph2">`sender`</ph> object itself.</source>
          <target state="new">You typically cast <ph id="ph1">`sender`</ph> to a more precise type if you expect to check or change the state on the <ph id="ph2">`sender`</ph> object itself.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Based on your own app design, you expect a type that is safe to cast the <ph id="ph1">`sender`</ph> to, based on where the handler is attached.</source>
          <target state="new">Based on your own app design, you expect a type that is safe to cast the <ph id="ph1">`sender`</ph> to, based on where the handler is attached.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The second value is event data, which generally appears in signatures as the <ph id="ph1">`e`</ph> or <ph id="ph2">`args`</ph> parameter.</source>
          <target state="new">The second value is event data, which generally appears in signatures as the <ph id="ph1">`e`</ph> or <ph id="ph2">`args`</ph> parameter.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Here's code that handles the Click event of a Button named <ph id="ph1">`Button1`</ph>.</source>
          <target state="new">Here's code that handles the Click event of a Button named <ph id="ph1">`Button1`</ph>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When you click the button, the Foreground property of the Button you clicked is set to blue.</source>
          <target state="new">When you click the button, the Foreground property of the Button you clicked is set to blue.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can also associate an event handler in XAML.</source>
          <target state="new">You can also associate an event handler in XAML.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the XAML editor, type in the event name that you want to handle.</source>
          <target state="new">In the XAML editor, type in the event name that you want to handle.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Visual Studio shows an IntelliSense window when you begin typing.</source>
          <target state="new">Visual Studio shows an IntelliSense window when you begin typing.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>After you specify the event, you can double-click <ph id="ph1">`&lt;New Event Handler&gt;`</ph> in the IntelliSense window to create a new event handler with the default name, or select an existing event handler from the list.</source>
          <target state="new">After you specify the event, you can double-click <ph id="ph1">`&lt;New Event Handler&gt;`</ph> in the IntelliSense window to create a new event handler with the default name, or select an existing event handler from the list.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Here's the IntelliSense window that appears.</source>
          <target state="new">Here's the IntelliSense window that appears.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>It helps you create a new event handler or select an existing event handler.</source>
          <target state="new">It helps you create a new event handler or select an existing event handler.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Intellisense for the click event</source>
          <target state="new">Intellisense for the click event</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This example shows how to associate a Click event with an event handler named Button_Click in XAML.</source>
          <target state="new">This example shows how to associate a Click event with an event handler named Button_Click in XAML.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can also associate an event with its event handler in the code-behind.</source>
          <target state="new">You can also associate an event with its event handler in the code-behind.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Here's how to associate an event handler in code.</source>
          <target state="new">Here's how to associate an event handler in code.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</source>
          <target state="new">\[This article contains information that is specific to Universal Windows Platform (UWP) apps and Windows 10.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For Windows 8.1 guidance, please download the <bpt id="p1">[</bpt>Windows 8.1 guidelines PDF<ept id="p1">](https://go.microsoft.com/fwlink/p/?linkid=258743)</ept>.\]</source>
          <target state="new">For Windows 8.1 guidance, please download the <bpt id="p1">[</bpt>Windows 8.1 guidelines PDF<ept id="p1">](https://go.microsoft.com/fwlink/p/?linkid=258743)</ept>.\]</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Command bars</source>
          <target state="new">Command bars</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Search</source>
          <target state="new">Search</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Flyouts</source>
          <target state="new">Flyouts</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>