<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>description: This article explains how to support copy and paste in Universal Windows Platform (UWP) apps using the clipboard.</source>
          <target state="new">description: This article explains how to support copy and paste in Universal Windows Platform (UWP) apps using the clipboard.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>title: Copy and paste</source>
          <target state="new">title: Copy and paste</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>ms.assetid: E882DC15-E12D-4420-B49D-F495BB484BEE</source>
          <target state="new">ms.assetid: E882DC15-E12D-4420-B49D-F495BB484BEE</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Copy and paste</source>
          <target state="new">Copy and paste</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article explains how to support copy and paste in Universal Windows Platform (UWP) apps using the clipboard.</source>
          <target state="new">This article explains how to support copy and paste in Universal Windows Platform (UWP) apps using the clipboard.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Copy and paste is the classic way to exchange data either between apps, or within an app, and almost every app can support clipboard operations to some degree.</source>
          <target state="new">Copy and paste is the classic way to exchange data either between apps, or within an app, and almost every app can support clipboard operations to some degree.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Check for built-in clipboard support</source>
          <target state="new">Check for built-in clipboard support</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In many cases, you do not need to write code to support clipboard operations.</source>
          <target state="new">In many cases, you do not need to write code to support clipboard operations.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Many of the default XAML controls you can use to create apps already support clipboard operations.</source>
          <target state="new">Many of the default XAML controls you can use to create apps already support clipboard operations.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information about which controls are available, see the <bpt id="p1">[</bpt>controls list<ept id="p1">][ControlsList]</ept>.</source>
          <target state="new">For more information about which controls are available, see the <bpt id="p1">[</bpt>controls list<ept id="p1">][ControlsList]</ept>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Get set up</source>
          <target state="new">Get set up</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>First, include the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.ApplicationModel.DataTransfer<ept id="p2">**</ept><ept id="p1">][DataTransfer]</ept> namespace in your app.</source>
          <target state="new">First, include the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.ApplicationModel.DataTransfer<ept id="p2">**</ept><ept id="p1">][DataTransfer]</ept> namespace in your app.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Then, add an instance of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataPackage<ept id="p2">**</ept><ept id="p1">][DataPackage]</ept> object.</source>
          <target state="new">Then, add an instance of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DataPackage<ept id="p2">**</ept><ept id="p1">][DataPackage]</ept> object.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This object contains both the data the user wants to copy and any properties (such as a description) that you want to include.</source>
          <target state="new">This object contains both the data the user wants to copy and any properties (such as a description) that you want to include.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
```cs
DataPackage dataPackage = new DataPackage();
```

##</ph> Copy and cut

Copy and cut (also referred to as move) work almost exactly the same.</source>
          <target state="new"><ph id="ph1">
```cs
DataPackage dataPackage = new DataPackage();
```

##</ph> Copy and cut

Copy and cut (also referred to as move) work almost exactly the same.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Choose which operation you want using the [<bpt id="p1">**</bpt>DataPackage.RequestedOperation<ept id="p1">**</ept>][RequestedOperation] property.</source>
          <target state="new">Choose which operation you want using the [<bpt id="p1">**</bpt>DataPackage.RequestedOperation<ept id="p1">**</ept>][RequestedOperation] property.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>```cs
// copy 
dataPackage.RequestedOperation = DataPackageOperation.Copy;
// or cut
dataPackage.RequestedOperation = DataPackageOperation.Move;
```

Next, you can add the data that a user has selected to the [<bpt id="p1">**</bpt>DataPackage<ept id="p1">**</ept>][DataPackage] object.</source>
          <target state="new">```cs
// copy 
dataPackage.RequestedOperation = DataPackageOperation.Copy;
// or cut
dataPackage.RequestedOperation = DataPackageOperation.Move;
```

Next, you can add the data that a user has selected to the [<bpt id="p1">**</bpt>DataPackage<ept id="p1">**</ept>][DataPackage] object.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If this data is supported by the <bpt id="p1">**</bpt>DataPackage<ept id="p1">**</ept> class, you can use one of the corresponding methods in the <bpt id="p2">**</bpt>DataPackage<ept id="p2">**</ept> object.</source>
          <target state="new">If this data is supported by the <bpt id="p1">**</bpt>DataPackage<ept id="p1">**</ept> class, you can use one of the corresponding methods in the <bpt id="p2">**</bpt>DataPackage<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Here's how to add text:

```cs
dataPackage.SetText(&amp;quot;Hello World!&amp;quot;);
```

The last step is to add the [<bpt id="p1">**</bpt>DataPackage<ept id="p1">**</ept>][DataPackage] to the clipboard by calling the static [<bpt id="p2">**</bpt>Clipboard.SetContent<ept id="p2">**</ept>][SetContent] method.</source>
          <target state="new">Here's how to add text:

```cs
dataPackage.SetText(&amp;quot;Hello World!&amp;quot;);
```

The last step is to add the [<bpt id="p1">**</bpt>DataPackage<ept id="p1">**</ept>][DataPackage] to the clipboard by calling the static [<bpt id="p2">**</bpt>Clipboard.SetContent<ept id="p2">**</ept>][SetContent] method.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>```cs
Clipboard.SetContent(dataPackage);
```
## Paste

To get the contents of the clipboard, call the static [<bpt id="p1">**</bpt>Clipboard.GetContent<ept id="p1">**</ept>[GetContent] method.</source>
          <target state="new">```cs
Clipboard.SetContent(dataPackage);
```
## Paste

To get the contents of the clipboard, call the static [<bpt id="p1">**</bpt>Clipboard.GetContent<ept id="p1">**</ept>[GetContent] method.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This method returns a [<bpt id="p1">**</bpt>DataPackageView<ept id="p1">**</ept>][DataPackageView] that contains the content.</source>
          <target state="new">This method returns a [<bpt id="p1">**</bpt>DataPackageView<ept id="p1">**</ept>][DataPackageView] that contains the content.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This object is almost identical to a [<bpt id="p1">**</bpt>DataPackage<ept id="p1">**</ept>][DataPackage] object, except that its contents are read-only.</source>
          <target state="new">This object is almost identical to a [<bpt id="p1">**</bpt>DataPackage<ept id="p1">**</ept>][DataPackage] object, except that its contents are read-only.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>With that object, you can use either the [<bpt id="p1">**</bpt>AvailableFormats<ept id="p1">**</ept>][AvailableFormats] or the [<bpt id="p2">**</bpt>Contains<ept id="p2">**</ept>][Contains] method to identify what formats are available.</source>
          <target state="new">With that object, you can use either the [<bpt id="p1">**</bpt>AvailableFormats<ept id="p1">**</ept>][AvailableFormats] or the [<bpt id="p2">**</bpt>Contains<ept id="p2">**</ept>][Contains] method to identify what formats are available.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Then, you can call the corresponding <bpt id="p1">**</bpt>DataPackageView<ept id="p1">**</ept> method to get the data.</source>
          <target state="new">Then, you can call the corresponding <bpt id="p1">**</bpt>DataPackageView<ept id="p1">**</ept> method to get the data.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>```cs
DataPackageView dataPackageView = Clipboard.GetContent();
if (dataPackageView.Contains(StandardDataFormats.Text))
{
    string text = await dataPackageView.GetTextAsync();
    // To output the text from this example, you need a TextBlock control
    TextOutput.Text = &amp;quot;Clipboard now contains: &amp;quot; + text;
}
```

## Track changes to the clipboard

In addition to copy and paste commands, you may also want to track clipboard changes.</source>
          <target state="new">```cs
DataPackageView dataPackageView = Clipboard.GetContent();
if (dataPackageView.Contains(StandardDataFormats.Text))
{
    string text = await dataPackageView.GetTextAsync();
    // To output the text from this example, you need a TextBlock control
    TextOutput.Text = &amp;quot;Clipboard now contains: &amp;quot; + text;
}
```

## Track changes to the clipboard

In addition to copy and paste commands, you may also want to track clipboard changes.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Do this by handling the clipboard's [<bpt id="p1">**</bpt>Clipboard.ContentChanged<ept id="p1">**</ept>][ContentChanged] event.</source>
          <target state="new">Do this by handling the clipboard's [<bpt id="p1">**</bpt>Clipboard.ContentChanged<ept id="p1">**</ept>][ContentChanged] event.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">```cs
Clipboard.ContentChanged += (s, e) =&amp;gt; 
{
    DataPackageView dataPackageView = Clipboard.GetContent();
    if (dataPackageView.Contains(StandardDataFormats.Text))
    {
        string text = await dataPackageView.GetTextAsync();
        // To output the text from this example, you need a TextBlock control
        TextOutput.Text = &amp;quot;Clipboard now contains: &amp;quot; + text;
    }
}
```

</ph></source>
          <target state="new"><ph id="ph1">```cs
Clipboard.ContentChanged += (s, e) =&amp;gt; 
{
    DataPackageView dataPackageView = Clipboard.GetContent();
    if (dataPackageView.Contains(StandardDataFormats.Text))
    {
        string text = await dataPackageView.GetTextAsync();
        // To output the text from this example, you need a TextBlock control
        TextOutput.Text = &amp;quot;Clipboard now contains: &amp;quot; + text;
    }
}
```

</ph></target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a447cb93cfba0156012f968c7aac99a72b82de0f</xliffext:olfilehash>
  </header>
</xliff>