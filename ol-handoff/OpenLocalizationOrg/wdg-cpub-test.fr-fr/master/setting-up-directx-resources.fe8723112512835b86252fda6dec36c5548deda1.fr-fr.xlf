<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1687d812b2cd54823e08cd1ce742acf063d8ba7b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\setting-up-directx-resources.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Set up DirectX resources and display an image</source>
          <target state="new">Set up DirectX resources and display an image</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Here, we show you how to create a Direct3D device, swap chain, and render-target view, and how to present the rendered image to the display.</source>
          <target state="new">Here, we show you how to create a Direct3D device, swap chain, and render-target view, and how to present the rendered image to the display.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Set up DirectX resources and display an image</source>
          <target state="new">Set up DirectX resources and display an image</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here, we show you how to create a Direct3D device, swap chain, and render-target view, and how to present the rendered image to the display.</source>
          <target state="new">Here, we show you how to create a Direct3D device, swap chain, and render-target view, and how to present the rendered image to the display.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Objective:<ept id="p1">**</ept> To set up DirectX resources in a C++ Universal Windows Platform (UWP) app and to display a solid color.</source>
          <target state="new"><bpt id="p1">**</bpt>Objective:<ept id="p1">**</ept> To set up DirectX resources in a C++ Universal Windows Platform (UWP) app and to display a solid color.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>We assume that you are familiar with C++.</source>
          <target state="new">We assume that you are familiar with C++.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You also need basic experience with graphics programming concepts.</source>
          <target state="new">You also need basic experience with graphics programming concepts.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Time to complete:<ept id="p1">**</ept> 20 minutes.</source>
          <target state="new"><bpt id="p1">**</bpt>Time to complete:<ept id="p1">**</ept> 20 minutes.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Instructions</source>
          <target state="new">Instructions</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>1. Declaring Direct3D interface variables with ComPtr</source>
          <target state="new">1. Declaring Direct3D interface variables with ComPtr</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>We declare Direct3D interface variables with the ComPtr <bpt id="p1">[</bpt>smart pointer<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh279674.aspx)</ept> template from the Windows Runtime C++ Template Library (WRL), so we can manage the lifetime of those variables in an exception safe manner.</source>
          <target state="new">We declare Direct3D interface variables with the ComPtr <bpt id="p1">[</bpt>smart pointer<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh279674.aspx)</ept> template from the Windows Runtime C++ Template Library (WRL), so we can manage the lifetime of those variables in an exception safe manner.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>We can then use those variables to access the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ComPtr class<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept> and its members.</source>
          <target state="new">We can then use those variables to access the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ComPtr class<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept> and its members.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you declare <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11RenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> with ComPtr, you can then use ComPtr’s <bpt id="p3">**</bpt>GetAddressOf<ept id="p3">**</ept> method to get the address of the pointer to <bpt id="p4">**</bpt>ID3D11RenderTargetView<ept id="p4">**</ept> (\*\*ID3D11RenderTargetView) to pass to <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11DeviceContext::OMSetRenderTargets<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept>.</source>
          <target state="new">If you declare <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11RenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> with ComPtr, you can then use ComPtr’s <bpt id="p3">**</bpt>GetAddressOf<ept id="p3">**</ept> method to get the address of the pointer to <bpt id="p4">**</bpt>ID3D11RenderTargetView<ept id="p4">**</ept> (\*\*ID3D11RenderTargetView) to pass to <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11DeviceContext::OMSetRenderTargets<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OMSetRenderTargets<ept id="p1">**</ept> binds the render target to the <bpt id="p2">[</bpt>output-merger stage<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb205120)</ept> to specify the render target as the output target.</source>
          <target state="new"><bpt id="p1">**</bpt>OMSetRenderTargets<ept id="p1">**</ept> binds the render target to the <bpt id="p2">[</bpt>output-merger stage<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb205120)</ept> to specify the render target as the output target.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>After the sample app is started, it initializes and loads, and is then ready to run.</source>
          <target state="new">After the sample app is started, it initializes and loads, and is then ready to run.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>2. Creating the Direct3D device</source>
          <target state="new">2. Creating the Direct3D device</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To use the Direct3D API to render a scene, we must first create a Direct3D device that represents the display adapter.</source>
          <target state="new">To use the Direct3D API to render a scene, we must first create a Direct3D device that represents the display adapter.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To create the Direct3D device, we call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> function.</source>
          <target state="new">To create the Direct3D device, we call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> function.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>We specify levels 9.1 through 11.1 in the array of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D\_FEATURE\_LEVEL<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476329)</ept> values.</source>
          <target state="new">We specify levels 9.1 through 11.1 in the array of <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D\_FEATURE\_LEVEL<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476329)</ept> values.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Direct3D walks the array in order and returns the highest supported feature level.</source>
          <target state="new">Direct3D walks the array in order and returns the highest supported feature level.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>So, to get the highest feature level available, we list the <bpt id="p1">**</bpt>D3D\_FEATURE\_LEVEL<ept id="p1">**</ept> array entries from highest to lowest.</source>
          <target state="new">So, to get the highest feature level available, we list the <bpt id="p1">**</bpt>D3D\_FEATURE\_LEVEL<ept id="p1">**</ept> array entries from highest to lowest.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>We pass the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11\_CREATE\_DEVICE\_BGRA\_SUPPORT<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476107#D3D11_CREATE_DEVICE_BGRA_SUPPORT)</ept> flag to the <bpt id="p3">*</bpt>Flags<ept id="p3">*</ept> parameter to make Direct3D resources interoperate with Direct2D.</source>
          <target state="new">We pass the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11\_CREATE\_DEVICE\_BGRA\_SUPPORT<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476107#D3D11_CREATE_DEVICE_BGRA_SUPPORT)</ept> flag to the <bpt id="p3">*</bpt>Flags<ept id="p3">*</ept> parameter to make Direct3D resources interoperate with Direct2D.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If we use the debug build, we also pass the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11\_CREATE\_DEVICE\_DEBUG<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476107#D3D11_CREATE_DEVICE_DEBUG)</ept> flag.</source>
          <target state="new">If we use the debug build, we also pass the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11\_CREATE\_DEVICE\_DEBUG<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476107#D3D11_CREATE_DEVICE_DEBUG)</ept> flag.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more info about debugging apps, see <bpt id="p1">[</bpt>Using the debug layer to debug apps<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/jj200584)</ept>.</source>
          <target state="new">For more info about debugging apps, see <bpt id="p1">[</bpt>Using the debug layer to debug apps<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/jj200584)</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We obtain the Direct3D 11.1 device (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept>) and device context (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>) by querying the Direct3D 11 device and device context that are returned from <bpt id="p5">[</bpt><bpt id="p6">**</bpt>D3D11CreateDevice<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept>.</source>
          <target state="new">We obtain the Direct3D 11.1 device (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</ept>) and device context (<bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext1<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</ept>) by querying the Direct3D 11 device and device context that are returned from <bpt id="p5">[</bpt><bpt id="p6">**</bpt>D3D11CreateDevice<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>3. Creating the swap chain</source>
          <target state="new">3. Creating the swap chain</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Next, we create a swap chain that the device uses for rendering and display.</source>
          <target state="new">Next, we create a swap chain that the device uses for rendering and display.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>We declare and initialize a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI\_SWAP\_CHAIN\_DESC1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</ept> structure to describe the swap chain.</source>
          <target state="new">We declare and initialize a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI\_SWAP\_CHAIN\_DESC1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404528)</ept> structure to describe the swap chain.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Then, we set up the swap chain as flip-model (that is, a swap chain that has the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI\_SWAP\_EFFECT\_FLIP\_SEQUENTIAL<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb173077#DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL)</ept> value set in the <bpt id="p3">**</bpt>SwapEffect<ept id="p3">**</ept> member) and set the <bpt id="p4">**</bpt>Format<ept id="p4">**</ept> member to <bpt id="p5">[</bpt><bpt id="p6">**</bpt>DXGI\_FORMAT\_B8G8R8A8\_UNORM<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/bb173059#DXGI_FORMAT_B8G8R8A8_UNORM)</ept>.</source>
          <target state="new">Then, we set up the swap chain as flip-model (that is, a swap chain that has the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI\_SWAP\_EFFECT\_FLIP\_SEQUENTIAL<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb173077#DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL)</ept> value set in the <bpt id="p3">**</bpt>SwapEffect<ept id="p3">**</ept> member) and set the <bpt id="p4">**</bpt>Format<ept id="p4">**</ept> member to <bpt id="p5">[</bpt><bpt id="p6">**</bpt>DXGI\_FORMAT\_B8G8R8A8\_UNORM<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/bb173059#DXGI_FORMAT_B8G8R8A8_UNORM)</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>We set the <bpt id="p1">**</bpt>Count<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DXGI\_SAMPLE\_DESC<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb173072)</ept> structure that the <bpt id="p4">**</bpt>SampleDesc<ept id="p4">**</ept> member specifies to 1 and the <bpt id="p5">**</bpt>Quality<ept id="p5">**</ept> member of <bpt id="p6">**</bpt>DXGI\_SAMPLE\_DESC<ept id="p6">**</ept> to zero because flip-model doesn’t support multiple sample antialiasing (MSAA).</source>
          <target state="new">We set the <bpt id="p1">**</bpt>Count<ept id="p1">**</ept> member of the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DXGI\_SAMPLE\_DESC<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb173072)</ept> structure that the <bpt id="p4">**</bpt>SampleDesc<ept id="p4">**</ept> member specifies to 1 and the <bpt id="p5">**</bpt>Quality<ept id="p5">**</ept> member of <bpt id="p6">**</bpt>DXGI\_SAMPLE\_DESC<ept id="p6">**</ept> to zero because flip-model doesn’t support multiple sample antialiasing (MSAA).</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>We set the <bpt id="p1">**</bpt>BufferCount<ept id="p1">**</ept> member to 2 so the swap chain can use a front buffer to present to the display device and a back buffer that serves as the render target.</source>
          <target state="new">We set the <bpt id="p1">**</bpt>BufferCount<ept id="p1">**</ept> member to 2 so the swap chain can use a front buffer to present to the display device and a back buffer that serves as the render target.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>We obtain the underlying DXGI device by querying the Direct3D 11.1 device.</source>
          <target state="new">We obtain the underlying DXGI device by querying the Direct3D 11.1 device.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To minimize power consumption, which is important to do on battery-powered devices such as laptops and tablets, we call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIDevice1::SetMaximumFrameLatency<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff471334)</ept> method with 1 as the maximum number of back buffer frames that DXGI can queue.</source>
          <target state="new">To minimize power consumption, which is important to do on battery-powered devices such as laptops and tablets, we call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIDevice1::SetMaximumFrameLatency<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff471334)</ept> method with 1 as the maximum number of back buffer frames that DXGI can queue.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This ensures that the app is rendered only after the vertical blank.</source>
          <target state="new">This ensures that the app is rendered only after the vertical blank.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To finally create the swap chain, we need to get the parent factory from the DXGI device.</source>
          <target state="new">To finally create the swap chain, we need to get the parent factory from the DXGI device.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIDevice::GetAdapter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174531)</ept> to get the adapter for the device, and then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGIObject::GetParent<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/bb174542)</ept> on the adapter to get the parent factory (<bpt id="p5">[</bpt><bpt id="p6">**</bpt>IDXGIFactory2<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/hh404556)</ept>).</source>
          <target state="new">We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIDevice::GetAdapter<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174531)</ept> to get the adapter for the device, and then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IDXGIObject::GetParent<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/bb174542)</ept> on the adapter to get the parent factory (<bpt id="p5">[</bpt><bpt id="p6">**</bpt>IDXGIFactory2<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/hh404556)</ept>).</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To create the swap chain, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIFactory2::CreateSwapChainForCoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404559)</ept> with the swap-chain descriptor and the app’s core window.</source>
          <target state="new">To create the swap chain, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGIFactory2::CreateSwapChainForCoreWindow<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh404559)</ept> with the swap-chain descriptor and the app’s core window.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>4. Creating the render-target view</source>
          <target state="new">4. Creating the render-target view</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To render graphics to the window, we need to create a render-target view.</source>
          <target state="new">To render graphics to the window, we need to create a render-target view.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::GetBuffer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174570)</ept> to get the swap chain’s back buffer to use when we create the render-target view.</source>
          <target state="new">We call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::GetBuffer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174570)</ept> to get the swap chain’s back buffer to use when we create the render-target view.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>We specify the back buffer as a 2D texture (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Texture2D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</ept>).</source>
          <target state="new">We specify the back buffer as a 2D texture (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Texture2D<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476635)</ept>).</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To create the render-target view, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateRenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476517)</ept> with the swap chain’s back buffer.</source>
          <target state="new">To create the render-target view, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateRenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476517)</ept> with the swap chain’s back buffer.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>We must specify to draw to the entire core window by specifying the view port (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11\_VIEWPORT<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476260)</ept>) as the full size of the swap chain's back buffer.</source>
          <target state="new">We must specify to draw to the entire core window by specifying the view port (<bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11\_VIEWPORT<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476260)</ept>) as the full size of the swap chain's back buffer.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>We use the view port in a call to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::RSSetViewports<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476480)</ept> to bind the view port to the <bpt id="p3">[</bpt>rasterizer stage<ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/bb205125)</ept> of the pipeline.</source>
          <target state="new">We use the view port in a call to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::RSSetViewports<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476480)</ept> to bind the view port to the <bpt id="p3">[</bpt>rasterizer stage<ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/bb205125)</ept> of the pipeline.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The rasterizer stage converts vector information into a raster image.</source>
          <target state="new">The rasterizer stage converts vector information into a raster image.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In this case, we don't require a conversion because we are just displaying a solid color.</source>
          <target state="new">In this case, we don't require a conversion because we are just displaying a solid color.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>5. Presenting the rendered image</source>
          <target state="new">5. Presenting the rendered image</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>We enter an endless loop to continually render and display the scene.</source>
          <target state="new">We enter an endless loop to continually render and display the scene.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In this loop, we call:</source>
          <target state="new">In this loop, we call:</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::OMSetRenderTargets<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept> to specify the render target as the output target.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::OMSetRenderTargets<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept> to specify the render target as the output target.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::ClearRenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476388)</ept> to clear the render target to a solid color.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11DeviceContext::ClearRenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476388)</ept> to clear the render target to a solid color.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::Present<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</ept> to present the rendered image to the window.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::Present<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</ept> to present the rendered image to the window.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Because we previously set the maximum frame latency to 1, Windows generally slows down the render loop to the screen refresh rate, typically around 60 Hz.</source>
          <target state="new">Because we previously set the maximum frame latency to 1, Windows generally slows down the render loop to the screen refresh rate, typically around 60 Hz.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Windows slows down the render loop by making the app sleep when the app calls <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Present<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</ept>.</source>
          <target state="new">Windows slows down the render loop by making the app sleep when the app calls <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Present<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174576)</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Windows makes the app sleep until the screen is refreshed.</source>
          <target state="new">Windows makes the app sleep until the screen is refreshed.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>6. Resizing the app window and the swap chain’s buffer</source>
          <target state="new">6. Resizing the app window and the swap chain’s buffer</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the size of the app window changes, the app must resize the swap chain’s buffers, recreate the render-target view, and then present the resized rendered image.</source>
          <target state="new">If the size of the app window changes, the app must resize the swap chain’s buffers, recreate the render-target view, and then present the resized rendered image.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To resize the swap chain’s buffers, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::ResizeBuffers<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174577)</ept>.</source>
          <target state="new">To resize the swap chain’s buffers, we call <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain::ResizeBuffers<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174577)</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In this call, we leave the number of buffers and the format of the buffers unchanged (the <bpt id="p1">*</bpt>BufferCount<ept id="p1">*</ept> parameter to two and the <bpt id="p2">*</bpt>NewFormat<ept id="p2">*</ept> parameter to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DXGI\_FORMAT\_B8G8R8A8\_UNORM<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/bb173059#DXGI_FORMAT_B8G8R8A8_UNORM)</ept>).</source>
          <target state="new">In this call, we leave the number of buffers and the format of the buffers unchanged (the <bpt id="p1">*</bpt>BufferCount<ept id="p1">*</ept> parameter to two and the <bpt id="p2">*</bpt>NewFormat<ept id="p2">*</ept> parameter to <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DXGI\_FORMAT\_B8G8R8A8\_UNORM<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/bb173059#DXGI_FORMAT_B8G8R8A8_UNORM)</ept>).</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>We make the size of the swap chain’s back buffer the same size as the resized window.</source>
          <target state="new">We make the size of the swap chain’s back buffer the same size as the resized window.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>After we resize the swap chain’s buffers, we create the new render target and present the new rendered image similarly to when we initialized the app.</source>
          <target state="new">After we resize the swap chain’s buffers, we create the new render target and present the new rendered image similarly to when we initialized the app.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Summary and next steps</source>
          <target state="new">Summary and next steps</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>We created a Direct3D device, swap chain, and render-target view, and presented the rendered image to the display.</source>
          <target state="new">We created a Direct3D device, swap chain, and render-target view, and presented the rendered image to the display.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Next, we also draw a triangle on the display.</source>
          <target state="new">Next, we also draw a triangle on the display.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Creating shaders and drawing primitives</source>
          <target state="new">Creating shaders and drawing primitives</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>