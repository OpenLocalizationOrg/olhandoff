<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b55a4f942eb5d8e80d50dcc7a8b418680a8deb88</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\porting\wpsl-to-uwp-root.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</source>
          <target state="new">If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Move from Windows Phone Silverlight to UWP</source>
          <target state="new">Move from Windows Phone Silverlight to UWP</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Move from Windows Phone Silverlight to UWP</source>
          <target state="new">Move from Windows Phone Silverlight to UWP</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</source>
          <target state="new">If you’re a developer with a Windows Phone Silverlight app, then you can make great use of your skill set and your source code in the move to Windows 10.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>With Windows 10, you can create a Universal Windows Platform (UWP) app, which is a single app package that your customers can install onto every kind of device.</source>
          <target state="new">With Windows 10, you can create a Universal Windows Platform (UWP) app, which is a single app package that your customers can install onto every kind of device.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more background on Windows 10, UWP apps, and the concepts of adaptive code and adaptive UI that we'll mention in this porting guide, see the <bpt id="p1">[</bpt>Guide to Universal Windows Platform (UWP) apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn894631)</ept>.</source>
          <target state="new">For more background on Windows 10, UWP apps, and the concepts of adaptive code and adaptive UI that we'll mention in this porting guide, see the <bpt id="p1">[</bpt>Guide to Universal Windows Platform (UWP) apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn894631)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you port your Windows Phone Silverlight app to a Windows 10 app, you'll be able to catch up on the mobile features that were <bpt id="p1">[</bpt>introduced in Windows Phone 8.1<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn632424)</ept>, and go far beyond them to use the Universal Windows Platform (UWP) whose app model and UI framework are universal across all Windows 10 devices.</source>
          <target state="new">When you port your Windows Phone Silverlight app to a Windows 10 app, you'll be able to catch up on the mobile features that were <bpt id="p1">[</bpt>introduced in Windows Phone 8.1<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn632424)</ept>, and go far beyond them to use the Universal Windows Platform (UWP) whose app model and UI framework are universal across all Windows 10 devices.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>That makes it possible to support PCs, tablets, phones, and a large number of other kinds of devices, from one code base and with one app package.</source>
          <target state="new">That makes it possible to support PCs, tablets, phones, and a large number of other kinds of devices, from one code base and with one app package.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>And that will multiply your app's potential audience and create new possibilities with shared data, purchased consumables, and so on.</source>
          <target state="new">And that will multiply your app's potential audience and create new possibilities with shared data, purchased consumables, and so on.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more info on new features, see <bpt id="p1">[</bpt>What's new for developers in Windows 10<ept id="p1">](https://dev.windows.com/getstarted/whats-new-windows-10)</ept>.</source>
          <target state="new">For more info on new features, see <bpt id="p1">[</bpt>What's new for developers in Windows 10<ept id="p1">](https://dev.windows.com/getstarted/whats-new-windows-10)</ept>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you choose to, the Windows Phone Silverlight version of your app and the Windows 10 version of it can both be available to customers at the same time.</source>
          <target state="new">If you choose to, the Windows Phone Silverlight version of your app and the Windows 10 version of it can both be available to customers at the same time.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  This guide is designed to help you port your Windows Phone Silverlight app to Windows 10 manually.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  This guide is designed to help you port your Windows Phone Silverlight app to Windows 10 manually.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In addition to using the information in this guide to port your app, you can try the developer preview of <bpt id="p1">**</bpt>Mobilize.NET's Silverlight Bridge<ept id="p1">**</ept> to help automate the porting process.</source>
          <target state="new">In addition to using the information in this guide to port your app, you can try the developer preview of <bpt id="p1">**</bpt>Mobilize.NET's Silverlight Bridge<ept id="p1">**</ept> to help automate the porting process.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This tool analyzes your app's source code and converts references to Windows Phone Silverlight controls and APIs to their UWP counterparts.</source>
          <target state="new">This tool analyzes your app's source code and converts references to Windows Phone Silverlight controls and APIs to their UWP counterparts.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because this tool is still in developer preview, it does not yet handle all conversion scenarios.</source>
          <target state="new">Because this tool is still in developer preview, it does not yet handle all conversion scenarios.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, most developers should be able to save some time and effort by starting with this tool.</source>
          <target state="new">However, most developers should be able to save some time and effort by starting with this tool.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To try the developer preview, visit <bpt id="p1">[</bpt>Mobilize.NET's website<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=624546)</ept>.</source>
          <target state="new">To try the developer preview, visit <bpt id="p1">[</bpt>Mobilize.NET's website<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=624546)</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>XAML and .NET, or HTML?</source>
          <target state="new">XAML and .NET, or HTML?</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Windows Phone Silverlight has a XAML UI framework based on Silverlight 4.0, and you program against a version of the .NET Framework and a small subset of UWP APIs.</source>
          <target state="new">Windows Phone Silverlight has a XAML UI framework based on Silverlight 4.0, and you program against a version of the .NET Framework and a small subset of UWP APIs.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Since you used Extensible Application Markup Language (XAML) in your Windows Phone Silverlight app, it's likely that XAML will be your choice for your Windows 10 version because most of your knowledge and experience will transfer, as will much of your source code and the software patterns you use.</source>
          <target state="new">Since you used Extensible Application Markup Language (XAML) in your Windows Phone Silverlight app, it's likely that XAML will be your choice for your Windows 10 version because most of your knowledge and experience will transfer, as will much of your source code and the software patterns you use.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Even your UI markup and design can port over readily.</source>
          <target state="new">Even your UI markup and design can port over readily.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You will find the managed APIs, the XAML markup, the UI framework, and the tooling all reassuringly familiar, and you can use C++, C#, or Visual Basic along with XAML in a UWP app.</source>
          <target state="new">You will find the managed APIs, the XAML markup, the UI framework, and the tooling all reassuringly familiar, and you can use C++, C#, or Visual Basic along with XAML in a UWP app.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You may be surprised at how relatively easy the process is, even if there is a challenge or two along the way.</source>
          <target state="new">You may be surprised at how relatively easy the process is, even if there is a challenge or two along the way.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br229583)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br229583)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Windows 10 supports much more of the .NET Framework than a Windows Phone Store app does.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  Windows 10 supports much more of the .NET Framework than a Windows Phone Store app does.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, Windows 10 has several System.ServiceModel.\* namespaces as well as System.Net, System.Net.NetworkInformation, and System.Net.Sockets.</source>
          <target state="new">For example, Windows 10 has several System.ServiceModel.\* namespaces as well as System.Net, System.Net.NetworkInformation, and System.Net.Sockets.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>So, now is a great time to port your Windows Phone Silverlight and have your .NET code just compile and work on the new platform.</source>
          <target state="new">So, now is a great time to port your Windows Phone Silverlight and have your .NET code just compile and work on the new platform.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Namespace and class mappings<ept id="p1">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Namespace and class mappings<ept id="p1">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Another great reason to recompile your existing .NET source code into a Windows 10 app is that you will benefit from .NET Native, which an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</source>
          <target state="new">Another great reason to recompile your existing .NET source code into a Windows 10 app is that you will benefit from .NET Native, which an ahead-of-time compilation technology that converts MSIL into natively-runnable machine code.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</source>
          <target state="new">.NET Native apps start faster, use less memory, and use less battery than their MSIL counterparts.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This porting guide will focus on XAML but, alternatively, you can build a functionally equivalent app—calling many of the same UWP APIs—using JavaScript, Cascading Style Sheets (CSS), and HTML5 along with the Windows Library for JavaScript.</source>
          <target state="new">This porting guide will focus on XAML but, alternatively, you can build a functionally equivalent app—calling many of the same UWP APIs—using JavaScript, Cascading Style Sheets (CSS), and HTML5 along with the Windows Library for JavaScript.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Although the Windows Runtime UI frameworks of XAML and HTML are different from one another, whichever one you choose will work universally across the full range of Windows devices.</source>
          <target state="new">Although the Windows Runtime UI frameworks of XAML and HTML are different from one another, whichever one you choose will work universally across the full range of Windows devices.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Targeting the universal or the mobile device family</source>
          <target state="new">Targeting the universal or the mobile device family</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>One option you have is to port your app to an app that targets the universal device family.</source>
          <target state="new">One option you have is to port your app to an app that targets the universal device family.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In this case, the app can be installed onto the widest range of devices.</source>
          <target state="new">In this case, the app can be installed onto the widest range of devices.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If your app calls APIs that are implemented only in the mobile device family, then you can guard those calls with adaptive code.</source>
          <target state="new">If your app calls APIs that are implemented only in the mobile device family, then you can guard those calls with adaptive code.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Alternatively, you can choose to port your app to an app that targets the mobile device family in which case you don't need to write adaptive code.</source>
          <target state="new">Alternatively, you can choose to port your app to an app that targets the mobile device family in which case you don't need to write adaptive code.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Adapting your app to multiple form factors</source>
          <target state="new">Adapting your app to multiple form factors</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The option you choose from the previous section will determine the range of devices that your app or apps will run on, and that may well be a very wide range of devices.</source>
          <target state="new">The option you choose from the previous section will determine the range of devices that your app or apps will run on, and that may well be a very wide range of devices.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Even limiting your app to the mobile device family still leaves you with a wide range of screen sizes to support.</source>
          <target state="new">Even limiting your app to the mobile device family still leaves you with a wide range of screen sizes to support.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>So, since your app will be running on form factors that it didn't formerly support, test your UI on those form factors and make any change necessary so that your UI adapts appropriately on each.</source>
          <target state="new">So, since your app will be running on form factors that it didn't formerly support, test your UI on those form factors and make any change necessary so that your UI adapts appropriately on each.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can think of this is a post-porting task, or a porting stretch-goal, and there is an example of it in practice in the <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](wpsl-to-uwp-case-study-bookstore2.md)</ept> case study.</source>
          <target state="new">You can think of this is a post-porting task, or a porting stretch-goal, and there is an example of it in practice in the <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](wpsl-to-uwp-case-study-bookstore2.md)</ept> case study.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Approaching porting layer-by-layer</source>
          <target state="new">Approaching porting layer-by-layer</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>View<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>View<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The view (together with the view model) makes up your app's UI.</source>
          <target state="new">The view (together with the view model) makes up your app's UI.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Ideally, the view consists of markup bound to observable properties of a view model.</source>
          <target state="new">Ideally, the view consists of markup bound to observable properties of a view model.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Another pattern (common and convenient, but only in the short term) is for imperative code in a code-behind file to directly manipulate UI elements.</source>
          <target state="new">Another pattern (common and convenient, but only in the short term) is for imperative code in a code-behind file to directly manipulate UI elements.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In either case, much of your UI markup and design—and even imperative code that manipulates UI elements—will be straightforward to port.</source>
          <target state="new">In either case, much of your UI markup and design—and even imperative code that manipulates UI elements—will be straightforward to port.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>View models and data models<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>View models and data models<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Even if you don't formally embrace separation-of-concerns patterns (such as MVVM), there is inevitably code present in your app that performs the function of view model and data model.</source>
          <target state="new">Even if you don't formally embrace separation-of-concerns patterns (such as MVVM), there is inevitably code present in your app that performs the function of view model and data model.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>View model code makes use of types in the UI framework namespaces.</source>
          <target state="new">View model code makes use of types in the UI framework namespaces.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Both view model and data model code also use non-visual operating system and .NET APIs (including APIs for data-access).</source>
          <target state="new">Both view model and data model code also use non-visual operating system and .NET APIs (including APIs for data-access).</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>And the vast majority of those are <bpt id="p1">[</bpt>available to a UWP app<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br211369)</ept>, so you can expect to be able to port much of this code without change.</source>
          <target state="new">And the vast majority of those are <bpt id="p1">[</bpt>available to a UWP app<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br211369)</ept>, so you can expect to be able to port much of this code without change.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remember, though: a view model is a model, or <bpt id="p1">*</bpt>abstraction<ept id="p1">*</ept>, of a view.</source>
          <target state="new">Remember, though: a view model is a model, or <bpt id="p1">*</bpt>abstraction<ept id="p1">*</ept>, of a view.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A view model provides the state and behavior of UI, while the view itself provides the visuals.</source>
          <target state="new">A view model provides the state and behavior of UI, while the view itself provides the visuals.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For this reason, any UI you adapt to the different form factors that the UWP allows you to run on will likely need corresponding view model changes.</source>
          <target state="new">For this reason, any UI you adapt to the different form factors that the UWP allows you to run on will likely need corresponding view model changes.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For networking and calling cloud services, you typically have the option between using .NET or UWP APIs.</source>
          <target state="new">For networking and calling cloud services, you typically have the option between using .NET or UWP APIs.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For the factors involved in making that decision, see <bpt id="p1">[</bpt>Cloud services, networking, and databases<ept id="p1">](wpsl-to-uwp-business-and-data.md#networking-cloud)</ept>.</source>
          <target state="new">For the factors involved in making that decision, see <bpt id="p1">[</bpt>Cloud services, networking, and databases<ept id="p1">](wpsl-to-uwp-business-and-data.md#networking-cloud)</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cloud services<ept id="p1">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Cloud services<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It's likely that some of your app (perhaps a great deal of it) runs in the cloud in the form of services.</source>
          <target state="new">It's likely that some of your app (perhaps a great deal of it) runs in the cloud in the form of services.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The part of the app running on the client device connects to those.</source>
          <target state="new">The part of the app running on the client device connects to those.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This is the part of a distributed app most likely to remain unchanged when porting the client part.</source>
          <target state="new">This is the part of a distributed app most likely to remain unchanged when porting the client part.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you don't already have one, a good cloud services option for your UWP app is <bpt id="p1">[</bpt>Microsoft Azure Mobile Services<ept id="p1">](http://azure.microsoft.com/services/mobile-services/)</ept>, which provides powerful back-end components that Universal Windows apps can call for services ranging from simple notifications for live tiles updates up to the kind of heavy-lifting scalability a server farm can provide.</source>
          <target state="new">If you don't already have one, a good cloud services option for your UWP app is <bpt id="p1">[</bpt>Microsoft Azure Mobile Services<ept id="p1">](http://azure.microsoft.com/services/mobile-services/)</ept>, which provides powerful back-end components that Universal Windows apps can call for services ranging from simple notifications for live tiles updates up to the kind of heavy-lifting scalability a server farm can provide.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Before or during the porting, consider whether your app could be improved by refactoring it so that code with a similar purpose is gathered together in layers and not scattered arbitrarily.</source>
          <target state="new">Before or during the porting, consider whether your app could be improved by refactoring it so that code with a similar purpose is gathered together in layers and not scattered arbitrarily.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Factoring your UWP app into layers like those described above makes it easier for you to make your app correct, to test it, and then subsequently to read and maintain it.</source>
          <target state="new">Factoring your UWP app into layers like those described above makes it easier for you to make your app correct, to test it, and then subsequently to read and maintain it.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can make functionality more reusable—and avoid some issues of UI API differences between platforms—by following the Model-View-ViewModel (<bpt id="p1">[</bpt>MVVM<ept id="p1">](http://msdn.microsoft.com/magazine/dd419663.aspx)</ept>) pattern.</source>
          <target state="new">You can make functionality more reusable—and avoid some issues of UI API differences between platforms—by following the Model-View-ViewModel (<bpt id="p1">[</bpt>MVVM<ept id="p1">](http://msdn.microsoft.com/magazine/dd419663.aspx)</ept>) pattern.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This pattern keeps the data, business, and UI parts of your app separate from one another.</source>
          <target state="new">This pattern keeps the data, business, and UI parts of your app separate from one another.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Even within the UI it can keep state and behavior separate, and separately testable, from the visuals.</source>
          <target state="new">Even within the UI it can keep state and behavior separate, and separately testable, from the visuals.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>With MVVM, you can write your data and business logic once and use it on all devices no matter the UI.</source>
          <target state="new">With MVVM, you can write your data and business logic once and use it on all devices no matter the UI.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It's likely that you'll be able to re-use much of the view model and view parts across devices, too.</source>
          <target state="new">It's likely that you'll be able to re-use much of the view model and view parts across devices, too.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>One or two exceptions to the rule</source>
          <target state="new">One or two exceptions to the rule</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>As you read this porting guide, you can refer to <bpt id="p1">[</bpt>Namespace and class mappings<ept id="p1">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept>.</source>
          <target state="new">As you read this porting guide, you can refer to <bpt id="p1">[</bpt>Namespace and class mappings<ept id="p1">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Fairly straightforward mapping is the general rule, and the namespace and class mappings table describes any exceptions.</source>
          <target state="new">Fairly straightforward mapping is the general rule, and the namespace and class mappings table describes any exceptions.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>At the feature level, the good news is that there's very little that's not supported in the UWP.</source>
          <target state="new">At the feature level, the good news is that there's very little that's not supported in the UWP.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Most of your skill set and source code translates very well over to UWP apps, as you'll read in the rest of this porting guide.</source>
          <target state="new">Most of your skill set and source code translates very well over to UWP apps, as you'll read in the rest of this porting guide.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>But, here are the few Windows Phone Silverlight features that you may have used for which there is no UWP equivalent.</source>
          <target state="new">But, here are the few Windows Phone Silverlight features that you may have used for which there is no UWP equivalent.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Feature for which there is no UWP equivalent</source>
          <target state="new">Feature for which there is no UWP equivalent</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Windows Phone Silverlight documentation for the feature</source>
          <target state="new">Windows Phone Silverlight documentation for the feature</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Microsoft XNA.</source>
          <target state="new">Microsoft XNA.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In general, <bpt id="p1">[</bpt>Microsoft DirectX<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> using C++ is the replacement.</source>
          <target state="new">In general, <bpt id="p1">[</bpt>Microsoft DirectX<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ee663274)</ept> using C++ is the replacement.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Developing games<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh452744)</ept> and <bpt id="p2">[</bpt>DirectX and XAML interop<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh825871)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Developing games<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh452744)</ept> and <bpt id="p2">[</bpt>DirectX and XAML interop<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/hh825871)</ept>.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>XNA Framework Class Library</source>
          <target state="new">XNA Framework Class Library</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Lens apps</source>
          <target state="new">Lens apps</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Lenses for Windows Phone 8</source>
          <target state="new">Lenses for Windows Phone 8</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Topic</source>
          <target state="new">Topic</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Namespace and class mappings</source>
          <target state="new">Namespace and class mappings</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This topic provides a comprehensive mapping of Windows Phone Silverlight APIs to their UWP equivalents.</source>
          <target state="new">This topic provides a comprehensive mapping of Windows Phone Silverlight APIs to their UWP equivalents.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Porting the project</source>
          <target state="new">Porting the project</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</source>
          <target state="new">You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="new">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>We highly recommend reading to the end of this porting guide, but we also understand that you're eager to forge ahead and get to the stage where your project builds and runs.</source>
          <target state="new">We highly recommend reading to the end of this porting guide, but we also understand that you're eager to forge ahead and get to the stage where your project builds and runs.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To that end, you can make temporary progress by commenting or stubbing out any non-essential code, and then returning to pay off that debt later.</source>
          <target state="new">To that end, you can make temporary progress by commenting or stubbing out any non-essential code, and then returning to pay off that debt later.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The table of troubleshooting symptoms and remedies in this topic may be helpful to you at this stage, although it's not a substitute for reading the next few topics.</source>
          <target state="new">The table of troubleshooting symptoms and remedies in this topic may be helpful to you at this stage, although it's not a substitute for reading the next few topics.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can always refer back to the table as you progress through the later topics.</source>
          <target state="new">You can always refer back to the table as you progress through the later topics.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Porting XAML and UI</source>
          <target state="new">Porting XAML and UI</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to UWP apps.</source>
          <target state="new">The practice of defining UI in the form of declarative XAML markup translates extremely well from Windows Phone Silverlight to UWP apps.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed "clr-namespace" to "using".</source>
          <target state="new">You'll find that large sections of your markup are compatible once you've updated system Resource key references, changed some element type names, and changed "clr-namespace" to "using".</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Porting for I/O, device, and app model</source>
          <target state="new">Porting for I/O, device, and app model</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Code that integrates with the device itself and its sensors involves input from, and output to, the user.</source>
          <target state="new">Code that integrates with the device itself and its sensors involves input from, and output to, the user.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>It can also involve processing data.</source>
          <target state="new">It can also involve processing data.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>But, this code is not generally thought of as either the UI layer or the data layer.</source>
          <target state="new">But, this code is not generally thought of as either the UI layer or the data layer.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</source>
          <target state="new">This code includes integration with the vibration controller, accelerometer, gyroscope, microphone and speaker (which intersect with speech recognition and synthesis), (geo)location, and input modalities such as touch, mouse, keyboard, and pen.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Porting business and data layers</source>
          <target state="new">Porting business and data layers</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Behind your UI are your business and data layers.</source>
          <target state="new">Behind your UI are your business and data layers.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The code in these layers calls operating system and .NET Framework APIs (for example, background processing, location, the camera, the file system, network, and other data access).</source>
          <target state="new">The code in these layers calls operating system and .NET Framework APIs (for example, background processing, location, the camera, the file system, network, and other data access).</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The vast majority of those are <bpt id="p1">[</bpt>available to a UWP app<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br211369)</ept>, so you can expect to be able to port much of this code without change.</source>
          <target state="new">The vast majority of those are <bpt id="p1">[</bpt>available to a UWP app<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br211369)</ept>, so you can expect to be able to port much of this code without change.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Porting for form factor and UX</source>
          <target state="new">Porting for form factor and UX</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Windows apps share a common look-and-feel across PCs, mobile devices, and many other kinds of devices.</source>
          <target state="new">Windows apps share a common look-and-feel across PCs, mobile devices, and many other kinds of devices.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The user interface, input, and interaction patterns are very similar, and a user moving between devices will welcome the familiar experience.</source>
          <target state="new">The user interface, input, and interaction patterns are very similar, and a user moving between devices will welcome the familiar experience.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Case study: Bookstore1</source>
          <target state="new">Case study: Bookstore1</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10 UWP app.</source>
          <target state="new">This topic presents a case study of porting a very simple Windows Phone Silverlight app to a Windows 10 UWP app.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</source>
          <target state="new">With Windows 10, you can create a single app package that your customers can install onto a wide range of devices, and that's what we'll do in this case study.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Case study: Bookstore2</source>
          <target state="new">Case study: Bookstore2</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This case study—which builds on the info given in <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](wpsl-to-uwp-case-study-bookstore1.md)</ept>—begins with a Windows Phone Silverlight app that displays grouped data in a <bpt id="p2">**</bpt>LongListSelector<ept id="p2">**</ept>.</source>
          <target state="new">This case study—which builds on the info given in <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](wpsl-to-uwp-case-study-bookstore1.md)</ept>—begins with a Windows Phone Silverlight app that displays grouped data in a <bpt id="p2">**</bpt>LongListSelector<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>In the view model, each instance of the class <bpt id="p1">**</bpt>Author<ept id="p1">**</ept> represents the group of the books written by that author, and in the <bpt id="p2">**</bpt>LongListSelector<ept id="p2">**</ept>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</source>
          <target state="new">In the view model, each instance of the class <bpt id="p1">**</bpt>Author<ept id="p1">**</ept> represents the group of the books written by that author, and in the <bpt id="p2">**</bpt>LongListSelector<ept id="p2">**</ept>, we can either view the list of books grouped by author or we can zoom out to see a jump list of authors.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="new">Documentation</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>What's new for developers in Windows 10</source>
          <target state="new">What's new for developers in Windows 10</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Guide to Universal Windows Platform (UWP) apps</source>
          <target state="new">Guide to Universal Windows Platform (UWP) apps</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic</source>
          <target state="new">Roadmap for Universal Windows Platform (UWP) apps using C# or Visual Basic</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>What's next for Windows Phone 8 developers<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/dn655121.aspx)</ept><ph id="ph1">
</ph><bpt id="p2">**</bpt>Magazine articles<ept id="p2">**</ept></source>
          <target state="new"><bpt id="p1">[</bpt>What's next for Windows Phone 8 developers<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/xaml/dn655121.aspx)</ept><ph id="ph1">
</ph><bpt id="p2">**</bpt>Magazine articles<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio Magazine: Windows Phone 8.1: A Giant Leap Forward for Convergence<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=398541)</ept><ph id="ph1">
</ph><bpt id="p2">**</bpt>Presentations<ept id="p2">**</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Visual Studio Magazine: Windows Phone 8.1: A Giant Leap Forward for Convergence<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=398541)</ept><ph id="ph1">
</ph><bpt id="p2">**</bpt>Presentations<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The Story of Bringing Nokia Music from Windows Phone to Windows 8</source>
          <target state="new">The Story of Bringing Nokia Music from Windows Phone to Windows 8</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>