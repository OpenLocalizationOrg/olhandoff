<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">edd8e5ecff66111f51de2dbf29e6464cdfee2a82</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\adding-visual-content-to-the-marble-maze-sample.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Adding visual content to the Marble Maze sample</source>
          <target state="new">Adding visual content to the Marble Maze sample</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This document describes how the Marble Maze game uses Direct3D and Direct2D in the Universal Windows Platform (UWP) app environment so that you can learn the patterns and adapt them when you work with your own game content.</source>
          <target state="new">This document describes how the Marble Maze game uses Direct3D and Direct2D in the Universal Windows Platform (UWP) app environment so that you can learn the patterns and adapt them when you work with your own game content.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Adding visual content to the Marble Maze sample</source>
          <target state="new">Adding visual content to the Marble Maze sample</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This document describes how the Marble Maze game uses Direct3D and Direct2D in the Universal Windows Platform (UWP) app environment so that you can learn the patterns and adapt them when you work with your own game content.</source>
          <target state="new">This document describes how the Marble Maze game uses Direct3D and Direct2D in the Universal Windows Platform (UWP) app environment so that you can learn the patterns and adapt them when you work with your own game content.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To learn how visual game components fit in the overall application structure of Marble Maze, see <bpt id="p1">[</bpt>Marble Maze application structure<ept id="p1">](marble-maze-application-structure.md)</ept>.</source>
          <target state="new">To learn how visual game components fit in the overall application structure of Marble Maze, see <bpt id="p1">[</bpt>Marble Maze application structure<ept id="p1">](marble-maze-application-structure.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>We followed these basic steps as we developed the visual aspects of Marble Maze:</source>
          <target state="new">We followed these basic steps as we developed the visual aspects of Marble Maze:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create a basic framework that initializes the Direct3D and Direct2D environments.</source>
          <target state="new">Create a basic framework that initializes the Direct3D and Direct2D environments.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Use image and model editing programs to design the 2-D and 3-D assets that appear in the game.</source>
          <target state="new">Use image and model editing programs to design the 2-D and 3-D assets that appear in the game.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Ensure that 2-D and 3-D assets properly load and appear in the game.</source>
          <target state="new">Ensure that 2-D and 3-D assets properly load and appear in the game.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Integrate vertex and pixel shaders that enhance the visual quality of the game assets.</source>
          <target state="new">Integrate vertex and pixel shaders that enhance the visual quality of the game assets.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Integrate game logic, such as animation and user input.</source>
          <target state="new">Integrate game logic, such as animation and user input.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>We also focused first on adding 3-D assets and then on 2-D assets.</source>
          <target state="new">We also focused first on adding 3-D assets and then on 2-D assets.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, we focused on core game logic before we added the menu system and timer.</source>
          <target state="new">For example, we focused on core game logic before we added the menu system and timer.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>We also needed to iterate through some of these steps multiple times during the development process.</source>
          <target state="new">We also needed to iterate through some of these steps multiple times during the development process.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, as we make changes to the mesh and marble models, we had to also change some of the shader code that supports those models.</source>
          <target state="new">For example, as we make changes to the mesh and marble models, we had to also change some of the shader code that supports those models.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The sample code that corresponds to this document is found in the <bpt id="p2">[</bpt>DirectX Marble Maze game sample<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=624011)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The sample code that corresponds to this document is found in the <bpt id="p2">[</bpt>DirectX Marble Maze game sample<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=624011)</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Here are some of the key points that this document discusses for when you work with DirectX and visual game content, namely, when you initialize the DirectX graphics libraries, load scene resources, and update and render the scene:</source>
          <target state="new">Here are some of the key points that this document discusses for when you work with DirectX and visual game content, namely, when you initialize the DirectX graphics libraries, load scene resources, and update and render the scene:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Adding game content typically involves many steps.</source>
          <target state="new">Adding game content typically involves many steps.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These steps also often require iteration.</source>
          <target state="new">These steps also often require iteration.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Game developers often focus first on adding 3-D game content and then on adding 2-D content.</source>
          <target state="new">Game developers often focus first on adding 3-D game content and then on adding 2-D content.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Reach more customers and give them all a great experience by supporting the greatest range of graphics hardware as possible.</source>
          <target state="new">Reach more customers and give them all a great experience by supporting the greatest range of graphics hardware as possible.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Cleanly separate design-time and run-time formats.</source>
          <target state="new">Cleanly separate design-time and run-time formats.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Structure your design-time assets to maximize flexibility and enable rapid iterations on content.</source>
          <target state="new">Structure your design-time assets to maximize flexibility and enable rapid iterations on content.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Format and compress your assets to load and render as efficiently as possible at run time.</source>
          <target state="new">Format and compress your assets to load and render as efficiently as possible at run time.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You create the Direct3D and Direct2D devices in a UWP app much like you do in a classic Windows desktop app.</source>
          <target state="new">You create the Direct3D and Direct2D devices in a UWP app much like you do in a classic Windows desktop app.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>One important difference is how the swap chain is associated with the output window.</source>
          <target state="new">One important difference is how the swap chain is associated with the output window.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When you design your game, ensure that the mesh format that you choose supports your key scenarios.</source>
          <target state="new">When you design your game, ensure that the mesh format that you choose supports your key scenarios.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, if your game requires collision, make sure that you can obtain collision data from your meshes.</source>
          <target state="new">For example, if your game requires collision, make sure that you can obtain collision data from your meshes.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Separate game logic from rendering logic by first updating all scene objects before you render them.</source>
          <target state="new">Separate game logic from rendering logic by first updating all scene objects before you render them.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You typically draw your 3-D scene objects, and then any 2-D objects that appear in front of the scene.</source>
          <target state="new">You typically draw your 3-D scene objects, and then any 2-D objects that appear in front of the scene.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Synchronize drawing to the vertical blank to ensure that your game does not spend time drawing frames that will never be actually shown on the display.</source>
          <target state="new">Synchronize drawing to the vertical blank to ensure that your game does not spend time drawing frames that will never be actually shown on the display.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Getting started with DirectX graphics</source>
          <target state="new">Getting started with DirectX graphics</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When we planned the Marble Maze Universal Windows Platform (UWP) game, we chose C++ and Direct3D 11.1 because they are the best choices for creating 3-D games that require maximum control over rendering and high performance.</source>
          <target state="new">When we planned the Marble Maze Universal Windows Platform (UWP) game, we chose C++ and Direct3D 11.1 because they are the best choices for creating 3-D games that require maximum control over rendering and high performance.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>DirectX 11.1 supports hardware from DirectX 9 to DirectX 11, and therefore can help you reach more customers more efficiently because you don't have to rewrite code for each of the earlier DirectX versions.</source>
          <target state="new">DirectX 11.1 supports hardware from DirectX 9 to DirectX 11, and therefore can help you reach more customers more efficiently because you don't have to rewrite code for each of the earlier DirectX versions.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Marble Maze uses Direct3D 11.1 to render the 3-D game assets, namely the marble and the maze.</source>
          <target state="new">Marble Maze uses Direct3D 11.1 to render the 3-D game assets, namely the marble and the maze.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Marble Maze also uses Direct2D, DirectWrite, and Windows Imaging Component (WIC) to draw the 2-D game assets, such as the menus and the timer.</source>
          <target state="new">Marble Maze also uses Direct2D, DirectWrite, and Windows Imaging Component (WIC) to draw the 2-D game assets, such as the menus and the timer.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Finally, Marble Maze uses XAML to provide an app bar and allows you to add XAML controls.</source>
          <target state="new">Finally, Marble Maze uses XAML to provide an app bar and allows you to add XAML controls.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Game development requires planning.</source>
          <target state="new">Game development requires planning.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you are new to DirectX graphics, we recommend that you read Creating a DirectX game to familiarize yourself with the basic concepts of creating a UWP DirectX game.</source>
          <target state="new">If you are new to DirectX graphics, we recommend that you read Creating a DirectX game to familiarize yourself with the basic concepts of creating a UWP DirectX game.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>As you read this document and work through the Marble Maze source code, you can refer to the following resources for more in-depth information about DirectX graphics.</source>
          <target state="new">As you read this document and work through the Marble Maze source code, you can refer to the following resources for more in-depth information about DirectX graphics.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Direct3D 11 Graphics<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476080)</ept> Describes Direct3D 11, a powerful, hardware-accelerated 3-D graphics API for rendering 3-D geometry on the Windows platform.</source>
          <target state="new"><bpt id="p1">[</bpt>Direct3D 11 Graphics<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476080)</ept> Describes Direct3D 11, a powerful, hardware-accelerated 3-D graphics API for rendering 3-D geometry on the Windows platform.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Direct2D<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd370990)</ept> Describes Direct2D, a hardware-accelerated, 2-D graphics API that provides high performance and high-quality rendering for 2-D geometry, bitmaps, and text.</source>
          <target state="new"><bpt id="p1">[</bpt>Direct2D<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd370990)</ept> Describes Direct2D, a hardware-accelerated, 2-D graphics API that provides high performance and high-quality rendering for 2-D geometry, bitmaps, and text.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DirectWrite<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd368038)</ept> Describes DirectWrite, which supports high-quality text rendering.</source>
          <target state="new"><bpt id="p1">[</bpt>DirectWrite<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd368038)</ept> Describes DirectWrite, which supports high-quality text rendering.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Imaging Component<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ee719902)</ept> Describes WIC, an extensible platform that provides low-level API for digital images.</source>
          <target state="new"><bpt id="p1">[</bpt>Windows Imaging Component<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ee719902)</ept> Describes WIC, an extensible platform that provides low-level API for digital images.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Feature levels</source>
          <target state="new">Feature levels</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Direct3D 11 introduces a paradigm named feature levels.</source>
          <target state="new">Direct3D 11 introduces a paradigm named feature levels.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A feature level is a well-defined set of GPU functionality.</source>
          <target state="new">A feature level is a well-defined set of GPU functionality.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Use feature levels to target your game to run on earlier versions of Direct3D hardware.</source>
          <target state="new">Use feature levels to target your game to run on earlier versions of Direct3D hardware.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Marble Maze supports feature level 9.1 because it requires no advanced features from the higher levels.</source>
          <target state="new">Marble Maze supports feature level 9.1 because it requires no advanced features from the higher levels.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>We recommend that you support the greatest range of hardware possible and scale your game content so that your customers that have either high or low-end computers all have a great experience.</source>
          <target state="new">We recommend that you support the greatest range of hardware possible and scale your game content so that your customers that have either high or low-end computers all have a great experience.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information about feature levels, see <bpt id="p1">[</bpt>Direct3D 11 on Downlevel Hardware<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476872)</ept>.</source>
          <target state="new">For more information about feature levels, see <bpt id="p1">[</bpt>Direct3D 11 on Downlevel Hardware<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476872)</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Initializing Direct3D and Direct2D</source>
          <target state="new">Initializing Direct3D and Direct2D</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A device represents the display adapter.</source>
          <target state="new">A device represents the display adapter.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You create the Direct3D and Direct2D devices in a UWP app much like you do in a classic Windows desktop app.</source>
          <target state="new">You create the Direct3D and Direct2D devices in a UWP app much like you do in a classic Windows desktop app.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The main difference is how you connect the Direct3D swap chain to the windowing system.</source>
          <target state="new">The main difference is how you connect the Direct3D swap chain to the windowing system.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>DirectX 11 and XAML App (Universal Windows)<ept id="p1">*</ept> factors out some generic operating system and 3-D rendering functions from the game-specific functions.</source>
          <target state="new">The <bpt id="p1">*</bpt>DirectX 11 and XAML App (Universal Windows)<ept id="p1">*</ept> factors out some generic operating system and 3-D rendering functions from the game-specific functions.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DeviceResources<ept id="p1">**</ept> class is a foundation for managing Direct3D and Direct2D.</source>
          <target state="new">The <bpt id="p1">**</bpt>DeviceResources<ept id="p1">**</ept> class is a foundation for managing Direct3D and Direct2D.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This class handles general infrastructure, and not game-specific assets.</source>
          <target state="new">This class handles general infrastructure, and not game-specific assets.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Marble Maze defines the <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class to handle game-specific assets, which has a reference to a <bpt id="p2">**</bpt>DeviceResources<ept id="p2">**</ept> object to give it access to Direct3D and Direct2D.</source>
          <target state="new">Marble Maze defines the <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class to handle game-specific assets, which has a reference to a <bpt id="p2">**</bpt>DeviceResources<ept id="p2">**</ept> object to give it access to Direct3D and Direct2D.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>During initialization, the <bpt id="p1">**</bpt>DeviceResources::Initialize<ept id="p1">**</ept> method creates device-independent resources and the Direct3D and Direct2D devices.</source>
          <target state="new">During initialization, the <bpt id="p1">**</bpt>DeviceResources::Initialize<ept id="p1">**</ept> method creates device-independent resources and the Direct3D and Direct2D devices.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DeviceResources<ept id="p1">**</ept> class separates this functionality so that it can more easily respond when the environment changes.</source>
          <target state="new">The <bpt id="p1">**</bpt>DeviceResources<ept id="p1">**</ept> class separates this functionality so that it can more easily respond when the environment changes.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, it calls the <bpt id="p1">**</bpt>CreateWindowSizeDependentResources<ept id="p1">**</ept> method when the window size changes.</source>
          <target state="new">For example, it calls the <bpt id="p1">**</bpt>CreateWindowSizeDependentResources<ept id="p1">**</ept> method when the window size changes.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Initializing the Direct2D, DirectWrite, and WIC factories</source>
          <target state="new">Initializing the Direct2D, DirectWrite, and WIC factories</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DeviceResources::CreateDeviceIndependentResources<ept id="p1">**</ept> method creates the factories for Direct2D, DirectWrite, and WIC.</source>
          <target state="new">The <bpt id="p1">**</bpt>DeviceResources::CreateDeviceIndependentResources<ept id="p1">**</ept> method creates the factories for Direct2D, DirectWrite, and WIC.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In DirectX graphics, factories are the starting points for creating graphics resources.</source>
          <target state="new">In DirectX graphics, factories are the starting points for creating graphics resources.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Marble Maze specifies <bpt id="p1">**</bpt>D2D1\_FACTORY\_TYPE\_SINGLE\_THREADED<ept id="p1">**</ept> because it performs all drawing on the main thread.</source>
          <target state="new">Marble Maze specifies <bpt id="p1">**</bpt>D2D1\_FACTORY\_TYPE\_SINGLE\_THREADED<ept id="p1">**</ept> because it performs all drawing on the main thread.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Creating the Direct3D and Direct2D devices</source>
          <target state="new">Creating the Direct3D and Direct2D devices</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DeviceResources::CreateDeviceResources<ept id="p1">**</ept> method calls <bpt id="p2">[</bpt><bpt id="p3">**</bpt>D3D11CreateDevice<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> to create the device object that represents the Direct3D display adapter.</source>
          <target state="new">The <bpt id="p1">**</bpt>DeviceResources::CreateDeviceResources<ept id="p1">**</ept> method calls <bpt id="p2">[</bpt><bpt id="p3">**</bpt>D3D11CreateDevice<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> to create the device object that represents the Direct3D display adapter.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Because Marble Maze supports feature level 9.1 and above, the <bpt id="p1">**</bpt>DeviceResources::CreateDeviceResources<ept id="p1">**</ept> method specifies levels 9.1 through 11.1 in the array of <bpt id="p2">**</bpt><ph id="ph1">\\</ph><ept id="p2">**</ept> values.</source>
          <target state="new">Because Marble Maze supports feature level 9.1 and above, the <bpt id="p1">**</bpt>DeviceResources::CreateDeviceResources<ept id="p1">**</ept> method specifies levels 9.1 through 11.1 in the array of <bpt id="p2">**</bpt><ph id="ph1">\\</ph><ept id="p2">**</ept> values.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Direct3D walks the list in order and gives the app the first feature level that is available.</source>
          <target state="new">Direct3D walks the list in order and gives the app the first feature level that is available.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Therefore the <bpt id="p1">**</bpt>D3D\_FEATURE\_LEVEL<ept id="p1">**</ept> array entries are listed from highest to lowest so that the app will get the highest level feature level available.</source>
          <target state="new">Therefore the <bpt id="p1">**</bpt>D3D\_FEATURE\_LEVEL<ept id="p1">**</ept> array entries are listed from highest to lowest so that the app will get the highest level feature level available.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DeviceResources::CreateDeviceResources<ept id="p1">**</ept> method obtains the Direct3D 11.1 device by querying the Direct3D 11 device that's returned from <bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept>.</source>
          <target state="new">The <bpt id="p1">**</bpt>DeviceResources::CreateDeviceResources<ept id="p1">**</ept> method obtains the Direct3D 11.1 device by querying the Direct3D 11 device that's returned from <bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DeviceResources::CreateDeviceResources<ept id="p1">**</ept> method then creates the Direct2D device.</source>
          <target state="new">The <bpt id="p1">**</bpt>DeviceResources::CreateDeviceResources<ept id="p1">**</ept> method then creates the Direct2D device.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Direct2D uses Microsoft DirectX Graphics Infrastructure (DXGI) to interoperate with Direct3D.</source>
          <target state="new">Direct2D uses Microsoft DirectX Graphics Infrastructure (DXGI) to interoperate with Direct3D.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>DXGI enables video memory surfaces to be shared between graphics runtimes.</source>
          <target state="new">DXGI enables video memory surfaces to be shared between graphics runtimes.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Marble Maze uses the underlying DXGI device from the Direct3D device to create the Direct2D device from the Direct2D factory.</source>
          <target state="new">Marble Maze uses the underlying DXGI device from the Direct3D device to create the Direct2D device from the Direct2D factory.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information about DXGI and interoperability between Direct2D and Direct3D, see <bpt id="p1">[</bpt>DXGI Overview<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205075)</ept> and <bpt id="p2">[</bpt>Direct2D and Direct3D Interoperability Overview<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/dd370966)</ept>.</source>
          <target state="new">For more information about DXGI and interoperability between Direct2D and Direct3D, see <bpt id="p1">[</bpt>DXGI Overview<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205075)</ept> and <bpt id="p2">[</bpt>Direct2D and Direct3D Interoperability Overview<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/dd370966)</ept>.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Associating Direct3D with the view</source>
          <target state="new">Associating Direct3D with the view</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DeviceResources::CreateWindowSizeDependentResources<ept id="p1">**</ept> method creates the graphics resources that depend on a given window size such as the swap chain and Direct3D and Direct2D render targets.</source>
          <target state="new">The <bpt id="p1">**</bpt>DeviceResources::CreateWindowSizeDependentResources<ept id="p1">**</ept> method creates the graphics resources that depend on a given window size such as the swap chain and Direct3D and Direct2D render targets.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>One important way that a DirectX UWP app differs from a desktop app is how the swap chain is associated with the output window.</source>
          <target state="new">One important way that a DirectX UWP app differs from a desktop app is how the swap chain is associated with the output window.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A swap chain is responsible for displaying the buffer to which the device renders on the monitor.</source>
          <target state="new">A swap chain is responsible for displaying the buffer to which the device renders on the monitor.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The document Marble Maze application structure describes how the windowing system for a UWP app differs from a desktop app.</source>
          <target state="new">The document Marble Maze application structure describes how the windowing system for a UWP app differs from a desktop app.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Because a Windows Store app does not work with <bpt id="p1">**</bpt>HWND<ept id="p1">**</ept> objects, Marble Maze must use the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IDXGIFactory2::CreateSwapChainForCoreWindow<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404559)</ept> method to associate the device output to the view.</source>
          <target state="new">Because a Windows Store app does not work with <bpt id="p1">**</bpt>HWND<ept id="p1">**</ept> objects, Marble Maze must use the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IDXGIFactory2::CreateSwapChainForCoreWindow<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404559)</ept> method to associate the device output to the view.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following example shows the part of the <bpt id="p1">**</bpt>DeviceResources::CreateWindowSizeDependentResources<ept id="p1">**</ept> method that creates the swap chain.</source>
          <target state="new">The following example shows the part of the <bpt id="p1">**</bpt>DeviceResources::CreateWindowSizeDependentResources<ept id="p1">**</ept> method that creates the swap chain.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To minimize power consumption, which is important to do on battery-powered devices such as laptops and tablets, the <bpt id="p1">**</bpt>DeviceResources::CreateWindowSizeDependentResources<ept id="p1">**</ept> method calls the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IDXGIDevice1::SetMaximumFrameLatency<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff471334)</ept> method to ensure that the game is rendered only after the vertical blank.</source>
          <target state="new">To minimize power consumption, which is important to do on battery-powered devices such as laptops and tablets, the <bpt id="p1">**</bpt>DeviceResources::CreateWindowSizeDependentResources<ept id="p1">**</ept> method calls the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IDXGIDevice1::SetMaximumFrameLatency<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff471334)</ept> method to ensure that the game is rendered only after the vertical blank.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Synchronizing with the vertical blank is described in greater detail in the section Presenting the scene in this document.</source>
          <target state="new">Synchronizing with the vertical blank is described in greater detail in the section Presenting the scene in this document.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DeviceResources::CreateWindowSizeDependentResources<ept id="p1">**</ept> method initializes graphics resources in a way that works for most games.</source>
          <target state="new">The <bpt id="p1">**</bpt>DeviceResources::CreateWindowSizeDependentResources<ept id="p1">**</ept> method initializes graphics resources in a way that works for most games.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The term <bpt id="p2">*</bpt>view<ept id="p2">*</ept> has a different meaning in the Windows Runtime than it has in Direct3D.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The term <bpt id="p2">*</bpt>view<ept id="p2">*</ept> has a different meaning in the Windows Runtime than it has in Direct3D.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In the Windows Runtime, a view refers to the collection of user interface settings for an app, including the display area and the input behaviors, plus the thread it uses for processing.</source>
          <target state="new">In the Windows Runtime, a view refers to the collection of user interface settings for an app, including the display area and the input behaviors, plus the thread it uses for processing.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You specify the configuration and settings you need when you create a view.</source>
          <target state="new">You specify the configuration and settings you need when you create a view.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The process of setting up the app view is described in <bpt id="p1">[</bpt>Marble Maze application structure<ept id="p1">](marble-maze-application-structure.md)</ept>.</source>
          <target state="new">The process of setting up the app view is described in <bpt id="p1">[</bpt>Marble Maze application structure<ept id="p1">](marble-maze-application-structure.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In Direct3D, the term view has multiple meanings.</source>
          <target state="new">In Direct3D, the term view has multiple meanings.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>First, a resource view defines the subresources that a resource can access.</source>
          <target state="new">First, a resource view defines the subresources that a resource can access.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, when a texture object is associated with a shader resource view, that shader can later access the texture.</source>
          <target state="new">For example, when a texture object is associated with a shader resource view, that shader can later access the texture.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>One advantage of a resource view is that you can interpret data in different ways at different stages in the rendering pipeline.</source>
          <target state="new">One advantage of a resource view is that you can interpret data in different ways at different stages in the rendering pipeline.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For more information about resource views, see <bpt id="p1">[</bpt>Texture Views (Direct3D 10)<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205128)</ept>.</source>
          <target state="new">For more information about resource views, see <bpt id="p1">[</bpt>Texture Views (Direct3D 10)<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205128)</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When used in the context of a view transform or view transform matrix, view refers to the location and orientation of the camera.</source>
          <target state="new">When used in the context of a view transform or view transform matrix, view refers to the location and orientation of the camera.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A view transform relocates objects in the world around the camera’s position and orientation.</source>
          <target state="new">A view transform relocates objects in the world around the camera’s position and orientation.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information about view transforms, see <bpt id="p1">[</bpt>View Transform (Direct3D 9)<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb206342)</ept>.</source>
          <target state="new">For more information about view transforms, see <bpt id="p1">[</bpt>View Transform (Direct3D 9)<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb206342)</ept>.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>How Marble Maze uses resource and matrix views is described in greater detail in this topic.</source>
          <target state="new">How Marble Maze uses resource and matrix views is described in greater detail in this topic.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Loading scene resources</source>
          <target state="new">Loading scene resources</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Marble Maze uses the <bpt id="p1">**</bpt>BasicLoader<ept id="p1">**</ept> class, which is declared in BasicLoader.h, to load textures and shaders.</source>
          <target state="new">Marble Maze uses the <bpt id="p1">**</bpt>BasicLoader<ept id="p1">**</ept> class, which is declared in BasicLoader.h, to load textures and shaders.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Marble Maze uses the <bpt id="p1">**</bpt>SDKMesh<ept id="p1">**</ept> class to load the 3-D meshes for the maze and the marble.</source>
          <target state="new">Marble Maze uses the <bpt id="p1">**</bpt>SDKMesh<ept id="p1">**</ept> class to load the 3-D meshes for the maze and the marble.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To ensure a responsive app, Marble Maze loads scene resources asynchronously, or in the background.</source>
          <target state="new">To ensure a responsive app, Marble Maze loads scene resources asynchronously, or in the background.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>As assets load in the background, your game can respond to window events.</source>
          <target state="new">As assets load in the background, your game can respond to window events.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This process is explained in greater detail in <bpt id="p1">[</bpt>Loading game assets in the background<ept id="p1">](marble-maze-application-structure.md#loading_game_assets)</ept> in this guide.</source>
          <target state="new">This process is explained in greater detail in <bpt id="p1">[</bpt>Loading game assets in the background<ept id="p1">](marble-maze-application-structure.md#loading_game_assets)</ept> in this guide.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Loading the 2-D overlay and user interface</source>
          <target state="new">Loading the 2-D overlay and user interface</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In Marble Maze, the overlay is the image that appears at the top of the screen.</source>
          <target state="new">In Marble Maze, the overlay is the image that appears at the top of the screen.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The overlay always appears in front of the scene.</source>
          <target state="new">The overlay always appears in front of the scene.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In Marble Maze, the overlay contains the Windows logo and the text string "DirectX Marble Maze game sample".</source>
          <target state="new">In Marble Maze, the overlay contains the Windows logo and the text string "DirectX Marble Maze game sample".</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The management of the overlay is performed by the <bpt id="p1">**</bpt>SampleOverlay<ept id="p1">**</ept> class, which is defined in SampleOverlay.h.</source>
          <target state="new">The management of the overlay is performed by the <bpt id="p1">**</bpt>SampleOverlay<ept id="p1">**</ept> class, which is defined in SampleOverlay.h.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Although we use the overlay as part of the Direct3D samples, you can adapt this code to display any image that appears in front of your scene.</source>
          <target state="new">Although we use the overlay as part of the Direct3D samples, you can adapt this code to display any image that appears in front of your scene.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>One important aspect of the overlay is that, because its contents do not change, the <bpt id="p1">**</bpt>SampleOverlay<ept id="p1">**</ept> class draws, or caches, its contents to an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID2D1Bitmap1<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404349)</ept> object during initialization.</source>
          <target state="new">One important aspect of the overlay is that, because its contents do not change, the <bpt id="p1">**</bpt>SampleOverlay<ept id="p1">**</ept> class draws, or caches, its contents to an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID2D1Bitmap1<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404349)</ept> object during initialization.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>At draw time, the <bpt id="p1">**</bpt>SampleOverlay<ept id="p1">**</ept> class only has to draw the bitmap to the screen.</source>
          <target state="new">At draw time, the <bpt id="p1">**</bpt>SampleOverlay<ept id="p1">**</ept> class only has to draw the bitmap to the screen.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In this way, expensive routines such as text drawing do not have to be performed for every frame.</source>
          <target state="new">In this way, expensive routines such as text drawing do not have to be performed for every frame.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The user interface (UI) consists of 2-D components, such as menus and heads-up displays (HUDs), which appear in front of your scene.</source>
          <target state="new">The user interface (UI) consists of 2-D components, such as menus and heads-up displays (HUDs), which appear in front of your scene.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Marble Maze defines the following UI elements:</source>
          <target state="new">Marble Maze defines the following UI elements:</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Menu items that enable the user to start the game or view high scores.</source>
          <target state="new">Menu items that enable the user to start the game or view high scores.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A timer that counts down for three seconds before play begins.</source>
          <target state="new">A timer that counts down for three seconds before play begins.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A timer that tracks the elapsed play time.</source>
          <target state="new">A timer that tracks the elapsed play time.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A table that lists the fastest finish times.</source>
          <target state="new">A table that lists the fastest finish times.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Text that reads "Paused" when the game is paused.</source>
          <target state="new">Text that reads "Paused" when the game is paused.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Marble Maze defines game-specific UI elements in UserInterface.h.</source>
          <target state="new">Marble Maze defines game-specific UI elements in UserInterface.h.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Marble Maze defines the <bpt id="p1">**</bpt>ElementBase<ept id="p1">**</ept> class as a base type for all UI elements.</source>
          <target state="new">Marble Maze defines the <bpt id="p1">**</bpt>ElementBase<ept id="p1">**</ept> class as a base type for all UI elements.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ElementBase<ept id="p1">**</ept> class defines attributes such as the size, position, alignment, and visibility of a UI element.</source>
          <target state="new">The <bpt id="p1">**</bpt>ElementBase<ept id="p1">**</ept> class defines attributes such as the size, position, alignment, and visibility of a UI element.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>It also controls how elements are updated and rendered.</source>
          <target state="new">It also controls how elements are updated and rendered.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>By providing a common base class for UI elements, the <bpt id="p1">**</bpt>UserInterface<ept id="p1">**</ept> class, which manages the user interface, need only hold a collection of <bpt id="p2">**</bpt>ElementBase<ept id="p2">**</ept> objects, which simplifies UI management and provides a user interface manager that is reusable.</source>
          <target state="new">By providing a common base class for UI elements, the <bpt id="p1">**</bpt>UserInterface<ept id="p1">**</ept> class, which manages the user interface, need only hold a collection of <bpt id="p2">**</bpt>ElementBase<ept id="p2">**</ept> objects, which simplifies UI management and provides a user interface manager that is reusable.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Marble Maze defines types that derive from <bpt id="p1">**</bpt>ElementBase<ept id="p1">**</ept> that implement game-specific behaviors.</source>
          <target state="new">Marble Maze defines types that derive from <bpt id="p1">**</bpt>ElementBase<ept id="p1">**</ept> that implement game-specific behaviors.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>HighScoreTable<ept id="p1">**</ept> defines the behavior for the high score table.</source>
          <target state="new">For example, <bpt id="p1">**</bpt>HighScoreTable<ept id="p1">**</ept> defines the behavior for the high score table.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For more info about these types, refer to the source code.</source>
          <target state="new">For more info about these types, refer to the source code.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Because XAML enables you to more easily create complex user interfaces, like those found in simulation and strategy games, consider whether to use XAML to define your UI.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Because XAML enables you to more easily create complex user interfaces, like those found in simulation and strategy games, consider whether to use XAML to define your UI.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For info about how to develop a user interface in XAML in a DirectX UWP game, see <bpt id="p1">[</bpt>Extend the game sample (Windows)<ept id="p1">](tutorial-resources.md)</ept>.</source>
          <target state="new">For info about how to develop a user interface in XAML in a DirectX UWP game, see <bpt id="p1">[</bpt>Extend the game sample (Windows)<ept id="p1">](tutorial-resources.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This document refers to the DirectX 3-D shooting game sample.</source>
          <target state="new">This document refers to the DirectX 3-D shooting game sample.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Loading shaders</source>
          <target state="new">Loading shaders</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Marble Maze uses the <bpt id="p1">**</bpt>BasicLoader::LoadShader<ept id="p1">**</ept> method to load a shader from a file.</source>
          <target state="new">Marble Maze uses the <bpt id="p1">**</bpt>BasicLoader::LoadShader<ept id="p1">**</ept> method to load a shader from a file.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Shaders are the fundamental unit of GPU programming in games today.</source>
          <target state="new">Shaders are the fundamental unit of GPU programming in games today.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Nearly all 3-D graphics processing is driven through shaders, whether it is model transformation and scene lighting, or more complex geometry processing, from character skinning to tessellation.</source>
          <target state="new">Nearly all 3-D graphics processing is driven through shaders, whether it is model transformation and scene lighting, or more complex geometry processing, from character skinning to tessellation.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For more information about the shader programming model, see <bpt id="p1">[</bpt>HLSL<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509561)</ept>.</source>
          <target state="new">For more information about the shader programming model, see <bpt id="p1">[</bpt>HLSL<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509561)</ept>.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Marble Maze uses vertex and pixel shaders.</source>
          <target state="new">Marble Maze uses vertex and pixel shaders.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A vertex shader always operates on one input vertex and produces one vertex as output.</source>
          <target state="new">A vertex shader always operates on one input vertex and produces one vertex as output.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A pixel shader takes numeric values, texture data, interpolated per-vertex values, and other data to produce a pixel color as output.</source>
          <target state="new">A pixel shader takes numeric values, texture data, interpolated per-vertex values, and other data to produce a pixel color as output.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Because a shader transforms one element at a time, graphics hardware that provides multiple shader pipelines can process sets of elements in parallel.</source>
          <target state="new">Because a shader transforms one element at a time, graphics hardware that provides multiple shader pipelines can process sets of elements in parallel.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The number of parallel pipelines that are available to the GPU can be vastly greater than the number that is available to the CPU.</source>
          <target state="new">The number of parallel pipelines that are available to the GPU can be vastly greater than the number that is available to the CPU.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Therefore, even basic shaders can greatly improve throughput.</source>
          <target state="new">Therefore, even basic shaders can greatly improve throughput.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method loads one vertex shader and one pixel shader after it loads the overlay.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method loads one vertex shader and one pixel shader after it loads the overlay.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The design-time versions of these shaders are defined in BasicVertexShader.hlsl and BasicPixelShader.hlsl, respectively.</source>
          <target state="new">The design-time versions of these shaders are defined in BasicVertexShader.hlsl and BasicPixelShader.hlsl, respectively.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Marble Maze applies these shaders to both the ball and the maze during the rendering phase.</source>
          <target state="new">Marble Maze applies these shaders to both the ball and the maze during the rendering phase.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The Marble Maze project includes both .hlsl (the design-time format) and .cso (the run-time format) versions of the shader files.</source>
          <target state="new">The Marble Maze project includes both .hlsl (the design-time format) and .cso (the run-time format) versions of the shader files.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>At build time, Visual Studio uses the fxc.exe effect-compiler to compile your .hlsl source file into a .cso binary shader.</source>
          <target state="new">At build time, Visual Studio uses the fxc.exe effect-compiler to compile your .hlsl source file into a .cso binary shader.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For more information about the effect-compiler tool, see <bpt id="p1">[</bpt>Effect-Compiler Tool<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb232919)</ept>.</source>
          <target state="new">For more information about the effect-compiler tool, see <bpt id="p1">[</bpt>Effect-Compiler Tool<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb232919)</ept>.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The vertex shader uses the supplied model, view and projection matrices to transform the input geometry.</source>
          <target state="new">The vertex shader uses the supplied model, view and projection matrices to transform the input geometry.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Position data from the input geometry is transformed and output twice: once in screen space, which is necessary for rendering, and again in world space to enable the pixel shader to perform lighting calculations.</source>
          <target state="new">Position data from the input geometry is transformed and output twice: once in screen space, which is necessary for rendering, and again in world space to enable the pixel shader to perform lighting calculations.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The surface normal vector is transformed to world space, which is also used by the pixel shader for lighting.</source>
          <target state="new">The surface normal vector is transformed to world space, which is also used by the pixel shader for lighting.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The texture coordinates are passed through unchanged to the pixel shader.</source>
          <target state="new">The texture coordinates are passed through unchanged to the pixel shader.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The pixel shader receives the output of the vertex shader as input.</source>
          <target state="new">The pixel shader receives the output of the vertex shader as input.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This shader performs lighting calculations to mimic a soft-edged spotlight that hovers over the maze and is aligned with the position of the marble.</source>
          <target state="new">This shader performs lighting calculations to mimic a soft-edged spotlight that hovers over the maze and is aligned with the position of the marble.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Lighting is strongest for surfaces that point directly toward the light.</source>
          <target state="new">Lighting is strongest for surfaces that point directly toward the light.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The diffuse component tapers off to zero as the surface normal becomes perpendicular to the light, and the ambient term diminishes as the normal points away from the light.</source>
          <target state="new">The diffuse component tapers off to zero as the surface normal becomes perpendicular to the light, and the ambient term diminishes as the normal points away from the light.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Points closer to the marble (and therefore closer to the center of the spotlight) are lit more strongly.</source>
          <target state="new">Points closer to the marble (and therefore closer to the center of the spotlight) are lit more strongly.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>However, lighting is modulated for points underneath the marble to simulate a soft shadow.</source>
          <target state="new">However, lighting is modulated for points underneath the marble to simulate a soft shadow.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In a real environment, an object like the white marble would diffusely reflect the spotlight onto other objects in the scene.</source>
          <target state="new">In a real environment, an object like the white marble would diffusely reflect the spotlight onto other objects in the scene.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This is approximated for the surfaces that are in view of the bright half of the marble.</source>
          <target state="new">This is approximated for the surfaces that are in view of the bright half of the marble.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The additional illumination factors are in relative angle and distance to the marble.</source>
          <target state="new">The additional illumination factors are in relative angle and distance to the marble.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The resulting pixel color is a composition of the sampled texture with the result of the lighting calculations.</source>
          <target state="new">The resulting pixel color is a composition of the sampled texture with the result of the lighting calculations.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>  The compiled pixel shader contains 32 arithmetic instructions and 1 texture instruction.</source>
          <target state="new"><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>  The compiled pixel shader contains 32 arithmetic instructions and 1 texture instruction.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This shader should perform well on desktop computers and higher-end tablets.</source>
          <target state="new">This shader should perform well on desktop computers and higher-end tablets.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>However, a lower-end computer might not be able to process this shader and still provide an interactive frame rate.</source>
          <target state="new">However, a lower-end computer might not be able to process this shader and still provide an interactive frame rate.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Consider the typical hardware of your target audience and design your shaders to meet the capabilities of that hardware.</source>
          <target state="new">Consider the typical hardware of your target audience and design your shaders to meet the capabilities of that hardware.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method uses the <bpt id="p2">**</bpt>BasicLoader::LoadShader<ept id="p2">**</ept> method to load the shaders.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method uses the <bpt id="p2">**</bpt>BasicLoader::LoadShader<ept id="p2">**</ept> method to load the shaders.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The following example loads the vertex shader.</source>
          <target state="new">The following example loads the vertex shader.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The run-time format for this shader is BasicVertexShader.cso.</source>
          <target state="new">The run-time format for this shader is BasicVertexShader.cso.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>m\_vertexShader<ept id="p1">**</ept> member variable is an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11VertexShader<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476641)</ept> object.</source>
          <target state="new">The <bpt id="p1">**</bpt>m\_vertexShader<ept id="p1">**</ept> member variable is an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11VertexShader<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476641)</ept> object.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>m\_inputLayout<ept id="p1">**</ept> member variable is an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11InputLayout<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476575)</ept> object.</source>
          <target state="new">The <bpt id="p1">**</bpt>m\_inputLayout<ept id="p1">**</ept> member variable is an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11InputLayout<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476575)</ept> object.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The input-layout object encapsulates the input state of the input assembler (IA) stage.</source>
          <target state="new">The input-layout object encapsulates the input state of the input assembler (IA) stage.</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>One job of the IA stage is to make shaders more efficient by using system-generated values, also known as <bpt id="p1">*</bpt>semantics<ept id="p1">*</ept>, to process only those primitives or vertices that have not already been processed.</source>
          <target state="new">One job of the IA stage is to make shaders more efficient by using system-generated values, also known as <bpt id="p1">*</bpt>semantics<ept id="p1">*</ept>, to process only those primitives or vertices that have not already been processed.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateInputLayout<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476512)</ept> method to create an input-layout from an array of input-element descriptions.</source>
          <target state="new">Use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateInputLayout<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476512)</ept> method to create an input-layout from an array of input-element descriptions.</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The array contains one or more input elements; each input element describes one vertex-data element from one vertex buffer.</source>
          <target state="new">The array contains one or more input elements; each input element describes one vertex-data element from one vertex buffer.</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The entire set of input-element descriptions describes all of the vertex-data elements from all of the vertex buffers that will be bound to the IA stage.</source>
          <target state="new">The entire set of input-element descriptions describes all of the vertex-data elements from all of the vertex buffers that will be bound to the IA stage.</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The following example shows the layout description that Marble Maze uses.</source>
          <target state="new">The following example shows the layout description that Marble Maze uses.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The layout description describes a vertex buffer that contains four vertex-data elements.</source>
          <target state="new">The layout description describes a vertex buffer that contains four vertex-data elements.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The important parts of each entry in the array are the semantic name, data format, and byte offset .</source>
          <target state="new">The important parts of each entry in the array are the semantic name, data format, and byte offset .</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> element specifies the vertex position in object space.</source>
          <target state="new">For example, the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> element specifies the vertex position in object space.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>It starts at byte offset 0 and contains three floating-point components (for a total of 12 bytes).</source>
          <target state="new">It starts at byte offset 0 and contains three floating-point components (for a total of 12 bytes).</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>NORMAL<ept id="p1">**</ept> element specifies the normal vector.</source>
          <target state="new">The <bpt id="p1">**</bpt>NORMAL<ept id="p1">**</ept> element specifies the normal vector.</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>It starts at byte offset 12 because it appears directly after <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> in the layout, which requires 12 bytes.</source>
          <target state="new">It starts at byte offset 12 because it appears directly after <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> in the layout, which requires 12 bytes.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>NORMAL<ept id="p1">**</ept> element contains a four-component, 32-bit unsigned-integer.</source>
          <target state="new">The <bpt id="p1">**</bpt>NORMAL<ept id="p1">**</ept> element contains a four-component, 32-bit unsigned-integer.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Compare the input layout with the <bpt id="p1">**</bpt>sVSInput<ept id="p1">**</ept> structure that is defined by the vertex shader, as shown in the following example.</source>
          <target state="new">Compare the input layout with the <bpt id="p1">**</bpt>sVSInput<ept id="p1">**</ept> structure that is defined by the vertex shader, as shown in the following example.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>sVSInput<ept id="p1">**</ept> structure defines the <bpt id="p2">**</bpt>POSITION<ept id="p2">**</ept>, <bpt id="p3">**</bpt>NORMAL<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>TEXCOORD0<ept id="p4">**</ept> elements.</source>
          <target state="new">The <bpt id="p1">**</bpt>sVSInput<ept id="p1">**</ept> structure defines the <bpt id="p2">**</bpt>POSITION<ept id="p2">**</ept>, <bpt id="p3">**</bpt>NORMAL<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>TEXCOORD0<ept id="p4">**</ept> elements.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The DirectX runtime maps each element in the layout to the input structure that is defined by the shader.</source>
          <target state="new">The DirectX runtime maps each element in the layout to the input structure that is defined by the shader.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The document <bpt id="p1">[</bpt>Semantics<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509647)</ept> describes each of the available semantics in greater detail.</source>
          <target state="new">The document <bpt id="p1">[</bpt>Semantics<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb509647)</ept> describes each of the available semantics in greater detail.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   In a layout, you can specify additional components that are not used to enable multiple shaders to share the same layout.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   In a layout, you can specify additional components that are not used to enable multiple shaders to share the same layout.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>TANGENT<ept id="p1">**</ept> element is not used by the shader.</source>
          <target state="new">For example, the <bpt id="p1">**</bpt>TANGENT<ept id="p1">**</ept> element is not used by the shader.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>TANGENT<ept id="p1">**</ept> element if you want to experiment with techniques such as normal mapping.</source>
          <target state="new">You can use the <bpt id="p1">**</bpt>TANGENT<ept id="p1">**</ept> element if you want to experiment with techniques such as normal mapping.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>By using normal mapping, also known as bump mapping, you can create the effect of bumps on the surfaces of objects.</source>
          <target state="new">By using normal mapping, also known as bump mapping, you can create the effect of bumps on the surfaces of objects.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>For more information about bump mapping, see <bpt id="p1">[</bpt>Bump Mapping (Direct3D 9)<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb172379)</ept>.</source>
          <target state="new">For more information about bump mapping, see <bpt id="p1">[</bpt>Bump Mapping (Direct3D 9)<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb172379)</ept>.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>For more information about the input assembly stage state, see <bpt id="p1">[</bpt>Input-Assembler Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205116)</ept> and <bpt id="p2">[</bpt>Getting Started with the Input-Assembler Stage<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb205117)</ept>.</source>
          <target state="new">For more information about the input assembly stage state, see <bpt id="p1">[</bpt>Input-Assembler Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205116)</ept> and <bpt id="p2">[</bpt>Getting Started with the Input-Assembler Stage<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/bb205117)</ept>.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The process of using the vertex and pixel shaders to render the scene are described in the section <bpt id="p1">[</bpt>Rendering the scene<ept id="p1">](#rendering_the_scene)</ept> later in this document.</source>
          <target state="new">The process of using the vertex and pixel shaders to render the scene are described in the section <bpt id="p1">[</bpt>Rendering the scene<ept id="p1">](#rendering_the_scene)</ept> later in this document.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Creating the constant buffer</source>
          <target state="new">Creating the constant buffer</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Direct3D buffer groups a collection of data.</source>
          <target state="new">Direct3D buffer groups a collection of data.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>A constant buffer is a kind of buffer that you can use to pass data to shaders.</source>
          <target state="new">A constant buffer is a kind of buffer that you can use to pass data to shaders.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Marble Maze uses a constant buffer to hold the model (or world) view, and the projection matrices for the active scene object.</source>
          <target state="new">Marble Maze uses a constant buffer to hold the model (or world) view, and the projection matrices for the active scene object.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method creates a constant buffer that will later hold matrix data.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method creates a constant buffer that will later hold matrix data.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The example creates a <bpt id="p1">**</bpt>D3D11\_BUFFER\_DESC<ept id="p1">**</ept> structure that uses the <bpt id="p2">**</bpt>D3D11\_BIND\_CONSTANT\_BUFFER<ept id="p2">**</ept> flag to specify usage as a constant buffer.</source>
          <target state="new">The example creates a <bpt id="p1">**</bpt>D3D11\_BUFFER\_DESC<ept id="p1">**</ept> structure that uses the <bpt id="p2">**</bpt>D3D11\_BIND\_CONSTANT\_BUFFER<ept id="p2">**</ept> flag to specify usage as a constant buffer.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>This example then passes that structure to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateBuffer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476501)</ept> method.</source>
          <target state="new">This example then passes that structure to the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11Device::CreateBuffer<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476501)</ept> method.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>m\_constantBuffer<ept id="p1">**</ept> variable is an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11Buffer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476351)</ept> object.</source>
          <target state="new">The <bpt id="p1">**</bpt>m\_constantBuffer<ept id="p1">**</ept> variable is an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11Buffer<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476351)</ept> object.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method later updates <bpt id="p2">**</bpt>ConstantBuffer<ept id="p2">**</ept> objects, one for the maze and one for the marble.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method later updates <bpt id="p2">**</bpt>ConstantBuffer<ept id="p2">**</ept> objects, one for the maze and one for the marble.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method then binds each <bpt id="p2">**</bpt>ConstantBuffer<ept id="p2">**</ept> object to the constant buffer before each object is rendered.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method then binds each <bpt id="p2">**</bpt>ConstantBuffer<ept id="p2">**</ept> object to the constant buffer before each object is rendered.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The following example shows the <bpt id="p1">**</bpt>ConstantBuffer<ept id="p1">**</ept> structure, which is in MarbleMaze.h.</source>
          <target state="new">The following example shows the <bpt id="p1">**</bpt>ConstantBuffer<ept id="p1">**</ept> structure, which is in MarbleMaze.h.</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>To better understand how constant buffers map to shader code, compare the <bpt id="p1">**</bpt>ConstantBuffer<ept id="p1">**</ept> structure to the <bpt id="p2">**</bpt>SimpleConstantBuffer<ept id="p2">**</ept> constant buffer that is defined by the vertex shader in BasicVertexShader.hlsl:</source>
          <target state="new">To better understand how constant buffers map to shader code, compare the <bpt id="p1">**</bpt>ConstantBuffer<ept id="p1">**</ept> structure to the <bpt id="p2">**</bpt>SimpleConstantBuffer<ept id="p2">**</ept> constant buffer that is defined by the vertex shader in BasicVertexShader.hlsl:</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The layout of the <bpt id="p1">**</bpt>ConstantBuffer<ept id="p1">**</ept> structure matches the <bpt id="p2">**</bpt>cbuffer<ept id="p2">**</ept> object.</source>
          <target state="new">The layout of the <bpt id="p1">**</bpt>ConstantBuffer<ept id="p1">**</ept> structure matches the <bpt id="p2">**</bpt>cbuffer<ept id="p2">**</ept> object.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>cbuffer<ept id="p1">**</ept> variable specifies register b0, which means that the constant buffer data is stored in register 0.</source>
          <target state="new">The <bpt id="p1">**</bpt>cbuffer<ept id="p1">**</ept> variable specifies register b0, which means that the constant buffer data is stored in register 0.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method specifies register 0 when it activates the constant buffer.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method specifies register 0 when it activates the constant buffer.</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>This process is described in greater detail later in this document.</source>
          <target state="new">This process is described in greater detail later in this document.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>For more information about constant buffers, see <bpt id="p1">[</bpt>Introduction to Buffers in Direct3D 11<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476898)</ept>.</source>
          <target state="new">For more information about constant buffers, see <bpt id="p1">[</bpt>Introduction to Buffers in Direct3D 11<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476898)</ept>.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>For more information about the register keyword, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd607359)</ept>.</source>
          <target state="new">For more information about the register keyword, see <bpt id="p1">[</bpt><bpt id="p2">**</bpt>register<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd607359)</ept>.</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Loading meshes</source>
          <target state="new">Loading meshes</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Marble Maze uses SDK-Mesh as the run-time format because this format provides a basic way to load mesh data for sample applications.</source>
          <target state="new">Marble Maze uses SDK-Mesh as the run-time format because this format provides a basic way to load mesh data for sample applications.</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>For production use, you should use a mesh format that meets the specific requirements of your game.</source>
          <target state="new">For production use, you should use a mesh format that meets the specific requirements of your game.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method loads mesh data after it loads the vertex and pixel shaders.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method loads mesh data after it loads the vertex and pixel shaders.</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>A mesh is a collection of vertex data that often includes information such as positions, normal data, colors, materials, and texture coordinates.</source>
          <target state="new">A mesh is a collection of vertex data that often includes information such as positions, normal data, colors, materials, and texture coordinates.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Meshes are typically created in 3-D authoring software and maintained in files that are separate from application code.</source>
          <target state="new">Meshes are typically created in 3-D authoring software and maintained in files that are separate from application code.</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The marble and the maze are two examples of meshes that the game uses.</source>
          <target state="new">The marble and the maze are two examples of meshes that the game uses.</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Marble Maze uses the <bpt id="p1">**</bpt>SDKMesh<ept id="p1">**</ept> class to manage meshes.</source>
          <target state="new">Marble Maze uses the <bpt id="p1">**</bpt>SDKMesh<ept id="p1">**</ept> class to manage meshes.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This class is declared in SDKMesh.h.</source>
          <target state="new">This class is declared in SDKMesh.h.</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SDKMesh<ept id="p1">**</ept> provides methods to load, render, and destroy mesh data.</source>
          <target state="new"><bpt id="p1">**</bpt>SDKMesh<ept id="p1">**</ept> provides methods to load, render, and destroy mesh data.</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>   Marble Maze uses the SDK-Mesh format and provides the <bpt id="p2">**</bpt>SDKMesh<ept id="p2">**</ept> class for illustration only.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>   Marble Maze uses the SDK-Mesh format and provides the <bpt id="p2">**</bpt>SDKMesh<ept id="p2">**</ept> class for illustration only.</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Although the SDK-Mesh format is useful for learning, and for creating prototypes, it is a very basic format that might not meet the requirements of most game development.</source>
          <target state="new">Although the SDK-Mesh format is useful for learning, and for creating prototypes, it is a very basic format that might not meet the requirements of most game development.</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>We recommend that you use a mesh format that meets the specific requirements of your game.</source>
          <target state="new">We recommend that you use a mesh format that meets the specific requirements of your game.</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method uses the <bpt id="p2">**</bpt>SDKMesh::Create<ept id="p2">**</ept> method to load mesh data for the maze and for the ball.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::LoadDeferredResources<ept id="p1">**</ept> method uses the <bpt id="p2">**</bpt>SDKMesh::Create<ept id="p2">**</ept> method to load mesh data for the maze and for the ball.</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Loading collision data</source>
          <target state="new">Loading collision data</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Although this section does not focus on how Marble Maze implements the physics simulation between the marble and the maze, note that mesh geometry for the physics system is read when the meshes are loaded.</source>
          <target state="new">Although this section does not focus on how Marble Maze implements the physics simulation between the marble and the maze, note that mesh geometry for the physics system is read when the meshes are loaded.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The way that you load collision data large depends on the run-time format that you use.</source>
          <target state="new">The way that you load collision data large depends on the run-time format that you use.</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>For more information about how Marble Maze loads the collision geometry from an SDK-Mesh file, see the <bpt id="p1">**</bpt>MarbleMaze::ExtractTrianglesFromMesh<ept id="p1">**</ept> method in the source code.</source>
          <target state="new">For more information about how Marble Maze loads the collision geometry from an SDK-Mesh file, see the <bpt id="p1">**</bpt>MarbleMaze::ExtractTrianglesFromMesh<ept id="p1">**</ept> method in the source code.</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Updating game state</source>
          <target state="new">Updating game state</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Marble Maze separates game logic from rendering logic by first updating all scene objects before rendering them.</source>
          <target state="new">Marble Maze separates game logic from rendering logic by first updating all scene objects before rendering them.</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The document Marble Maze application structure describes the main game loop.</source>
          <target state="new">The document Marble Maze application structure describes the main game loop.</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Updating the scene, which is part of the game loop, happens after Windows events and input are processed and before the scene is rendered.</source>
          <target state="new">Updating the scene, which is part of the game loop, happens after Windows events and input are processed and before the scene is rendered.</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method handles the update of the UI and the game.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method handles the update of the UI and the game.</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Updating the user interface</source>
          <target state="new">Updating the user interface</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method calls the <bpt id="p2">**</bpt>UserInterface::Update<ept id="p2">**</ept> method to update the state of the UI.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method calls the <bpt id="p2">**</bpt>UserInterface::Update<ept id="p2">**</ept> method to update the state of the UI.</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>UserInterface::Update<ept id="p1">**</ept> method updates each element in the UI collection.</source>
          <target state="new">The <bpt id="p1">**</bpt>UserInterface::Update<ept id="p1">**</ept> method updates each element in the UI collection.</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Classes that derive from <bpt id="p1">**</bpt>ElementBase<ept id="p1">**</ept> implement the <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> method to perform specific behaviors.</source>
          <target state="new">Classes that derive from <bpt id="p1">**</bpt>ElementBase<ept id="p1">**</ept> implement the <bpt id="p2">**</bpt>Update<ept id="p2">**</ept> method to perform specific behaviors.</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>StopwatchTimer::Update<ept id="p1">**</ept> method updates the elapsed time by the provided amount and updates the text that it later displays.</source>
          <target state="new">For example, the <bpt id="p1">**</bpt>StopwatchTimer::Update<ept id="p1">**</ept> method updates the elapsed time by the provided amount and updates the text that it later displays.</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Updating the scene</source>
          <target state="new">Updating the scene</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method updates the game based on the current state machine state.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method updates the game based on the current state machine state.</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>When the game is in the active state, Marble Maze updates the camera to follow the marble, updates the view matrix part of the constant buffers, and updates the physics simulation.</source>
          <target state="new">When the game is in the active state, Marble Maze updates the camera to follow the marble, updates the view matrix part of the constant buffers, and updates the physics simulation.</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method updates the position of the camera.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method updates the position of the camera.</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Marble Maze uses the <bpt id="p1">**</bpt>m\_resetCamera<ept id="p1">**</ept> variable to flag that the camera must be reset to be located directly above the marble.</source>
          <target state="new">Marble Maze uses the <bpt id="p1">**</bpt>m\_resetCamera<ept id="p1">**</ept> variable to flag that the camera must be reset to be located directly above the marble.</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The camera is reset when the game starts or the marble falls through the maze.</source>
          <target state="new">The camera is reset when the game starts or the marble falls through the maze.</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>When the main menu or high score display screen is active, the camera is set at a constant location.</source>
          <target state="new">When the main menu or high score display screen is active, the camera is set at a constant location.</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Otherwise, Marble Maze uses the <bpt id="p1">*</bpt>timeDelta<ept id="p1">*</ept> parameter to interpolate the position of the camera between its current and target positions.</source>
          <target state="new">Otherwise, Marble Maze uses the <bpt id="p1">*</bpt>timeDelta<ept id="p1">*</ept> parameter to interpolate the position of the camera between its current and target positions.</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The target position is slightly above and in front of the marble.</source>
          <target state="new">The target position is slightly above and in front of the marble.</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Using the elapsed frame time enables the camera to gradually follow, or chase, the marble.</source>
          <target state="new">Using the elapsed frame time enables the camera to gradually follow, or chase, the marble.</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method updates the constant buffers for the marble and the maze.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method updates the constant buffers for the marble and the maze.</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The maze’s model, or world, matrix always remains the identity matrix.</source>
          <target state="new">The maze’s model, or world, matrix always remains the identity matrix.</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Except for the main diagonal, whose elements are all ones, the identity matrix is a square matrix composed of zeros.</source>
          <target state="new">Except for the main diagonal, whose elements are all ones, the identity matrix is a square matrix composed of zeros.</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The marble’s model matrix is based on its position matrix times its rotation matrix.</source>
          <target state="new">The marble’s model matrix is based on its position matrix times its rotation matrix.</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>mul<ept id="p1">**</ept> and <bpt id="p2">**</bpt>translation<ept id="p2">**</ept> functions are defined in BasicMath.h.</source>
          <target state="new">The <bpt id="p1">**</bpt>mul<ept id="p1">**</ept> and <bpt id="p2">**</bpt>translation<ept id="p2">**</ept> functions are defined in BasicMath.h.</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>For information about how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method reads user input and simulates the motion of the marble, see <bpt id="p2">[</bpt>Adding input and interactivity to the Marble Maze sample<ept id="p2">](adding-input-and-interactivity-to-the-marble-maze-sample.md)</ept>.</source>
          <target state="new">For information about how the <bpt id="p1">**</bpt>MarbleMaze::Update<ept id="p1">**</ept> method reads user input and simulates the motion of the marble, see <bpt id="p2">[</bpt>Adding input and interactivity to the Marble Maze sample<ept id="p2">](adding-input-and-interactivity-to-the-marble-maze-sample.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Rendering the scene</source>
          <target state="new">Rendering the scene</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>When a scene is rendered, these steps are typically included.</source>
          <target state="new">When a scene is rendered, these steps are typically included.</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Set the current render target depth-stencil buffer.</source>
          <target state="new">Set the current render target depth-stencil buffer.</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Clear the render and stencil views.</source>
          <target state="new">Clear the render and stencil views.</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Prepare the vertex and pixel shaders for drawing.</source>
          <target state="new">Prepare the vertex and pixel shaders for drawing.</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Render the 3-D objects in the scene.</source>
          <target state="new">Render the 3-D objects in the scene.</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Render any 2-D object that you want to appear in front of the scene.</source>
          <target state="new">Render any 2-D object that you want to appear in front of the scene.</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Present the rendered image to the monitor.</source>
          <target state="new">Present the rendered image to the monitor.</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method binds the render target and depth stencil views, clears those views, draws the scene, and then draws the overlay.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method binds the render target and depth stencil views, clears those views, draws the scene, and then draws the overlay.</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Preparing the render targets</source>
          <target state="new">Preparing the render targets</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Before you render your scene, you must set the current render target depth-stencil buffer.</source>
          <target state="new">Before you render your scene, you must set the current render target depth-stencil buffer.</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>If your scene is not guaranteed to draw over every pixel on the screen, also clear the render and stencil views.</source>
          <target state="new">If your scene is not guaranteed to draw over every pixel on the screen, also clear the render and stencil views.</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Marble Maze clears the render and stencil views on every frame to ensure that there are no visible artifacts from the previous frame.</source>
          <target state="new">Marble Maze clears the render and stencil views on every frame to ensure that there are no visible artifacts from the previous frame.</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method calls the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11DeviceContext::OMSetRenderTargets<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept> method to set the render target and the depth-stencil buffer as the current ones.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method calls the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11DeviceContext::OMSetRenderTargets<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept> method to set the render target and the depth-stencil buffer as the current ones.</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>m\_renderTargetView<ept id="p1">**</ept> member variable, an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11RenderTargetView<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> object, and the <bpt id="p4">**</bpt>m\_depthStencilView<ept id="p4">**</ept> member variable, an <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11DepthStencilView<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476377)</ept> object, are defined and initialized by the <bpt id="p7">**</bpt>DirectXBase<ept id="p7">**</ept> class.</source>
          <target state="new">The <bpt id="p1">**</bpt>m\_renderTargetView<ept id="p1">**</ept> member variable, an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11RenderTargetView<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> object, and the <bpt id="p4">**</bpt>m\_depthStencilView<ept id="p4">**</ept> member variable, an <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11DepthStencilView<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476377)</ept> object, are defined and initialized by the <bpt id="p7">**</bpt>DirectXBase<ept id="p7">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11RenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DepthStencilView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476377)</ept> interfaces support the texture view mechanism that is provided by Direct3D 10 and later.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ID3D11RenderTargetView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476582)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DepthStencilView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476377)</ept> interfaces support the texture view mechanism that is provided by Direct3D 10 and later.</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>For more information about texture views, see <bpt id="p1">[</bpt>Texture Views (Direct3D 10)<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205128)</ept>.</source>
          <target state="new">For more information about texture views, see <bpt id="p1">[</bpt>Texture Views (Direct3D 10)<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205128)</ept>.</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OMSetRenderTargets<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept> method prepares the output-merger stage of the Direct3D pipeline.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>OMSetRenderTargets<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476464)</ept> method prepares the output-merger stage of the Direct3D pipeline.</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>For more information about the output-merger stage, see <bpt id="p1">[</bpt>Output-Merger Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205120)</ept>.</source>
          <target state="new">For more information about the output-merger stage, see <bpt id="p1">[</bpt>Output-Merger Stage<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb205120)</ept>.</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Preparing the vertex and pixel shaders</source>
          <target state="new">Preparing the vertex and pixel shaders</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Before you render the scene objects, perform the following steps to prepare the vertex and pixel shaders for drawing:</source>
          <target state="new">Before you render the scene objects, perform the following steps to prepare the vertex and pixel shaders for drawing:</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Set the shader input layout as the current layout.</source>
          <target state="new">Set the shader input layout as the current layout.</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Set the vertex and pixel shaders as the current shaders.</source>
          <target state="new">Set the vertex and pixel shaders as the current shaders.</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Update any constant buffers with data that you have to pass to the shaders.</source>
          <target state="new">Update any constant buffers with data that you have to pass to the shaders.</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  Marble Maze uses one pair of vertex and pixel shaders for all 3-D objects.</source>
          <target state="new"><bpt id="p1">**</bpt>Important<ept id="p1">**</ept>  Marble Maze uses one pair of vertex and pixel shaders for all 3-D objects.</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If your game uses more than one pair of shaders, you must perform these steps each time you draw objects that use different shaders.</source>
          <target state="new">If your game uses more than one pair of shaders, you must perform these steps each time you draw objects that use different shaders.</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>To reduce the overhead that is associated with changing the shader state, we recommend that you group render calls for all objects that use the same shaders.</source>
          <target state="new">To reduce the overhead that is associated with changing the shader state, we recommend that you group render calls for all objects that use the same shaders.</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The section <bpt id="p1">[</bpt>Loading shaders<ept id="p1">](#loading_shaders)</ept> in this document describes how the input layout is created when the vertex shader is created.</source>
          <target state="new">The section <bpt id="p1">[</bpt>Loading shaders<ept id="p1">](#loading_shaders)</ept> in this document describes how the input layout is created when the vertex shader is created.</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method uses the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11DeviceContext::IASetInputLayout<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476454)</ept> method to set this layout as the current layout.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method uses the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11DeviceContext::IASetInputLayout<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476454)</ept> method to set this layout as the current layout.</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method uses the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11DeviceContext::VSSetShader<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476493)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ID3D11DeviceContext::PSSetShader<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/desktop/ff476472)</ept> methods to set the vertex and pixel shaders as the current shaders, respectively.</source>
          <target state="new">The following example shows how the <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method uses the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11DeviceContext::VSSetShader<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476493)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ID3D11DeviceContext::PSSetShader<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/desktop/ff476472)</ept> methods to set the vertex and pixel shaders as the current shaders, respectively.</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>After the <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> sets the shaders and their input layout, it uses the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11DeviceContext::UpdateSubresource<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476486)</ept> method to update the constant buffer with the model, view, and projection matrices for the maze.</source>
          <target state="new">After the <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> sets the shaders and their input layout, it uses the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11DeviceContext::UpdateSubresource<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476486)</ept> method to update the constant buffer with the model, view, and projection matrices for the maze.</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>UpdateSubresource<ept id="p1">**</ept> method copies the matrix data from CPU memory to GPU memory.</source>
          <target state="new">The <bpt id="p1">**</bpt>UpdateSubresource<ept id="p1">**</ept> method copies the matrix data from CPU memory to GPU memory.</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Recall that the model and view components of the <bpt id="p1">**</bpt>ConstantBuffer<ept id="p1">**</ept> structure are updated in the <bpt id="p2">**</bpt>MarbleMaze::Update<ept id="p2">**</ept> method.</source>
          <target state="new">Recall that the model and view components of the <bpt id="p1">**</bpt>ConstantBuffer<ept id="p1">**</ept> structure are updated in the <bpt id="p2">**</bpt>MarbleMaze::Update<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method then calls the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11DeviceContext::VSSetConstantBuffers<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476491)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ID3D11DeviceContext::PSSetConstantBuffers<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/desktop/ff476470)</ept> methods to set this constant buffer as the current one.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method then calls the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID3D11DeviceContext::VSSetConstantBuffers<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff476491)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ID3D11DeviceContext::PSSetConstantBuffers<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/desktop/ff476470)</ept> methods to set this constant buffer as the current one.</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method performs similar steps to prepare the marble to be rendered.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method performs similar steps to prepare the marble to be rendered.</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Rendering the maze and the marble</source>
          <target state="new">Rendering the maze and the marble</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>After you activate the current shaders, you can draw your scene objects.</source>
          <target state="new">After you activate the current shaders, you can draw your scene objects.</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method calls the <bpt id="p2">**</bpt>SDKMesh::Render<ept id="p2">**</ept> method to render the maze mesh.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method calls the <bpt id="p2">**</bpt>SDKMesh::Render<ept id="p2">**</ept> method to render the maze mesh.</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method performs similar steps to render the marble.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method performs similar steps to render the marble.</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>As mentioned earlier in this document, the <bpt id="p1">**</bpt>SDKMesh<ept id="p1">**</ept> class is provided for demonstration purposes, but we do not recommend it for use in a production-quality game.</source>
          <target state="new">As mentioned earlier in this document, the <bpt id="p1">**</bpt>SDKMesh<ept id="p1">**</ept> class is provided for demonstration purposes, but we do not recommend it for use in a production-quality game.</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>However, notice that the <bpt id="p1">**</bpt>SDKMesh::RenderMesh<ept id="p1">**</ept> method, which is called by <bpt id="p2">**</bpt>SDKMesh::Render<ept id="p2">**</ept>, uses the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext::IASetVertexBuffers<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476456)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11DeviceContext::IASetIndexBuffer<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476453)</ept> methods to set the current vertex and index buffers that define the mesh, and the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>ID3D11DeviceContext::DrawIndexed<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/desktop/ff476410)</ept> method to draw the buffers.</source>
          <target state="new">However, notice that the <bpt id="p1">**</bpt>SDKMesh::RenderMesh<ept id="p1">**</ept> method, which is called by <bpt id="p2">**</bpt>SDKMesh::Render<ept id="p2">**</ept>, uses the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ID3D11DeviceContext::IASetVertexBuffers<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/desktop/ff476456)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ID3D11DeviceContext::IASetIndexBuffer<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/desktop/ff476453)</ept> methods to set the current vertex and index buffers that define the mesh, and the <bpt id="p7">[</bpt><bpt id="p8">**</bpt>ID3D11DeviceContext::DrawIndexed<ept id="p8">**</ept><ept id="p7">](https://msdn.microsoft.com/library/windows/desktop/ff476410)</ept> method to draw the buffers.</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>For more information about how to work with vertex and index buffers, see <bpt id="p1">[</bpt>Introduction to Buffers in Direct3D 11<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476898)</ept>.</source>
          <target state="new">For more information about how to work with vertex and index buffers, see <bpt id="p1">[</bpt>Introduction to Buffers in Direct3D 11<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476898)</ept>.</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Drawing the user interface and overlay</source>
          <target state="new">Drawing the user interface and overlay</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>After drawing 3-D scene objects, Marble Maze draws the 2-D UI elements that appear in front of the scene.</source>
          <target state="new">After drawing 3-D scene objects, Marble Maze draws the 2-D UI elements that appear in front of the scene.</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method ends by drawing the user interface and the overlay.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method ends by drawing the user interface and the overlay.</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>UserInterface::Render<ept id="p1">**</ept> method uses an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID2D1DeviceContext<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404479)</ept> object to draw the UI elements.</source>
          <target state="new">The <bpt id="p1">**</bpt>UserInterface::Render<ept id="p1">**</ept> method uses an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ID2D1DeviceContext<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404479)</ept> object to draw the UI elements.</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>This method sets the drawing state, draws all active UI elements, and then restores the previous drawing state.</source>
          <target state="new">This method sets the drawing state, draws all active UI elements, and then restores the previous drawing state.</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>SampleOverlay::Render<ept id="p1">**</ept> method uses a similar technique to draw the overlay bitmap.</source>
          <target state="new">The <bpt id="p1">**</bpt>SampleOverlay::Render<ept id="p1">**</ept> method uses a similar technique to draw the overlay bitmap.</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Presenting the scene</source>
          <target state="new">Presenting the scene</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>After drawing all 2-D and 3-D scene objects, Marble Maze presents the rendered image to the monitor.</source>
          <target state="new">After drawing all 2-D and 3-D scene objects, Marble Maze presents the rendered image to the monitor.</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>It synchronizes drawing to the vertical blank to ensure that time is not spent time drawing frames that will never be actually shown on the display.</source>
          <target state="new">It synchronizes drawing to the vertical blank to ensure that time is not spent time drawing frames that will never be actually shown on the display.</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Marble Maze also handles device changes when it presents the scene.</source>
          <target state="new">Marble Maze also handles device changes when it presents the scene.</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>After the <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method returns, the game loop calls the <bpt id="p2">**</bpt>MarbleMaze::Present<ept id="p2">**</ept> method to send the rendered image to the monitor or display.</source>
          <target state="new">After the <bpt id="p1">**</bpt>MarbleMaze::Render<ept id="p1">**</ept> method returns, the game loop calls the <bpt id="p2">**</bpt>MarbleMaze::Present<ept id="p2">**</ept> method to send the rendered image to the monitor or display.</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class does not override the <bpt id="p2">**</bpt>DirectXBase::Present<ept id="p2">**</ept> method.</source>
          <target state="new">The <bpt id="p1">**</bpt>MarbleMaze<ept id="p1">**</ept> class does not override the <bpt id="p2">**</bpt>DirectXBase::Present<ept id="p2">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DirectXBase::Present<ept id="p1">**</ept> method calls <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IDXGISwapChain1::Present<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept> to perform the present operation, as shown in the following example:</source>
          <target state="new">The <bpt id="p1">**</bpt>DirectXBase::Present<ept id="p1">**</ept> method calls <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IDXGISwapChain1::Present<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept> to perform the present operation, as shown in the following example:</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>In this example, <bpt id="p1">**</bpt>m\_swapChain<ept id="p1">**</ept> is an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IDXGISwapChain1<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept> object.</source>
          <target state="new">In this example, <bpt id="p1">**</bpt>m\_swapChain<ept id="p1">**</ept> is an <bpt id="p2">[</bpt><bpt id="p3">**</bpt>IDXGISwapChain1<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/hh404631)</ept> object.</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The initialization of this object is described in the section <bpt id="p1">[</bpt>Initializing Direct3D and Direct2D<ept id="p1">](#initializing)</ept> in this document.</source>
          <target state="new">The initialization of this object is described in the section <bpt id="p1">[</bpt>Initializing Direct3D and Direct2D<ept id="p1">](#initializing)</ept> in this document.</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The first parameter to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept>, <bpt id="p3">*</bpt>SyncInterval<ept id="p3">*</ept>, specifies the number of vertical blanks to wait before presenting the frame.</source>
          <target state="new">The first parameter to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept>, <bpt id="p3">*</bpt>SyncInterval<ept id="p3">*</ept>, specifies the number of vertical blanks to wait before presenting the frame.</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Marble Maze specifies 1 so that it waits until the next vertical blank.</source>
          <target state="new">Marble Maze specifies 1 so that it waits until the next vertical blank.</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>A vertical blank is the time between when one frame finishes drawing to the monitor and the next frame begins.</source>
          <target state="new">A vertical blank is the time between when one frame finishes drawing to the monitor and the next frame begins.</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept> method returns an error code that indicates that the device was removed or otherwise failed.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDXGISwapChain1::Present1<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh446797)</ept> method returns an error code that indicates that the device was removed or otherwise failed.</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>In this case, Marble Maze reinitializes the device.</source>
          <target state="new">In this case, Marble Maze reinitializes the device.</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>Adding input and interactivity to the Marble Maze sample<ept id="p1">](adding-input-and-interactivity-to-the-marble-maze-sample.md)</ept> for information about some of the key practices to keep in mind when you work with input devices.</source>
          <target state="new">Read <bpt id="p1">[</bpt>Adding input and interactivity to the Marble Maze sample<ept id="p1">](adding-input-and-interactivity-to-the-marble-maze-sample.md)</ept> for information about some of the key practices to keep in mind when you work with input devices.</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>This document discusses how Marble Maze supports touch, accelerometer, Xbox 360 controller, and mouse input.</source>
          <target state="new">This document discusses how Marble Maze supports touch, accelerometer, Xbox 360 controller, and mouse input.</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Adding input and interactivity to the Marble Maze sample</source>
          <target state="new">Adding input and interactivity to the Marble Maze sample</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Marble Maze application structure</source>
          <target state="new">Marble Maze application structure</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Developing Marble Maze, a UWP game in C++ and DirectX</source>
          <target state="new">Developing Marble Maze, a UWP game in C++ and DirectX</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>