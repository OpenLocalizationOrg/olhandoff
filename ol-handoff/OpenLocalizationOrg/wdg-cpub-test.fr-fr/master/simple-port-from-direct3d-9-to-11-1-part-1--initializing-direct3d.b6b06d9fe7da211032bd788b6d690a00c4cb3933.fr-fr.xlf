<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">baa569843ced7cc52717a29d8aa24e3674645f0d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\simple-port-from-direct3d-9-to-11-1-part-1--initializing-direct3d.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Initialize Direct3D 11</source>
          <target state="new">Initialize Direct3D 11</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Shows how to convert Direct3D 9 initialization code to Direct3D 11, including how to get handles to the Direct3D device and the device context and how to use DXGI to set up a swap chain.</source>
          <target state="new">Shows how to convert Direct3D 9 initialization code to Direct3D 11, including how to get handles to the Direct3D device and the device context and how to use DXGI to set up a swap chain.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initialize Direct3D 11</source>
          <target state="new">Initialize Direct3D 11</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new">Summary</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Part 1: Initialize Direct3D 11</source>
          <target state="new">Part 1: Initialize Direct3D 11</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Part 2: Convert the rendering framework</source>
          <target state="new">Part 2: Convert the rendering framework</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Part 3: Port the game loop</source>
          <target state="new">Part 3: Port the game loop</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Shows how to convert Direct3D 9 initialization code to Direct3D 11, including how to get handles to the Direct3D device and the device context and how to use DXGI to set up a swap chain.</source>
          <target state="new">Shows how to convert Direct3D 9 initialization code to Direct3D 11, including how to get handles to the Direct3D device and the device context and how to use DXGI to set up a swap chain.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Part 1 of the <bpt id="p1">[</bpt>Port a simple Direct3D 9 app to DirectX 11 and Universal Windows Platform (UWP)<ept id="p1">](walkthrough--simple-port-from-direct3d-9-to-11-1.md)</ept> walkthrough.</source>
          <target state="new">Part 1 of the <bpt id="p1">[</bpt>Port a simple Direct3D 9 app to DirectX 11 and Universal Windows Platform (UWP)<ept id="p1">](walkthrough--simple-port-from-direct3d-9-to-11-1.md)</ept> walkthrough.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initialize the Direct3D device</source>
          <target state="new">Initialize the Direct3D device</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In Direct3D 9, we created a handle to the Direct3D device by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDirect3D9::CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174313)</ept>.</source>
          <target state="new">In Direct3D 9, we created a handle to the Direct3D device by calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDirect3D9::CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174313)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>We started by getting a pointer to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDirect3D9 interface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174300)</ept> and we specified a number of parameters to control the configuration of the Direct3D device and the swap chain.</source>
          <target state="new">We started by getting a pointer to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IDirect3D9 interface<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb174300)</ept> and we specified a number of parameters to control the configuration of the Direct3D device and the swap chain.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Before doing this we called <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetDeviceCaps<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd144877)</ept> to make sure we weren't asking the device to do something it couldn't do.</source>
          <target state="new">Before doing this we called <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GetDeviceCaps<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/dd144877)</ept> to make sure we weren't asking the device to do something it couldn't do.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Direct3D 9</source>
          <target state="new">Direct3D 9</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In Direct3D 11, the device context and graphics infrastructure is considered separate from the device itself.</source>
          <target state="new">In Direct3D 11, the device context and graphics infrastructure is considered separate from the device itself.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initialization is divided into multiple steps.</source>
          <target state="new">Initialization is divided into multiple steps.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>First we create the device.</source>
          <target state="new">First we create the device.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>We get a list of the feature levels the device supports - this informs most of what we need to know about the GPU.</source>
          <target state="new">We get a list of the feature levels the device supports - this informs most of what we need to know about the GPU.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Also, we don't need to create an interface just to access Direct3D.</source>
          <target state="new">Also, we don't need to create an interface just to access Direct3D.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Instead we use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> core API.</source>
          <target state="new">Instead we use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>D3D11CreateDevice<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</ept> core API.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This gives us a handle to the device and the device's immediate context.</source>
          <target state="new">This gives us a handle to the device and the device's immediate context.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The device context is used to set pipeline state and generate rendering commands.</source>
          <target state="new">The device context is used to set pipeline state and generate rendering commands.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>After creating the Direct3D 11 device and context, we can take advantage of COM pointer functionality to get the most recent version of the interfaces, which include additional capability and are always recommended.</source>
          <target state="new">After creating the Direct3D 11 device and context, we can take advantage of COM pointer functionality to get the most recent version of the interfaces, which include additional capability and are always recommended.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   D3D\_FEATURE\_LEVEL\_9\_1 (which corresponds to shader model 2.0) is the minimum level your Windows Store game is required to support.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   D3D\_FEATURE\_LEVEL\_9\_1 (which corresponds to shader model 2.0) is the minimum level your Windows Store game is required to support.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>(Your game's ARM packages will fail certification if you don't support 9\_1.) If your game also includes a rendering path for shader model 3 features, then you should include D3D\_FEATURE\_LEVEL\_9\_3 in the array.</source>
          <target state="new">(Your game's ARM packages will fail certification if you don't support 9\_1.) If your game also includes a rendering path for shader model 3 features, then you should include D3D\_FEATURE\_LEVEL\_9\_3 in the array.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Create a swap chain</source>
          <target state="new">Create a swap chain</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Direct3D 11 includes a device API called DirectX graphics infrastructure (DXGI).</source>
          <target state="new">Direct3D 11 includes a device API called DirectX graphics infrastructure (DXGI).</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The DXGI interface allows us to (for example) control how the swap chain is configured and set up shared devices.</source>
          <target state="new">The DXGI interface allows us to (for example) control how the swap chain is configured and set up shared devices.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>At this step in initializing Direct3D, we're going to use DXGI to create a swap chain.</source>
          <target state="new">At this step in initializing Direct3D, we're going to use DXGI to create a swap chain.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Since we created the device, we can follow an interface chain back to the DXGI adapter.</source>
          <target state="new">Since we created the device, we can follow an interface chain back to the DXGI adapter.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Direct3D device implements a COM interface for DXGI.</source>
          <target state="new">The Direct3D device implements a COM interface for DXGI.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>First we need to get that interface and use it to request the DXGI adapter hosting the device.</source>
          <target state="new">First we need to get that interface and use it to request the DXGI adapter hosting the device.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Then we use the DXGI adapter to create a DXGI factory.</source>
          <target state="new">Then we use the DXGI adapter to create a DXGI factory.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   These are COM interfaces so your first response might be to use <bpt id="p2">[</bpt><bpt id="p3">**</bpt>QueryInterface<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ms682521)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   These are COM interfaces so your first response might be to use <bpt id="p2">[</bpt><bpt id="p3">**</bpt>QueryInterface<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ms682521)</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You should use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Microsoft::WRL::ComPtr<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept> smart pointers instead.</source>
          <target state="new">You should use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Microsoft::WRL::ComPtr<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept> smart pointers instead.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Then just call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>As()<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br230426.aspx)</ept> method, supplying an empty COM pointer of the correct interface type.</source>
          <target state="new">Then just call the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>As()<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br230426.aspx)</ept> method, supplying an empty COM pointer of the correct interface type.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Now that we have the DXGI factory, we can use it to create the swap chain.</source>
          <target state="new">Now that we have the DXGI factory, we can use it to create the swap chain.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Let's define the swap chain parameters.</source>
          <target state="new">Let's define the swap chain parameters.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We need to specify the surface format; we'll choose <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI\_FORMAT\_B8G8R8A8\_UNORM<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb173059)</ept> because it's compatible with Direct2D.</source>
          <target state="new">We need to specify the surface format; we'll choose <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI\_FORMAT\_B8G8R8A8\_UNORM<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb173059)</ept> because it's compatible with Direct2D.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>We'll turn off display scaling, multisampling, and stereo rendering because they aren't used in this example.</source>
          <target state="new">We'll turn off display scaling, multisampling, and stereo rendering because they aren't used in this example.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Since we are running directly in a CoreWindow we can leave the width and height set to 0 and get full-screen values automatically.</source>
          <target state="new">Since we are running directly in a CoreWindow we can leave the width and height set to 0 and get full-screen values automatically.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Always set the <bpt id="p2">*</bpt>SDKVersion<ept id="p2">*</ept> parameter to D3D11\_SDK\_VERSION for UWP apps.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   Always set the <bpt id="p2">*</bpt>SDKVersion<ept id="p2">*</ept> parameter to D3D11\_SDK\_VERSION for UWP apps.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To ensure we aren't rendering more often than the screen can actually display, we set frame latency to 1 and use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI\_SWAP\_EFFECT\_FLIP\_SEQUENTIAL<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb173077)</ept>.</source>
          <target state="new">To ensure we aren't rendering more often than the screen can actually display, we set frame latency to 1 and use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DXGI\_SWAP\_EFFECT\_FLIP\_SEQUENTIAL<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb173077)</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This saves power and is a store certification requirement; we'll learn more about presenting to the screen in part 2 of this walkthrough.</source>
          <target state="new">This saves power and is a store certification requirement; we'll learn more about presenting to the screen in part 2 of this walkthrough.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   You can use multithreading (for example, <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ThreadPool<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br229642)</ept> work items) to continue other work while the rendering thread is blocked.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   You can use multithreading (for example, <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ThreadPool<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br229642)</ept> work items) to continue other work while the rendering thread is blocked.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Now we can set up the back buffer for rendering.</source>
          <target state="new">Now we can set up the back buffer for rendering.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Configure the back buffer as a render target</source>
          <target state="new">Configure the back buffer as a render target</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>First we have to get a handle to the back buffer.</source>
          <target state="new">First we have to get a handle to the back buffer.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>(Note that the back buffer is owned by the DXGI swap chain, whereas in DirectX 9 it was owned by the Direct3D device.) Then we tell the Direct3D device to use it as the render target by creating a render target <bpt id="p1">*</bpt>view<ept id="p1">*</ept> using the back buffer.</source>
          <target state="new">(Note that the back buffer is owned by the DXGI swap chain, whereas in DirectX 9 it was owned by the Direct3D device.) Then we tell the Direct3D device to use it as the render target by creating a render target <bpt id="p1">*</bpt>view<ept id="p1">*</ept> using the back buffer.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Now the device context comes into play.</source>
          <target state="new">Now the device context comes into play.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>We tell Direct3D to use our newly-created render target view by using the device context interface.</source>
          <target state="new">We tell Direct3D to use our newly-created render target view by using the device context interface.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>We'll retrieve the width and height of the back buffer so that we can target the whole window as our viewport.</source>
          <target state="new">We'll retrieve the width and height of the back buffer so that we can target the whole window as our viewport.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Note that the back buffer is attached to the swap chain, so if the window size changes (for example, the user drags the game window to another monitor) the back buffer will need to be resized and some setup will need to be redone.</source>
          <target state="new">Note that the back buffer is attached to the swap chain, so if the window size changes (for example, the user drags the game window to another monitor) the back buffer will need to be resized and some setup will need to be redone.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Direct3D 11</source>
          <target state="new">Direct3D 11</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Now that we have a device handle and a full-screen render target, we are ready to load and draw geometry.</source>
          <target state="new">Now that we have a device handle and a full-screen render target, we are ready to load and draw geometry.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Continue to <bpt id="p1">[</bpt>Part 2: Rendering<ept id="p1">](simple-port-from-direct3d-9-to-11-1-part-2--rendering.md)</ept>.</source>
          <target state="new">Continue to <bpt id="p1">[</bpt>Part 2: Rendering<ept id="p1">](simple-port-from-direct3d-9-to-11-1-part-2--rendering.md)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>