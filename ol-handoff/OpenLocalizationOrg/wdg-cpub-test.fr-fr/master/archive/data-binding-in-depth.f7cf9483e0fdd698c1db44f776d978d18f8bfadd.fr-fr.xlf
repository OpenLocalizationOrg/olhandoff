<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="fr-fr">
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ms.assetid: 41E1B4F1-6CAF-4128-A61A-4E400B149011</source>
          <target state="new">ms.assetid: 41E1B4F1-6CAF-4128-A61A-4E400B149011</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>title: Data binding in depth</source>
          <target state="new">title: Data binding in depth</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>description: Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</source>
          <target state="new">description: Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Data binding in depth</source>
          <target state="new">Data binding in depth</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>** Important APIs **</source>
          <target state="new">** Important APIs **</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Binding class</source>
          <target state="new">Binding class</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DataContext</source>
          <target state="new">DataContext</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>INotifyPropertyChanged</source>
          <target state="new">INotifyPropertyChanged</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  This topic describes data binding features in detail.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  This topic describes data binding features in detail.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For a short, practical introduction, see <bpt id="p1">[</bpt>Data binding overview<ept id="p1">](data-binding-quickstart.md)</ept>.</source>
          <target state="new">For a short, practical introduction, see <bpt id="p1">[</bpt>Data binding overview<ept id="p1">](data-binding-quickstart.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</source>
          <target state="new">Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Data binding allows you to separate the concern of data from the concern of UI, and that results in a simpler conceptual model as well as better readability, testability, and maintainability of your app.</source>
          <target state="new">Data binding allows you to separate the concern of data from the concern of UI, and that results in a simpler conceptual model as well as better readability, testability, and maintainability of your app.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can use data binding to simply display values from a data source when the UI is first shown, but not to respond to changes in those values.</source>
          <target state="new">You can use data binding to simply display values from a data source when the UI is first shown, but not to respond to changes in those values.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is called one-time binding, and it works well for data whose values don't change during run-time.</source>
          <target state="new">This is called one-time binding, and it works well for data whose values don't change during run-time.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Additionally, you can choose to "observe" the values and to update the UI when they change.</source>
          <target state="new">Additionally, you can choose to "observe" the values and to update the UI when they change.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is called one-way binding, and it works well for read-only data.</source>
          <target state="new">This is called one-way binding, and it works well for read-only data.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Ultimately, you can choose to both observe and update, so that changes that the user makes to values in the UI are automatically pushed back into the data source.</source>
          <target state="new">Ultimately, you can choose to both observe and update, so that changes that the user makes to values in the UI are automatically pushed back into the data source.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is called two-way binding, and it works well for read-write data.</source>
          <target state="new">This is called two-way binding, and it works well for read-write data.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Here are some examples.</source>
          <target state="new">Here are some examples.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You could use one-time binding to bind an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242752)</ept> to the current user's photo.</source>
          <target state="new">You could use one-time binding to bind an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Image<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242752)</ept> to the current user's photo.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You could use one-way binding to bind a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> to a collection of real-time news articles grouped by newspaper section.</source>
          <target state="new">You could use one-way binding to bind a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ListView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> to a collection of real-time news articles grouped by newspaper section.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You could use two-way binding to bind a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> to a customer's name in a form.</source>
          <target state="new">You could use two-way binding to bind a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209683)</ept> to a customer's name in a form.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>There are two kinds of binding, and they're both typically declared in UI markup.</source>
          <target state="new">There are two kinds of binding, and they're both typically declared in UI markup.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can choose to use either the <bpt id="p1">[</bpt>{x:Bind} markup extension<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> or the <bpt id="p2">[</bpt>{Binding} markup extension<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.</source>
          <target state="new">You can choose to use either the <bpt id="p1">[</bpt>{x:Bind} markup extension<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> or the <bpt id="p2">[</bpt>{Binding} markup extension<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>And you can even use a mixture of the two in the same app—even on the same UI element.</source>
          <target state="new">And you can even use a mixture of the two in the same app—even on the same UI element.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>{x:Bind} is new for Windows 10 and it has better performance.</source>
          <target state="new">{x:Bind} is new for Windows 10 and it has better performance.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>{Binding} has more features.</source>
          <target state="new">{Binding} has more features.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>All the details described in this topic apply to both kinds of binding unless we explicitly say otherwise.</source>
          <target state="new">All the details described in this topic apply to both kinds of binding unless we explicitly say otherwise.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Sample apps that demonstrate {x:Bind}</source>
          <target state="new">Sample apps that demonstrate {x:Bind}</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>{x:Bind} sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619989)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>{x:Bind} sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619989)</ept>.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>QuizGame<ept id="p1">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>QuizGame<ept id="p1">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept>.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML UI Basics sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619992)</ept>.</source>
          <target state="new"><bpt id="p1">[</bpt>XAML UI Basics sample<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619992)</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Sample apps that demonstrate {Binding}</source>
          <target state="new">Sample apps that demonstrate {Binding}</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Download the <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532950)</ept> app.</source>
          <target state="new">Download the <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532950)</ept> app.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Download the <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> app.</source>
          <target state="new">Download the <bpt id="p1">[</bpt>Bookstore2<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=532952)</ept> app.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Every binding involves these pieces</source>
          <target state="new">Every binding involves these pieces</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>binding source<ept id="p1">*</ept>.</source>
          <target state="new">A <bpt id="p1">*</bpt>binding source<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is the source of the data for the binding, and it can be an instance of any class that has members whose values you want to display in your UI.</source>
          <target state="new">This is the source of the data for the binding, and it can be an instance of any class that has members whose values you want to display in your UI.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>binding target<ept id="p1">*</ept>.</source>
          <target state="new">A <bpt id="p1">*</bpt>binding target<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept> of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> in your UI that displays the data.</source>
          <target state="new">This is a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept> of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> in your UI that displays the data.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>binding object<ept id="p1">*</ept>.</source>
          <target state="new">A <bpt id="p1">*</bpt>binding object<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This is the piece that transfers data values from the source to the target, and optionally from the target back to the source.</source>
          <target state="new">This is the piece that transfers data values from the source to the target, and optionally from the target back to the source.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The binding object is created at XAML load time from your <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> or <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> markup extension.</source>
          <target state="new">The binding object is created at XAML load time from your <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> or <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> markup extension.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the following sections, we'll take a closer look at the binding source, the binding target, and the binding object.</source>
          <target state="new">In the following sections, we'll take a closer look at the binding source, the binding target, and the binding object.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>And we'll link the sections together with the example of binding a button's content to a string property named <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept>, which belongs to a class named <bpt id="p2">**</bpt>HostViewModel<ept id="p2">**</ept>.</source>
          <target state="new">And we'll link the sections together with the example of binding a button's content to a string property named <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept>, which belongs to a class named <bpt id="p2">**</bpt>HostViewModel<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Binding source</source>
          <target state="new">Binding source</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Here's a very rudimentary implementation of a class that we could use as a binding source.</source>
          <target state="new">Here's a very rudimentary implementation of a class that we could use as a binding source.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you're using <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> with Visual C++ component extensions (C++/CX) then you'll need to add the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>BindableAttribute<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> attribute to your binding source class.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  If you're using <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> with Visual C++ component extensions (C++/CX) then you'll need to add the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>BindableAttribute<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> attribute to your binding source class.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you're using <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> then you don't need that attribute.</source>
          <target state="new">If you're using <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> then you don't need that attribute.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Adding a details view<ept id="p1">](data-binding-quickstart.md#adding-a-details-view)</ept> for a code snippet.</source>
          <target state="new">See <bpt id="p1">[</bpt>Adding a details view<ept id="p1">](data-binding-quickstart.md#adding-a-details-view)</ept> for a code snippet.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>That implementation of <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept>, and its property <bpt id="p2">**</bpt>NextButtonText<ept id="p2">**</ept>, are only appropriate for one-time binding.</source>
          <target state="new">That implementation of <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept>, and its property <bpt id="p2">**</bpt>NextButtonText<ept id="p2">**</ept>, are only appropriate for one-time binding.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>But one-way and two-way bindings are extremely common, and in those kinds of binding the UI automatically updates in response to changes in the data values of the binding source.</source>
          <target state="new">But one-way and two-way bindings are extremely common, and in those kinds of binding the UI automatically updates in response to changes in the data values of the binding source.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In order for those kinds of binding to work correctly, you need to make your binding source "observable" to the binding object.</source>
          <target state="new">In order for those kinds of binding to work correctly, you need to make your binding source "observable" to the binding object.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>So in our example, if we want to one-way or two-way bind to the <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept> property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object.</source>
          <target state="new">So in our example, if we want to one-way or two-way bind to the <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept> property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>One way of doing that is to derive the class that represents your binding source from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242356)</ept>, and expose a data value through a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept>.</source>
          <target state="new">One way of doing that is to derive the class that represents your binding source from <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyObject<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242356)</ept>, and expose a data value through a <bpt id="p3">[</bpt><bpt id="p4">**</bpt>DependencyProperty<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242362)</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>That's how a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> becomes observable.</source>
          <target state="new">That's how a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FrameworkElement<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208706)</ept> becomes observable.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FrameworkElements<ept id="p1">**</ept> are good binding sources right out of the box.</source>
          <target state="new"><bpt id="p1">**</bpt>FrameworkElements<ept id="p1">**</ept> are good binding sources right out of the box.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A more lightweight way of making a class observable—and a necessary one for classes that already have a base class—is to implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>System.ComponentModel.INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](T:System.ComponentModel.INotifyPropertyChanged)</ept>.</source>
          <target state="new">A more lightweight way of making a class observable—and a necessary one for classes that already have a base class—is to implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>System.ComponentModel.INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](T:System.ComponentModel.INotifyPropertyChanged)</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This really just involves implementing a single event named <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept>.</source>
          <target state="new">This really just involves implementing a single event named <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An example using <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept> is below.</source>
          <target state="new">An example using <bpt id="p1">**</bpt>HostViewModel<ept id="p1">**</ept> is below.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For C++/CX, you implement <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows::UI::Xaml::Data::INotifyPropertyChanged<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209899)</ept>, and the binding source class must either have the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>BindableAttribute<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> or implement <bpt id="p6">[</bpt><bpt id="p7">**</bpt>ICustomPropertyProvider<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  For C++/CX, you implement <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Windows::UI::Xaml::Data::INotifyPropertyChanged<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209899)</ept>, and the binding source class must either have the <bpt id="p4">[</bpt><bpt id="p5">**</bpt>BindableAttribute<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> or implement <bpt id="p6">[</bpt><bpt id="p7">**</bpt>ICustomPropertyProvider<ept id="p7">**</ept><ept id="p6">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Now the <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept> property is observable.</source>
          <target state="new">Now the <bpt id="p1">**</bpt>NextButtonText<ept id="p1">**</ept> property is observable.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept> event.</source>
          <target state="new">When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept> event.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When that event is raised, the binding object's handler receives an argument containing the name of the property that has changed.</source>
          <target state="new">When that event is raised, the binding object's handler receives an argument containing the name of the property that has changed.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>That's how the binding object knows which property's value to go and read again.</source>
          <target state="new">That's how the binding object knows which property's value to go and read again.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>So that you don't have to implement the pattern shown above multiple times, you can just derive from the <bpt id="p1">**</bpt>BindableBase<ept id="p1">**</ept> bass class that you'll find in the <bpt id="p2">[</bpt>QuizGame<ept id="p2">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept> sample (in the "Common" folder).</source>
          <target state="new">So that you don't have to implement the pattern shown above multiple times, you can just derive from the <bpt id="p1">**</bpt>BindableBase<ept id="p1">**</ept> bass class that you'll find in the <bpt id="p2">[</bpt>QuizGame<ept id="p2">](https://github.com/Microsoft/Windows-appsample-quizgame)</ept> sample (in the "Common" folder).</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Here's an example of how that looks.</source>
          <target state="new">Here's an example of how that looks.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Raising the <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept> event with an argument of <bpt id="p2">[</bpt><bpt id="p3">**</bpt>String.Empty<ept id="p3">**</ept><ept id="p2">](T:System.String)</ept> or <bpt id="p4">**</bpt>null<ept id="p4">**</ept> indicates that all non-indexer properties on the object should be re-read.</source>
          <target state="new">Raising the <bpt id="p1">**</bpt>PropertyChanged<ept id="p1">**</ept> event with an argument of <bpt id="p2">[</bpt><bpt id="p3">**</bpt>String.Empty<ept id="p3">**</ept><ept id="p2">](T:System.String)</ept> or <bpt id="p4">**</bpt>null<ept id="p4">**</ept> indicates that all non-indexer properties on the object should be re-read.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can raise the event to indicate that indexer properties on the object have changed by using an argument of "Item\[<bpt id="p1">*</bpt>indexer<ept id="p1">*</ept>\]" for specific indexers (where <bpt id="p2">*</bpt>indexer<ept id="p2">*</ept> is the index value), or a value of "Item\[\]" for all indexers.</source>
          <target state="new">You can raise the event to indicate that indexer properties on the object have changed by using an argument of "Item\[<bpt id="p1">*</bpt>indexer<ept id="p1">*</ept>\]" for specific indexers (where <bpt id="p2">*</bpt>indexer<ept id="p2">*</ept> is the index value), or a value of "Item\[\]" for all indexers.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A binding source can be treated either as a single object whose properties contain data, or as a collection of objects.</source>
          <target state="new">A binding source can be treated either as a single object whose properties contain data, or as a collection of objects.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In C# and Visual Basic code, you can one-time bind to an object that implements <bpt id="p1">[</bpt><bpt id="p2">**</bpt>List(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.Generic.List%601)</ept> to display a collection that does not change at run-time.</source>
          <target state="new">In C# and Visual Basic code, you can one-time bind to an object that implements <bpt id="p1">[</bpt><bpt id="p2">**</bpt>List(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.Generic.List%601)</ept> to display a collection that does not change at run-time.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For an observable collection (observing when items are added to and removed from the collection), one-way bind to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> instead.</source>
          <target state="new">For an observable collection (observing when items are added to and removed from the collection), one-way bind to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> instead.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In C++ code, you can bind to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Vector&amp;lt;T&amp;gt;<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/dn858385.aspx)</ept> for both observable and non-observable collections.</source>
          <target state="new">In C++ code, you can bind to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Vector&amp;lt;T&amp;gt;<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/dn858385.aspx)</ept> for both observable and non-observable collections.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To bind to your own collection classes, use the guidance in the following table.</source>
          <target state="new">To bind to your own collection classes, use the guidance in the following table.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Scenario</source>
          <target state="new">Scenario</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>C# and VB (CLR)</source>
          <target state="new">C# and VB (CLR)</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>C++/CX</source>
          <target state="new">C++/CX</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Bind to an object.</source>
          <target state="new">Bind to an object.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Can be any object.</source>
          <target state="new">Can be any object.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Object must have <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BindableAttribute<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> or implement <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ICustomPropertyProvider<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</source>
          <target state="new">Object must have <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BindableAttribute<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</ept> or implement <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ICustomPropertyProvider<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209878)</ept>.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Get property change updates from a bound object.</source>
          <target state="new">Get property change updates from a bound object.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Object must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>System.ComponentModel. INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](T:System.ComponentModel.INotifyPropertyChanged)</ept>.</source>
          <target state="new">Object must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>System.ComponentModel. INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](T:System.ComponentModel.INotifyPropertyChanged)</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Object must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Data. INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209899)</ept>.</source>
          <target state="new">Object must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Windows.UI.Xaml.Data. INotifyPropertyChanged<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209899)</ept>.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Bind to a collection.</source>
          <target state="new">Bind to a collection.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>List(Of T)</source>
          <target state="new">List(Of T)</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Platform::Collections::Vector&amp;lt;T&amp;gt;</source>
          <target state="new">Platform::Collections::Vector&amp;lt;T&amp;gt;</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Get collection change updates from a bound collection.</source>
          <target state="new">Get collection change updates from a bound collection.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>ObservableCollection(Of T)</source>
          <target state="new">ObservableCollection(Of T)</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Platform::Collections::Vector&amp;lt;T&amp;gt;</source>
          <target state="new">Platform::Collections::Vector&amp;lt;T&amp;gt;</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Implement a collection that supports binding.</source>
          <target state="new">Implement a collection that supports binding.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>List(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.Generic.List%601)</ept> or implement <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IList<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Generic.IList%601)</ept>(Of <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Object<ept id="p8">**</ept><ept id="p7">](T:System.Object)</ept>), <bpt id="p9">[</bpt><bpt id="p10">**</bpt>IEnumerable<ept id="p10">**</ept><ept id="p9">](T:System.Collections.IEnumerable)</ept>, or <bpt id="p11">[</bpt><bpt id="p12">**</bpt>IEnumerable<ept id="p12">**</ept><ept id="p11">](T:System.Collections.Generic.IEnumerable%601)</ept>(Of <bpt id="p13">**</bpt>Object<ept id="p13">**</ept>).</source>
          <target state="new">Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>List(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.Generic.List%601)</ept> or implement <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IList<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Generic.IList%601)</ept>(Of <bpt id="p7">[</bpt><bpt id="p8">**</bpt>Object<ept id="p8">**</ept><ept id="p7">](T:System.Object)</ept>), <bpt id="p9">[</bpt><bpt id="p10">**</bpt>IEnumerable<ept id="p10">**</ept><ept id="p9">](T:System.Collections.IEnumerable)</ept>, or <bpt id="p11">[</bpt><bpt id="p12">**</bpt>IEnumerable<ept id="p12">**</ept><ept id="p11">](T:System.Collections.Generic.IEnumerable%601)</ept>(Of <bpt id="p13">**</bpt>Object<ept id="p13">**</ept>).</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Binding to generic <bpt id="p1">**</bpt>IList(Of T)<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IEnumerable(Of T)<ept id="p2">**</ept> is not supported.</source>
          <target state="new">Binding to generic <bpt id="p1">**</bpt>IList(Of T)<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IEnumerable(Of T)<ept id="p2">**</ept> is not supported.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableIterable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701957)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IVector<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR206631)</ept>&amp;lt;<bpt id="p7">[</bpt><bpt id="p8">**</bpt>Object<ept id="p8">**</ept><ept id="p7">](T:System.Object)</ept>^&amp;gt;, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>IIterable<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/BR226024)</ept>&amp;lt;<bpt id="p11">**</bpt>Object<ept id="p11">**</ept>^&amp;gt;, <bpt id="p12">**</bpt>IVector<ept id="p12">**</ept>&amp;lt;<bpt id="p13">[</bpt><bpt id="p14">**</bpt>IInspectable<ept id="p14">**</ept><ept id="p13">](https://msdn.microsoft.com/library/BR205821)</ept>\*&amp;gt;, or <bpt id="p15">**</bpt>IIterable<ept id="p15">**</ept>&amp;lt;<bpt id="p16">**</bpt>IInspectable<ept id="p16">**</ept>\*&amp;gt;.</source>
          <target state="new">Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableIterable<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701957)</ept>, <bpt id="p5">[</bpt><bpt id="p6">**</bpt>IVector<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR206631)</ept>&amp;lt;<bpt id="p7">[</bpt><bpt id="p8">**</bpt>Object<ept id="p8">**</ept><ept id="p7">](T:System.Object)</ept>^&amp;gt;, <bpt id="p9">[</bpt><bpt id="p10">**</bpt>IIterable<ept id="p10">**</ept><ept id="p9">](https://msdn.microsoft.com/library/windows/apps/BR226024)</ept>&amp;lt;<bpt id="p11">**</bpt>Object<ept id="p11">**</ept>^&amp;gt;, <bpt id="p12">**</bpt>IVector<ept id="p12">**</ept>&amp;lt;<bpt id="p13">[</bpt><bpt id="p14">**</bpt>IInspectable<ept id="p14">**</ept><ept id="p13">](https://msdn.microsoft.com/library/BR205821)</ept>\*&amp;gt;, or <bpt id="p15">**</bpt>IIterable<ept id="p15">**</ept>&amp;lt;<bpt id="p16">**</bpt>IInspectable<ept id="p16">**</ept>\*&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Binding to generic <bpt id="p1">**</bpt>IVector&amp;lt;T&amp;gt;<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IIterable&amp;lt;T&amp;gt;<ept id="p2">**</ept> is not supported.</source>
          <target state="new">Binding to generic <bpt id="p1">**</bpt>IVector&amp;lt;T&amp;gt;<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IIterable&amp;lt;T&amp;gt;<ept id="p2">**</ept> is not supported.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Implement a collection that supports collection change updates.</source>
          <target state="new">Implement a collection that supports collection change updates.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> or implement (non-generic) <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>INotifyCollectionChanged<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept>.</source>
          <target state="new">Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> or implement (non-generic) <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>INotifyCollectionChanged<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableObservableVector<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</ept>.</source>
          <target state="new">Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept> and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableObservableVector<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</ept>.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Implement a collection that supports incremental loading.</source>
          <target state="new">Implement a collection that supports incremental loading.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> or implement (non-generic) <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>INotifyCollectionChanged<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept>.</source>
          <target state="new">Extend <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ObservableCollection(Of T)<ept id="p2">**</ept><ept id="p1">](T:System.Collections.ObjectModel.ObservableCollection%601)</ept> or implement (non-generic) <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IList<ept id="p4">**</ept><ept id="p3">](T:System.Collections.IList)</ept> and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>INotifyCollectionChanged<ept id="p6">**</ept><ept id="p5">](T:System.Collections.Specialized.INotifyCollectionChanged)</ept>.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Additionally, implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISupportIncrementalLoading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.</source>
          <target state="new">Additionally, implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISupportIncrementalLoading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableObservableVector<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ISupportIncrementalLoading<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.</source>
          <target state="new">Implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>IBindableVector<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</ept>, <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IBindableObservableVector<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</ept>, and <bpt id="p5">[</bpt><bpt id="p6">**</bpt>ISupportIncrementalLoading<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept>.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You can bind list controls to arbitrarily large data sources, and still achieve high performance, by using incremental loading.</source>
          <target state="new">You can bind list controls to arbitrarily large data sources, and still achieve high performance, by using incremental loading.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, you can bind list controls to Bing image query results without having to load all the results at once.</source>
          <target state="new">For example, you can bind list controls to Bing image query results without having to load all the results at once.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Instead, you load only some results immediately, and load additional results as needed.</source>
          <target state="new">Instead, you load only some results immediately, and load additional results as needed.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To support incremental loading, you must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISupportIncrementalLoading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept> on a data source that supports collection change notification.</source>
          <target state="new">To support incremental loading, you must implement <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ISupportIncrementalLoading<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</ept> on a data source that supports collection change notification.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>When the data binding engine requests more data, your data source must make the appropriate requests, integrate the results, and then send the appropriate notifications in order to update the UI.</source>
          <target state="new">When the data binding engine requests more data, your data source must make the appropriate requests, integrate the results, and then send the appropriate notifications in order to update the UI.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Binding target</source>
          <target state="new">Binding target</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In the two examples below, the <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> property is the binding target, and its value is set to a markup extension which declares the binding object.</source>
          <target state="new">In the two examples below, the <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> property is the binding target, and its value is set to a markup extension which declares the binding object.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>First <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> is shown, and then <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.</source>
          <target state="new">First <bpt id="p1">[</bpt>{x:Bind}<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> is shown, and then <bpt id="p2">[</bpt>{Binding}<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Declaring bindings in markup is the common case (it's convenient, readable, and toolable).</source>
          <target state="new">Declaring bindings in markup is the common case (it's convenient, readable, and toolable).</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>But you can avoid markup and imperatively (programmatically) create an instance of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> class instead if you need to.</source>
          <target state="new">But you can avoid markup and imperatively (programmatically) create an instance of the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> class instead if you need to.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
``` xml
&lt;Button Content="{x:Bind ...}" ... /&gt;</ph><ph id="ph2">
```

``` xml
&lt;Button Content="{Binding ...}" ... /&gt;</ph><ph id="ph3">
```

Binding object declared using {x:Bind}
--------------------------------------

There's one step we need to do before we author our [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) markup. We need to expose our binding source class from the class that represents our page of markup. We do that by adding a property (of type **HostViewModel** in this case) to our **HostView** page class.

``` csharp
namespace QuizGame.View
{
    public sealed partial class HostView : Page
    {
        public HostView()
        {
            this.InitializeComponent();
            this.ViewModel = new HostViewModel();
        }
    
        public HostViewModel ViewModel { get; set; }
    }
}
```</ph>

That done, we can now take a closer look at the markup that declares the binding object.</source>
          <target state="new"><ph id="ph1">
``` xml
&lt;Button Content="{x:Bind ...}" ... /&gt;</ph><ph id="ph2">
```

``` xml
&lt;Button Content="{Binding ...}" ... /&gt;</ph><ph id="ph3">
```

Binding object declared using {x:Bind}
--------------------------------------

There's one step we need to do before we author our [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) markup. We need to expose our binding source class from the class that represents our page of markup. We do that by adding a property (of type **HostViewModel** in this case) to our **HostView** page class.

``` csharp
namespace QuizGame.View
{
    public sealed partial class HostView : Page
    {
        public HostView()
        {
            this.InitializeComponent();
            this.ViewModel = new HostViewModel();
        }
    
        public HostViewModel ViewModel { get; set; }
    }
}
```</ph>

That done, we can now take a closer look at the markup that declares the binding object.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The example below uses the same <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> binding target we used in the "Binding target" section earlier, and shows it being bound to the <bpt id="p2">**</bpt>HostViewModel.NextButtonText<ept id="p2">**</ept> property.</source>
          <target state="new">The example below uses the same <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> binding target we used in the "Binding target" section earlier, and shows it being bound to the <bpt id="p2">**</bpt>HostViewModel.NextButtonText<ept id="p2">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">``` xml
</ph></source>
          <target state="new"><ph id="ph1">``` xml
</ph></target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>If your data loads asynchronously<ept id="p1">**</ept>

Code to support <bpt id="p2">**</bpt>{x:Bind}<ept id="p2">**</ept> is generated at compile-time in the partial classes for your pages.</source>
          <target state="new"><bpt id="p1">**</bpt>If your data loads asynchronously<ept id="p1">**</ept>

Code to support <bpt id="p2">**</bpt>{x:Bind}<ept id="p2">**</ept> is generated at compile-time in the partial classes for your pages.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>These files can be found in your <ph id="ph1">`obj`</ph> folder, with names like (for C#) `</source>
          <target state="new">These files can be found in your <ph id="ph1">`obj`</ph> folder, with names like (for C#) `</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>.g.cs<ph id="ph1">`. The generated code includes a handler for your page's [**Loading**](https://msdn.microsoft.com/library/windows/apps/BR208706-loading) event, and that handler calls the **Initialize** method on a generated class that represent's your page's bindings. **Initialize** in turn calls **Update** to begin moving data between the binding source and the target. **Loading** is raised just before the first measure pass of the page or user control. So if your data is loaded asynchronously it may not be ready by the time **Initialize** is called. So, after you've loaded data, you can force one-time bindings to be initialized by calling `</ph>this-&gt;Bindings-&gt;Update();`.</source>
          <target state="new">.g.cs<ph id="ph1">`. The generated code includes a handler for your page's [**Loading**](https://msdn.microsoft.com/library/windows/apps/BR208706-loading) event, and that handler calls the **Initialize** method on a generated class that represent's your page's bindings. **Initialize** in turn calls **Update** to begin moving data between the binding source and the target. **Loading** is raised just before the first measure pass of the page or user control. So if your data is loaded asynchronously it may not be ready by the time **Initialize** is called. So, after you've loaded data, you can force one-time bindings to be initialized by calling `</ph>this-&gt;Bindings-&gt;Update();`.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If you only need one-time bindings for asynchronously-loaded data then it’s much cheaper to initialize them this way than it is to have one-way bindings and to listen for changes.</source>
          <target state="new">If you only need one-time bindings for asynchronously-loaded data then it’s much cheaper to initialize them this way than it is to have one-way bindings and to listen for changes.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>.</source>
          <target state="new">If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to <bpt id="p1">**</bpt>Update<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Limitations<ept id="p1">**</ept><bpt id="p2">

**</bpt>{x:Bind}<ept id="p2">**</ept> is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names ("if it walks, swims, and quacks like a duck then it's a duck").</source>
          <target state="new"><bpt id="p1">**</bpt>Limitations<ept id="p1">**</ept><bpt id="p2">

**</bpt>{x:Bind}<ept id="p2">**</ept> is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names ("if it walks, swims, and quacks like a duck then it's a duck").</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>With duck typing, a binding to the Age property would be equally satisfied with a Person or a Wine object.</source>
          <target state="new">With duck typing, a binding to the Age property would be equally satisfied with a Person or a Wine object.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For these scenarios, use <bpt id="p1">**</bpt>{Binding}<ept id="p1">**</ept>.</source>
          <target state="new">For these scenarios, use <bpt id="p1">**</bpt>{Binding}<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Binding object declared using {Binding}
<bpt id="p1">---------------------------------------

[</bpt><ept id="p1">{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> assumes, by default, that you're binding to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DataContext<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> of your markup page.</source>
          <target state="new">Binding object declared using {Binding}
<bpt id="p1">---------------------------------------

[</bpt><ept id="p1">{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> assumes, by default, that you're binding to the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>DataContext<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept> of your markup page.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>So we'll set the <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> of our page to be an instance of our binding source class (of type <bpt id="p2">**</bpt>HostViewModel<ept id="p2">**</ept> in this case).</source>
          <target state="new">So we'll set the <bpt id="p1">**</bpt>DataContext<ept id="p1">**</ept> of our page to be an instance of our binding source class (of type <bpt id="p2">**</bpt>HostViewModel<ept id="p2">**</ept> in this case).</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The example below shows the markup that declares the binding object.</source>
          <target state="new">The example below shows the markup that declares the binding object.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>We use the same <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> binding target we used in the "Binding target" section earlier, and we bind to the <bpt id="p2">**</bpt>HostViewModel.NextButtonText<ept id="p2">**</ept> property.</source>
          <target state="new">We use the same <bpt id="p1">**</bpt>Button.Content<ept id="p1">**</ept> binding target we used in the "Binding target" section earlier, and we bind to the <bpt id="p2">**</bpt>HostViewModel.NextButtonText<ept id="p2">**</ept> property.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><ph id="ph1">``` xml
</ph></source>
          <target state="new"><ph id="ph1">``` xml
</ph></target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
```

**Note**  By default, changes to [**TextBox.Text**](https://msdn.microsoft.com/library/windows/apps/BR209683-text) are sent to a two-way bound source when the [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) loses focus. To cause changes to be sent after every user keystroke, set **UpdateSourceTrigger** to **PropertyChanged** on the binding in markup. You can also completely take control of when changes are sent to the source by setting **UpdateSourceTrigger** to **Explicit**. You then handle events on the text box (typically [**TextBox.TextChanged**](https://msdn.microsoft.com/library/windows/apps/BR209683-textchanged)), call [**GetBindingExpression**](https://msdn.microsoft.com/library/windows/apps/BR208706-getbindingexpression) on the target to get a [**BindingExpression**](https://msdn.microsoft.com/library/windows/apps/BR209820expression) object, and finally call [**BindingExpression.UpdateSource**](https://msdn.microsoft.com/library/windows/apps/BR209820expression-updatesource) to programmatically update the data source.

The [**Path**](https://msdn.microsoft.com/library/windows/apps/BR209820-path) property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers. For more info, see [Property-path syntax](https://msdn.microsoft.com/library/windows/apps/Mt185586). Binding to string indexers gives you the effect of binding to dynamic properties without having to implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878). The [**ElementName**](https://msdn.microsoft.com/library/windows/apps/BR209820-elementname) property is useful for element-to-element binding. The [**RelativeSource**](https://msdn.microsoft.com/library/windows/apps/BR209820-relativesource) property has several uses, one of which is as a more powerful alternative to template binding inside a [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/BR209391). For other settings, see [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782) and the [**Binding**](https://msdn.microsoft.com/library/windows/apps/BR209820) class.

What if the source and the target are not the same type?
--------------------------------------------------------

If you want to control the visibility of a UI element based on the value of a boolean property, or if you want to render a UI element with a color that's a function of a numeric value's range or trend, or if you want to display a date and/or time value in a UI element property that expects a string, then you'll need to convert values from one type to another. There will be cases where the right solution is to expose another property of the right type from your binding source class, and keep the conversion logic encapsulated and testable there. But that isn't flexible nor scalable when you have large numbers, or large combinations, of source and target properties. In that case you'll want to use something known as a value converter. This section describes how to implement and consume a value converter.

Here's a value converter, suitable for a one-time or a one-way binding, that converts a [**DateTime**](T:System.DateTime) value to a string value containing the month. The class implements [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/BR209903).

``` csharp
public class DateToStringConverter : IValueConverter
{
    // Define the Convert method to convert a DateTime value to 
    // a month string.
    public object Convert(object value, Type targetType, 
        object parameter, string language)
    {
        // value is the data from the source object.
        DateTime thisdate = (DateTime)value;
        int monthnum = thisdate.Month;
        string month;
        switch (monthnum)
        {
            case 1:
                month = "January";
                break;
            case 2:
                month = "February";
                break;
            default:
                month = "Month not found";
                break;
        }
        // Return the value to pass to the target.
        return month;
    }

    // ConvertBack is not implemented for a OneWay binding.
    public object ConvertBack(object value, Type targetType, 
        object parameter, string language)
    {
        throw new NotImplementedException();
    }
}
```

``` vbnet
Public Class DateToStringConverter
    Implements IValueConverter

    ' Define the Convert method to change a DateTime object to
    ' a month string.
    Public Function Convert(ByVal value As Object, -
        ByVal targetType As Type, ByVal parameter As Object, -
        ByVal language As String) As Object -
        Implements IValueConverter.Convert

        ' value is the data from the source object.
        Dim thisdate As DateTime = CType(value, DateTime)
        Dim monthnum As Integer = thisdate.Month
        Dim month As String
        Select Case (monthnum)
            Case 1
                month = "January"
            Case 2
                month = "February"
            Case Else
                month = "Month not found"
        End Select
        ' Return the value to pass to the target.
        Return month

    End Function

    ' ConvertBack is not implemented for a OneWay binding.
    Public Function ConvertBack(ByVal value As Object, -
        ByVal targetType As Type, ByVal parameter As Object, -
        ByVal language As String) As Object -
        Implements IValueConverter.ConvertBack

        Throw New NotImplementedException

    End Function
End Class
```</ph>

And here's how you consume that value converter in your binding object markup.</source>
          <target state="new"><ph id="ph1">
```

**Note**  By default, changes to [**TextBox.Text**](https://msdn.microsoft.com/library/windows/apps/BR209683-text) are sent to a two-way bound source when the [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) loses focus. To cause changes to be sent after every user keystroke, set **UpdateSourceTrigger** to **PropertyChanged** on the binding in markup. You can also completely take control of when changes are sent to the source by setting **UpdateSourceTrigger** to **Explicit**. You then handle events on the text box (typically [**TextBox.TextChanged**](https://msdn.microsoft.com/library/windows/apps/BR209683-textchanged)), call [**GetBindingExpression**](https://msdn.microsoft.com/library/windows/apps/BR208706-getbindingexpression) on the target to get a [**BindingExpression**](https://msdn.microsoft.com/library/windows/apps/BR209820expression) object, and finally call [**BindingExpression.UpdateSource**](https://msdn.microsoft.com/library/windows/apps/BR209820expression-updatesource) to programmatically update the data source.

The [**Path**](https://msdn.microsoft.com/library/windows/apps/BR209820-path) property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers. For more info, see [Property-path syntax](https://msdn.microsoft.com/library/windows/apps/Mt185586). Binding to string indexers gives you the effect of binding to dynamic properties without having to implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878). The [**ElementName**](https://msdn.microsoft.com/library/windows/apps/BR209820-elementname) property is useful for element-to-element binding. The [**RelativeSource**](https://msdn.microsoft.com/library/windows/apps/BR209820-relativesource) property has several uses, one of which is as a more powerful alternative to template binding inside a [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/BR209391). For other settings, see [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782) and the [**Binding**](https://msdn.microsoft.com/library/windows/apps/BR209820) class.

What if the source and the target are not the same type?
--------------------------------------------------------

If you want to control the visibility of a UI element based on the value of a boolean property, or if you want to render a UI element with a color that's a function of a numeric value's range or trend, or if you want to display a date and/or time value in a UI element property that expects a string, then you'll need to convert values from one type to another. There will be cases where the right solution is to expose another property of the right type from your binding source class, and keep the conversion logic encapsulated and testable there. But that isn't flexible nor scalable when you have large numbers, or large combinations, of source and target properties. In that case you'll want to use something known as a value converter. This section describes how to implement and consume a value converter.

Here's a value converter, suitable for a one-time or a one-way binding, that converts a [**DateTime**](T:System.DateTime) value to a string value containing the month. The class implements [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/BR209903).

``` csharp
public class DateToStringConverter : IValueConverter
{
    // Define the Convert method to convert a DateTime value to 
    // a month string.
    public object Convert(object value, Type targetType, 
        object parameter, string language)
    {
        // value is the data from the source object.
        DateTime thisdate = (DateTime)value;
        int monthnum = thisdate.Month;
        string month;
        switch (monthnum)
        {
            case 1:
                month = "January";
                break;
            case 2:
                month = "February";
                break;
            default:
                month = "Month not found";
                break;
        }
        // Return the value to pass to the target.
        return month;
    }

    // ConvertBack is not implemented for a OneWay binding.
    public object ConvertBack(object value, Type targetType, 
        object parameter, string language)
    {
        throw new NotImplementedException();
    }
}
```

``` vbnet
Public Class DateToStringConverter
    Implements IValueConverter

    ' Define the Convert method to change a DateTime object to
    ' a month string.
    Public Function Convert(ByVal value As Object, -
        ByVal targetType As Type, ByVal parameter As Object, -
        ByVal language As String) As Object -
        Implements IValueConverter.Convert

        ' value is the data from the source object.
        Dim thisdate As DateTime = CType(value, DateTime)
        Dim monthnum As Integer = thisdate.Month
        Dim month As String
        Select Case (monthnum)
            Case 1
                month = "January"
            Case 2
                month = "February"
            Case Else
                month = "Month not found"
        End Select
        ' Return the value to pass to the target.
        Return month

    End Function

    ' ConvertBack is not implemented for a OneWay binding.
    Public Function ConvertBack(ByVal value As Object, -
        ByVal targetType As Type, ByVal parameter As Object, -
        ByVal language As String) As Object -
        Implements IValueConverter.ConvertBack

        Throw New NotImplementedException

    End Function
End Class
```</ph>

And here's how you consume that value converter in your binding object markup.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">``` xml
</ph></source>
          <target state="new"><ph id="ph1">``` xml
</ph></target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
```

TemplatesResourceDictionary.xaml.cs

``` csharp
using Windows.UI.Xaml.Data;
 
namespace ExampleNamespace
{
    public partial class TemplatesResourceDictionary
    {
        public TemplatesResourceDictionary()
        {
            InitializeComponent();
        }
    }
}
```</ph>

MainPage.xaml

<ph id="ph2">``` xml
</ph></source>
          <target state="new"><ph id="ph1">
```

TemplatesResourceDictionary.xaml.cs

``` csharp
using Windows.UI.Xaml.Data;
 
namespace ExampleNamespace
{
    public partial class TemplatesResourceDictionary
    {
        public TemplatesResourceDictionary()
        {
            InitializeComponent();
        }
    }
}
```</ph>

MainPage.xaml

<ph id="ph2">``` xml
</ph></target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
```

Event binding and ICommand
--------------------------

[{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) supports a feature called event binding. With this feature, you can specify the handler for an event using a binding, which is an additional option on top of handling events with a method on the code-behind file. Let's say you have a **RootFrame** property on your **MainPage** class.

``` csharp
    public sealed partial class MainPage : Page
    {
        ....    
        public Frame RootFrame { get { return Window.Current.Content as Frame; } }
    }
```</ph>

You can then bind a button's <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> event to a method on the <bpt id="p2">**</bpt>Frame<ept id="p2">**</ept> object returned by the <bpt id="p3">**</bpt>RootFrame<ept id="p3">**</ept> property like this.</source>
          <target state="new"><ph id="ph1">
```

Event binding and ICommand
--------------------------

[{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) supports a feature called event binding. With this feature, you can specify the handler for an event using a binding, which is an additional option on top of handling events with a method on the code-behind file. Let's say you have a **RootFrame** property on your **MainPage** class.

``` csharp
    public sealed partial class MainPage : Page
    {
        ....    
        public Frame RootFrame { get { return Window.Current.Content as Frame; } }
    }
```</ph>

You can then bind a button's <bpt id="p1">**</bpt>Click<ept id="p1">**</ept> event to a method on the <bpt id="p2">**</bpt>Frame<ept id="p2">**</ept> object returned by the <bpt id="p3">**</bpt>RootFrame<ept id="p3">**</ept> property like this.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Note that we also bind the button's <bpt id="p1">**</bpt>IsEnabled<ept id="p1">**</ept> property to another member of the same <bpt id="p2">**</bpt>Frame<ept id="p2">**</ept>.</source>
          <target state="new">Note that we also bind the button's <bpt id="p1">**</bpt>IsEnabled<ept id="p1">**</ept> property to another member of the same <bpt id="p2">**</bpt>Frame<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">``` xml
    </ph></source>
          <target state="new"><ph id="ph1">``` xml
    </ph></target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
```

Overloaded methods cannot be used to handle an event with this technique. Also, if the method that handles the event has parameters then they must all be assignable from the types of all of the event's parameters, respectively. In this case, [**Frame.GoForward**](https://msdn.microsoft.com/library/windows/apps/BR242693) is not overloaded and it has no parameters (but it would still be valid even if it took two **object** parameters). [**Frame.GoBack**](https://msdn.microsoft.com/library/windows/apps/Dn996568) is overloaded, though, so we can't use that method with this technique.

The event binding technique is similar to implementing and consuming commands (a command is a property that returns an object that implements the [**ICommand**](T:System.Windows.Input.ICommand) interface). Both [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) and [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) work with commands. So that you don't have to implement the command pattern multiple times, you can use the **DelegateCommand** helper class that you'll find in the [QuizGame](https://github.com/Microsoft/Windows-appsample-quizgame) sample (in the "Common" folder).

## Binding to a collection of folders or files

You can use the APIs in the [**Windows.Storage**](https://msdn.microsoft.com/library/windows/apps/BR227346) namespace to retrieve folder and file data. However, the various **GetFilesAsync**, **GetFoldersAsync**, and **GetItemsAsync** methods do not return values that are suitable for binding to list controls. Instead, you must bind to the return values of the [**GetVirtualizedFilesVector**](https://msdn.microsoft.com/library/windows/apps/Hh701422), [**GetVirtualizedFoldersVector**](https://msdn.microsoft.com/library/windows/apps/Hh701428), and [**GetVirtualizedItemsVector**](https://msdn.microsoft.com/library/windows/apps/Hh701430) methods of the [**FileInformationFactory**](https://msdn.microsoft.com/library/windows/apps/BR207501) class. The following code example from the [StorageDataSource and GetVirtualizedFilesVector sample](http://go.microsoft.com/fwlink/p/?linkid=228621) shows the typical usage pattern. Remember to declare the **picturesLibrary** capability in your app package manifest, and confirm that there are pictures in your Pictures library folder.

``` csharp
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            var library = Windows.Storage.KnownFolders.PicturesLibrary;
            var queryOptions = new Windows.Storage.Search.QueryOptions();
            queryOptions.FolderDepth = Windows.Storage.Search.FolderDepth.Deep;
            queryOptions.IndexerOption = Windows.Storage.Search.IndexerOption.UseIndexerWhenAvailable;

            var fileQuery = library.CreateFileQueryWithOptions(queryOptions);

            var fif = new Windows.Storage.BulkAccess.FileInformationFactory(
                fileQuery,
                Windows.Storage.FileProperties.ThumbnailMode.PicturesView,
                190,
                Windows.Storage.FileProperties.ThumbnailOptions.UseCurrentScale,
                false
                );

            var dataSource = fif.GetVirtualizedFilesVector();
            this.PicturesListView.ItemsSource = dataSource;
        }
```</ph>

You will typically use this approach to create a read-only view of file and folder info.</source>
          <target state="new"><ph id="ph1">
```

Overloaded methods cannot be used to handle an event with this technique. Also, if the method that handles the event has parameters then they must all be assignable from the types of all of the event's parameters, respectively. In this case, [**Frame.GoForward**](https://msdn.microsoft.com/library/windows/apps/BR242693) is not overloaded and it has no parameters (but it would still be valid even if it took two **object** parameters). [**Frame.GoBack**](https://msdn.microsoft.com/library/windows/apps/Dn996568) is overloaded, though, so we can't use that method with this technique.

The event binding technique is similar to implementing and consuming commands (a command is a property that returns an object that implements the [**ICommand**](T:System.Windows.Input.ICommand) interface). Both [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) and [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) work with commands. So that you don't have to implement the command pattern multiple times, you can use the **DelegateCommand** helper class that you'll find in the [QuizGame](https://github.com/Microsoft/Windows-appsample-quizgame) sample (in the "Common" folder).

## Binding to a collection of folders or files

You can use the APIs in the [**Windows.Storage**](https://msdn.microsoft.com/library/windows/apps/BR227346) namespace to retrieve folder and file data. However, the various **GetFilesAsync**, **GetFoldersAsync**, and **GetItemsAsync** methods do not return values that are suitable for binding to list controls. Instead, you must bind to the return values of the [**GetVirtualizedFilesVector**](https://msdn.microsoft.com/library/windows/apps/Hh701422), [**GetVirtualizedFoldersVector**](https://msdn.microsoft.com/library/windows/apps/Hh701428), and [**GetVirtualizedItemsVector**](https://msdn.microsoft.com/library/windows/apps/Hh701430) methods of the [**FileInformationFactory**](https://msdn.microsoft.com/library/windows/apps/BR207501) class. The following code example from the [StorageDataSource and GetVirtualizedFilesVector sample](http://go.microsoft.com/fwlink/p/?linkid=228621) shows the typical usage pattern. Remember to declare the **picturesLibrary** capability in your app package manifest, and confirm that there are pictures in your Pictures library folder.

``` csharp
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            var library = Windows.Storage.KnownFolders.PicturesLibrary;
            var queryOptions = new Windows.Storage.Search.QueryOptions();
            queryOptions.FolderDepth = Windows.Storage.Search.FolderDepth.Deep;
            queryOptions.IndexerOption = Windows.Storage.Search.IndexerOption.UseIndexerWhenAvailable;

            var fileQuery = library.CreateFileQueryWithOptions(queryOptions);

            var fif = new Windows.Storage.BulkAccess.FileInformationFactory(
                fileQuery,
                Windows.Storage.FileProperties.ThumbnailMode.PicturesView,
                190,
                Windows.Storage.FileProperties.ThumbnailOptions.UseCurrentScale,
                false
                );

            var dataSource = fif.GetVirtualizedFilesVector();
            this.PicturesListView.ItemsSource = dataSource;
        }
```</ph>

You will typically use this approach to create a read-only view of file and folder info.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>You can create two-way bindings to the file and folder properties, for example to let users rate a song in a music view.</source>
          <target state="new">You can create two-way bindings to the file and folder properties, for example to let users rate a song in a music view.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>However, any changes are not persisted until you call the appropriate <bpt id="p1">**</bpt>SavePropertiesAsync<ept id="p1">**</ept> method (for example, <bpt id="p2">[</bpt><bpt id="p3">**</bpt>MusicProperties.SavePropertiesAsync<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR207760)</ept>).</source>
          <target state="new">However, any changes are not persisted until you call the appropriate <bpt id="p1">**</bpt>SavePropertiesAsync<ept id="p1">**</ept> method (for example, <bpt id="p2">[</bpt><bpt id="p3">**</bpt>MusicProperties.SavePropertiesAsync<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR207760)</ept>).</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>You should commit changes when the item loses focus because this triggers a selection reset.</source>
          <target state="new">You should commit changes when the item loses focus because this triggers a selection reset.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Note that two-way binding using this technique works only with indexed locations, such as Music.</source>
          <target state="new">Note that two-way binding using this technique works only with indexed locations, such as Music.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You can determine whether a location is indexed by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FolderInformation.GetIndexedStateAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR207627)</ept> method.</source>
          <target state="new">You can determine whether a location is indexed by calling the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FolderInformation.GetIndexedStateAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR207627)</ept> method.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Note also that a virtualized vector can return <bpt id="p1">**</bpt>null<ept id="p1">**</ept> for some items before it populates their value.</source>
          <target state="new">Note also that a virtualized vector can return <bpt id="p1">**</bpt>null<ept id="p1">**</ept> for some items before it populates their value.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example, you should check for <bpt id="p1">**</bpt>null<ept id="p1">**</ept> before you use the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SelectedItem<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209770)</ept> value of a list control bound to a virtualized vector, or use <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SelectedIndex<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209768)</ept> instead.</source>
          <target state="new">For example, you should check for <bpt id="p1">**</bpt>null<ept id="p1">**</ept> before you use the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>SelectedItem<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR209770)</ept> value of a list control bound to a virtualized vector, or use <bpt id="p4">[</bpt><bpt id="p5">**</bpt>SelectedIndex<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR209768)</ept> instead.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Binding to data grouped by a key
--------------------------------

If you take a flat collection of items—books, for example, represented by a <bpt id="p1">**</bpt>BookSku<ept id="p1">**</ept> class—and you group the items by using a common property as a key—the <bpt id="p2">**</bpt>BookSku.AuthorName<ept id="p2">**</ept> property, for example—then the result is called grouped data.</source>
          <target state="new">Binding to data grouped by a key
--------------------------------

If you take a flat collection of items—books, for example, represented by a <bpt id="p1">**</bpt>BookSku<ept id="p1">**</ept> class—and you group the items by using a common property as a key—the <bpt id="p2">**</bpt>BookSku.AuthorName<ept id="p2">**</ept> property, for example—then the result is called grouped data.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>When you group data, it is no longer a flat collection.</source>
          <target state="new">When you group data, it is no longer a flat collection.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Grouped data is a collection of group objects, where each group object has a) a key and b) a collection of items whose property matches that key.</source>
          <target state="new">Grouped data is a collection of group objects, where each group object has a) a key and b) a collection of items whose property matches that key.</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the <bpt id="p1">**</bpt>BookSku<ept id="p1">**</ept>s whose <bpt id="p2">**</bpt>AuthorName<ept id="p2">**</ept> property matches the group's key.</source>
          <target state="new">To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the <bpt id="p1">**</bpt>BookSku<ept id="p1">**</ept>s whose <bpt id="p2">**</bpt>AuthorName<ept id="p2">**</ept> property matches the group's key.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>In general, to display a collection, you bind the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242828)</ept> of an items control (such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ListView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>GridView<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept>) directly to a property that returns a collection.</source>
          <target state="new">In general, to display a collection, you bind the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242828)</ept> of an items control (such as <bpt id="p3">[</bpt><bpt id="p4">**</bpt>ListView<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR242878)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>GridView<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept>) directly to a property that returns a collection.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If that's a flat collection of items then you don't need to do anything special.</source>
          <target state="new">If that's a flat collection of items then you don't need to do anything special.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> which sits between the items control and the binding source.</source>
          <target state="new">But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> which sits between the items control and the binding source.</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You bind the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> to the property that returns grouped data, and you bind the items control to the <bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept>.</source>
          <target state="new">You bind the <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> to the property that returns grouped data, and you bind the items control to the <bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>An extra value-add of a <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same <bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept>.</source>
          <target state="new">An extra value-add of a <bpt id="p1">**</bpt>CollectionViewSource<ept id="p1">**</ept> is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same <bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You can also access the current item programmatically through the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICollectionView.CurrentItem<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209857)</ept> property of the object returned by the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CollectionViewSource.View<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209833-view)</ept> property.</source>
          <target state="new">You can also access the current item programmatically through the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ICollectionView.CurrentItem<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209857)</ept> property of the object returned by the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CollectionViewSource.View<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209833-view)</ept> property.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>To activate the grouping facility of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept>, set <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IsSourceGrouped<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209833-issourcegrouped)</ept> to <bpt id="p5">**</bpt>true<ept id="p5">**</ept>.</source>
          <target state="new">To activate the grouping facility of a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept>, set <bpt id="p3">[</bpt><bpt id="p4">**</bpt>IsSourceGrouped<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR209833-issourcegrouped)</ept> to <bpt id="p5">**</bpt>true<ept id="p5">**</ept>.</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Whether you also need to set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsPath<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833-itemspath)</ept> property depends on exactly how you author your group objects.</source>
          <target state="new">Whether you also need to set the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ItemsPath<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833-itemspath)</ept> property depends on exactly how you author your group objects.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>There are two ways to author a group object: the "is-a-group" pattern, and the "has-a-group" pattern.</source>
          <target state="new">There are two ways to author a group object: the "is-a-group" pattern, and the "has-a-group" pattern.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>In the "is-a-group" pattern, the group object derives from a collection type (for example, <bpt id="p1">**</bpt>List&amp;lt;T&amp;gt;<ept id="p1">**</ept>), so the group object actually is itself the group of items.</source>
          <target state="new">In the "is-a-group" pattern, the group object derives from a collection type (for example, <bpt id="p1">**</bpt>List&amp;lt;T&amp;gt;<ept id="p1">**</ept>), so the group object actually is itself the group of items.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>With this pattern you do not need to set <bpt id="p1">**</bpt>ItemsPath<ept id="p1">**</ept>.</source>
          <target state="new">With this pattern you do not need to set <bpt id="p1">**</bpt>ItemsPath<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>In the "has-a-group" pattern, the group object has one or more properties of a collection type (such as <bpt id="p1">**</bpt>List&amp;lt;T&amp;gt;<ept id="p1">**</ept>), so the group "has a" group of items in the form of a property (or several groups of items in the form of several properties).</source>
          <target state="new">In the "has-a-group" pattern, the group object has one or more properties of a collection type (such as <bpt id="p1">**</bpt>List&amp;lt;T&amp;gt;<ept id="p1">**</ept>), so the group "has a" group of items in the form of a property (or several groups of items in the form of several properties).</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>With this pattern you need to set <bpt id="p1">**</bpt>ItemsPath<ept id="p1">**</ept> to the name of the property that contains the group of items.</source>
          <target state="new">With this pattern you need to set <bpt id="p1">**</bpt>ItemsPath<ept id="p1">**</ept> to the name of the property that contains the group of items.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The example below illustrates the "has-a-group" pattern.</source>
          <target state="new">The example below illustrates the "has-a-group" pattern.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The page class has a property named <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ViewModel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept>, which returns an instance of our view model.</source>
          <target state="new">The page class has a property named <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ViewModel<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR208713)</ept>, which returns an instance of our view model.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> binds to the <bpt id="p3">**</bpt>Authors<ept id="p3">**</ept> property of the view model (<bpt id="p4">**</bpt>Authors<ept id="p4">**</ept> is the collection of group objects) and also specifies that it's the <bpt id="p5">**</bpt>Author.BookSkus<ept id="p5">**</ept> property that contains the grouped items.</source>
          <target state="new">The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CollectionViewSource<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209833)</ept> binds to the <bpt id="p3">**</bpt>Authors<ept id="p3">**</ept> property of the view model (<bpt id="p4">**</bpt>Authors<ept id="p4">**</ept> is the collection of group objects) and also specifies that it's the <bpt id="p5">**</bpt>Author.BookSkus<ept id="p5">**</ept> property that contains the grouped items.</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Finally, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GridView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> is bound to the <bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept>, and has its group style defined so that it can render the items in groups.</source>
          <target state="new">Finally, the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>GridView<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242705)</ept> is bound to the <bpt id="p3">**</bpt>CollectionViewSource<ept id="p3">**</ept>, and has its group style defined so that it can render the items in groups.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><ph id="ph1">``` csharp
    </ph></source>
          <target state="new"><ph id="ph1">``` csharp
    </ph></target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The second way is to use a <bpt id="p1">[</bpt><ept id="p1">LINQ](http://msdn.microsoft.com/library/bb397926.aspx)</ept> expression to dynamically create group objects (and a group class) from like property values of the <bpt id="p2">**</bpt>BookSku<ept id="p2">**</ept> items.</source>
          <target state="new">The second way is to use a <bpt id="p1">[</bpt><ept id="p1">LINQ](http://msdn.microsoft.com/library/bb397926.aspx)</ept> expression to dynamically create group objects (and a group class) from like property values of the <bpt id="p2">**</bpt>BookSku<ept id="p2">**</ept> items.</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>This approach—maintaining only a flat list of items and grouping them together on the fly—is typical of an app that accesses data from a cloud service.</source>
          <target state="new">This approach—maintaining only a flat list of items and grouping them together on the fly—is typical of an app that accesses data from a cloud service.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>You get the flexibility to group books by author or by genre (for example) without needing special group classes such as <bpt id="p1">**</bpt>Author<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Genre<ept id="p2">**</ept>.</source>
          <target state="new">You get the flexibility to group books by author or by genre (for example) without needing special group classes such as <bpt id="p1">**</bpt>Author<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Genre<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The example below illustrates the "is-a-group" pattern using <bpt id="p1">[</bpt><ept id="p1">LINQ](http://msdn.microsoft.com/library/bb397926.aspx)</ept>.</source>
          <target state="new">The example below illustrates the "is-a-group" pattern using <bpt id="p1">[</bpt><ept id="p1">LINQ](http://msdn.microsoft.com/library/bb397926.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>This time we group books by genre, displayed with the genre name in the group headers.</source>
          <target state="new">This time we group books by genre, displayed with the genre name in the group headers.</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This is indicated by the "Key" property path in reference to the group <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Key<ept id="p2">**</ept><ept id="p1">](P:System.Linq.IGrouping%602.Key)</ept> value.</source>
          <target state="new">This is indicated by the "Key" property path in reference to the group <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Key<ept id="p2">**</ept><ept id="p1">](P:System.Linq.IGrouping%602.Key)</ept> value.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">``` csharp
    using System.Linq;

    ...

    private IOrderedEnumerable</ph></source>
          <target state="new"><ph id="ph1">``` csharp
    using System.Linq;

    ...

    private IOrderedEnumerable</ph></target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt;</ph> genres;

    <ph id="ph2">public IOrderedEnumerable</ph></source>
          <target state="new"><ph id="ph1">&gt;</ph> genres;

    <ph id="ph2">public IOrderedEnumerable</ph></target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&gt;</ph> Genres</source>
          <target state="new"><ph id="ph1">&gt;</ph> Genres</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>get</source>
          <target state="new">get</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>if (this.genres == null)</source>
          <target state="new">if (this.genres == null)</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>this.genres = from book in this.bookSkus</source>
          <target state="new">this.genres = from book in this.bookSkus</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>group book by book.genre into grp</source>
          <target state="new">group book by book.genre into grp</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>orderby grp.Key select grp;</source>
          <target state="new">orderby grp.Key select grp;</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>return this.genres;</source>
          <target state="new">return this.genres;</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>}
<ph id="ph1">```

Remember that when using [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) with data templates we need to indicate the type being bound to by setting an **x:DataType** value. If the type is generic then we can't express that in markup so we need to use [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) instead in the group style header template.

``` xml
    </ph></source>
          <target state="new">}
<ph id="ph1">```

Remember that when using [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) with data templates we need to indicate the type being bound to by setting an **x:DataType** value. If the type is generic then we can't express that in markup so we need to use [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) instead in the group style header template.

``` xml
    </ph></target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>.g.cs`).</source>
          <target state="new">.g.cs`).</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If you have a problem with a binding then turn on <bpt id="p1">**</bpt>Break On Unhandled Exceptions<ept id="p1">**</ept> in the Microsoft Visual Studio debugger.</source>
          <target state="new">If you have a problem with a binding then turn on <bpt id="p1">**</bpt>Break On Unhandled Exceptions<ept id="p1">**</ept> in the Microsoft Visual Studio debugger.</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The debugger will break execution at that point, and you can then debug what has gone wrong.</source>
          <target state="new">The debugger will break execution at that point, and you can then debug what has gone wrong.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the <bpt id="p1">**</bpt>Call Stack<ept id="p1">**</ept> window to help determine the sequence of calls that led up to the problem.</source>
          <target state="new">The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the <bpt id="p1">**</bpt>Call Stack<ept id="p1">**</ept> window to help determine the sequence of calls that led up to the problem.</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ept id="p1">{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> does not have type information for the binding source.</source>
          <target state="new"><bpt id="p1">[</bpt><ept id="p1">{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept> does not have type information for the binding source.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>But when you run your app with the debugger attached, any binding errors appear in the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window in Visual Studio.</source>
          <target state="new">But when you run your app with the debugger attached, any binding errors appear in the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window in Visual Studio.</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Creating bindings in code
<bpt id="p1">-------------------------

**</bpt>Note<ept id="p1">**</ept>  This section only applies to <bpt id="p2">[</bpt><ept id="p2">{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>, because you can't create <bpt id="p3">[</bpt><ept id="p3">{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> bindings in code.</source>
          <target state="new">Creating bindings in code
<bpt id="p1">-------------------------

**</bpt>Note<ept id="p1">**</ept>  This section only applies to <bpt id="p2">[</bpt><ept id="p2">{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782)</ept>, because you can't create <bpt id="p3">[</bpt><ept id="p3">{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783)</ept> bindings in code.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>However, some of the same benefits of {x:Bind} can be achieved with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.RegisterPropertyChangedCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242356-registerpropertychangedcallback)</ept>, which enables you to register for change notifications on any dependency property.</source>
          <target state="new">However, some of the same benefits of {x:Bind} can be achieved with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>DependencyProperty.RegisterPropertyChangedCallback<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR242356-registerpropertychangedcallback)</ept>, which enables you to register for change notifications on any dependency property.</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>You can also connect UI elements to data using procedural code instead of XAML.</source>
          <target state="new">You can also connect UI elements to data using procedural code instead of XAML.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>To do this, create a new <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> object, set the appropriate properties, then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.SetBinding<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706-setbinding)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>BindingOperations.SetBinding<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209820operations-setbinding)</ept>.</source>
          <target state="new">To do this, create a new <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Binding<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/BR209820)</ept> object, set the appropriate properties, then call <bpt id="p3">[</bpt><bpt id="p4">**</bpt>FrameworkElement.SetBinding<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/BR208706-setbinding)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>BindingOperations.SetBinding<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/BR209820operations-setbinding)</ept>.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Creating bindings programmatically is useful when you want to choose the binding property values at run-time or share a single binding among multiple controls.</source>
          <target state="new">Creating bindings programmatically is useful when you want to choose the binding property values at run-time or share a single binding among multiple controls.</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Note, however, that you cannot change the binding property values after you call <bpt id="p1">**</bpt>SetBinding<ept id="p1">**</ept>.</source>
          <target state="new">Note, however, that you cannot change the binding property values after you call <bpt id="p1">**</bpt>SetBinding<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The following example shows how to implement a binding in code.</source>
          <target state="new">The following example shows how to implement a binding in code.</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">``` xml
</ph></source>
          <target state="new"><ph id="ph1">``` xml
</ph></target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
```

```csharp
// Create an instance of the MyColors class 
// that implements INotifyPropertyChanged.
MyColors textcolor = new MyColors();

// Brush1 is set to be a SolidColorBrush with the value Red.
textcolor.Brush1 = new SolidColorBrush(Colors.Red);

// Set the DataContext of the TextBox MyTextBox.
MyTextBox.DataContext = textcolor;

// Create the binding and associate it with the text box.
Binding binding = new Binding() { Path = new PropertyPath("Brush1") };
MyTextBox.SetBinding(TextBox.ForegroundProperty, binding);
```

``` vbnet
' Create an instance of the MyColors class 
' that implements INotifyPropertyChanged. 
Dim textcolor As New MyColors()

' Brush1 is set to be a SolidColorBrush with the value Red. 
textcolor.Brush1 = New SolidColorBrush(Colors.Red)

' Set the DataContext of the TextBox MyTextBox. 
MyTextBox.DataContext = textcolor

' Create the binding and associate it with the text box.
Dim binding As New Binding() With {.Path = New PropertyPath("Brush1")}
MyTextBox.SetBinding(TextBox.ForegroundProperty, binding)
```</ph>

{x:Bind} and {Binding} feature comparison
------------------------------------------

| Feature | {x:Bind} | {Binding} | Notes |
|---------|----------|-----------|-------|
| Path is the default property <ph id="ph2">| `{x:Bind a.b.c}`</ph><ph id="ph3"> | `{Binding a.b.c}`</ph><ph id="ph4"> | | 
|</ph> Path property <ph id="ph5">| `{x:Bind Path=a.b.c}`</ph><ph id="ph6"> | `{Binding Path=a.b.c}`</ph><ph id="ph7"> |</ph> In x:Bind, Path is rooted at the Page by default, not the DataContext.</source>
          <target state="new"><ph id="ph1">
```

```csharp
// Create an instance of the MyColors class 
// that implements INotifyPropertyChanged.
MyColors textcolor = new MyColors();

// Brush1 is set to be a SolidColorBrush with the value Red.
textcolor.Brush1 = new SolidColorBrush(Colors.Red);

// Set the DataContext of the TextBox MyTextBox.
MyTextBox.DataContext = textcolor;

// Create the binding and associate it with the text box.
Binding binding = new Binding() { Path = new PropertyPath("Brush1") };
MyTextBox.SetBinding(TextBox.ForegroundProperty, binding);
```

``` vbnet
' Create an instance of the MyColors class 
' that implements INotifyPropertyChanged. 
Dim textcolor As New MyColors()

' Brush1 is set to be a SolidColorBrush with the value Red. 
textcolor.Brush1 = New SolidColorBrush(Colors.Red)

' Set the DataContext of the TextBox MyTextBox. 
MyTextBox.DataContext = textcolor

' Create the binding and associate it with the text box.
Dim binding As New Binding() With {.Path = New PropertyPath("Brush1")}
MyTextBox.SetBinding(TextBox.ForegroundProperty, binding)
```</ph>

{x:Bind} and {Binding} feature comparison
------------------------------------------

| Feature | {x:Bind} | {Binding} | Notes |
|---------|----------|-----------|-------|
| Path is the default property <ph id="ph2">| `{x:Bind a.b.c}`</ph><ph id="ph3"> | `{Binding a.b.c}`</ph><ph id="ph4"> | | 
|</ph> Path property <ph id="ph5">| `{x:Bind Path=a.b.c}`</ph><ph id="ph6"> | `{Binding Path=a.b.c}`</ph><ph id="ph7"> |</ph> In x:Bind, Path is rooted at the Page by default, not the DataContext.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>| 
| Indexer <ph id="ph1">| `{x:Bind Groups[2].Title}`</ph><ph id="ph2"> | `{Binding Groups[2].Title}`</ph><ph id="ph3"> |</ph> Binds to the specified item in the collection.</source>
          <target state="new">| 
| Indexer <ph id="ph1">| `{x:Bind Groups[2].Title}`</ph><ph id="ph2"> | `{Binding Groups[2].Title}`</ph><ph id="ph3"> |</ph> Binds to the specified item in the collection.</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Only integer-based indexes are supported.</source>
          <target state="new">Only integer-based indexes are supported.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>| 
| Attached properties <ph id="ph1">| `{x:Bind Button22.(Grid.Row)}`</ph><ph id="ph2"> | `{Binding Button22.(Grid.Row)}`</ph><ph id="ph3"> |</ph> Attached properties are specified using parentheses.</source>
          <target state="new">| 
| Attached properties <ph id="ph1">| `{x:Bind Button22.(Grid.Row)}`</ph><ph id="ph2"> | `{Binding Button22.(Grid.Row)}`</ph><ph id="ph3"> |</ph> Attached properties are specified using parentheses.</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</source>
          <target state="new">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>| 
| Casting <ph id="ph1">| `{x:Bind groups[0].(data:SampleDataGroup.Title)}`</ph><ph id="ph2"> |</ph> Not needed&lt; | Casts are specified using parentheses.</source>
          <target state="new">| 
| Casting <ph id="ph1">| `{x:Bind groups[0].(data:SampleDataGroup.Title)}`</ph><ph id="ph2"> |</ph> Not needed&lt; | Casts are specified using parentheses.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</source>
          <target state="new">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>| Converter | <ph id="ph1">`{x:Bind IsShown, Converter={StaticResource BoolToVisibility}}`</ph> | <ph id="ph2">`{Binding IsShown, Converter={StaticResource BoolToVisibility}}`</ph> | Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</source>
          <target state="new">| Converter | <ph id="ph1">`{x:Bind IsShown, Converter={StaticResource BoolToVisibility}}`</ph> | <ph id="ph2">`{Binding IsShown, Converter={StaticResource BoolToVisibility}}`</ph> | Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>| ConverterParameter, ConverterLanguage | <ph id="ph1">`{x:Bind IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}`</ph> | <ph id="ph2">`{Binding IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}`</ph> | Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</source>
          <target state="new">| ConverterParameter, ConverterLanguage | <ph id="ph1">`{x:Bind IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}`</ph> | <ph id="ph2">`{Binding IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}`</ph> | Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>| TargetNullValue | <ph id="ph1">`{x:Bind Name, TargetNullValue=0}`</ph> | <ph id="ph2">`{Binding Name, TargetNullValue=0}`</ph> | Used when the leaf of the binding expression is null.</source>
          <target state="new">| TargetNullValue | <ph id="ph1">`{x:Bind Name, TargetNullValue=0}`</ph> | <ph id="ph2">`{Binding Name, TargetNullValue=0}`</ph> | Used when the leaf of the binding expression is null.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Use single quotes for a string value.</source>
          <target state="new">Use single quotes for a string value.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>| FallbackValue | <ph id="ph1">`{x:Bind Name, FallbackValue='empty'}`</ph> | <ph id="ph2">`{Binding Name, FallbackValue='empty'}`</ph> | Used when any part of the path for the binding (except for the leaf) is null.</source>
          <target state="new">| FallbackValue | <ph id="ph1">`{x:Bind Name, FallbackValue='empty'}`</ph> | <ph id="ph2">`{Binding Name, FallbackValue='empty'}`</ph> | Used when any part of the path for the binding (except for the leaf) is null.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>| ElementName | <ph id="ph1">`{x:Bind slider1.Value}`</ph> | <ph id="ph2">`{Binding Value, ElementName=slider1}`</ph> | With {x:Bind} you're binding to a field; Path is rooted at the Page by default, so any named element can be accessed via its field.</source>
          <target state="new">| ElementName | <ph id="ph1">`{x:Bind slider1.Value}`</ph> | <ph id="ph2">`{Binding Value, ElementName=slider1}`</ph> | With {x:Bind} you're binding to a field; Path is rooted at the Page by default, so any named element can be accessed via its field.</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>| RelativeSource: Self | `</source>
          <target state="new">| RelativeSource: Self | `</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><ph id="ph1">` | With {x:Bind}, name the element and use its name in Path. | 
| RelativeSource: TemplatedParent | Not supported | `</ph>{Binding</source>
          <target state="new"><ph id="ph1">` | With {x:Bind}, name the element and use its name in Path. | 
| RelativeSource: TemplatedParent | Not supported | `</ph>{Binding</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>, RelativeSource={RelativeSource TemplatedParent}}` | Regular template binding can be used in control templates for most uses.</source>
          <target state="new">, RelativeSource={RelativeSource TemplatedParent}}` | Regular template binding can be used in control templates for most uses.</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>But use TemplatedParent where you need to use a converter, or a two-way binding.&lt; |</source>
          <target state="new">But use TemplatedParent where you need to use a converter, or a two-way binding.&lt; |</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>| Source | Not supported | `</source>
          <target state="new">| Source | Not supported | `</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><ph id="ph1">` | For {x:Bind} use a property or a static path instead. | 
| Mode | `</ph>{x:Bind Name, Mode=OneWay}<ph id="ph2">` | `</ph>{Binding Name, Mode=TwoWay}<ph id="ph3">` | Mode can be OneTime, OneWay, or TwoWay. {x:Bind} defaults to OneTime; {Binding} defaults to OneWay. | 
| UpdateSourceTrigger | Not supported | `</ph></source>
          <target state="new"><ph id="ph1">` | For {x:Bind} use a property or a static path instead. | 
| Mode | `</ph>{x:Bind Name, Mode=OneWay}<ph id="ph2">` | `</ph>{Binding Name, Mode=TwoWay}<ph id="ph3">` | Mode can be OneTime, OneWay, or TwoWay. {x:Bind} defaults to OneTime; {Binding} defaults to OneWay. | 
| UpdateSourceTrigger | Not supported | `</ph></target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>` | {x:Bind} uses PropertyChanged behavior for all cases except TextBox.Text where it waits for lost focus to update the source.</source>
          <target state="new">` | {x:Bind} uses PropertyChanged behavior for all cases except TextBox.Text where it waits for lost focus to update the source.</target>
        </trans-unit>
      </group>
    </body>
  </file>
  <header xmlns="">
    <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
    </xliffext:oltranslationpriority>
    <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a84aab15d7861580db2e8bf00753c9f77b5bec20</xliffext:olfilehash>
  </header>
</xliff>