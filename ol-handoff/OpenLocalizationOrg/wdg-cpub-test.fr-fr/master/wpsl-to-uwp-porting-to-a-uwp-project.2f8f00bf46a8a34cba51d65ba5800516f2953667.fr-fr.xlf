<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88b336f697775addd58d82ca735742d7c521e3b6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci1\porting\wpsl-to-uwp-porting-to-a-uwp-project.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</source>
          <target state="new">You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Porting a Windows Phone Silverlight project to a UWP project</source>
          <target state="new">Porting a Windows Phone Silverlight project to a UWP project</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Porting a Windows Phone Silverlight project to a UWP project</source>
          <target state="new">Porting a Windows Phone Silverlight project to a UWP project</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The previous topic was <bpt id="p1">[</bpt>Namespace and class mappings<ept id="p1">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept>.</source>
          <target state="new">The previous topic was <bpt id="p1">[</bpt>Namespace and class mappings<ept id="p1">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</source>
          <target state="new">You begin the porting process by creating a new Windows 10 project in Visual Studio and copying your files into it.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create the project and copy files to it</source>
          <target state="new">Create the project and copy files to it</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Launch Microsoft Visual Studio 2015 and create a new Blank Application (Windows Universal) project.</source>
          <target state="new">Launch Microsoft Visual Studio 2015 and create a new Blank Application (Windows Universal) project.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Jumpstart your Windows Store app using templates (C#, C++, Visual Basic)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh768232)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Jumpstart your Windows Store app using templates (C#, C++, Visual Basic)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh768232)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Your new project builds an app package (an appx file) that will run on all device families.</source>
          <target state="new">Your new project builds an app package (an appx file) that will run on all device families.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In your Windows Phone Silverlight app project, identify all the source code files and visual asset files that you want to reuse.</source>
          <target state="new">In your Windows Phone Silverlight app project, identify all the source code files and visual asset files that you want to reuse.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using File Explorer, copy data models, view models, visual assets, Resource Dictionaries, folder structure, and anything else that you wish to re-use, to your new project.</source>
          <target state="new">Using File Explorer, copy data models, view models, visual assets, Resource Dictionaries, folder structure, and anything else that you wish to re-use, to your new project.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Copy or create sub-folders on disk as necessary.</source>
          <target state="new">Copy or create sub-folders on disk as necessary.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Copy views (for example, MainPage.xaml and MainPage.xaml.cs) into the new project node, too.</source>
          <target state="new">Copy views (for example, MainPage.xaml and MainPage.xaml.cs) into the new project node, too.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Again, create new sub-folders as necessary, and remove the existing views from the project.</source>
          <target state="new">Again, create new sub-folders as necessary, and remove the existing views from the project.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>But, before you over-write or remove a view that Visual Studio generated, keep a copy because it may be useful to refer to it later.</source>
          <target state="new">But, before you over-write or remove a view that Visual Studio generated, keep a copy because it may be useful to refer to it later.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first phase of porting a Windows Phone Silverlight app focuses on getting it to look good and work well on one device family.</source>
          <target state="new">The first phase of porting a Windows Phone Silverlight app focuses on getting it to look good and work well on one device family.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Later, you'll turn your attention to making sure the views adapt themselves well to all form factors, and optionally to adding any adaptive code to get the most from a particular device family.</source>
          <target state="new">Later, you'll turn your attention to making sure the views adapt themselves well to all form factors, and optionally to adding any adaptive code to get the most from a particular device family.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, make sure <bpt id="p2">**</bpt>Show All Files<ept id="p2">**</ept> is toggled on.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, make sure <bpt id="p2">**</bpt>Show All Files<ept id="p2">**</ept> is toggled on.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Select the files that you copied, right-click them, and click <bpt id="p1">**</bpt>Include In Project<ept id="p1">**</ept>.</source>
          <target state="new">Select the files that you copied, right-click them, and click <bpt id="p1">**</bpt>Include In Project<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This will automatically include their containing folders.</source>
          <target state="new">This will automatically include their containing folders.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can then toggle <bpt id="p1">**</bpt>Show All Files<ept id="p1">**</ept> off if you like.</source>
          <target state="new">You can then toggle <bpt id="p1">**</bpt>Show All Files<ept id="p1">**</ept> off if you like.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An alternative workflow, if you prefer, is to use the <bpt id="p1">**</bpt>Add Existing Item<ept id="p1">**</ept> command, having created any necessary sub-folders in the Visual Studio <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept>.</source>
          <target state="new">An alternative workflow, if you prefer, is to use the <bpt id="p1">**</bpt>Add Existing Item<ept id="p1">**</ept> command, having created any necessary sub-folders in the Visual Studio <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Double-check that your visual assets have <bpt id="p1">**</bpt>Build Action<ept id="p1">**</ept> set to <bpt id="p2">**</bpt>Content<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Copy to Output Directory<ept id="p3">**</ept> set to <bpt id="p4">**</bpt>Do not copy<ept id="p4">**</ept>.</source>
          <target state="new">Double-check that your visual assets have <bpt id="p1">**</bpt>Build Action<ept id="p1">**</ept> set to <bpt id="p2">**</bpt>Content<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Copy to Output Directory<ept id="p3">**</ept> set to <bpt id="p4">**</bpt>Do not copy<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The differences in namespace and class names will generate lots of build errors at this stage.</source>
          <target state="new">The differences in namespace and class names will generate lots of build errors at this stage.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, if you open the views that Visual Studio generated, you'll see that they are of type <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Page<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept>, and not <bpt id="p3">**</bpt>PhoneApplicationPage<ept id="p3">**</ept>.</source>
          <target state="new">For example, if you open the views that Visual Studio generated, you'll see that they are of type <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Page<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br227503)</ept>, and not <bpt id="p3">**</bpt>PhoneApplicationPage<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>There are lots of XAML markup and imperative code differences that the following topics in this porting guide cover in detail.</source>
          <target state="new">There are lots of XAML markup and imperative code differences that the following topics in this porting guide cover in detail.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>But, you'll make fast progress just following these general steps: change "clr-namespace" to "using" in your namespace prefix declarations in XAML markup; use the <bpt id="p1">[</bpt>Namespace and class mappings<ept id="p1">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept> topic and Visual Studio's <bpt id="p2">**</bpt>Find and Replace<ept id="p2">**</ept> command to make bulk changes to your source code (for example, replace "System.Windows" with "Windows.UI.Xaml"); and in the imperative code editor in Visual Studio use the <bpt id="p3">**</bpt>Resolve<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Organize Usings<ept id="p4">**</ept> commands on the context menu for more targeted changes.</source>
          <target state="new">But, you'll make fast progress just following these general steps: change "clr-namespace" to "using" in your namespace prefix declarations in XAML markup; use the <bpt id="p1">[</bpt>Namespace and class mappings<ept id="p1">](wpsl-to-uwp-namespace-and-class-mappings.md)</ept> topic and Visual Studio's <bpt id="p2">**</bpt>Find and Replace<ept id="p2">**</ept> command to make bulk changes to your source code (for example, replace "System.Windows" with "Windows.UI.Xaml"); and in the imperative code editor in Visual Studio use the <bpt id="p3">**</bpt>Resolve<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Organize Usings<ept id="p4">**</ept> commands on the context menu for more targeted changes.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Extension SDKs</source>
          <target state="new">Extension SDKs</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Most of the Universal Windows Platform (UWP) APIs your ported app will call are implemented in the set of APIs known as the universal device family.</source>
          <target state="new">Most of the Universal Windows Platform (UWP) APIs your ported app will call are implemented in the set of APIs known as the universal device family.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>But, some are implemented in extension SDKs, and Visual Studio only recognizes APIs that are implemented by your app's target device family or by any extension SDKs that you have referenced.</source>
          <target state="new">But, some are implemented in extension SDKs, and Visual Studio only recognizes APIs that are implemented by your app's target device family or by any extension SDKs that you have referenced.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you get compile errors about namespaces or types or members that could not be found, then this is likely to be the cause.</source>
          <target state="new">If you get compile errors about namespaces or types or members that could not be found, then this is likely to be the cause.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Open the API's topic in the API reference documentation and navigate to the Requirements section: that will tell you what the implementing device family is.</source>
          <target state="new">Open the API's topic in the API reference documentation and navigate to the Requirements section: that will tell you what the implementing device family is.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If that's not your target device family, then to make the API available to your project, you will need a reference to the extension SDK for that device family.</source>
          <target state="new">If that's not your target device family, then to make the API available to your project, you will need a reference to the extension SDK for that device family.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p3">**</bpt>Windows Universal<ept id="p3">**</ept> <ph id="ph3">&amp;gt;</ph> <bpt id="p4">**</bpt>Extensions<ept id="p4">**</ept> and select the appropriate extension SDK.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Project<ept id="p1">**</ept> <ph id="ph1">&amp;gt;</ph> <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept> <ph id="ph2">&amp;gt;</ph> <bpt id="p3">**</bpt>Windows Universal<ept id="p3">**</ept> <ph id="ph3">&amp;gt;</ph> <bpt id="p4">**</bpt>Extensions<ept id="p4">**</ept> and select the appropriate extension SDK.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, if the APIs you want to call are available only in the mobile device family, and they were introduced in version 10.0.x.y, then select <bpt id="p1">**</bpt>Windows Mobile Extensions for the UWP<ept id="p1">**</ept>.</source>
          <target state="new">For example, if the APIs you want to call are available only in the mobile device family, and they were introduced in version 10.0.x.y, then select <bpt id="p1">**</bpt>Windows Mobile Extensions for the UWP<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>That will add the following reference to your project file:</source>
          <target state="new">That will add the following reference to your project file:</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The name and version number match the folders in the installed location of your SDK.</source>
          <target state="new">The name and version number match the folders in the installed location of your SDK.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, the above information matches this folder name:</source>
          <target state="new">For example, the above information matches this folder name:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Unless your app targets the device family that implements the API, you'll need to use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ApiInformation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn949001)</ept> class to test for the presence of the API before you call it (this is called adaptive code).</source>
          <target state="new">Unless your app targets the device family that implements the API, you'll need to use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ApiInformation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn949001)</ept> class to test for the presence of the API before you call it (this is called adaptive code).</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This condition will then be evaluated wherever your app runs, but it will only evaluate to true on devices where the API is present and therefore available to call.</source>
          <target state="new">This condition will then be evaluated wherever your app runs, but it will only evaluate to true on devices where the API is present and therefore available to call.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Only use extension SDKs and adaptive code after first checking whether a universal API exists.</source>
          <target state="new">Only use extension SDKs and adaptive code after first checking whether a universal API exists.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Some examples are given in the section below.</source>
          <target state="new">Some examples are given in the section below.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Also, see <bpt id="p1">[</bpt>App package manifest<ept id="p1">](#appxpackage)</ept>.</source>
          <target state="new">Also, see <bpt id="p1">[</bpt>App package manifest<ept id="p1">](#appxpackage)</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Maximizing markup and code reuse</source>
          <target state="new">Maximizing markup and code reuse</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You will find that refactoring a little, and/or adding adaptive code (which is explained below), will allow you to maximize the markup and code that works across all device families.</source>
          <target state="new">You will find that refactoring a little, and/or adding adaptive code (which is explained below), will allow you to maximize the markup and code that works across all device families.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Here are more details.</source>
          <target state="new">Here are more details.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Files that are common to all device families need no special consideration.</source>
          <target state="new">Files that are common to all device families need no special consideration.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Those files will be used by the app on all the device families that it runs on.</source>
          <target state="new">Those files will be used by the app on all the device families that it runs on.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This includes XAML markup files, imperative source code files, and asset files.</source>
          <target state="new">This includes XAML markup files, imperative source code files, and asset files.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is possible for your app to detect the device family that it is running on and navigate to a view that has been designed specifically for that device family.</source>
          <target state="new">It is possible for your app to detect the device family that it is running on and navigate to a view that has been designed specifically for that device family.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more details, see <bpt id="p1">[</bpt>Detecting the platform your app is running on<ept id="p1">](wpsl-to-uwp-input-and-sensors.md#detecting-the-platform)</ept>.</source>
          <target state="new">For more details, see <bpt id="p1">[</bpt>Detecting the platform your app is running on<ept id="p1">](wpsl-to-uwp-input-and-sensors.md#detecting-the-platform)</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A similar technique that you may find useful if there is no alternative is to give a markup file or <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> file (or the folder that contains the file) a special name such that it is automatically loaded at runtime only when your app runs on a particular device family.</source>
          <target state="new">A similar technique that you may find useful if there is no alternative is to give a markup file or <bpt id="p1">**</bpt>ResourceDictionary<ept id="p1">**</ept> file (or the folder that contains the file) a special name such that it is automatically loaded at runtime only when your app runs on a particular device family.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This technique is illustrated in the <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](wpsl-to-uwp-case-study-bookstore1.md#an-optional-adjustment)</ept> case study.</source>
          <target state="new">This technique is illustrated in the <bpt id="p1">[</bpt>Bookstore1<ept id="p1">](wpsl-to-uwp-case-study-bookstore1.md#an-optional-adjustment)</ept> case study.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To use features that are not available on all device families (for example, printers, scanners, or the camera button) you can write adaptive code.</source>
          <target state="new">To use features that are not available on all device families (for example, printers, scanners, or the camera button) you can write adaptive code.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See the third example in <bpt id="p1">[</bpt>Conditional compilation, and adaptive code<ept id="p1">](#conditional-compilation)</ept> in this topic.</source>
          <target state="new">See the third example in <bpt id="p1">[</bpt>Conditional compilation, and adaptive code<ept id="p1">](#conditional-compilation)</ept> in this topic.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you want to support both Windows Phone Silverlight and Windows 10, then you may be able to share source code files between projects.</source>
          <target state="new">If you want to support both Windows Phone Silverlight and Windows 10, then you may be able to share source code files between projects.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Here's how: in Visual Studio, right-click the project in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Add Existing Item<ept id="p2">**</ept>, select the files to share, and then click <bpt id="p3">**</bpt>Add As Link<ept id="p3">**</ept>.</source>
          <target state="new">Here's how: in Visual Studio, right-click the project in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Add Existing Item<ept id="p2">**</ept>, select the files to share, and then click <bpt id="p3">**</bpt>Add As Link<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Store your source code files in a common folder on the file system where the projects that link to them can see them, and don't forget to add them to source control.</source>
          <target state="new">Store your source code files in a common folder on the file system where the projects that link to them can see them, and don't forget to add them to source control.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you can factor your imperative source code so that most, if not all, of a file will work on both platforms, then you don't need to have two copies of it.</source>
          <target state="new">If you can factor your imperative source code so that most, if not all, of a file will work on both platforms, then you don't need to have two copies of it.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can wrap any platform-specific logic in the file inside conditional compilation directives where possible, or run-time conditions where necessary.</source>
          <target state="new">You can wrap any platform-specific logic in the file inside conditional compilation directives where possible, or run-time conditions where necessary.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See the next section below, and <bpt id="p1">[</bpt>C# Preprocessor Directives<ept id="p1">](http://msdn.microsoft.com/library/ed8yd1ha.aspx)</ept>.</source>
          <target state="new">See the next section below, and <bpt id="p1">[</bpt>C# Preprocessor Directives<ept id="p1">](http://msdn.microsoft.com/library/ed8yd1ha.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For reuse at the binary level, rather than the source code level, there are Portable Class Libraries, which support the subset of .NET APIs that are available in Windows Phone Silverlight as well as the subset for Windows 10 apps (.NET Core).</source>
          <target state="new">For reuse at the binary level, rather than the source code level, there are Portable Class Libraries, which support the subset of .NET APIs that are available in Windows Phone Silverlight as well as the subset for Windows 10 apps (.NET Core).</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Portable Class Library assemblies are binary compatible with these .NET platforms and more.</source>
          <target state="new">Portable Class Library assemblies are binary compatible with these .NET platforms and more.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Use Visual Studio to create a project that targets a Portable Class Library.</source>
          <target state="new">Use Visual Studio to create a project that targets a Portable Class Library.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Cross-Platform Development with the Portable Class Library<ept id="p1">](http://msdn.microsoft.com/library/gg597391.aspx)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Cross-Platform Development with the Portable Class Library<ept id="p1">](http://msdn.microsoft.com/library/gg597391.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Conditional compilation, and adaptive code</source>
          <target state="new">Conditional compilation, and adaptive code</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you want to support both Windows Phone Silverlight and Windows 10 in a single code file then you can do that.</source>
          <target state="new">If you want to support both Windows Phone Silverlight and Windows 10 in a single code file then you can do that.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you look in your Windows 10 project at the project properties pages, you'll see that the project defines WINDOWS\_UAP as a conditional compilation symbol.</source>
          <target state="new">If you look in your Windows 10 project at the project properties pages, you'll see that the project defines WINDOWS\_UAP as a conditional compilation symbol.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In general, you can use the following logic to perform conditional compilation.</source>
          <target state="new">In general, you can use the following logic to perform conditional compilation.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If you have code that you've been sharing between a Windows Phone Silverlight app and a Windows Store app, then you may already have source code with logic like this:</source>
          <target state="new">If you have code that you've been sharing between a Windows Phone Silverlight app and a Windows Store app, then you may already have source code with logic like this:</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If so, and if you now want to support Windows 10 in addition, then you can do that, too.</source>
          <target state="new">If so, and if you now want to support Windows 10 in addition, then you can do that, too.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You may have used conditional compilation to limit handling of the hardware back button to Windows Phone.</source>
          <target state="new">You may have used conditional compilation to limit handling of the hardware back button to Windows Phone.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In Windows 10, the back button event is a universal concept.</source>
          <target state="new">In Windows 10, the back button event is a universal concept.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Back buttons implemented in hardware or in software will all raise the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BackRequested<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn893596)</ept> event, so that's the one to handle.</source>
          <target state="new">Back buttons implemented in hardware or in software will all raise the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>BackRequested<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn893596)</ept> event, so that's the one to handle.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You may have used conditional compilation to limit handling of the hardware camera button to Windows Phone.</source>
          <target state="new">You may have used conditional compilation to limit handling of the hardware camera button to Windows Phone.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In Windows 10, the hardware camera button is a concept particular to the mobile device family.</source>
          <target state="new">In Windows 10, the hardware camera button is a concept particular to the mobile device family.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Because one app package will be running on all devices, we change our compile-time condition into a run-time condition using what is known as adaptive code.</source>
          <target state="new">Because one app package will be running on all devices, we change our compile-time condition into a run-time condition using what is known as adaptive code.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To do that, we use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ApiInformation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn949001)</ept> class to query at run-time for the presence of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>HardwareButtons<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/jj207557)</ept> class.</source>
          <target state="new">To do that, we use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ApiInformation<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn949001)</ept> class to query at run-time for the presence of the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>HardwareButtons<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/jj207557)</ept> class.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HardwareButtons<ept id="p1">**</ept> is defined in the mobile extension SDK, so we'll need to add a reference to that SDK to our project for this code to compile.</source>
          <target state="new"><bpt id="p1">**</bpt>HardwareButtons<ept id="p1">**</ept> is defined in the mobile extension SDK, so we'll need to add a reference to that SDK to our project for this code to compile.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Note, though, that the handler will only be executed on a device that implements the types defined in the mobile extension SDK, and that's the mobile device family.</source>
          <target state="new">Note, though, that the handler will only be executed on a device that implements the types defined in the mobile extension SDK, and that's the mobile device family.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>So, the following code is careful only to use features that are present, although it achieves it in a different way from conditional compilation.</source>
          <target state="new">So, the following code is careful only to use features that are present, although it achieves it in a different way from conditional compilation.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Also, see <bpt id="p1">[</bpt>Detecting the platform your app is running on<ept id="p1">](wpsl-to-uwp-input-and-sensors.md#detecting-the-platform)</ept>.</source>
          <target state="new">Also, see <bpt id="p1">[</bpt>Detecting the platform your app is running on<ept id="p1">](wpsl-to-uwp-input-and-sensors.md#detecting-the-platform)</ept>.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The app package manifest</source>
          <target state="new">The app package manifest</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The settings in your project (including any extension SDKs references) determine the API surface area that your app can call.</source>
          <target state="new">The settings in your project (including any extension SDKs references) determine the API surface area that your app can call.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>But, your app package manifest is what determines the actual set of devices that your customers can install your app onto from the Store.</source>
          <target state="new">But, your app package manifest is what determines the actual set of devices that your customers can install your app onto from the Store.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more info, see Examples in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TargetDeviceFamily<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn986903)</ept>.</source>
          <target state="new">For more info, see Examples in <bpt id="p1">[</bpt><bpt id="p2">**</bpt>TargetDeviceFamily<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn986903)</ept>.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>It's worth knowing how to edit the app package manifest, because the topics that follow talk about using it for various declarations, capabilities, and other settings that some features need.</source>
          <target state="new">It's worth knowing how to edit the app package manifest, because the topics that follow talk about using it for various declarations, capabilities, and other settings that some features need.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can use the Visual Studio app package manifest editor to edit it.</source>
          <target state="new">You can use the Visual Studio app package manifest editor to edit it.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> is not shown, choose it from the <bpt id="p2">**</bpt>View<ept id="p2">**</ept> menu.</source>
          <target state="new">If the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> is not shown, choose it from the <bpt id="p2">**</bpt>View<ept id="p2">**</ept> menu.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Double-click <bpt id="p1">**</bpt>Package.appxmanifest<ept id="p1">**</ept>.</source>
          <target state="new">Double-click <bpt id="p1">**</bpt>Package.appxmanifest<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This opens the manifest editor window.</source>
          <target state="new">This opens the manifest editor window.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Select the appropriate tab to make changes and then save the changes.</source>
          <target state="new">Select the appropriate tab to make changes and then save the changes.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You may want to ensure that the <bpt id="p1">**</bpt>pm:PhoneIdentity<ept id="p1">**</ept> element in the ported app manifest matches what is in the app manifest of the app you're porting (for full details, see the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>pm:PhoneIdentity<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn934763)</ept> topic).</source>
          <target state="new">You may want to ensure that the <bpt id="p1">**</bpt>pm:PhoneIdentity<ept id="p1">**</ept> element in the ported app manifest matches what is in the app manifest of the app you're porting (for full details, see the <bpt id="p2">[</bpt><bpt id="p3">**</bpt>pm:PhoneIdentity<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/dn934763)</ept> topic).</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Package manifest schema reference for Windows 10<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn934820)</ept>.</source>
          <target state="new">See <bpt id="p1">[</bpt>Package manifest schema reference for Windows 10<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/dn934820)</ept>.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The next topic is <bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](wpsl-to-uwp-troubleshooting.md)</ept>.</source>
          <target state="new">The next topic is <bpt id="p1">[</bpt>Troubleshooting<ept id="p1">](wpsl-to-uwp-troubleshooting.md)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>