<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d5eb84a3884e57f72357a48f04826174179a709</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\gaming\marble-maze-sample-fundamentals.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Marble Maze sample fundamentals</source>
          <target state="new">Marble Maze sample fundamentals</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This document describes the fundamental characteristics of the Marble Maze project, for example, how it uses Visual C++ in the Windows Runtime environment, how it is created and structured, and how it is built.</source>
          <target state="new">This document describes the fundamental characteristics of the Marble Maze project, for example, how it uses Visual C++ in the Windows Runtime environment, how it is created and structured, and how it is built.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Marble Maze sample fundamentals</source>
          <target state="new">Marble Maze sample fundamentals</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This document describes the fundamental characteristics of the Marble Maze project, for example, how it uses Visual C++ in the Windows Runtime environment, how it is created and structured, and how it is built.</source>
          <target state="new">This document describes the fundamental characteristics of the Marble Maze project, for example, how it uses Visual C++ in the Windows Runtime environment, how it is created and structured, and how it is built.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The document also describes several of the conventions that are used in the code.</source>
          <target state="new">The document also describes several of the conventions that are used in the code.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The sample code that corresponds to this document is found in the <bpt id="p2">[</bpt>DirectX Marble Maze game sample<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=624011)</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>   The sample code that corresponds to this document is found in the <bpt id="p2">[</bpt>DirectX Marble Maze game sample<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=624011)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Here are some of the key points that this document discusses for when you plan and develop your Universal Windows Platform (UWP) game.</source>
          <target state="new">Here are some of the key points that this document discusses for when you plan and develop your Universal Windows Platform (UWP) game.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>DirectX 11 App (Universal Windows)<ept id="p1">**</ept> template in a C++ application to create your DirectX UWP game.</source>
          <target state="new">Use the <bpt id="p1">**</bpt>DirectX 11 App (Universal Windows)<ept id="p1">**</ept> template in a C++ application to create your DirectX UWP game.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use Visual Studio to build a UWP app project as you would build a standard project.</source>
          <target state="new">Use Visual Studio to build a UWP app project as you would build a standard project.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Windows Runtime provides classes and interfaces so that you can develop UWP apps in a more modern, object-oriented manner.</source>
          <target state="new">The Windows Runtime provides classes and interfaces so that you can develop UWP apps in a more modern, object-oriented manner.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use object references with the hat (^) symbol to manage the lifetime of Windows Runtime variables, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Microsoft::WRL::ComPtr<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept> to manage the lifetime of COM objects, and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>std::shared\_ptr<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/bb982026.aspx)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>std::unique\_ptr<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/ee410601.aspx)</ept> to manage the lifetime of all other heap-allocated C++ objects.</source>
          <target state="new">Use object references with the hat (^) symbol to manage the lifetime of Windows Runtime variables, <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Microsoft::WRL::ComPtr<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept> to manage the lifetime of COM objects, and <bpt id="p3">[</bpt><bpt id="p4">**</bpt>std::shared\_ptr<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/bb982026.aspx)</ept> or <bpt id="p5">[</bpt><bpt id="p6">**</bpt>std::unique\_ptr<ept id="p6">**</ept><ept id="p5">](https://msdn.microsoft.com/library/windows/apps/ee410601.aspx)</ept> to manage the lifetime of all other heap-allocated C++ objects.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In most cases, use exception handling, instead of result codes, to deal with unexpected errors.</source>
          <target state="new">In most cases, use exception handling, instead of result codes, to deal with unexpected errors.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use SAL annotations together with code analysis tools to help discover errors in your app.</source>
          <target state="new">Use SAL annotations together with code analysis tools to help discover errors in your app.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creating the Visual Studio project</source>
          <target state="new">Creating the Visual Studio project</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you've downloaded and extracted the sample, you can open the MarbleMaze.sln solution file in Visual Studio, and you'll have the code in front of you.</source>
          <target state="new">If you've downloaded and extracted the sample, you can open the MarbleMaze.sln solution file in Visual Studio, and you'll have the code in front of you.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also view the source on the <bpt id="p1">[</bpt>DirectX Marble Maze game sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=624011)</ept> MSDN Samples Gallery page by selecting the <bpt id="p2">**</bpt>Browse Code<ept id="p2">**</ept> tab.</source>
          <target state="new">You can also view the source on the <bpt id="p1">[</bpt>DirectX Marble Maze game sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=624011)</ept> MSDN Samples Gallery page by selecting the <bpt id="p2">**</bpt>Browse Code<ept id="p2">**</ept> tab.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When we created the Visual Studio project for Marble Maze, we started with an existing project.</source>
          <target state="new">When we created the Visual Studio project for Marble Maze, we started with an existing project.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, if you do not already have an existing project that provides the basic functionality that your DirectX UWP game requires, we recommend that you create a project based on the Visual Studio <bpt id="p1">**</bpt>DirectX 11 App (Universal Windows)<ept id="p1">**</ept> template because it provides a basic working 3-D application.</source>
          <target state="new">However, if you do not already have an existing project that provides the basic functionality that your DirectX UWP game requires, we recommend that you create a project based on the Visual Studio <bpt id="p1">**</bpt>DirectX 11 App (Universal Windows)<ept id="p1">**</ept> template because it provides a basic working 3-D application.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One important project setting in the <bpt id="p1">**</bpt>DirectX 11 App (Universal Windows)<ept id="p1">**</ept> template is the <bpt id="p2">**</bpt>/ZW<ept id="p2">**</ept> option, which enables the program to use the Windows Runtime language extensions.</source>
          <target state="new">One important project setting in the <bpt id="p1">**</bpt>DirectX 11 App (Universal Windows)<ept id="p1">**</ept> template is the <bpt id="p2">**</bpt>/ZW<ept id="p2">**</ept> option, which enables the program to use the Windows Runtime language extensions.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This option is enabled by default when you use the Visual Studio template.</source>
          <target state="new">This option is enabled by default when you use the Visual Studio template.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>   The <bpt id="p2">**</bpt>/ZW<ept id="p2">**</ept> option is not compatible with options such as <bpt id="p3">**</bpt>/clr<ept id="p3">**</ept>.In the case of <bpt id="p4">**</bpt>/clr<ept id="p4">**</ept>, this means that you cannot target both the .NET Framework and the Windows Runtime from the same Visual C++ project.</source>
          <target state="new"><bpt id="p1">**</bpt>Caution<ept id="p1">**</ept>   The <bpt id="p2">**</bpt>/ZW<ept id="p2">**</ept> option is not compatible with options such as <bpt id="p3">**</bpt>/clr<ept id="p3">**</ept>.In the case of <bpt id="p4">**</bpt>/clr<ept id="p4">**</ept>, this means that you cannot target both the .NET Framework and the Windows Runtime from the same Visual C++ project.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Every UWP app that you acquire from the Windows Store comes in the form of an app package.</source>
          <target state="new">Every UWP app that you acquire from the Windows Store comes in the form of an app package.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An app package contains a package manifest, which contains information about your app.</source>
          <target state="new">An app package contains a package manifest, which contains information about your app.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, you can specify the capabilities (that is, the required access to protected system resources or user data) of your app.</source>
          <target state="new">For example, you can specify the capabilities (that is, the required access to protected system resources or user data) of your app.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you determine that your app requires certain capabilities, use the package manifest to declare the required capabilities.</source>
          <target state="new">If you determine that your app requires certain capabilities, use the package manifest to declare the required capabilities.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The manifest also lets you specify project properties such as supported device rotations, tile images, and the splash screen.</source>
          <target state="new">The manifest also lets you specify project properties such as supported device rotations, tile images, and the splash screen.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more info about app packages, see <bpt id="p1">[</bpt>Packaging apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt270969)</ept>.</source>
          <target state="new">For more info about app packages, see <bpt id="p1">[</bpt>Packaging apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/mt270969)</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Building, deploying, and running the game</source>
          <target state="new">Building, deploying, and running the game</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Build a UWP app project as you would build a standard project.</source>
          <target state="new">Build a UWP app project as you would build a standard project.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>(On the menu bar, choose <bpt id="p1">**</bpt>Build, Build Solution<ept id="p1">**</ept>.) The build step compiles the code and also packages it for use as a UWP app.</source>
          <target state="new">(On the menu bar, choose <bpt id="p1">**</bpt>Build, Build Solution<ept id="p1">**</ept>.) The build step compiles the code and also packages it for use as a UWP app.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>After you build the project, you must deploy it.(On the menu bar, choose <bpt id="p1">**</bpt>Build, Deploy Solution<ept id="p1">**</ept>.) Visual Studio also deploys the project when you run the game from the debugger.</source>
          <target state="new">After you build the project, you must deploy it.(On the menu bar, choose <bpt id="p1">**</bpt>Build, Deploy Solution<ept id="p1">**</ept>.) Visual Studio also deploys the project when you run the game from the debugger.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>After you deploy the project, pick the Marble Maze tile to run the game.</source>
          <target state="new">After you deploy the project, pick the Marble Maze tile to run the game.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Alternatively, from Visual Studio, on the menu bar, choose <bpt id="p1">**</bpt>Debug, Start Debugging<ept id="p1">**</ept>.</source>
          <target state="new">Alternatively, from Visual Studio, on the menu bar, choose <bpt id="p1">**</bpt>Debug, Start Debugging<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Controlling the game</source>
          <target state="new">Controlling the game</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use touch, the accelerometer, the Xbox 360 controller, or the mouse to control Marble Maze.</source>
          <target state="new">You can use touch, the accelerometer, the Xbox 360 controller, or the mouse to control Marble Maze.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use the directional pad on the controller to change the active menu item.</source>
          <target state="new">Use the directional pad on the controller to change the active menu item.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Use touch, the A button, the Start button, or the mouse to pick a menu item.</source>
          <target state="new">Use touch, the A button, the Start button, or the mouse to pick a menu item.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Use touch, the accelerometer, the left thumbstick, or the mouse to tilt the maze.</source>
          <target state="new">Use touch, the accelerometer, the left thumbstick, or the mouse to tilt the maze.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use touch, the A button, the Start button, or the mouse to close menus such as the high score table.</source>
          <target state="new">Use touch, the A button, the Start button, or the mouse to close menus such as the high score table.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use the Start button or the P key to pause or resume the game.</source>
          <target state="new">Use the Start button or the P key to pause or resume the game.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Use the Back button on the controller or the Home key on the keyboard to restart the game.</source>
          <target state="new">Use the Back button on the controller or the Home key on the keyboard to restart the game.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When the high-score table is visible, use the Back button or Home key to clear all scores.</source>
          <target state="new">When the high-score table is visible, use the Back button or Home key to clear all scores.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Code conventions</source>
          <target state="new">Code conventions</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Windows Runtime is a programming interface that you can use to create UWP apps that run only in a special application environment.</source>
          <target state="new">The Windows Runtime is a programming interface that you can use to create UWP apps that run only in a special application environment.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Such apps use authorized functions, data types, and devices, and are distributed from the Windows Store.</source>
          <target state="new">Such apps use authorized functions, data types, and devices, and are distributed from the Windows Store.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>At the lowest level, the Windows Runtime consists of an Application Binary Interface (ABI).</source>
          <target state="new">At the lowest level, the Windows Runtime consists of an Application Binary Interface (ABI).</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The ABI is a low-level binary contract that makes Windows Runtime APIs accessible to multiple programming languages such as JavaScript, the .NET languages, and Visual C++.</source>
          <target state="new">The ABI is a low-level binary contract that makes Windows Runtime APIs accessible to multiple programming languages such as JavaScript, the .NET languages, and Visual C++.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In order to call Windows Runtime APIs from JavaScript and .NET, those languages require projections that are specific to each language environment.</source>
          <target state="new">In order to call Windows Runtime APIs from JavaScript and .NET, those languages require projections that are specific to each language environment.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When you call a Windows Runtime API from JavaScript or .NET, you are invoking the projection, which in turn calls the underlying ABI function.</source>
          <target state="new">When you call a Windows Runtime API from JavaScript or .NET, you are invoking the projection, which in turn calls the underlying ABI function.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Although you can call the ABI functions directly in C++, Microsoft provides projections for C++ as well, because they make it much simpler to consume the Windows Runtime APIs, while still maintaining high performance.</source>
          <target state="new">Although you can call the ABI functions directly in C++, Microsoft provides projections for C++ as well, because they make it much simpler to consume the Windows Runtime APIs, while still maintaining high performance.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Microsoft also provides language extensions to Visual C++ that specifically support the Windows Runtime projections.</source>
          <target state="new">Microsoft also provides language extensions to Visual C++ that specifically support the Windows Runtime projections.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Many of these language extensions resemble the syntax for the C++/CLI language.</source>
          <target state="new">Many of these language extensions resemble the syntax for the C++/CLI language.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>However, instead of targeting the common language runtime (CLR), native apps use this syntax to target the Windows Runtime.</source>
          <target state="new">However, instead of targeting the common language runtime (CLR), native apps use this syntax to target the Windows Runtime.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The object reference, or hat (^), modifier is an important part of this new syntax because it enables the automatic deletion of runtime objects by means of reference counting.</source>
          <target state="new">The object reference, or hat (^), modifier is an important part of this new syntax because it enables the automatic deletion of runtime objects by means of reference counting.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Instead of calling methods such as <bpt id="p1">**</bpt>AddRef<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Release<ept id="p2">**</ept> to manage the lifetime of a Windows Runtime object, the runtime deletes the object when no other component references it, for example, when it leaves scope or you set all references to <bpt id="p3">**</bpt>nullptr<ept id="p3">**</ept>.</source>
          <target state="new">Instead of calling methods such as <bpt id="p1">**</bpt>AddRef<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Release<ept id="p2">**</ept> to manage the lifetime of a Windows Runtime object, the runtime deletes the object when no other component references it, for example, when it leaves scope or you set all references to <bpt id="p3">**</bpt>nullptr<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Another important part of using Visual C++ to create UWP apps is the <bpt id="p1">**</bpt>ref new<ept id="p1">**</ept> keyword.</source>
          <target state="new">Another important part of using Visual C++ to create UWP apps is the <bpt id="p1">**</bpt>ref new<ept id="p1">**</ept> keyword.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>ref new<ept id="p1">**</ept> instead of <bpt id="p2">**</bpt>new<ept id="p2">**</ept> to create reference-counted Windows Runtime objects.</source>
          <target state="new">Use <bpt id="p1">**</bpt>ref new<ept id="p1">**</ept> instead of <bpt id="p2">**</bpt>new<ept id="p2">**</ept> to create reference-counted Windows Runtime objects.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Type System (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh755822)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Type System (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh755822)</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Important</source>
          <target state="new">Important</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You only have to use <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> and <bpt id="p2">**</bpt>ref new<ept id="p2">**</ept> when you create Windows Runtime objects or create Windows Runtime components.</source>
          <target state="new">You only have to use <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> and <bpt id="p2">**</bpt>ref new<ept id="p2">**</ept> when you create Windows Runtime objects or create Windows Runtime components.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can use the standard C++ syntax when you write core application code that does not use the Windows Runtime.</source>
          <target state="new">You can use the standard C++ syntax when you write core application code that does not use the Windows Runtime.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Marble Maze uses <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> together with <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Microsoft::WRL::ComPtr<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept> to manage heap-allocated objects and minimize memory leaks.</source>
          <target state="new">Marble Maze uses <bpt id="p1">**</bpt><ph id="ph1">^</ph><ept id="p1">**</ept> together with <bpt id="p2">[</bpt><bpt id="p3">**</bpt>Microsoft::WRL::ComPtr<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/br244983.aspx)</ept> to manage heap-allocated objects and minimize memory leaks.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>We recommend that you use ^ to manage the lifetime of Windows Runtime variables, <bpt id="p1">**</bpt>ComPtr<ept id="p1">**</ept> to manage the lifetime of COM variables (such as when you use DirectX), and std::<bpt id="p2">[</bpt><bpt id="p3">**</bpt>std::shared\_ptr<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/bb982026)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>std::unique\_ptr<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/ee410601)</ept> to manage the lifetime of all other heap-allocated C++ objects.</source>
          <target state="new">We recommend that you use ^ to manage the lifetime of Windows Runtime variables, <bpt id="p1">**</bpt>ComPtr<ept id="p1">**</ept> to manage the lifetime of COM variables (such as when you use DirectX), and std::<bpt id="p2">[</bpt><bpt id="p3">**</bpt>std::shared\_ptr<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/bb982026)</ept> or <bpt id="p4">[</bpt><bpt id="p5">**</bpt>std::unique\_ptr<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/ee410601)</ept> to manage the lifetime of all other heap-allocated C++ objects.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more info about the language extensions that are available to a C++ UWP app, see <bpt id="p1">[</bpt>Visual C++ Language Reference (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh699871)</ept>.</source>
          <target state="new">For more info about the language extensions that are available to a C++ UWP app, see <bpt id="p1">[</bpt>Visual C++ Language Reference (C++/CX)<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh699871)</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="new">Error handling</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Marble Maze uses exception handling as the primary way to deal with unexpected errors.</source>
          <target state="new">Marble Maze uses exception handling as the primary way to deal with unexpected errors.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Although game code traditionally uses logging or error codes, such as <bpt id="p1">**</bpt>HRESULT<ept id="p1">**</ept> values, to indicate errors, exception handling has two main advantages.</source>
          <target state="new">Although game code traditionally uses logging or error codes, such as <bpt id="p1">**</bpt>HRESULT<ept id="p1">**</ept> values, to indicate errors, exception handling has two main advantages.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>First, it can make the code easier to read and maintain.</source>
          <target state="new">First, it can make the code easier to read and maintain.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>From a code perspective, exception handling is a more efficient way to propagate an error to a routine that can handle that error.</source>
          <target state="new">From a code perspective, exception handling is a more efficient way to propagate an error to a routine that can handle that error.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The use of error codes typically requires each function to explicitly propagate errors.</source>
          <target state="new">The use of error codes typically requires each function to explicitly propagate errors.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A second advantage is that you can configure the Visual Studio debugger to break when an exception occurs so that you can stop immediately at the location and context of the error.</source>
          <target state="new">A second advantage is that you can configure the Visual Studio debugger to break when an exception occurs so that you can stop immediately at the location and context of the error.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The Windows Runtime also uses exception handling extensively.</source>
          <target state="new">The Windows Runtime also uses exception handling extensively.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Therefore, by using exception handling in your code, you can combine all error handling into one model.</source>
          <target state="new">Therefore, by using exception handling in your code, you can combine all error handling into one model.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>We recommend that you use the following conventions in your error handling model:</source>
          <target state="new">We recommend that you use the following conventions in your error handling model:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Use exceptions to communicate unexpected errors.</source>
          <target state="new">Use exceptions to communicate unexpected errors.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Do not use exceptions to control the flow of code.</source>
          <target state="new">Do not use exceptions to control the flow of code.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Catch only the exceptions that you can safely handle and recover from.</source>
          <target state="new">Catch only the exceptions that you can safely handle and recover from.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Otherwise, do not catch the exception and allow the app to terminate.</source>
          <target state="new">Otherwise, do not catch the exception and allow the app to terminate.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When you call a DirectX routine that returns <bpt id="p1">**</bpt>HRESULT<ept id="p1">**</ept>, use the <bpt id="p2">**</bpt>DX::ThrowIfFailed<ept id="p2">**</ept> function.</source>
          <target state="new">When you call a DirectX routine that returns <bpt id="p1">**</bpt>HRESULT<ept id="p1">**</ept>, use the <bpt id="p2">**</bpt>DX::ThrowIfFailed<ept id="p2">**</ept> function.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This function is defined in DirectXSample.h.<bpt id="p1">**</bpt>ThrowIfFailed<ept id="p1">**</ept> throws an exception if the provided <bpt id="p2">**</bpt>HRESULT<ept id="p2">**</ept> is an error code.</source>
          <target state="new">This function is defined in DirectXSample.h.<bpt id="p1">**</bpt>ThrowIfFailed<ept id="p1">**</ept> throws an exception if the provided <bpt id="p2">**</bpt>HRESULT<ept id="p2">**</ept> is an error code.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>E\_POINTER<ept id="p1">**</ept> causes <bpt id="p2">**</bpt>ThrowIfFailed<ept id="p2">**</ept> to throw <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Platform::NullReferenceException<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh755823.aspx)</ept>.</source>
          <target state="new">For example, <bpt id="p1">**</bpt>E\_POINTER<ept id="p1">**</ept> causes <bpt id="p2">**</bpt>ThrowIfFailed<ept id="p2">**</ept> to throw <bpt id="p3">[</bpt><bpt id="p4">**</bpt>Platform::NullReferenceException<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/hh755823.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When you use <bpt id="p1">**</bpt>ThrowIfFailed<ept id="p1">**</ept>, put the DirectX call on a separate line to help improve code readability, as shown in the following example.</source>
          <target state="new">When you use <bpt id="p1">**</bpt>ThrowIfFailed<ept id="p1">**</ept>, put the DirectX call on a separate line to help improve code readability, as shown in the following example.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Although we recommend that you avoid the use of <bpt id="p1">**</bpt>HRESULT<ept id="p1">**</ept> for unexpected errors , it is more important to avoid the use of exception handling to control the flow of code.</source>
          <target state="new">Although we recommend that you avoid the use of <bpt id="p1">**</bpt>HRESULT<ept id="p1">**</ept> for unexpected errors , it is more important to avoid the use of exception handling to control the flow of code.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Therefore, it is preferred to use an <bpt id="p1">**</bpt>HRESULT<ept id="p1">**</ept> return value when necessary to control the flow of code.</source>
          <target state="new">Therefore, it is preferred to use an <bpt id="p1">**</bpt>HRESULT<ept id="p1">**</ept> return value when necessary to control the flow of code.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>SAL annotations</source>
          <target state="new">SAL annotations</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Use SAL annotations together with code analysis tools to help discover errors in your app.</source>
          <target state="new">Use SAL annotations together with code analysis tools to help discover errors in your app.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>By using Microsoft source-code annotation language (SAL), you can annotate, or describe, how a function uses its parameters.</source>
          <target state="new">By using Microsoft source-code annotation language (SAL), you can annotate, or describe, how a function uses its parameters.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>SAL annotations also describe return values.</source>
          <target state="new">SAL annotations also describe return values.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>SAL annotations work with the C/C++ Code Analysis tool to discover possible defects in C and C++ source code.</source>
          <target state="new">SAL annotations work with the C/C++ Code Analysis tool to discover possible defects in C and C++ source code.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Common coding errors reported by the tool include buffer overruns, uninitialized memory, null pointer dereferences, and memory and resource leaks.</source>
          <target state="new">Common coding errors reported by the tool include buffer overruns, uninitialized memory, null pointer dereferences, and memory and resource leaks.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Consider the <bpt id="p1">**</bpt>BasicLoader::LoadMesh<ept id="p1">**</ept> method, which is declared in BasicLoader.h.</source>
          <target state="new">Consider the <bpt id="p1">**</bpt>BasicLoader::LoadMesh<ept id="p1">**</ept> method, which is declared in BasicLoader.h.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This method uses \_In\_ to specify that <bpt id="p1">*</bpt>filename<ept id="p1">*</ept> is an input parameter (and therefore will only be read from), \_Out\_ to specify that <bpt id="p2">*</bpt>vertexBuffer<ept id="p2">*</ept> and <bpt id="p3">*</bpt>indexBuffer<ept id="p3">*</ept> are output parameters (and therefore will only be written to), and \_Out\_opt\_ to specify that <bpt id="p4">*</bpt>vertexCount<ept id="p4">*</ept> and <bpt id="p5">*</bpt>indexCount<ept id="p5">*</ept> are optional output parameters (and might be written to).</source>
          <target state="new">This method uses \_In\_ to specify that <bpt id="p1">*</bpt>filename<ept id="p1">*</ept> is an input parameter (and therefore will only be read from), \_Out\_ to specify that <bpt id="p2">*</bpt>vertexBuffer<ept id="p2">*</ept> and <bpt id="p3">*</bpt>indexBuffer<ept id="p3">*</ept> are output parameters (and therefore will only be written to), and \_Out\_opt\_ to specify that <bpt id="p4">*</bpt>vertexCount<ept id="p4">*</ept> and <bpt id="p5">*</bpt>indexCount<ept id="p5">*</ept> are optional output parameters (and might be written to).</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">*</bpt>vertexCount<ept id="p1">*</ept> and <bpt id="p2">*</bpt>indexCount<ept id="p2">*</ept> are optional output parameters, they are allowed to be <bpt id="p3">**</bpt>nullptr<ept id="p3">**</ept>.</source>
          <target state="new">Because <bpt id="p1">*</bpt>vertexCount<ept id="p1">*</ept> and <bpt id="p2">*</bpt>indexCount<ept id="p2">*</ept> are optional output parameters, they are allowed to be <bpt id="p3">**</bpt>nullptr<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The C/C++ Code Analysis tool examines calls to this method to ensure that the parameters it passes meet these criteria.</source>
          <target state="new">The C/C++ Code Analysis tool examines calls to this method to ensure that the parameters it passes meet these criteria.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To perform code analysis on your app, on the menu bar, choose <bpt id="p1">**</bpt>Build, Run Code Analysis on Solution<ept id="p1">**</ept>.</source>
          <target state="new">To perform code analysis on your app, on the menu bar, choose <bpt id="p1">**</bpt>Build, Run Code Analysis on Solution<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For more info about code analysis, see <bpt id="p1">[</bpt>Analyzing C/C++ Code Quality by Using Code Analysis<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/ms182025.aspx)</ept>.</source>
          <target state="new">For more info about code analysis, see <bpt id="p1">[</bpt>Analyzing C/C++ Code Quality by Using Code Analysis<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/ms182025.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The complete list of available annotations is defined in sal.h.</source>
          <target state="new">The complete list of available annotations is defined in sal.h.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>SAL Annotations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/ms235402.aspx)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>SAL Annotations<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/ms235402.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>Marble Maze application structure<ept id="p1">](marble-maze-application-structure.md)</ept> for information about how the Marble Maze application code is structured and how the structure of a DirectX UWP app differs from that of a traditional desktop application.</source>
          <target state="new">Read <bpt id="p1">[</bpt>Marble Maze application structure<ept id="p1">](marble-maze-application-structure.md)</ept> for information about how the Marble Maze application code is structured and how the structure of a DirectX UWP app differs from that of a traditional desktop application.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Marble Maze application structure</source>
          <target state="new">Marble Maze application structure</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Developing Marble Maze, a UWP game in C++ and DirectX</source>
          <target state="new">Developing Marble Maze, a UWP game in C++ and DirectX</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>