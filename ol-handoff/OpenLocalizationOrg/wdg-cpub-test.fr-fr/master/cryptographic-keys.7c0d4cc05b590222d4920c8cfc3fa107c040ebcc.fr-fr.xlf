<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-48076a9" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7927b24c44f0c2941884d94f27576d4d1d90e4a3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">wdg-cpub-test\ndolci2\security\cryptographic-keys.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Cryptographic keys</source>
          <target state="new">Cryptographic keys</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This article shows how to use standard key derivation functions to derive keys and how to encrypt content using symmetric and asymmetric keys.</source>
          <target state="new">This article shows how to use standard key derivation functions to derive keys and how to encrypt content using symmetric and asymmetric keys.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Cryptographic keys</source>
          <target state="new">Cryptographic keys</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This article shows how to use standard key derivation functions to derive keys and how to encrypt content using symmetric and asymmetric keys.</source>
          <target state="new">This article shows how to use standard key derivation functions to derive keys and how to encrypt content using symmetric and asymmetric keys.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Symmetric keys</source>
          <target state="new">Symmetric keys</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Symmetric key encryption, also called secret key encryption, requires that the key used for encryption also be used for decryption.</source>
          <target state="new">Symmetric key encryption, also called secret key encryption, requires that the key used for encryption also be used for decryption.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can use a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SymmetricKeyAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241537)</ept> class to specify a symmetric algorithm and create or import a key.</source>
          <target state="new">You can use a <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SymmetricKeyAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241537)</ept> class to specify a symmetric algorithm and create or import a key.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use static methods on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicEngine<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241490)</ept> class to encrypt and decrypt data by using the algorithm and key.</source>
          <target state="new">You can use static methods on the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicEngine<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241490)</ept> class to encrypt and decrypt data by using the algorithm and key.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Symmetric key encryption typically uses block ciphers and block cipher modes.</source>
          <target state="new">Symmetric key encryption typically uses block ciphers and block cipher modes.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A block cipher is a symmetric encryption function that operates on fixed size blocks.</source>
          <target state="new">A block cipher is a symmetric encryption function that operates on fixed size blocks.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the message you want to encrypt is longer than the block length, you must use a block cipher mode.</source>
          <target state="new">If the message you want to encrypt is longer than the block length, you must use a block cipher mode.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A block cipher mode is a symmetric encryption function built by using a block cipher.</source>
          <target state="new">A block cipher mode is a symmetric encryption function built by using a block cipher.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It encrypts plaintext as a series of fixed size blocks.</source>
          <target state="new">It encrypts plaintext as a series of fixed size blocks.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following modes are supported for apps:</source>
          <target state="new">The following modes are supported for apps:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The ECB (electronic codebook) mode encrypts each block of the message separately.</source>
          <target state="new">The ECB (electronic codebook) mode encrypts each block of the message separately.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is not considered a secure encryption mode.</source>
          <target state="new">This is not considered a secure encryption mode.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The CBC (cipher block chaining) mode uses the previous ciphertext block to obfuscate the current block.</source>
          <target state="new">The CBC (cipher block chaining) mode uses the previous ciphertext block to obfuscate the current block.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You must determine what value to use for the first block.</source>
          <target state="new">You must determine what value to use for the first block.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This value is called the initialization vector (IV).</source>
          <target state="new">This value is called the initialization vector (IV).</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The CCM (counter with CBC-MAC) mode combines the CBC block cipher mode with a message authentication code (MAC).</source>
          <target state="new">The CCM (counter with CBC-MAC) mode combines the CBC block cipher mode with a message authentication code (MAC).</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The GCM (Galois counter mode) mode combines the counter encryption mode with the Galois authentication mode.</source>
          <target state="new">The GCM (Galois counter mode) mode combines the counter encryption mode with the Galois authentication mode.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Some modes such as CBC require that you use an initialization vector (IV) for the first ciphertext block.</source>
          <target state="new">Some modes such as CBC require that you use an initialization vector (IV) for the first ciphertext block.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following are common initialization vectors.</source>
          <target state="new">The following are common initialization vectors.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You specify the IV when calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicEngine.Encrypt<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241494)</ept>.</source>
          <target state="new">You specify the IV when calling <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicEngine.Encrypt<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241494)</ept>.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For most cases it is important that the IV never be reused with the same key.</source>
          <target state="new">For most cases it is important that the IV never be reused with the same key.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Fixed uses the same IV for all messages to be encrypted.</source>
          <target state="new">Fixed uses the same IV for all messages to be encrypted.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This leaks information and its use is not recommended.</source>
          <target state="new">This leaks information and its use is not recommended.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Counter increments the IV for each block.</source>
          <target state="new">Counter increments the IV for each block.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Random creates a pseudorandom IV.</source>
          <target state="new">Random creates a pseudorandom IV.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicBuffer.GenerateRandom<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241392)</ept> to create the IV.</source>
          <target state="new">You can use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CryptographicBuffer.GenerateRandom<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241392)</ept> to create the IV.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Nonce-Generated uses a unique number for each message to be encrypted.</source>
          <target state="new">Nonce-Generated uses a unique number for each message to be encrypted.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Typically, the nonce is a modified message or transaction identifier.</source>
          <target state="new">Typically, the nonce is a modified message or transaction identifier.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The nonce does not have to be kept secret, but it should never be reused under the same key.</source>
          <target state="new">The nonce does not have to be kept secret, but it should never be reused under the same key.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Most modes require that the length of the plaintext be an exact multiple of the block size.</source>
          <target state="new">Most modes require that the length of the plaintext be an exact multiple of the block size.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This usually requires that you pad the plaintext to obtain the appropriate length.</source>
          <target state="new">This usually requires that you pad the plaintext to obtain the appropriate length.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>While block ciphers encrypt fixed size blocks of data, stream ciphers are symmetric encryption functions that combine plaintext bits with a pseudorandom bit stream (called a key stream) to generate the ciphertext.</source>
          <target state="new">While block ciphers encrypt fixed size blocks of data, stream ciphers are symmetric encryption functions that combine plaintext bits with a pseudorandom bit stream (called a key stream) to generate the ciphertext.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Some block cipher modes such as output feedback mode (OTF) and counter mode (CTR) effectively turn a block cipher into a stream cipher.</source>
          <target state="new">Some block cipher modes such as output feedback mode (OTF) and counter mode (CTR) effectively turn a block cipher into a stream cipher.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Actual stream ciphers such as RC4, however, typically operate at higher speeds than block cipher modes are capable of achieving.</source>
          <target state="new">Actual stream ciphers such as RC4, however, typically operate at higher speeds than block cipher modes are capable of achieving.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SymmetricKeyAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241537)</ept> class to create a symmetric key and use it to encrypt and decrypt data.</source>
          <target state="new">The following example shows how to use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>SymmetricKeyAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241537)</ept> class to create a symmetric key and use it to encrypt and decrypt data.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Asymmetric keys</source>
          <target state="new">Asymmetric keys</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Asymmetric key cryptography, also called public key cryptography, uses a public key and a private key to perform encryption and decryption.</source>
          <target state="new">Asymmetric key cryptography, also called public key cryptography, uses a public key and a private key to perform encryption and decryption.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The keys are different but mathematically related.</source>
          <target state="new">The keys are different but mathematically related.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Typically the private key is kept secret and is used to encrypt data while the public key is distributed to interested parties and is used to decrypt data.</source>
          <target state="new">Typically the private key is kept secret and is used to encrypt data while the public key is distributed to interested parties and is used to decrypt data.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Asymmetric cryptography is also useful for signing data.</source>
          <target state="new">Asymmetric cryptography is also useful for signing data.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because asymmetric cryptography is much slower than symmetric cryptography, it is seldom used to encrypt large amounts of data directly.</source>
          <target state="new">Because asymmetric cryptography is much slower than symmetric cryptography, it is seldom used to encrypt large amounts of data directly.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Instead, it is typically used in the following manner to encrypt keys.</source>
          <target state="new">Instead, it is typically used in the following manner to encrypt keys.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Alice requires that Bob send her only encrypted messages.</source>
          <target state="new">Alice requires that Bob send her only encrypted messages.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Alice creates a private/public key pair, keeps her private key secret and publishes her public key.</source>
          <target state="new">Alice creates a private/public key pair, keeps her private key secret and publishes her public key.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Bob has a message he wants to send to Alice.</source>
          <target state="new">Bob has a message he wants to send to Alice.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Bob creates a symmetric key.</source>
          <target state="new">Bob creates a symmetric key.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Bob uses his new symmetric key to encrypt his message to Alice.</source>
          <target state="new">Bob uses his new symmetric key to encrypt his message to Alice.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Bob uses Alice’s public key to encrypt his symmetric key.</source>
          <target state="new">Bob uses Alice’s public key to encrypt his symmetric key.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Bob sends the encrypted message and the encrypted symmetric key to Alice (enveloped).</source>
          <target state="new">Bob sends the encrypted message and the encrypted symmetric key to Alice (enveloped).</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Alice uses her private key (from the private/public pair) to decrypt Bob’s symmetric key.</source>
          <target state="new">Alice uses her private key (from the private/public pair) to decrypt Bob’s symmetric key.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Alice uses Bob’s symmetric key to decrypt the message.</source>
          <target state="new">Alice uses Bob’s symmetric key to decrypt the message.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can use an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AsymmetricKeyAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241478)</ept> object to specify an asymmetric algorithm or a signing algorithm, to create or import an ephemeral key pair, or to import the public key portion of a key pair.</source>
          <target state="new">You can use an <bpt id="p1">[</bpt><bpt id="p2">**</bpt>AsymmetricKeyAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241478)</ept> object to specify an asymmetric algorithm or a signing algorithm, to create or import an ephemeral key pair, or to import the public key portion of a key pair.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Deriving keys</source>
          <target state="new">Deriving keys</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It is often necessary to derive additional keys from a shared secret.</source>
          <target state="new">It is often necessary to derive additional keys from a shared secret.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDerivationAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241518)</ept> class and one of the following specialized methods in the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyDerivationParameters<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br241524)</ept> class to derive keys.</source>
          <target state="new">You can use the <bpt id="p1">[</bpt><bpt id="p2">**</bpt>KeyDerivationAlgorithmProvider<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/br241518)</ept> class and one of the following specialized methods in the <bpt id="p3">[</bpt><bpt id="p4">**</bpt>KeyDerivationParameters<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/br241524)</ept> class to derive keys.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>BuildForPbkdf2</source>
          <target state="new">BuildForPbkdf2</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Creates a KeyDerivationParameters object for use in the password-based key derivation function 2 (PBKDF2).</source>
          <target state="new">Creates a KeyDerivationParameters object for use in the password-based key derivation function 2 (PBKDF2).</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>BuildForSP800108</source>
          <target state="new">BuildForSP800108</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Creates a KeyDerivationParameters object for use in a counter mode, hash-based message authentication code (HMAC) key derivation function.</source>
          <target state="new">Creates a KeyDerivationParameters object for use in a counter mode, hash-based message authentication code (HMAC) key derivation function.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>BuildForSP80056a</source>
          <target state="new">BuildForSP80056a</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Creates a KeyDerivationParameters object for use in the SP800-56A key derivation function.</source>
          <target state="new">Creates a KeyDerivationParameters object for use in the SP800-56A key derivation function.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>