<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="ru-ru" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">3495e4aa7b612a8e1a394afeb02f42f62eb7716d</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.ContentId: 347fa279-d588-4094-90ec-8c2fc241f5b6</source>
          <target xml:space="preserve">ms.ContentId: 347fa279-d588-4094-90ec-8c2fc241f5b6</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Manage Windows Server Containers with Docker</source>
          <target xml:space="preserve">title: Manage Windows Server Containers with Docker</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">Quick Start: Windows Server Containers and Docker</source>
          <target xml:space="preserve">Quick Start: Windows Server Containers and Docker</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">12-Nov update.</source>
          <target xml:space="preserve">12-Nov update.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">This article will walk through the fundamentals of managing windows Server Containers with Docker.</source>
          <target xml:space="preserve">This article will walk through the fundamentals of managing windows Server Containers with Docker.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">Items covered will include creating Windows Server Containers and Windows Server Container Images, removing Windows Server Containers and Container Images and finally deploying an application into a Windows Server Container.</source>
          <target xml:space="preserve">Items covered will include creating Windows Server Containers and Windows Server Container Images, removing Windows Server Containers and Container Images and finally deploying an application into a Windows Server Container.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">The lessons learned in this walkthrough should enable you to begin exploring deployment and management of Windows Server Containers using Docker.</source>
          <target xml:space="preserve">The lessons learned in this walkthrough should enable you to begin exploring deployment and management of Windows Server Containers using Docker.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Have questions?</source>
          <target xml:space="preserve">Have questions?</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://social.msdn.microsoft.com/Forums/en-US/home?forum=windowscontainers)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Ask them on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Containers forum</pc>.</source>
          <target xml:space="preserve">Ask them on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Containers forum</pc>.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc> Windows Containers created with PowerShell can not currently be managed with Docker and visa versa.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc> Windows Containers created with PowerShell can not currently be managed with Docker and visa versa.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./manage_powershell.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To create containers with PowerShell, see  <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quick Start: Windows Server Containers and PowerShell</pc>.</source>
          <target xml:space="preserve">To create containers with PowerShell, see  <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quick Start: Windows Server Containers and PowerShell</pc>.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../about/faq.md#WhydoIhavetopickbetweenDockerandPowerShellforWindowsServerContainermanagement)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you want to know more, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">read the FAQ</pc>.</source>
          <target xml:space="preserve">If you want to know more, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">read the FAQ</pc>.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Prerequisites</source>
          <target xml:space="preserve">Prerequisites</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">In order to complete this walkthrough the following items need to be in place.</source>
          <target xml:space="preserve">In order to complete this walkthrough the following items need to be in place.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Windows Server 2016 TP3 or later configured with the Windows Server Container Feature.</source>
          <target xml:space="preserve">Windows Server 2016 TP3 or later configured with the Windows Server Container Feature.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">If you have completed the setup guide, this is the VM that was created in Azure or Hyper-V.</source>
          <target xml:space="preserve">If you have completed the setup guide, this is the VM that was created in Azure or Hyper-V.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">This system must be connected to a network and able to access the internet.</source>
          <target xml:space="preserve">This system must be connected to a network and able to access the internet.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./azure_setup.md)</data>
          <data id="id3">[</data>
          <data id="id4">](./container_setup.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you need to configure the container feature, see the following guides: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Container Setup in Azure</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Container Setup in Hyper-V</pc>.</source>
          <target xml:space="preserve">If you need to configure the container feature, see the following guides: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Container Setup in Azure</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Container Setup in Hyper-V</pc>.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Basic Container Management with Docker</source>
          <target xml:space="preserve">Basic Container Management with Docker</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">This first example will walk through the basics of creating and removing Windows Server Containers and Windows Server Container Images with Docker.</source>
          <target xml:space="preserve">This first example will walk through the basics of creating and removing Windows Server Containers and Windows Server Container Images with Docker.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">To begin the walk through, log into your Windows Server Container Host System, you will see a Windows command prompt.</source>
          <target xml:space="preserve">To begin the walk through, log into your Windows Server Container Host System, you will see a Windows command prompt.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">`powershell`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Start a PowerShell session by typing <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">Start a PowerShell session by typing <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">`C:\directory&gt;`</data>
          <data id="id2">`PS C:\directory&gt;`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You will know that you are in a PowerShell session when the prompt changes from <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" />.</source>
          <target xml:space="preserve">You will know that you are in a PowerShell session when the prompt changes from <ph dataRef="id1" id="ph1" /> to <ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">This quick start will be focused on Docker commands however some steps such as managing firewall rules and copying files will be run with PowerShell commands.</source>
          <target xml:space="preserve">This quick start will be focused on Docker commands however some steps such as managing firewall rules and copying files will be run with PowerShell commands.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">Work through this walkthrough from a PowerShell session.</source>
          <target xml:space="preserve">Work through this walkthrough from a PowerShell session.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">`ipconfig`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Next make sure that your system has a valid IP Address using <ph dataRef="id1" id="ph1" /> and take note of this address for later use.</source>
          <target xml:space="preserve">Next make sure that your system has a valid IP Address using <ph dataRef="id1" id="ph1" /> and take note of this address for later use.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">`ipconfig`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you are working from an Azure VM instead of using <ph dataRef="id1" id="ph1" /> you will need to get the public IP address of the Azure Virtual Machine.</source>
          <target xml:space="preserve">If you are working from an Azure VM instead of using <ph dataRef="id1" id="ph1" /> you will need to get the public IP address of the Azure Virtual Machine.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Step 1 - Create a New Container</source>
          <target xml:space="preserve">Step 1 - Create a New Container</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">Before creating a Windows Server Container with Docker you will need the name or ID of an exsisitng Windows Server Container image.</source>
          <target xml:space="preserve">Before creating a Windows Server Container with Docker you will need the name or ID of an exsisitng Windows Server Container image.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">`docker images`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To see all images loaded on the container host use the <ph dataRef="id1" id="ph1" /> command.</source>
          <target xml:space="preserve">To see all images loaded on the container host use the <ph dataRef="id1" id="ph1" /> command.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">`docker run`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Now, use <ph dataRef="id1" id="ph1" /> To create a new Windows Server Container.</source>
          <target xml:space="preserve">Now, use <ph dataRef="id1" id="ph1" /> To create a new Windows Server Container.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">This command as seen below will instruct the Docker daemon to create a new container named ‘dockerdemo’ from the image ‘windowsservercore’ and open an interactive (-it) console session (cmd) with the container.</source>
          <target xml:space="preserve">This command as seen below will instruct the Docker daemon to create a new container named ‘dockerdemo’ from the image ‘windowsservercore’ and open an interactive (-it) console session (cmd) with the container.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">When the command completes you will be working in a console session on the container.</source>
          <target xml:space="preserve">When the command completes you will be working in a console session on the container.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">Working in a container is almost identical to working with Windows installed on a virtual or physical machine.</source>
          <target xml:space="preserve">Working in a container is almost identical to working with Windows installed on a virtual or physical machine.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">`ipconfig`</data>
          <data id="id2">`mkdir`</data>
          <data id="id3">`powershell`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can run commands such as <ph dataRef="id1" id="ph1" /> to return the IP address of the container, <ph dataRef="id2" id="ph2" /> to create a new directory, or <ph dataRef="id3" id="ph3" /> to start a PowerShell session.</source>
          <target xml:space="preserve">You can run commands such as <ph dataRef="id1" id="ph1" /> to return the IP address of the container, <ph dataRef="id2" id="ph2" /> to create a new directory, or <ph dataRef="id3" id="ph3" /> to start a PowerShell session.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">Go ahead and make a change to the container such as creating a file or folder.</source>
          <target xml:space="preserve">Go ahead and make a change to the container such as creating a file or folder.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">For example, the following command will create a file which contains network configuration data about the container.</source>
          <target xml:space="preserve">For example, the following command will create a file which contains network configuration data about the container.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">You can read the contents of the file to ensure the command completed successfully.</source>
          <target xml:space="preserve">You can read the contents of the file to ensure the command completed successfully.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">Notice that the IP address contained in the text file matches that of the container.</source>
          <target xml:space="preserve">Notice that the IP address contained in the text file matches that of the container.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">Now that the container has been modified, run the following to stop the console session placing you back in the console session of the container host.</source>
          <target xml:space="preserve">Now that the container has been modified, run the following to stop the console session placing you back in the console session of the container host.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">`docker ps –a`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Finally to see a list of containers on the container host use the <ph dataRef="id1" id="ph1" /> command.</source>
          <target xml:space="preserve">Finally to see a list of containers on the container host use the <ph dataRef="id1" id="ph1" /> command.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">Notice from the output that a container named 'dockerdemo' has been created.</source>
          <target xml:space="preserve">Notice from the output that a container named 'dockerdemo' has been created.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">Step 2 - Create a New Container Image</source>
          <target xml:space="preserve">Step 2 - Create a New Container Image</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">An image can now be made from this container.</source>
          <target xml:space="preserve">An image can now be made from this container.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">This image will behave like a snapshot of the container and can be re-deployed many times.</source>
          <target xml:space="preserve">This image will behave like a snapshot of the container and can be re-deployed many times.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">To create a new image run the following.</source>
          <target xml:space="preserve">To create a new image run the following.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">This command instructs the Docker engine to create a new image named 'newcontainerimage' that will include all changes made to the 'deckerdemo' container.</source>
          <target xml:space="preserve">This command instructs the Docker engine to create a new image named 'newcontainerimage' that will include all changes made to the 'deckerdemo' container.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">`docker images`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To see all images on the host, run <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">To see all images on the host, run <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Notice that a new image has been created with the name 'newcontainerimage'.</source>
          <target xml:space="preserve">Notice that a new image has been created with the name 'newcontainerimage'.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">Step 3 - Create New Container From Image</source>
          <target xml:space="preserve">Step 3 - Create New Container From Image</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">Now that you have a custom container image, deploy a new container named 'newcontainer' from 'newcontainerimage' and open an interactive shell session with the container.</source>
          <target xml:space="preserve">Now that you have a custom container image, deploy a new container named 'newcontainer' from 'newcontainerimage' and open an interactive shell session with the container.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">Take a look at the c:\ drive of this new container and notice that the ipconfig.txt file is present.</source>
          <target xml:space="preserve">Take a look at the c:\ drive of this new container and notice that the ipconfig.txt file is present.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">Exit the newly created container to return to the container hosts console session.</source>
          <target xml:space="preserve">Exit the newly created container to return to the container hosts console session.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">This exercise has shown that an image taken from a modified container will include all modifications.</source>
          <target xml:space="preserve">This exercise has shown that an image taken from a modified container will include all modifications.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">While the example here was a simple file modification, the same would apply if you were to install software into the container such as a web server.</source>
          <target xml:space="preserve">While the example here was a simple file modification, the same would apply if you were to install software into the container such as a web server.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">Using these methods, custom images can be created that will deploy application ready containers.</source>
          <target xml:space="preserve">Using these methods, custom images can be created that will deploy application ready containers.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">Step 4 - Remove Containers and Images</source>
          <target xml:space="preserve">Step 4 - Remove Containers and Images</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">`docker rm`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To remove a container after it is no longer needed use the <ph dataRef="id1" id="ph1" /> command.</source>
          <target xml:space="preserve">To remove a container after it is no longer needed use the <ph dataRef="id1" id="ph1" /> command.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">The following command will remove the container name 'newcontainer'.</source>
          <target xml:space="preserve">The following command will remove the container name 'newcontainer'.</target>
        </segment>
      </unit>
      <unit id="160">
        <originalData>
          <data id="id1">`docker rmi`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To remove container images when they are no longer needed use the <ph dataRef="id1" id="ph1" /> command.</source>
          <target xml:space="preserve">To remove container images when they are no longer needed use the <ph dataRef="id1" id="ph1" /> command.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">You cannot remove an image if it is referenced by an existing container.</source>
          <target xml:space="preserve">You cannot remove an image if it is referenced by an existing container.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">The following command removes the container image named 'newcontainerimage'.</source>
          <target xml:space="preserve">The following command removes the container image named 'newcontainerimage'.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">Host a Web Server in a Container</source>
          <target xml:space="preserve">Host a Web Server in a Container</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">This next example will demonstrate a more practical use case for Windows Server Containers.</source>
          <target xml:space="preserve">This next example will demonstrate a more practical use case for Windows Server Containers.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">The steps included in this exercise will guide you through creating a web server container image that can be used for deploying web applications hosted inside of a Windows Server Container.</source>
          <target xml:space="preserve">The steps included in this exercise will guide you through creating a web server container image that can be used for deploying web applications hosted inside of a Windows Server Container.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">Step 1 - Download Web Server Software</source>
          <target xml:space="preserve">Step 1 - Download Web Server Software</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">Before creating a container image the web server software will need to be downloaded and staged on the container host.</source>
          <target xml:space="preserve">Before creating a container image the web server software will need to be downloaded and staged on the container host.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">We will be using the nginx for Windows software for this example.</source>
          <target xml:space="preserve">We will be using the nginx for Windows software for this example.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> that this step will require the container host to be connected to the internet.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> that this step will require the container host to be connected to the internet.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">If this step produces a connectivity or name resolution error check the network configuration of the container host.</source>
          <target xml:space="preserve">If this step produces a connectivity or name resolution error check the network configuration of the container host.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">Run the following command on the container host to create the directory structure that will be used for this example.</source>
          <target xml:space="preserve">Run the following command on the container host to create the directory structure that will be used for this example.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">Run this command on the container host to download the nginx software to 'c:\nginx-1.9.3.zip'.</source>
          <target xml:space="preserve">Run this command on the container host to download the nginx software to 'c:\nginx-1.9.3.zip'.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">Finally the following command will extract the nginx software to 'C:\build\nginx\source'.</source>
          <target xml:space="preserve">Finally the following command will extract the nginx software to 'C:\build\nginx\source'.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">Step 2 - Create Web Server Image</source>
          <target xml:space="preserve">Step 2 - Create Web Server Image</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">In the previous example, you manually created, updated and captured a container image.</source>
          <target xml:space="preserve">In the previous example, you manually created, updated and captured a container image.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">This example will demonstrate an automated method for creating container images using a Dockerfile.</source>
          <target xml:space="preserve">This example will demonstrate an automated method for creating container images using a Dockerfile.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">Dockerfiles contain instructions that the Docker engine uses to build and modify a container, and then commit the container to a container image.</source>
          <target xml:space="preserve">Dockerfiles contain instructions that the Docker engine uses to build and modify a container, and then commit the container to a container image.</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://docs.docker.com/reference/builder/)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information on dockerfiles, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dockerfile reference</pc>.</source>
          <target xml:space="preserve">For more information on dockerfiles, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Dockerfile reference</pc>.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">Use the following command to create an empty dockerfile.</source>
          <target xml:space="preserve">Use the following command to create an empty dockerfile.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">Open the dockerfile with notepad.</source>
          <target xml:space="preserve">Open the dockerfile with notepad.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">Copy and paste the following text into notepad, save the file and close notepad.</source>
          <target xml:space="preserve">Copy and paste the following text into notepad, save the file and close notepad.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">At this point the dockerfile will be in 'c:\build\nginx' and the nginx software extracted to 'c:\build\nginx\source'.</source>
          <target xml:space="preserve">At this point the dockerfile will be in 'c:\build\nginx' and the nginx software extracted to 'c:\build\nginx\source'.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">You are now ready to build the web server container image based on the instructions in the dockerfile.</source>
          <target xml:space="preserve">You are now ready to build the web server container image based on the instructions in the dockerfile.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">To do this, run the following command on the container host.</source>
          <target xml:space="preserve">To do this, run the following command on the container host.</target>
        </segment>
      </unit>
      <unit id="185">
        <originalData>
          <data id="id1">`C:\build\nginx`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This command instructs the docker engine to use the dockerfile located at <ph dataRef="id1" id="ph1" /> to create an image named 'nginx_windows'.</source>
          <target xml:space="preserve">This command instructs the docker engine to use the dockerfile located at <ph dataRef="id1" id="ph1" /> to create an image named 'nginx_windows'.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">The output will look similar to this:</source>
          <target xml:space="preserve">The output will look similar to this:</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">`docker images`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When completed, take a look at the images on the host using the <ph dataRef="id1" id="ph1" /> command.</source>
          <target xml:space="preserve">When completed, take a look at the images on the host using the <ph dataRef="id1" id="ph1" /> command.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source xml:space="preserve">You should see a new image named 'nginx_windows'.</source>
          <target xml:space="preserve">You should see a new image named 'nginx_windows'.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">Step 3 – Configure Networking for Container Application</source>
          <target xml:space="preserve">Step 3 – Configure Networking for Container Application</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source xml:space="preserve">Because you will be hosting a website inside of a container a few networking related configurations need to be made.</source>
          <target xml:space="preserve">Because you will be hosting a website inside of a container a few networking related configurations need to be made.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">First a firewall rule needs to be created on the container host that will allow access to the website.</source>
          <target xml:space="preserve">First a firewall rule needs to be created on the container host that will allow access to the website.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">In this example we will be accessing the site through port 80.</source>
          <target xml:space="preserve">In this example we will be accessing the site through port 80.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source xml:space="preserve">Run the following script to create this firewall rule.</source>
          <target xml:space="preserve">Run the following script to create this firewall rule.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source xml:space="preserve">This script can be copied into the VM.</source>
          <target xml:space="preserve">This script can be copied into the VM.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source xml:space="preserve">Next if you are working from Azure and have not already created a Virtual Machine endpoint you will need to create one now.</source>
          <target xml:space="preserve">Next if you are working from Azure and have not already created a Virtual Machine endpoint you will need to create one now.</target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]( https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-set-up-endpoints/)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information on Azure VM Endpoints see this article: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set up Azure VM Endpoints</pc>.</source>
          <target xml:space="preserve">For more information on Azure VM Endpoints see this article: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set up Azure VM Endpoints</pc>.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">Step 4 - Deploy Web Server Ready Container</source>
          <target xml:space="preserve">Step 4 - Deploy Web Server Ready Container</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">To deploy a Windows Server Container based off of the 'nginx_windows' container run the following command.</source>
          <target xml:space="preserve">To deploy a Windows Server Container based off of the 'nginx_windows' container run the following command.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">This will create a new container named 'nginxcontainer' and start an console session on the container.</source>
          <target xml:space="preserve">This will create a new container named 'nginxcontainer' and start an console session on the container.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">The –p 80:80 portion of this command creates a port mapping between port 80 on the host to port 80 on the container.</source>
          <target xml:space="preserve">The –p 80:80 portion of this command creates a port mapping between port 80 on the host to port 80 on the container.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source xml:space="preserve">Once working inside the container, the nginx web server can be started and web content staged.</source>
          <target xml:space="preserve">Once working inside the container, the nginx web server can be started and web content staged.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">To start the nginx web server, change to the nginx installation directory.</source>
          <target xml:space="preserve">To start the nginx web server, change to the nginx installation directory.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">Start the nginx web server.</source>
          <target xml:space="preserve">Start the nginx web server.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">Step 5 – Access the Container Hosted Website</source>
          <target xml:space="preserve">Step 5 – Access the Container Hosted Website</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source xml:space="preserve">With the web server container created, you can now checkout the application hosted in the container.</source>
          <target xml:space="preserve">With the web server container created, you can now checkout the application hosted in the container.</target>
        </segment>
      </unit>
      <unit id="206">
        <originalData>
          <data id="id1">`http://containerhost-ipaddress`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To do so, open up a browser on different machine and enter <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">To do so, open up a browser on different machine and enter <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source xml:space="preserve">Notice here that you will be browsing to the IP Address of the Container Host and not the container itself.</source>
          <target xml:space="preserve">Notice here that you will be browsing to the IP Address of the Container Host and not the container itself.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">If you are working from an Azure Virtual Machine this will be the public IP address or Cloud Service name.</source>
          <target xml:space="preserve">If you are working from an Azure Virtual Machine this will be the public IP address or Cloud Service name.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source xml:space="preserve">If everything has been correctly configured, you will see the nginx welcome page.</source>
          <target xml:space="preserve">If everything has been correctly configured, you will see the nginx welcome page.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source xml:space="preserve">At this point, feel free to update the website.</source>
          <target xml:space="preserve">At this point, feel free to update the website.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source xml:space="preserve">Copy in your own sample website, or run the following command in the container to replace the nginx welcome page with a ‘Hello World’ web page.</source>
          <target xml:space="preserve">Copy in your own sample website, or run the following command in the container to replace the nginx welcome page with a ‘Hello World’ web page.</target>
        </segment>
      </unit>
      <unit id="212">
        <originalData>
          <data id="id1">`http://containerhost-ipaddress`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">After the website has been updated, navigate back to <ph dataRef="id1" id="ph1" />.</source>
          <target xml:space="preserve">After the website has been updated, navigate back to <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="213">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">```Restart-Service docker```</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc> If you would like to change the Docker Daemon settings (such as to change the port it listens to, to connect to a container remotely), you will need to edit the file "C:\ProgramData\docker\runDockerDaemon.cmd" in the container, and then you will need to restart the service with PowerShell, using <ph dataRef="id3" id="ph1" />.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc> If you would like to change the Docker Daemon settings (such as to change the port it listens to, to connect to a container remotely), you will need to edit the file "C:\ProgramData\docker\runDockerDaemon.cmd" in the container, and then you will need to restart the service with PowerShell, using <ph dataRef="id3" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source xml:space="preserve">Video Walkthrough</source>
          <target xml:space="preserve">Video Walkthrough</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source xml:space="preserve">Next Steps</source>
          <target xml:space="preserve">Next Steps</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source xml:space="preserve">Now that you have containers set up and an introduction to the tools, go build your own containerized apps.</source>
          <target xml:space="preserve">Now that you have containers set up and an introduction to the tools, go build your own containerized apps.</target>
        </segment>
      </unit>
      <unit id="217">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Remember, this is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">preview</pc> there are bugs and we have a lot of work in progress.</source>
          <target xml:space="preserve">Remember, this is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">preview</pc> there are bugs and we have a lot of work in progress.</target>
        </segment>
      </unit>
      <unit id="218">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../about/work_in_progress.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">This page</pc> contains many of our known issues.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">This page</pc> contains many of our known issues.</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../about/work_in_progress.md#DockermanagementDockercommandsthatdontworkwithWindowsServerContainers)</data>
          <data id="id3">[</data>
          <data id="id4">](../about/work_in_progress.md#DockermanagementDockercommandsthatpartiallyworkwithWindowsServerContainers)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Be aware that there are some known Docker commands that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">don't work</pc> and some that only <pc dataRefEnd="id4" dataRefStart="id3" id="p2">partially work</pc></source>
          <target xml:space="preserve">Be aware that there are some known Docker commands that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">don't work</pc> and some that only <pc dataRefEnd="id4" dataRefStart="id3" id="p2">partially work</pc></target>
        </segment>
      </unit>
      <unit id="220">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://social.msdn.microsoft.com/Forums/en-US/home?forum=windowscontainers)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">We are also monitoring the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">forums</pc> very closely.</source>
          <target xml:space="preserve">We are also monitoring the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">forums</pc> very closely.</target>
        </segment>
      </unit>
      <unit id="221">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://github.com/Microsoft/Virtualization-Documentation/tree/master/windows-server-container-samples)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There are also pre-made samples on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GitHub</pc>.</source>
          <target xml:space="preserve">There are also pre-made samples on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GitHub</pc>.</target>
        </segment>
      </unit>
      <unit id="222">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../containers_welcome.md)</data>
          <data id="id3">
          </data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Back to Container Home</pc>
						<ph dataRef="id3" id="ph1" />
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Back to Container Home</pc>
						<ph dataRef="id3" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source xml:space="preserve">Known Issues for Current Release</source>
          <target xml:space="preserve">Known Issues for Current Release</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>