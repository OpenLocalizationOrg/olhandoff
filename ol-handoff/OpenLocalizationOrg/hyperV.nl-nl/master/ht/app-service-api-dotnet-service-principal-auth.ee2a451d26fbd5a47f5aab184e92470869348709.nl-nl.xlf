<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="nl-nl">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7825f7b22bc210124a2f7f698a844ff3ebdf76d</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Service principal authentication for API Apps in Azure App Service | Microsoft Azure</source>
          <target state="new">Service principal authentication for API Apps in Azure App Service | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to protect an API app in Azure App Service for service-to-service scenarios.</source>
          <target state="new">Learn how to protect an API app in Azure App Service for service-to-service scenarios.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Service principal authentication for API Apps in Azure App Service</source>
          <target state="new">Service principal authentication for API Apps in Azure App Service</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial shows how to use the authentication and authorization features of Azure App Service to protect an API app, and how to consume a protected API app on behalf of a service account.</source>
          <target state="new">This tutorial shows how to use the authentication and authorization features of Azure App Service to protect an API app, and how to consume a protected API app on behalf of a service account.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The authentication provider shown in the tutorial is Azure Active Directory, and both client and API are ASP.NET Web APIs running in API apps.</source>
          <target state="new">The authentication provider shown in the tutorial is Azure Active Directory, and both client and API are ASP.NET Web APIs running in API apps.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Authentication and authorization in App Service</source>
          <target state="new">Authentication and authorization in App Service</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For an introduction to authentication features used in this tutorial, see the previous tutorial in this series, <bpt id="p1">[</bpt>authentication and authorization for API Apps in Azure App Service<ept id="p1">](app-service-api-authentication.md)</ept>.</source>
          <target state="new">For an introduction to authentication features used in this tutorial, see the previous tutorial in this series, <bpt id="p1">[</bpt>authentication and authorization for API Apps in Azure App Service<ept id="p1">](app-service-api-authentication.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>How to follow this tutorial</source>
          <target state="new">How to follow this tutorial</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This tutorial builds on a sample application that you download and create an API app for in the <bpt id="p1">[</bpt>first tutorial of the API Apps and ASP.NET getting started series<ept id="p1">](app-service-api-dotnet-get-started.md)</ept>.</source>
          <target state="new">This tutorial builds on a sample application that you download and create an API app for in the <bpt id="p1">[</bpt>first tutorial of the API Apps and ASP.NET getting started series<ept id="p1">](app-service-api-dotnet-get-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The CompanyUsers.API sample project</source>
          <target state="new">The CompanyUsers.API sample project</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>ContactsList sample application<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept>, the CompanyUsers.API project is a simple Web API project that contains one Get method that returns a hard-coded list of contacts.</source>
          <target state="new">In the <bpt id="p1">[</bpt>ContactsList sample application<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept>, the CompanyUsers.API project is a simple Web API project that contains one Get method that returns a hard-coded list of contacts.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To demonstrate a service-to-service scenario, the Get method in  ContactsList.API calls the Get method in CompanyContacts.API and adds the contacts it gets back to whatever it has it in its own data store, then returns the combined list.</source>
          <target state="new">To demonstrate a service-to-service scenario, the Get method in  ContactsList.API calls the Get method in CompanyContacts.API and adds the contacts it gets back to whatever it has it in its own data store, then returns the combined list.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Here is the Get method in CompanyUsers.API.</source>
          <target state="new">Here is the Get method in CompanyUsers.API.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>And here is the Get method in ContactsList.API, showing how it calls CompanyContacts.API and adds the results to what it returns.</source>
          <target state="new">And here is the Get method in ContactsList.API, showing how it calls CompanyContacts.API and adds the results to what it returns.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(Some code is omitted for clarity here.)</source>
          <target state="new">(Some code is omitted for clarity here.)</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The client object returned by <ph id="ph1">`CompanyContactsAPIClientWithAuth()`</ph> in the code above is based on the generated client code but adds an authorization token to HTTP requests.</source>
          <target state="new">The client object returned by <ph id="ph1">`CompanyContactsAPIClientWithAuth()`</ph> in the code above is based on the generated client code but adds an authorization token to HTTP requests.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Create an API app in Azure and deploy the CompanyContacts.API project to it</source>
          <target state="new">Create an API app in Azure and deploy the CompanyContacts.API project to it</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the CompanyContacts.API project, and then click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the CompanyContacts.API project, and then click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Profile<ept id="p1">**</ept> step of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Microsoft Azure App Service<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Profile<ept id="p1">**</ept> step of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Microsoft Azure App Service<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Sign in to your Azure account if you have not already done so, or refresh your credentials if they're expired.</source>
          <target state="new">Sign in to your Azure account if you have not already done so, or refresh your credentials if they're expired.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, choose the Azure <bpt id="p2">**</bpt>Subscription<ept id="p2">**</ept> you want to use, and then click <bpt id="p3">**</bpt>New<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, choose the Azure <bpt id="p2">**</bpt>Subscription<ept id="p2">**</ept> you want to use, and then click <bpt id="p3">**</bpt>New<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Hosting<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Create App Service<ept id="p2">**</ept> dialog box, click <bpt id="p3">**</bpt>Change Type<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>API App<ept id="p4">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Hosting<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Create App Service<ept id="p2">**</ept> dialog box, click <bpt id="p3">**</bpt>Change Type<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>API App<ept id="p4">**</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Enter an <bpt id="p1">**</bpt>API App Name<ept id="p1">**</ept> that is unique in the <bpt id="p2">*</bpt>azurewebsites.net<ept id="p2">*</ept> domain.</source>
          <target state="new">Enter an <bpt id="p1">**</bpt>API App Name<ept id="p1">**</ept> that is unique in the <bpt id="p2">*</bpt>azurewebsites.net<ept id="p2">*</ept> domain.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Resource Group<ept id="p1">**</ept> drop-down, select the resource group that you have been using for these tutorials.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Resource Group<ept id="p1">**</ept> drop-down, select the resource group that you have been using for these tutorials.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App Service Plan<ept id="p1">**</ept> drop-down, select the plan that you have been using for these tutorials.</source>
          <target state="new">In the <bpt id="p1">**</bpt>App Service Plan<ept id="p1">**</ept> drop-down, select the plan that you have been using for these tutorials.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Visual Studio creates the API app and creates a publish profile that has all of the required settings for the new API app.</source>
          <target state="new">Visual Studio creates the API app and creates a publish profile that has all of the required settings for the new API app.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Publish<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Publish Web<ept id="p2">**</ept> wizard, click <bpt id="p3">**</bpt>Publish<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Visual Studio deploys the project to the new API app and opens a browser to the URL of the API app.</source>
          <target state="new">Visual Studio deploys the project to the new API app and opens a browser to the URL of the API app.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A "successfully created" page appears in the browser.</source>
          <target state="new">A "successfully created" page appears in the browser.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Close the browser.</source>
          <target state="new">Close the browser.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Update the generated client code in the ContactsList.API project</source>
          <target state="new">Update the generated client code in the ContactsList.API project</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The ContactsList.API project already has the generated client code, but you'll delete it and regenerate it from your own API app.</source>
          <target state="new">The ContactsList.API project already has the generated client code, but you'll delete it and regenerate it from your own API app.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In Visual Studio <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, in the ContactsList.API project, delete the <bpt id="p2">*</bpt>CompanyContactsAPI<ept id="p2">*</ept> folder.</source>
          <target state="new">In Visual Studio <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, in the ContactsList.API project, delete the <bpt id="p2">*</bpt>CompanyContactsAPI<ept id="p2">*</ept> folder.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Right-click the ContactsList.API project, and then click <bpt id="p1">**</bpt>Add &gt; REST API Client<ept id="p1">**</ept>.</source>
          <target state="new">Right-click the ContactsList.API project, and then click <bpt id="p1">**</bpt>Add &gt; REST API Client<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add REST API Client<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>Download from Microsoft Azure API App<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Browse<ept id="p3">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Add REST API Client<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>Download from Microsoft Azure API App<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Browse<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, expand the resource group that you're using for this tutorial, and then select the API app that you just created.</source>
          <target state="new">In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, expand the resource group that you're using for this tutorial, and then select the API app that you just created.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you don't see the API app in the list, chances are that when you were creating the API app you accidentally omitted the step that changed the type from web app to API app.</source>
          <target state="new">If you don't see the API app in the list, chances are that when you were creating the API app you accidentally omitted the step that changed the type from web app to API app.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In that case, you can create a new API app by repeating the steps you did earlier.</source>
          <target state="new">In that case, you can create a new API app by repeating the steps you did earlier.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You'll need to choose a different name for the API app, unless you go to the portal and delete the web app first.</source>
          <target state="new">You'll need to choose a different name for the API app, unless you go to the portal and delete the web app first.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add REST API Client<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Add REST API Client<ept id="p1">**</ept> dialog box, click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Visual Studio creates a folder named after the API app and generates client classes.</source>
          <target state="new">Visual Studio creates a folder named after the API app and generates client classes.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Update code in ContactsList.API and deploy the project</source>
          <target state="new">Update code in ContactsList.API and deploy the project</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The code in ContactsList.API that calls CompanyContacts.API is commented out for the earlier tutorials.</source>
          <target state="new">The code in ContactsList.API that calls CompanyContacts.API is commented out for the earlier tutorials.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this section you uncomment that code and deploy the app.</source>
          <target state="new">In this section you uncomment that code and deploy the app.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the ContactsList.API project, open <bpt id="p1">*</bpt>Controllers/ContactsController.cs<ept id="p1">*</ept>.</source>
          <target state="new">In the ContactsList.API project, open <bpt id="p1">*</bpt>Controllers/ContactsController.cs<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Near the top of the <ph id="ph1">`ContactsController`</ph> class, in the code that uses the generated client class to add an authorization token, replace the class name <ph id="ph2">`CompanyContactsAPI`</ph> with the name of the class generated from your API app.</source>
          <target state="new">Near the top of the <ph id="ph1">`ContactsController`</ph> class, in the code that uses the generated client class to add an authorization token, replace the class name <ph id="ph2">`CompanyContactsAPI`</ph> with the name of the class generated from your API app.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, if your API app is named CompanyContactsAPI3, the code would look like this:</source>
          <target state="new">For example, if your API app is named CompanyContactsAPI3, the code would look like this:</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Get`</ph> method, uncomment the block of code that calls CompanyContacts.API.</source>
          <target state="new">In the <ph id="ph1">`Get`</ph> method, uncomment the block of code that calls CompanyContacts.API.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Right-click the ContactsList.API project, and click <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept>.</source>
          <target state="new">Right-click the ContactsList.API project, and click <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard opens to the publish profile you used earlier.</source>
          <target state="new">The <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard opens to the publish profile you used earlier.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard, click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard, click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Visual Studio deploys the project and opens a browser window to the API app base URL.</source>
          <target state="new">Visual Studio deploys the project and opens a browser window to the API app base URL.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Close this browser window.</source>
          <target state="new">Close this browser window.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Set up authentication and authorization in Azure for the new API app</source>
          <target state="new">Set up authentication and authorization in Azure for the new API app</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>, navigate to the API App blade of the API app that you created in this tutorial for the CompanyContacts.API project, and then click <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>, navigate to the API App blade of the API app that you created in this tutorial for the CompanyContacts.API project, and then click <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Find the <bpt id="p1">**</bpt>Features<ept id="p1">**</ept> section, and then click <bpt id="p2">**</bpt>Authentication / Authorization<ept id="p2">**</ept>.</source>
          <target state="new">Find the <bpt id="p1">**</bpt>Features<ept id="p1">**</ept> section, and then click <bpt id="p2">**</bpt>Authentication / Authorization<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Authentication / Authorization<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>On<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Authentication / Authorization<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>On<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Action to take when request is not authenticated<ept id="p1">**</ept> drop-down list, select <bpt id="p2">**</bpt>Log in with Azure Active Directory<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Action to take when request is not authenticated<ept id="p1">**</ept> drop-down list, select <bpt id="p2">**</bpt>Log in with Azure Active Directory<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Authentication Providers<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Azure Active Directory<ept id="p2">**</ept>.</source>
          <target state="new">Under <bpt id="p1">**</bpt>Authentication Providers<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Azure Active Directory<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Azure Active Directory Settings<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Express<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Azure Active Directory Settings<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Express<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Azure will automatically create an AAD application in your AAD tenant.</source>
          <target state="new">Azure will automatically create an AAD application in your AAD tenant.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Make a note of the name of the new AAD application, as you'll select it later when you go to the Azure classic portal to get its client ID.</source>
          <target state="new">Make a note of the name of the new AAD application, as you'll select it later when you go to the Azure classic portal to get its client ID.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Authentication / Authorization<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Authentication / Authorization<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>Azure classic portal<ept id="p1">](https://manage.windowsazure.com/)</ept>, go to <bpt id="p2">**</bpt>Azure Active Directory<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">[</bpt>Azure classic portal<ept id="p1">](https://manage.windowsazure.com/)</ept>, go to <bpt id="p2">**</bpt>Azure Active Directory<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Directory<ept id="p1">**</ept> tab, click your AAD tenant.</source>
          <target state="new">On the <bpt id="p1">**</bpt>Directory<ept id="p1">**</ept> tab, click your AAD tenant.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Applications &gt; Application my company owns<ept id="p1">**</ept>, and then click the check mark.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Applications &gt; Application my company owns<ept id="p1">**</ept>, and then click the check mark.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the list of applications, click the name of the one that Azure created for you when you enabled authentication for your API app.</source>
          <target state="new">In the list of applications, click the name of the one that Azure created for you when you enabled authentication for your API app.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Keep this page open so you can copy and paste values from it and update values on the page in later steps of the tutorial.</source>
          <target state="new">Keep this page open so you can copy and paste values from it and update values on the page in later steps of the tutorial.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Update settings in the API app that runs the ContactsList.API project code</source>
          <target state="new">Update settings in the API app that runs the ContactsList.API project code</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In another browser window go to the <bpt id="p1">[</bpt>classic Azure portal<ept id="p1">](https://manage.windowsazure.com/)</ept>, and then go to the <bpt id="p2">**</bpt>Configure<ept id="p2">**</ept> tab for the AAD application that you created for the ContactsList.API API app.</source>
          <target state="new">In another browser window go to the <bpt id="p1">[</bpt>classic Azure portal<ept id="p1">](https://manage.windowsazure.com/)</ept>, and then go to the <bpt id="p2">**</bpt>Configure<ept id="p2">**</ept> tab for the AAD application that you created for the ContactsList.API API app.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>keys<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>1 year<ept id="p2">**</ept> from the <bpt id="p3">**</bpt>Select duration<ept id="p3">**</ept> drop-down list.</source>
          <target state="new">Under <bpt id="p1">**</bpt>keys<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>1 year<ept id="p2">**</ept> from the <bpt id="p3">**</bpt>Select duration<ept id="p3">**</ept> drop-down list.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Copy the key value.</source>
          <target state="new">Copy the key value.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In another browser window, go to the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>, and then navigate to the API app blade for the API app that you deployed the ContactsList.API project to.</source>
          <target state="new">In another browser window, go to the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>, and then navigate to the API app blade for the API app that you deployed the ContactsList.API project to.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>(This is the calling API app, not the one being called: ContactsList.API, not CompanyContacts.API.)</source>
          <target state="new">(This is the calling API app, not the one being called: ContactsList.API, not CompanyContacts.API.)</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Settings &gt; Application Settings<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Settings &gt; Application Settings<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App settings<ept id="p1">**</ept> section, add a key named "ida:ClientSecret", and in the value field paste in the key you just created.</source>
          <target state="new">In the <bpt id="p1">**</bpt>App settings<ept id="p1">**</ept> section, add a key named "ida:ClientSecret", and in the value field paste in the key you just created.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Add a key named "ida:ClientId", and in the value field paste in the client ID from the same AAD <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> page.</source>
          <target state="new">Add a key named "ida:ClientId", and in the value field paste in the client ID from the same AAD <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> page.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Add a key named "ida:Authority", and in the value field enter "https://login.windows.net/{your tenant}"; for example,"https://login.windows.net/contoso.onmicrosoft.com".</source>
          <target state="new">Add a key named "ida:Authority", and in the value field enter "https://login.windows.net/{your tenant}"; for example,"https://login.windows.net/contoso.onmicrosoft.com".</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In the classic Azure portal, go to the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab for the AAD application that you created for the CompanyContacts.API API app.</source>
          <target state="new">In the classic Azure portal, go to the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab for the AAD application that you created for the CompanyContacts.API API app.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Copy the Client ID.</source>
          <target state="new">Copy the Client ID.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In the Azure portal <bpt id="p1">**</bpt>Application settings<ept id="p1">**</ept> blade, <bpt id="p2">**</bpt>App settings<ept id="p2">**</ept> section, add a key named ida:Resource, and in the value field paste in the Client ID you just copied.</source>
          <target state="new">In the Azure portal <bpt id="p1">**</bpt>Application settings<ept id="p1">**</ept> blade, <bpt id="p2">**</bpt>App settings<ept id="p2">**</ept> section, add a key named ida:Resource, and in the value field paste in the Client ID you just copied.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Add a key named "CompanyContactsAPIUrl", and in the value field enter "https://{your api app name}.azurewebsites.net", for example:  "https://companycontactsapi.azurewebsites.net."</source>
          <target state="new">Add a key named "CompanyContactsAPIUrl", and in the value field enter "https://{your api app name}.azurewebsites.net", for example:  "https://companycontactsapi.azurewebsites.net."</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Click Save.</source>
          <target state="new">Click Save.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Test in Azure</source>
          <target state="new">Test in Azure</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Go to the URL of the web app that you deployed the ContactsList.Angular.AAD project to.</source>
          <target state="new">Go to the URL of the web app that you deployed the ContactsList.Angular.AAD project to.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Contacts<ept id="p1">**</ept> tab, and then log in.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Contacts<ept id="p1">**</ept> tab, and then log in.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You see the Contacts page with the additional contacts that have been retrieved from the CompanyContacts.API API app.</source>
          <target state="new">You see the Contacts page with the additional contacts that have been retrieved from the CompanyContacts.API API app.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>As was true in the previous tutorial, you can also set up the Visual Studio projects with localhost SSL URLs and run the application locally.</source>
          <target state="new">As was true in the previous tutorial, you can also set up the Visual Studio projects with localhost SSL URLs and run the application locally.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In that case, you can store in the Web.config file the settings that you stored in Azure for running in Azure (client ID, client secret, etc.).</source>
          <target state="new">In that case, you can store in the Web.config file the settings that you stored in Azure for running in Azure (client ID, client secret, etc.).</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>However, be careful not to check in to source control a Web.config file that has sensitive information such as the client secret.</source>
          <target state="new">However, be careful not to check in to source control a Web.config file that has sensitive information such as the client secret.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Best practices for deploying passwords and other sensitive data to ASP.NET and Azure App Service<ept id="p1">](http://www.asp.net/identity/overview/features-api/best-practices-for-deploying-passwords-and-other-sensitive-data-to-aspnet-and-azure)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Best practices for deploying passwords and other sensitive data to ASP.NET and Azure App Service<ept id="p1">](http://www.asp.net/identity/overview/features-api/best-practices-for-deploying-passwords-and-other-sensitive-data-to-aspnet-and-azure)</ept>.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Protect the API app from browser access</source>
          <target state="new">Protect the API app from browser access</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For this tutorial you used the Express option in the Azure portal to set up AAD authentication for the API app that you want to access by using service principal authentication.</source>
          <target state="new">For this tutorial you used the Express option in the Azure portal to set up AAD authentication for the API app that you want to access by using service principal authentication.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>By default, App Service configures the new AAD application in a way that enables a user to go to the API app's URL in a browser and log on.</source>
          <target state="new">By default, App Service configures the new AAD application in a way that enables a user to go to the API app's URL in a browser and log on.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>That means it's possible for an end user, not just a service principal, to access the API.</source>
          <target state="new">That means it's possible for an end user, not just a service principal, to access the API.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If you only want a service principal to have access to the API, you can prevent browser access by changing the <bpt id="p1">**</bpt>Reply URL<ept id="p1">**</ept> in the AAD application so that it's different from the API app's base URL.</source>
          <target state="new">If you only want a service principal to have access to the API, you can prevent browser access by changing the <bpt id="p1">**</bpt>Reply URL<ept id="p1">**</ept> in the AAD application so that it's different from the API app's base URL.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Verify browser access works</source>
          <target state="new">Verify browser access works</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In a new browser window, go to the HTTPS URL of the API app that you created for the CompanyContacts.API project.</source>
          <target state="new">In a new browser window, go to the HTTPS URL of the API app that you created for the CompanyContacts.API project.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The browser goes to a login screen.</source>
          <target state="new">The browser goes to a login screen.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Log in with credentials for a user in your AAD tenant.</source>
          <target state="new">Log in with credentials for a user in your AAD tenant.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The browser displays the API app's "successfully created" screen.</source>
          <target state="new">The browser displays the API app's "successfully created" screen.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If the Swagger UI were enabled you would be able to go to the <ph id="ph1">`/swagger`</ph> URL and call the API.</source>
          <target state="new">If the Swagger UI were enabled you would be able to go to the <ph id="ph1">`/swagger`</ph> URL and call the API.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You can call the API from the browser by adding <ph id="ph1">`/api/contacts/get`</ph> to the URL.</source>
          <target state="new">You can call the API from the browser by adding <ph id="ph1">`/api/contacts/get`</ph> to the URL.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Disable browser access</source>
          <target state="new">Disable browser access</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In the classic portal's <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab for the AAD application that was created for the CompanyContacts.API project, change the value in the <bpt id="p2">**</bpt>Reply URL<ept id="p2">**</ept> field so that it is a valid URL but not the API app's URL.</source>
          <target state="new">In the classic portal's <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab for the AAD application that was created for the CompanyContacts.API project, change the value in the <bpt id="p2">**</bpt>Reply URL<ept id="p2">**</ept> field so that it is a valid URL but not the API app's URL.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Verify browser access no longer works</source>
          <target state="new">Verify browser access no longer works</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In a new browser window, go to the URL of the API app again.</source>
          <target state="new">In a new browser window, go to the URL of the API app again.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Log in when prompted to do so.</source>
          <target state="new">Log in when prompted to do so.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Login succeeds but leads to an error page.</source>
          <target state="new">Login succeeds but leads to an error page.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can still access the API app by using a service principal token, but users in the AAD tenant cannot log in and access the API from a browser.</source>
          <target state="new">You can still access the API app by using a service principal token, but users in the AAD tenant cannot log in and access the API from a browser.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This is the last tutorial in the getting started with API Apps series.</source>
          <target state="new">This is the last tutorial in the getting started with API Apps series.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This section offers additional suggestions for learning more about how to work with API apps.</source>
          <target state="new">This section offers additional suggestions for learning more about how to work with API apps.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Other ways to deploy an App Service app</source>
          <target state="new">Other ways to deploy an App Service app</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For information about other ways to deploy web projects to web apps, by using Visual Studio or by <bpt id="p1">[</bpt>automating deployment<ept id="p1">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/continuous-integration-and-continuous-delivery)</ept> from a <bpt id="p2">[</bpt>source control system<ept id="p2">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/source-control)</ept>, see <bpt id="p3">[</bpt>How to deploy an Azure web app<ept id="p3">](web-sites-deploy.md)</ept>.</source>
          <target state="new">For information about other ways to deploy web projects to web apps, by using Visual Studio or by <bpt id="p1">[</bpt>automating deployment<ept id="p1">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/continuous-integration-and-continuous-delivery)</ept> from a <bpt id="p2">[</bpt>source control system<ept id="p2">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/source-control)</ept>, see <bpt id="p3">[</bpt>How to deploy an Azure web app<ept id="p3">](web-sites-deploy.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Visual Studio can also generate Windows PowerShell scripts that you can use to automate deployment.</source>
          <target state="new">Visual Studio can also generate Windows PowerShell scripts that you can use to automate deployment.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Automate Everything (Building Real-World Cloud Apps with Azure)<ept id="p1">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/automate-everything)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Automate Everything (Building Real-World Cloud Apps with Azure)<ept id="p1">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/automate-everything)</ept>.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>How to troubleshoot an App Service app</source>
          <target state="new">How to troubleshoot an App Service app</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Visual Studio provides features that make it easy to view Azure logs as they are generated in real time.</source>
          <target state="new">Visual Studio provides features that make it easy to view Azure logs as they are generated in real time.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>You can also run in debug mode remotely in Azure.</source>
          <target state="new">You can also run in debug mode remotely in Azure.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Troubleshooting Azure web apps in Visual Studio<ept id="p1">](web-sites-dotnet-troubleshoot-visual-studio.md)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Troubleshooting Azure web apps in Visual Studio<ept id="p1">](web-sites-dotnet-troubleshoot-visual-studio.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>How to add a custom domain name and SSL</source>
          <target state="new">How to add a custom domain name and SSL</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For information about how to use SSL and your own domain (for example, www.contoso.com instead of contoso.azurewebsites.net), see the following resources:</source>
          <target state="new">For information about how to use SSL and your own domain (for example, www.contoso.com instead of contoso.azurewebsites.net), see the following resources:</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Configure a custom domain name in Azure App Service</source>
          <target state="new">Configure a custom domain name in Azure App Service</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Enable HTTPS for an Azure website</source>
          <target state="new">Enable HTTPS for an Azure website</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>