<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="nl-nl">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b3a1b5158f5826e7eceb1b7a12b62370f8e1ece</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Call a custom API in Logic Apps</source>
          <target state="new">Call a custom API in Logic Apps</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using your custom API hosted on App Service with Logic apps</source>
          <target state="new">Using your custom API hosted on App Service with Logic apps</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>&lt;tags</source>
          <target state="new">&lt;tags</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>ms.service="app-service-logic"</source>
          <target state="new">ms.service="app-service-logic"</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>ms.workload="integration"</source>
          <target state="new">ms.workload="integration"</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>ms.tgt_pltfrm="na"</source>
          <target state="new">ms.tgt_pltfrm="na"</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ms.devlang="na"</source>
          <target state="new">ms.devlang="na"</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using your custom API hosted on App Service with Logic apps</source>
          <target state="new">Using your custom API hosted on App Service with Logic apps</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Although Logic apps has a rich set of 40+ connectors for a variety of services, you may want to call into your own custom API that can run your own code.</source>
          <target state="new">Although Logic apps has a rich set of 40+ connectors for a variety of services, you may want to call into your own custom API that can run your own code.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>One of the easiest and most scalable ways to host your own custom Web API's is to use App Service.</source>
          <target state="new">One of the easiest and most scalable ways to host your own custom Web API's is to use App Service.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This article covers how to call into any Web API hosted in an App Service Web app.</source>
          <target state="new">This article covers how to call into any Web API hosted in an App Service Web app.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Deploy your Web App</source>
          <target state="new">Deploy your Web App</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>First, you'll need to deploy your API as a Web App in App Service.</source>
          <target state="new">First, you'll need to deploy your API as a Web App in App Service.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The instructions here cover basic deployment: <bpt id="p1">[</bpt>Create an ASP.NET web app<ept id="p1">](web-sites-dotnet-get-started.md)</ept>.</source>
          <target state="new">The instructions here cover basic deployment: <bpt id="p1">[</bpt>Create an ASP.NET web app<ept id="p1">](web-sites-dotnet-get-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Be sure to get the <bpt id="p1">**</bpt>URL<ept id="p1">**</ept> of your Web app - it appears in the <bpt id="p2">**</bpt>Essentials<ept id="p2">**</ept> at the top of the Web app.</source>
          <target state="new">Be sure to get the <bpt id="p1">**</bpt>URL<ept id="p1">**</ept> of your Web app - it appears in the <bpt id="p2">**</bpt>Essentials<ept id="p2">**</ept> at the top of the Web app.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Calling into the API</source>
          <target state="new">Calling into the API</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Start by creating a new blank Logic app.</source>
          <target state="new">Start by creating a new blank Logic app.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Once you have a blank Logic app created, click <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Triggers and actions<ept id="p2">**</ept> and select <bpt id="p3">**</bpt>Create from Scratch<ept id="p3">**</ept>.</source>
          <target state="new">Once you have a blank Logic app created, click <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Triggers and actions<ept id="p2">**</ept> and select <bpt id="p3">**</bpt>Create from Scratch<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>First, you'll probably want to use a recurrence trigger or click the <bpt id="p1">**</bpt>Run this logic manually<ept id="p1">**</ept>.</source>
          <target state="new">First, you'll probably want to use a recurrence trigger or click the <bpt id="p1">**</bpt>Run this logic manually<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Next, you'll want to actually make the call to your API.</source>
          <target state="new">Next, you'll want to actually make the call to your API.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To do this, click the green <bpt id="p1">**</bpt>HTTP<ept id="p1">**</ept> action on the right-hand side.</source>
          <target state="new">To do this, click the green <bpt id="p1">**</bpt>HTTP<ept id="p1">**</ept> action on the right-hand side.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Method<ept id="p1">**</ept> - this will be defined in your API's code</source>
          <target state="new">Choose the <bpt id="p1">**</bpt>Method<ept id="p1">**</ept> - this will be defined in your API's code</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>URL<ept id="p1">**</ept> section paste in the <bpt id="p2">**</bpt>URL<ept id="p2">**</ept> for your deployed Web app</source>
          <target state="new">In the <bpt id="p1">**</bpt>URL<ept id="p1">**</ept> section paste in the <bpt id="p2">**</bpt>URL<ept id="p2">**</ept> for your deployed Web app</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you require any <bpt id="p1">**</bpt>Headers<ept id="p1">**</ept> include them in JSON format like this: <ph id="ph1">`{"Content-type" : "application/json", "Accept" : "application/json" }`</ph></source>
          <target state="new">If you require any <bpt id="p1">**</bpt>Headers<ept id="p1">**</ept> include them in JSON format like this: <ph id="ph1">`{"Content-type" : "application/json", "Accept" : "application/json" }`</ph></target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If your API is public then you may leave <bpt id="p1">**</bpt>Authentication<ept id="p1">**</ept> blank.</source>
          <target state="new">If your API is public then you may leave <bpt id="p1">**</bpt>Authentication<ept id="p1">**</ept> blank.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you want to secure calls to your API see the following sections.</source>
          <target state="new">If you want to secure calls to your API see the following sections.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Finally, include the <bpt id="p1">**</bpt>Body<ept id="p1">**</ept> of the question that you defined in your API.</source>
          <target state="new">Finally, include the <bpt id="p1">**</bpt>Body<ept id="p1">**</ept> of the question that you defined in your API.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> in the command bar.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> in the command bar.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you click <bpt id="p1">**</bpt>Run now<ept id="p1">**</ept> you should see the call to your API and the response in the run list.</source>
          <target state="new">If you click <bpt id="p1">**</bpt>Run now<ept id="p1">**</ept> you should see the call to your API and the response in the run list.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This works great if you have a public API, but if you want to secure your API then there are a couple different ways to do that:</source>
          <target state="new">This works great if you have a public API, but if you want to secure your API then there are a couple different ways to do that:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>No code change required<ept id="p1">*</ept> - Azure Active Directory can be used to protect your API without requiring any code changes or redeployment.</source>
          <target state="new"><bpt id="p1">*</bpt>No code change required<ept id="p1">*</ept> - Azure Active Directory can be used to protect your API without requiring any code changes or redeployment.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Enforce Basic Auth, AAD Auth or Certificate Auth in the code of your API.</source>
          <target state="new">Enforce Basic Auth, AAD Auth or Certificate Auth in the code of your API.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Securing calls to your API without a code change</source>
          <target state="new">Securing calls to your API without a code change</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In this section, you’ll create two Azure Active Directory applications – one for your Logic App and one for your Web App.</source>
          <target state="new">In this section, you’ll create two Azure Active Directory applications – one for your Logic App and one for your Web App.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You’ll authenticate calls to your Web App using the service principal (client id and secret) associated with the AAD application for your Logic App.</source>
          <target state="new">You’ll authenticate calls to your Web App using the service principal (client id and secret) associated with the AAD application for your Logic App.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Finally, you'll include the application ID's in your Logic app definition.</source>
          <target state="new">Finally, you'll include the application ID's in your Logic app definition.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Part 1: Setting up an Application identity for your Logic app</source>
          <target state="new">Part 1: Setting up an Application identity for your Logic app</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This is what the Logic app will use to authenticate against active directory.</source>
          <target state="new">This is what the Logic app will use to authenticate against active directory.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You only <bpt id="p1">*</bpt>need<ept id="p1">*</ept> to do this once for your directory; for example, can choose to use the same identity for all of your Logic apps, although you may also create unique ones per Logic app if you wish.</source>
          <target state="new">You only <bpt id="p1">*</bpt>need<ept id="p1">*</ept> to do this once for your directory; for example, can choose to use the same identity for all of your Logic apps, although you may also create unique ones per Logic app if you wish.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can either do this in the UI or use PowerShell.</source>
          <target state="new">You can either do this in the UI or use PowerShell.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Create the application identity using the Azure classic portal</source>
          <target state="new">Create the application identity using the Azure classic portal</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Navigate to <bpt id="p1">[</bpt>Active directory in the Azure classic portal<ept id="p1">](https://manage.windowsazure.com/#Workspaces/ActiveDirectoryExtension/directory)</ept> and select the directory that you use for your Web App</source>
          <target state="new">Navigate to <bpt id="p1">[</bpt>Active directory in the Azure classic portal<ept id="p1">](https://manage.windowsazure.com/#Workspaces/ActiveDirectoryExtension/directory)</ept> and select the directory that you use for your Web App</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Applications<ept id="p1">**</ept> tab</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Applications<ept id="p1">**</ept> tab</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> in the command bar at the bottom of the page</source>
          <target state="new">Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> in the command bar at the bottom of the page</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Give your identity a Name to use, click the next arrow</source>
          <target state="new">Give your identity a Name to use, click the next arrow</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Put in a unique string formatted as a domain in the two text boxes, and click the checkmark</source>
          <target state="new">Put in a unique string formatted as a domain in the two text boxes, and click the checkmark</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab for this application</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab for this application</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Copy the <bpt id="p1">**</bpt>Client ID<ept id="p1">**</ept>, this will be used in your Logic app</source>
          <target state="new">Copy the <bpt id="p1">**</bpt>Client ID<ept id="p1">**</ept>, this will be used in your Logic app</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Keys<ept id="p1">**</ept> section click <bpt id="p2">**</bpt>Select duration<ept id="p2">**</ept> and choose either 1 year or 2 years</source>
          <target state="new">In the <bpt id="p1">**</bpt>Keys<ept id="p1">**</ept> section click <bpt id="p2">**</bpt>Select duration<ept id="p2">**</ept> and choose either 1 year or 2 years</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> button at the bottom of the screen (you may have to wait a few seconds)</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> button at the bottom of the screen (you may have to wait a few seconds)</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Now be sure to copy the key in the box.</source>
          <target state="new">Now be sure to copy the key in the box.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This will also be used in your Logic app</source>
          <target state="new">This will also be used in your Logic app</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Create the application identity using PowerShell</source>
          <target state="new">Create the application identity using PowerShell</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Be sure to copy the <bpt id="p1">**</bpt>Tenant ID<ept id="p1">**</ept>, the <bpt id="p2">**</bpt>Application ID<ept id="p2">**</ept> and the password you used</source>
          <target state="new">Be sure to copy the <bpt id="p1">**</bpt>Tenant ID<ept id="p1">**</ept>, the <bpt id="p2">**</bpt>Application ID<ept id="p2">**</ept> and the password you used</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Part 2: Protect your Web App with an AAD app identity</source>
          <target state="new">Part 2: Protect your Web App with an AAD app identity</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If your Web app is already deployed you can just enable it in the portal.</source>
          <target state="new">If your Web app is already deployed you can just enable it in the portal.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Otherwise, you can make enabling Authorization part of your Azure Resource manager deployment.</source>
          <target state="new">Otherwise, you can make enabling Authorization part of your Azure Resource manager deployment.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Enable Authorization in the Azure Portal</source>
          <target state="new">Enable Authorization in the Azure Portal</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Navigate to the Web app and click the <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept> in the command bar.</source>
          <target state="new">Navigate to the Web app and click the <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept> in the command bar.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Authorization/Authentication<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Authorization/Authentication<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Turn it <bpt id="p1">**</bpt>On<ept id="p1">**</ept>.</source>
          <target state="new">Turn it <bpt id="p1">**</bpt>On<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>At this point an Application will automatically be created for you.</source>
          <target state="new">At this point an Application will automatically be created for you.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You will need this Application's Client ID for Part 3, so you'll need to:</source>
          <target state="new">You will need this Application's Client ID for Part 3, so you'll need to:</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Go to <bpt id="p1">[</bpt>Active directory in the Azure classic portal<ept id="p1">](https://manage.windowsazure.com/#Workspaces/ActiveDirectoryExtension/directory)</ept> and select your directory.</source>
          <target state="new">Go to <bpt id="p1">[</bpt>Active directory in the Azure classic portal<ept id="p1">](https://manage.windowsazure.com/#Workspaces/ActiveDirectoryExtension/directory)</ept> and select your directory.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Search for the app in the search box</source>
          <target state="new">Search for the app in the search box</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Click on it in the list</source>
          <target state="new">Click on it in the list</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Click on the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab</source>
          <target state="new">Click on the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You should see the <bpt id="p1">**</bpt>Client ID<ept id="p1">**</ept></source>
          <target state="new">You should see the <bpt id="p1">**</bpt>Client ID<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Deploying your Web App using an ARM template</source>
          <target state="new">Deploying your Web App using an ARM template</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>First, you need to create an application for your Web app.</source>
          <target state="new">First, you need to create an application for your Web app.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This should be different from the application that is used for your Logic app.</source>
          <target state="new">This should be different from the application that is used for your Logic app.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Start by following the steps above in Part 1, but now for the <bpt id="p1">**</bpt>HomePage<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IdentifierUris<ept id="p2">**</ept> use the actual https://<bpt id="p3">**</bpt>URL<ept id="p3">**</ept> of your Web app.</source>
          <target state="new">Start by following the steps above in Part 1, but now for the <bpt id="p1">**</bpt>HomePage<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IdentifierUris<ept id="p2">**</ept> use the actual https://<bpt id="p3">**</bpt>URL<ept id="p3">**</ept> of your Web app.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>When you create the Application for your Web app, you must use the <bpt id="p1">[</bpt>Azure classic portal approach<ept id="p1">](https://manage.windowsazure.com/#Workspaces/ActiveDirectoryExtension/directory)</ept>, as the PowerShell commandlet does not set up the required permissions to sign users into a website.</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>When you create the Application for your Web app, you must use the <bpt id="p1">[</bpt>Azure classic portal approach<ept id="p1">](https://manage.windowsazure.com/#Workspaces/ActiveDirectoryExtension/directory)</ept>, as the PowerShell commandlet does not set up the required permissions to sign users into a website.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Once you have the client ID and tenant ID include the following as a sub resource  of the Web app in your deployment template :</source>
          <target state="new">Once you have the client ID and tenant ID include the following as a sub resource  of the Web app in your deployment template :</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To run a deployment automatically that deploys a blank Web app and Logic app together that use AAD click the following button:</source>
          <target state="new">To run a deployment automatically that deploys a blank Web app and Logic app together that use AAD click the following button:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![</ph>Deploy to Azure</source>
          <target state="new"><ph id="ph1">![</ph>Deploy to Azure</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For the complete template, see <bpt id="p1">[</bpt>Logic App calls into a Custom API hosted on App Service and protected by AAD<ept id="p1">](https://github.com/Azure/azure-quickstart-templates/blob/master/201-logic-app-custom-api/azuredeploy.json)</ept>.</source>
          <target state="new">For the complete template, see <bpt id="p1">[</bpt>Logic App calls into a Custom API hosted on App Service and protected by AAD<ept id="p1">](https://github.com/Azure/azure-quickstart-templates/blob/master/201-logic-app-custom-api/azuredeploy.json)</ept>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Part 3: Populate the Authorization section in the Logic app</source>
          <target state="new">Part 3: Populate the Authorization section in the Logic app</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Authorization<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>HTTP<ept id="p2">**</ept> action:</source>
          <target state="new">In the <bpt id="p1">**</bpt>Authorization<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>HTTP<ept id="p2">**</ept> action:</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="new">Element</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="new">type</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Type of authentication.</source>
          <target state="new">Type of authentication.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For ActiveDirectoryOAuth authentication, the value is ActiveDirectoryOAuth.</source>
          <target state="new">For ActiveDirectoryOAuth authentication, the value is ActiveDirectoryOAuth.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>tenant</source>
          <target state="new">tenant</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The tenant identifier used to identify the AD tenant.</source>
          <target state="new">The tenant identifier used to identify the AD tenant.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>audience</source>
          <target state="new">audience</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="new">Required.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The resource you are connecting to.</source>
          <target state="new">The resource you are connecting to.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>clientID</source>
          <target state="new">clientID</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The client identifier for the Azure AD application.</source>
          <target state="new">The client identifier for the Azure AD application.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>secret</source>
          <target state="new">secret</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="new">Required.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Secret of the client that is requesting the token.</source>
          <target state="new">Secret of the client that is requesting the token.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The above template already has this set up, but if you are authoring the Logic app directly you'll need to include the full authorization section.</source>
          <target state="new">The above template already has this set up, but if you are authoring the Logic app directly you'll need to include the full authorization section.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Securing your API in code</source>
          <target state="new">Securing your API in code</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Certificate auth</source>
          <target state="new">Certificate auth</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can use Client certificates to validate the incoming requests to your Web app.</source>
          <target state="new">You can use Client certificates to validate the incoming requests to your Web app.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How To Configure TLS Mutual Authentication for Web App<ept id="p1">](app-service-web-configure-tls-mutual-auth.md)</ept> for how to set up your code.</source>
          <target state="new">See <bpt id="p1">[</bpt>How To Configure TLS Mutual Authentication for Web App<ept id="p1">](app-service-web-configure-tls-mutual-auth.md)</ept> for how to set up your code.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">*</bpt>Authorization<ept id="p1">*</ept> section you should provide: <ph id="ph1">`{"type": "clientcertificate","password": "test","pfx": "long-pfx-key"}`</ph>.</source>
          <target state="new">In the <bpt id="p1">*</bpt>Authorization<ept id="p1">*</ept> section you should provide: <ph id="ph1">`{"type": "clientcertificate","password": "test","pfx": "long-pfx-key"}`</ph>.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="new">Element</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="new">type</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="new">Required.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Type of authentication.For SSL client certificates, the value must be ClientCertificate.</source>
          <target state="new">Type of authentication.For SSL client certificates, the value must be ClientCertificate.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>pfx</source>
          <target state="new">pfx</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="new">Required.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Base64-encoded contents of the PFX file.</source>
          <target state="new">Base64-encoded contents of the PFX file.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>password</source>
          <target state="new">password</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="new">Required.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Password to access the PFX file.</source>
          <target state="new">Password to access the PFX file.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Basic auth</source>
          <target state="new">Basic auth</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can use Basic authentication (e.g. username and password) to validate the incoming requests.</source>
          <target state="new">You can use Basic authentication (e.g. username and password) to validate the incoming requests.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Basic auth is a common pattern and you can do it in any language you build your app in.</source>
          <target state="new">Basic auth is a common pattern and you can do it in any language you build your app in.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">*</bpt>Authorization<ept id="p1">*</ept> section you should provide: <ph id="ph1">`{"type": "basic","username": "test","password": "test"}`</ph>.</source>
          <target state="new">In the <bpt id="p1">*</bpt>Authorization<ept id="p1">*</ept> section you should provide: <ph id="ph1">`{"type": "basic","username": "test","password": "test"}`</ph>.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="new">Element</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="new">type</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="new">Required.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Type of authentication.</source>
          <target state="new">Type of authentication.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For Basic authentication, the value must be Basic.</source>
          <target state="new">For Basic authentication, the value must be Basic.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>username</source>
          <target state="new">username</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="new">Required.</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Username to authenticate.</source>
          <target state="new">Username to authenticate.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>password</source>
          <target state="new">password</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Required.</source>
          <target state="new">Required.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Password to authenticate.</source>
          <target state="new">Password to authenticate.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Handle AAD auth in code</source>
          <target state="new">Handle AAD auth in code</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>By default, the Azure Active Directory authentication that you enable in the Portal does not do fine-grained authorization.</source>
          <target state="new">By default, the Azure Active Directory authentication that you enable in the Portal does not do fine-grained authorization.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For example, it does not lock your API to a specific user or app, but just to a particular tenant.</source>
          <target state="new">For example, it does not lock your API to a specific user or app, but just to a particular tenant.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>If you want to restrict the API to just the Logic app, for example, in code, you can extract the header which contains the JWT and check who the caller is, rejecting any requests that do not match.</source>
          <target state="new">If you want to restrict the API to just the Logic app, for example, in code, you can extract the header which contains the JWT and check who the caller is, rejecting any requests that do not match.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Going further, if you want to implement it entirely in your own code, and not leverage the Portal feature, you can read this article: <bpt id="p1">[</bpt>Use Active Directory for authentication in Azure App Service<ept id="p1">](web-sites-authentication-authorization.md)</ept>.</source>
          <target state="new">Going further, if you want to implement it entirely in your own code, and not leverage the Portal feature, you can read this article: <bpt id="p1">[</bpt>Use Active Directory for authentication in Azure App Service<ept id="p1">](web-sites-authentication-authorization.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You will still need to follow the above steps to create an Application identity for your Logic app and use that to call the API.</source>
          <target state="new">You will still need to follow the above steps to create an Application identity for your Logic app and use that to call the API.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>