<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="nl-nl">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_hi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94781e01694f56dded59327f09964de02a4fa916</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Build and deploy a Node.js API app in Azure App Service</source>
          <target state="new">Build and deploy a Node.js API app in Azure App Service</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to create a Node.js API app package and deploy it to Azure App Service.</source>
          <target state="new">Learn how to create a Node.js API app package and deploy it to Azure App Service.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Build and deploy a Node.js API app in Azure App Service</source>
          <target state="new">Build and deploy a Node.js API app in Azure App Service</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Node.js<ept id="p1">](nodejs.org)</ept> running on development machine (this sample assumes Node.js version 4.2.2 is installed)</source>
          <target state="new"><bpt id="p1">[</bpt>Node.js<ept id="p1">](nodejs.org)</ept> running on development machine (this sample assumes Node.js version 4.2.2 is installed)</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/)</ept> account</source>
          <target state="new"><bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/)</ept> account</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Microsoft Azure <bpt id="p1">[</bpt>free trial account<ept id="p1">](https://azure.microsoft.com/pricing/free-trial/)</ept></source>
          <target state="new">Microsoft Azure <bpt id="p1">[</bpt>free trial account<ept id="p1">](https://azure.microsoft.com/pricing/free-trial/)</ept></target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Git installed on your local development workstation</source>
          <target state="new">Git installed on your local development workstation</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Setup Instructions</source>
          <target state="new">Setup Instructions</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The commands below should be performed using the Node.js command line.</source>
          <target state="new">The commands below should be performed using the Node.js command line.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By using the Swaggerize Yo generator, you can scaffold the baseline Node.js code you'll need to service HTTP requests defined in a Swagger JSON file.</source>
          <target state="new">By using the Swaggerize Yo generator, you can scaffold the baseline Node.js code you'll need to service HTTP requests defined in a Swagger JSON file.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Install <bpt id="p1">**</bpt>yo<ept id="p1">**</ept> and the <bpt id="p2">**</bpt>generator-swaggerize<ept id="p2">**</ept> NPM modules globally.</source>
          <target state="new">Install <bpt id="p1">**</bpt>yo<ept id="p1">**</ept> and the <bpt id="p2">**</bpt>generator-swaggerize<ept id="p2">**</ept> NPM modules globally.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Clone the <bpt id="p1">[</bpt>GitHub repository containing the sample code<ept id="p1">](https://github.com/Azure-Samples/app-service-api-node-contact-list)</ept>.</source>
          <target state="new">Clone the <bpt id="p1">[</bpt>GitHub repository containing the sample code<ept id="p1">](https://github.com/Azure-Samples/app-service-api-node-contact-list)</ept>.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Execute the command to scaffold the API based on the <bpt id="p1">**</bpt>api.json<ept id="p1">**</ept> file included with the source code.</source>
          <target state="new">Execute the command to scaffold the API based on the <bpt id="p1">**</bpt>api.json<ept id="p1">**</ept> file included with the source code.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>api.json<ept id="p1">**</ept> file is a Swagger file representing the actual API you will scaffold using the "yo swaggerize" command during the next step.</source>
          <target state="new">The <bpt id="p1">**</bpt>api.json<ept id="p1">**</ept> file is a Swagger file representing the actual API you will scaffold using the "yo swaggerize" command during the next step.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> API.json is not the same thing as the <bpt id="p2">*</bpt>apiapp.json<ept id="p2">*</ept> file from the API Apps preview time frame.</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> API.json is not the same thing as the <bpt id="p2">*</bpt>apiapp.json<ept id="p2">*</ept> file from the API Apps preview time frame.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Swaggerize will scaffold the handlers and config for the Swagger metadata included in <bpt id="p1">**</bpt>api.json<ept id="p1">**</ept>.</source>
          <target state="new">Swaggerize will scaffold the handlers and config for the Swagger metadata included in <bpt id="p1">**</bpt>api.json<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>During the scaffolding proces you will be asked a variety of questions, like your GitHub username and email address.</source>
          <target state="new">During the scaffolding proces you will be asked a variety of questions, like your GitHub username and email address.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This information is used to generate the <bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> file in your application's folder.</source>
          <target state="new">This information is used to generate the <bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> file in your application's folder.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Of all the questions asked during the scaffolding process, the most important is that you select <bpt id="p1">**</bpt>express<ept id="p1">**</ept> when asked, as this sample will make use of the express view engine to generate the Swagger help page later when your API App is running in Azure (or locally).</source>
          <target state="new">Of all the questions asked during the scaffolding process, the most important is that you select <bpt id="p1">**</bpt>express<ept id="p1">**</ept> when asked, as this sample will make use of the express view engine to generate the Swagger help page later when your API App is running in Azure (or locally).</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Swaggerize Command Line</source>
          <target state="new">Swaggerize Command Line</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Move into the folder containing the scaffolded code (in this case, the <bpt id="p1">*</bpt>ContactList<ept id="p1">*</ept> subfolder).</source>
          <target state="new">Move into the folder containing the scaffolded code (in this case, the <bpt id="p1">*</bpt>ContactList<ept id="p1">*</ept> subfolder).</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Then, install the <bpt id="p1">**</bpt>jsonpath<ept id="p1">**</ept> NPM module.</source>
          <target state="new">Then, install the <bpt id="p1">**</bpt>jsonpath<ept id="p1">**</ept> NPM module.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You will see the results of the installation in the command-line experience.</source>
          <target state="new">You will see the results of the installation in the command-line experience.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Jsonpath Install</source>
          <target state="new">Jsonpath Install</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Install the <bpt id="p1">**</bpt>swaggerize-ui<ept id="p1">**</ept> NPM module.</source>
          <target state="new">Install the <bpt id="p1">**</bpt>swaggerize-ui<ept id="p1">**</ept> NPM module.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You will see the results of the installation in the command-line experience.</source>
          <target state="new">You will see the results of the installation in the command-line experience.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Swaggerize Ui Install</source>
          <target state="new">Swaggerize Ui Install</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Copy the <bpt id="p1">**</bpt>lib<ept id="p1">**</ept> folder from the <bpt id="p2">**</bpt>start<ept id="p2">**</ept> folder into the <bpt id="p3">**</bpt>ContactList<ept id="p3">**</ept> folder created by the scaffolder.</source>
          <target state="new">Copy the <bpt id="p1">**</bpt>lib<ept id="p1">**</ept> folder from the <bpt id="p2">**</bpt>start<ept id="p2">**</ept> folder into the <bpt id="p3">**</bpt>ContactList<ept id="p3">**</ept> folder created by the scaffolder.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Replace the code in the <bpt id="p1">**</bpt>handlers/contacts.js<ept id="p1">**</ept> file with the code below.</source>
          <target state="new">Replace the code in the <bpt id="p1">**</bpt>handlers/contacts.js<ept id="p1">**</ept> file with the code below.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This code uses the JSON data stored in the <bpt id="p1">**</bpt>lib/contacts.json<ept id="p1">**</ept> file that is served by <bpt id="p2">**</bpt>lib/contactRepository.js<ept id="p2">**</ept>.</source>
          <target state="new">This code uses the JSON data stored in the <bpt id="p1">**</bpt>lib/contacts.json<ept id="p1">**</ept> file that is served by <bpt id="p2">**</bpt>lib/contactRepository.js<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The new contats.js code below will respond to HTTP requests to get all of the contacts using this code.</source>
          <target state="new">The new contats.js code below will respond to HTTP requests to get all of the contacts using this code.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Replace the code in the <bpt id="p1">**</bpt>handlers/contacts/{id}.js<ept id="p1">**</ept> file with the code below, which will use <bpt id="p2">**</bpt>lib/contactRepository.js<ept id="p2">**</ept> to get the contact requested by the HTTP request and return it as a JSON payload.</source>
          <target state="new">Replace the code in the <bpt id="p1">**</bpt>handlers/contacts/{id}.js<ept id="p1">**</ept> file with the code below, which will use <bpt id="p2">**</bpt>lib/contactRepository.js<ept id="p2">**</ept> to get the contact requested by the HTTP request and return it as a JSON payload.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Replace the code in <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> with the code below.</source>
          <target state="new">Replace the code in <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> with the code below.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Note, the changes made to the server.js file are highlighted using comments so you can see the changes being made.</source>
          <target state="new">Note, the changes made to the server.js file are highlighted using comments so you can see the changes being made.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Activate the server using the Node.js command-line executable.</source>
          <target state="new">Activate the server using the Node.js command-line executable.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Executing this command will launch the Node.js HTTP server and start serving your API.</source>
          <target state="new">Executing this command will launch the Node.js HTTP server and start serving your API.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you browse to <bpt id="p1">**</bpt>http://localhost:8000/contacts<ept id="p1">**</ept> you will see the JSON output of the contact list (or be prompted to download it, depending on your browser).</source>
          <target state="new">When you browse to <bpt id="p1">**</bpt>http://localhost:8000/contacts<ept id="p1">**</ept> you will see the JSON output of the contact list (or be prompted to download it, depending on your browser).</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>All Contacts Api Call</source>
          <target state="new">All Contacts Api Call</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When you browse to <bpt id="p1">**</bpt>http://localhost:8000/contacts/2<ept id="p1">**</ept> you'll see the contact represented by that id value.</source>
          <target state="new">When you browse to <bpt id="p1">**</bpt>http://localhost:8000/contacts/2<ept id="p1">**</ept> you'll see the contact represented by that id value.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Specific Contact Api Call</source>
          <target state="new">Specific Contact Api Call</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The Swagger JSON data is served via the <bpt id="p1">**</bpt>/swagger<ept id="p1">**</ept> endpoint:</source>
          <target state="new">The Swagger JSON data is served via the <bpt id="p1">**</bpt>/swagger<ept id="p1">**</ept> endpoint:</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Contacts Swagger Json</source>
          <target state="new">Contacts Swagger Json</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The Swagger UI is served via the <bpt id="p1">**</bpt>/docs<ept id="p1">**</ept> endpoint.</source>
          <target state="new">The Swagger UI is served via the <bpt id="p1">**</bpt>/docs<ept id="p1">**</ept> endpoint.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the Swagger UI you can use the rich HTML client features to test out your API.</source>
          <target state="new">In the Swagger UI you can use the rich HTML client features to test out your API.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Swagger Ui</source>
          <target state="new">Swagger Ui</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Create a new API App in the Azure Portal</source>
          <target state="new">Create a new API App in the Azure Portal</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this section you'll walk through the process of creating a new, empty API App in Azure.</source>
          <target state="new">In this section you'll walk through the process of creating a new, empty API App in Azure.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Then, you'll wire up the app to a Git repository so you can enable continuous delivery of your code changes.</source>
          <target state="new">Then, you'll wire up the app to a Git repository so you can enable continuous delivery of your code changes.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The GitHub repository from which you cloned the source code is not the same repository you'll be pushing the code into for deployment.</source>
          <target state="new">The GitHub repository from which you cloned the source code is not the same repository you'll be pushing the code into for deployment.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The sample GitHub repository contained the "Start" state of the code, and now that you've scaffolded the "end" state of the code you'll need to push that code only into the Git repository associated with your API App.</source>
          <target state="new">The sample GitHub repository contained the "Start" state of the code, and now that you've scaffolded the "end" state of the code you'll need to push that code only into the Git repository associated with your API App.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The first step will be to create your API App using the Azure Portal, then you'll</source>
          <target state="new">The first step will be to create your API App using the Azure Portal, then you'll</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Browse to the <bpt id="p1">[</bpt>Azure Portal<ept id="p1">](http://portal.azure.com)</ept>.</source>
          <target state="new">Browse to the <bpt id="p1">[</bpt>Azure Portal<ept id="p1">](http://portal.azure.com)</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Create a new API App.</source>
          <target state="new">Create a new API App.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>New Api App Portal</source>
          <target state="new">New Api App Portal</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can either add your new API App to an existing Resource Group and/or App Service Plan, or you can create a new Resource Group and App Service Plan, as demonstrated in the screenshot below.</source>
          <target state="new">You can either add your new API App to an existing Resource Group and/or App Service Plan, or you can create a new Resource Group and App Service Plan, as demonstrated in the screenshot below.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Api App Creation Blade</source>
          <target state="new">Api App Creation Blade</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Once your API App has been created in the portal, browse to the blade containing the settings for your API App, as shown below.</source>
          <target state="new">Once your API App has been created in the portal, browse to the blade containing the settings for your API App, as shown below.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Portal Nav To Settings</source>
          <target state="new">Portal Nav To Settings</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Deployment credentials<ept id="p1">**</ept> navigation item in the Settings menu.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Deployment credentials<ept id="p1">**</ept> navigation item in the Settings menu.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Once the blade opens, add a username and password you'll use for publishing your Node.js code to your API App.</source>
          <target state="new">Once the blade opens, add a username and password you'll use for publishing your Node.js code to your API App.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Then, click the <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> button on the <bpt id="p2">**</bpt>Set deployment credentials<ept id="p2">**</ept> blade.</source>
          <target state="new">Then, click the <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> button on the <bpt id="p2">**</bpt>Set deployment credentials<ept id="p2">**</ept> blade.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Deployment Credentials</source>
          <target state="new">Deployment Credentials</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Once you've set your deployment credentials, you can create a Git repository that's associated with your App Service.</source>
          <target state="new">Once you've set your deployment credentials, you can create a Git repository that's associated with your App Service.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Each time you push code to this repository, Azure App Service will pick up your changes and deploy them directly to your API app instance.</source>
          <target state="new">Each time you push code to this repository, Azure App Service will pick up your changes and deploy them directly to your API app instance.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To create a Git repository to associate with your site, click the <bpt id="p1">**</bpt>Continuous Deployment<ept id="p1">**</ept> menu item in the Settings menu blade as shown below.</source>
          <target state="new">To create a Git repository to associate with your site, click the <bpt id="p1">**</bpt>Continuous Deployment<ept id="p1">**</ept> menu item in the Settings menu blade as shown below.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Then, select the <bpt id="p1">**</bpt>Local Git Repository<ept id="p1">**</ept> option in the <bpt id="p2">**</bpt>Choose source<ept id="p2">**</ept> blade.</source>
          <target state="new">Then, select the <bpt id="p1">**</bpt>Local Git Repository<ept id="p1">**</ept> option in the <bpt id="p2">**</bpt>Choose source<ept id="p2">**</ept> blade.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Then, click the OK button to create your Git repository.</source>
          <target state="new">Then, click the OK button to create your Git repository.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Create Git Repo</source>
          <target state="new">Create Git Repo</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Once your Git repository has been created the blade will change and show you your active deployments.</source>
          <target state="new">Once your Git repository has been created the blade will change and show you your active deployments.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Since the repository is new, you should have no active deployments in the list.</source>
          <target state="new">Since the repository is new, you should have no active deployments in the list.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>No Active Deployments</source>
          <target state="new">No Active Deployments</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The last step will be to copy the Git repository URL from the portal.</source>
          <target state="new">The last step will be to copy the Git repository URL from the portal.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To do this, navigate to the blade for your new API App and look at the <bpt id="p1">**</bpt>Essentials<ept id="p1">**</ept> section of the blade.</source>
          <target state="new">To do this, navigate to the blade for your new API App and look at the <bpt id="p1">**</bpt>Essentials<ept id="p1">**</ept> section of the blade.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You should see the <bpt id="p1">**</bpt>Git clone URL<ept id="p1">**</ept> in the Essentials section.</source>
          <target state="new">You should see the <bpt id="p1">**</bpt>Git clone URL<ept id="p1">**</ept> in the Essentials section.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Next to it is an icon that will copy the URL to your clipboard.</source>
          <target state="new">Next to it is an icon that will copy the URL to your clipboard.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Either click this to copy the URL (the button appears when you mouse over the URL), or select the entire URL and copy it to your clipboard.</source>
          <target state="new">Either click this to copy the URL (the button appears when you mouse over the URL), or select the entire URL and copy it to your clipboard.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Get The Git Url From The Portal</source>
          <target state="new">Get The Git Url From The Portal</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: You will need the Git clone URL in the next step so make sure to save it somewhere for the moment.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: You will need the Git clone URL in the next step so make sure to save it somewhere for the moment.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Now that you have a new API App with a Git repository backing it up, you can push code into the repository and utilize the continuous deployment features of Azure to automatically deploy your changes.</source>
          <target state="new">Now that you have a new API App with a Git repository backing it up, you can push code into the repository and utilize the continuous deployment features of Azure to automatically deploy your changes.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Deploy Your API App Code to Azure</source>
          <target state="new">Deploy Your API App Code to Azure</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Using the built-in continuous delivery features Azure App Service provides, you can simply commit your code to a Git repository associated with your App Service, and Azure will pick up your source code and deploy it to your API App.</source>
          <target state="new">Using the built-in continuous delivery features Azure App Service provides, you can simply commit your code to a Git repository associated with your App Service, and Azure will pick up your source code and deploy it to your API App.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Copy the <bpt id="p1">**</bpt>src/end/ContactList<ept id="p1">**</ept> folder created by the swaggerize scaffolder to your desktop or some other folder, as you'll be creating a new local Git repository for the code that should live outside the main repository you cloned from GitHub containing the getting-started code.</source>
          <target state="new">Copy the <bpt id="p1">**</bpt>src/end/ContactList<ept id="p1">**</ept> folder created by the swaggerize scaffolder to your desktop or some other folder, as you'll be creating a new local Git repository for the code that should live outside the main repository you cloned from GitHub containing the getting-started code.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Use the Node.js command line experience to navigate into the new folder.</source>
          <target state="new">Use the Node.js command line experience to navigate into the new folder.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Once there, execute the following command to create a new local Git repository.</source>
          <target state="new">Once there, execute the following command to create a new local Git repository.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This command will create a local Git repository, and you'll be shown a confirmation that your new repository was initialized.</source>
          <target state="new">This command will create a local Git repository, and you'll be shown a confirmation that your new repository was initialized.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>New Local Git Repo</source>
          <target state="new">New Local Git Repo</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Use the Node.js command line experience to execute the following command, which will add a Git remote to your local repository.</source>
          <target state="new">Use the Node.js command line experience to execute the following command, which will add a Git remote to your local repository.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The remote repository will be the one you just created and associated with your API App running in Azure.</source>
          <target state="new">The remote repository will be the one you just created and associated with your API App running in Azure.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: You will want to replace the string "YOUR_GIT_CLONE_URL_HERE" above with your own Git clone URL you copied earlier.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>: You will want to replace the string "YOUR_GIT_CLONE_URL_HERE" above with your own Git clone URL you copied earlier.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Next, execute the two commands below from the Node.js command line experience.</source>
          <target state="new">Next, execute the two commands below from the Node.js command line experience.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Once you've completed these two commands you should see something like the screenshot below in your command line window.</source>
          <target state="new">Once you've completed these two commands you should see something like the screenshot below in your command line window.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Git Commit Output</source>
          <target state="new">Git Commit Output</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To push your code to Azure, which will trigger a deployment to your API App, execute the following command in the Node.js command line.</source>
          <target state="new">To push your code to Azure, which will trigger a deployment to your API App, execute the following command in the Node.js command line.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When prompted for a password, use the password you used earlier when creating your Deployment Credential in the Azure portal.</source>
          <target state="new">When prompted for a password, use the password you used earlier when creating your Deployment Credential in the Azure portal.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If you navigate back to the <bpt id="p1">**</bpt>Continuous Deployment<ept id="p1">**</ept> blade for your API App, you'll see the deployment is occurring.</source>
          <target state="new">If you navigate back to the <bpt id="p1">**</bpt>Continuous Deployment<ept id="p1">**</ept> blade for your API App, you'll see the deployment is occurring.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Deployment Happening</source>
          <target state="new">Deployment Happening</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Simultaneously, the Node.js command line will reflect the status of your deployment while it is happening.</source>
          <target state="new">Simultaneously, the Node.js command line will reflect the status of your deployment while it is happening.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Node Js Deployment Happening</source>
          <target state="new">Node Js Deployment Happening</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Once the deployment has completed, the <bpt id="p1">**</bpt>Continous Deployment<ept id="p1">**</ept> blade will reflect the successful deployment of your code changes to your API App.</source>
          <target state="new">Once the deployment has completed, the <bpt id="p1">**</bpt>Continous Deployment<ept id="p1">**</ept> blade will reflect the successful deployment of your code changes to your API App.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Copy the <bpt id="p1">**</bpt>URL<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Essentials<ept id="p2">**</ept> section of your API App blade.</source>
          <target state="new">Copy the <bpt id="p1">**</bpt>URL<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Essentials<ept id="p2">**</ept> section of your API App blade.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Deployment Completed</source>
          <target state="new">Deployment Completed</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Using a REST API client such as Postman or Fiddler (or your web browser), provide the URL of your contacts API call, which should be the <bpt id="p1">**</bpt>/contacts<ept id="p1">**</ept> endpoint of your API App.</source>
          <target state="new">Using a REST API client such as Postman or Fiddler (or your web browser), provide the URL of your contacts API call, which should be the <bpt id="p1">**</bpt>/contacts<ept id="p1">**</ept> endpoint of your API App.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The URL will be something like http://myapiapp.azurewebsites.net/contacts</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The URL will be something like http://myapiapp.azurewebsites.net/contacts</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>When you issue a GET request to this endpoint you should see the JSON output of your API App.</source>
          <target state="new">When you issue a GET request to this endpoint you should see the JSON output of your API App.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Postman Hitting Api</source>
          <target state="new">Postman Hitting Api</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>At this point you've successfully created and deployed your first API App using Node.js.</source>
          <target state="new">At this point you've successfully created and deployed your first API App using Node.js.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The next tutorial in the API Apps getting started series shows how to <bpt id="p1">[</bpt>consume API apps from JavaScript clients, using CORS<ept id="p1">](app-service-api-cors-consume-javascript.md)</ept>.</source>
          <target state="new">The next tutorial in the API Apps getting started series shows how to <bpt id="p1">[</bpt>consume API apps from JavaScript clients, using CORS<ept id="p1">](app-service-api-cors-consume-javascript.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To build on this sample, you could add code to the handlers to store your data in a database or on the disk of your API App instance.</source>
          <target state="new">To build on this sample, you could add code to the handlers to store your data in a database or on the disk of your API App instance.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Now that you have the Continuous Deployment wired up, changing your API App's functionality and extending it is as easy as changing and pushing your code to your Git repository.</source>
          <target state="new">Now that you have the Continuous Deployment wired up, changing your API App's functionality and extending it is as easy as changing and pushing your code to your Git repository.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>