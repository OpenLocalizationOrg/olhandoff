<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="de-de">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92b98c1b94b63cb201bbf29a5cb99dff4ec02aa2</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>New schema version 2015-08-01-preview</source>
          <target state="new">New schema version 2015-08-01-preview</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to write the JSON definition for the latest version of Logic apps</source>
          <target state="new">Learn how to write the JSON definition for the latest version of Logic apps</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>New schema version 2015-08-01-preview</source>
          <target state="new">New schema version 2015-08-01-preview</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The new schema and API version for Logic apps has a number of improvements which improve the reliability and ease-of-use of Logic apps.</source>
          <target state="new">The new schema and API version for Logic apps has a number of improvements which improve the reliability and ease-of-use of Logic apps.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are 4 key differences:</source>
          <target state="new">There are 4 key differences:</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>APIApp<ept id="p1">**</ept> action type has been updated to a new <bpt id="p2">**</bpt>APIConnection<ept id="p2">**</ept> action type.</source>
          <target state="new">The <bpt id="p1">**</bpt>APIApp<ept id="p1">**</ept> action type has been updated to a new <bpt id="p2">**</bpt>APIConnection<ept id="p2">**</ept> action type.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Repeat<ept id="p1">**</ept> has been renamed to <bpt id="p2">**</bpt>Foreach<ept id="p2">**</ept>.</source>
          <target state="new"><bpt id="p1">**</bpt>Repeat<ept id="p1">**</ept> has been renamed to <bpt id="p2">**</bpt>Foreach<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>HTTP Listener<ept id="p1">**</ept> API app is no longer required.</source>
          <target state="new">The <bpt id="p1">**</bpt>HTTP Listener<ept id="p1">**</ept> API app is no longer required.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Calling child workflows uses a new schema.</source>
          <target state="new">Calling child workflows uses a new schema.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>1. Moving to API connections</source>
          <target state="new">1. Moving to API connections</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The biggest change is that you no longer need to deploy API apps into your Azure Subscription to use API's.</source>
          <target state="new">The biggest change is that you no longer need to deploy API apps into your Azure Subscription to use API's.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>There are 2 ways you can use APIs:</source>
          <target state="new">There are 2 ways you can use APIs:</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Managed API's</source>
          <target state="new">Managed API's</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Your custom Web API's</source>
          <target state="new">Your custom Web API's</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each of these is handled slightly differently because their management and hosting models are different.</source>
          <target state="new">Each of these is handled slightly differently because their management and hosting models are different.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>One advantage of this model is you're no longer constrained to resources that are deployed in your Resource Group.</source>
          <target state="new">One advantage of this model is you're no longer constrained to resources that are deployed in your Resource Group.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Managed API's</source>
          <target state="new">Managed API's</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There are a number of API's that are managed by Microsoft on your behalf, such as Office 365, Salesforce, Twitter, FTP etc....</source>
          <target state="new">There are a number of API's that are managed by Microsoft on your behalf, such as Office 365, Salesforce, Twitter, FTP etc....</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Some of these managed API's can be used as-is, such as Bing Translate, while others require configuration.</source>
          <target state="new">Some of these managed API's can be used as-is, such as Bing Translate, while others require configuration.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This configuration is called a <bpt id="p1">*</bpt>connection<ept id="p1">*</ept>.</source>
          <target state="new">This configuration is called a <bpt id="p1">*</bpt>connection<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, when you use Office 365, you need to create a connection that contains your Office 365 sign-in token.</source>
          <target state="new">For example, when you use Office 365, you need to create a connection that contains your Office 365 sign-in token.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This token will be securely stored and refreshed so that your Logic app can always call the Office 365 API.</source>
          <target state="new">This token will be securely stored and refreshed so that your Logic app can always call the Office 365 API.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Alternatively, if you want to connect to your SQL or FTP server, you need to create a connection that has the connection string.</source>
          <target state="new">Alternatively, if you want to connect to your SQL or FTP server, you need to create a connection that has the connection string.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Inside of the definition these actions are called <ph id="ph1">`APIConnection`</ph>.</source>
          <target state="new">Inside of the definition these actions are called <ph id="ph1">`APIConnection`</ph>.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here is an example of a connection that calls Office 365 to send an email:</source>
          <target state="new">Here is an example of a connection that calls Office 365 to send an email:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The portion of the inputs that is unique to API connections is the <ph id="ph1">`host`</ph> object.</source>
          <target state="new">The portion of the inputs that is unique to API connections is the <ph id="ph1">`host`</ph> object.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This contains two parts: <ph id="ph1">`api`</ph> and <ph id="ph2">`connection`</ph>.</source>
          <target state="new">This contains two parts: <ph id="ph1">`api`</ph> and <ph id="ph2">`connection`</ph>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`api`</ph> has the runtime URL of where that managed API is hosted.</source>
          <target state="new">The <ph id="ph1">`api`</ph> has the runtime URL of where that managed API is hosted.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can see all of the available managed APIs for you by calling <ph id="ph1">`GET https://management.azure.com/subscriptions/{subid}/providers/Microsoft.Web/managedApis/?api-version=2015-08-01-preview`</ph>.</source>
          <target state="new">You can see all of the available managed APIs for you by calling <ph id="ph1">`GET https://management.azure.com/subscriptions/{subid}/providers/Microsoft.Web/managedApis/?api-version=2015-08-01-preview`</ph>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When you use an API, it may or may not have any <bpt id="p1">**</bpt>connection parameters<ept id="p1">**</ept> defined.</source>
          <target state="new">When you use an API, it may or may not have any <bpt id="p1">**</bpt>connection parameters<ept id="p1">**</ept> defined.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If it doesn't then no <bpt id="p1">**</bpt>connection<ept id="p1">**</ept> is required.</source>
          <target state="new">If it doesn't then no <bpt id="p1">**</bpt>connection<ept id="p1">**</ept> is required.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If it does, then you will have to create a connection.</source>
          <target state="new">If it does, then you will have to create a connection.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When you create that connection it'll have the name you choose, and then you reference that in the <ph id="ph1">`connection`</ph> object inside the <ph id="ph2">`host`</ph> object.</source>
          <target state="new">When you create that connection it'll have the name you choose, and then you reference that in the <ph id="ph1">`connection`</ph> object inside the <ph id="ph2">`host`</ph> object.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To create a connection in a resource group, call:</source>
          <target state="new">To create a connection in a resource group, call:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>With the following body:</source>
          <target state="new">With the following body:</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Deploying managed API's in an Azure Resource manager template</source>
          <target state="new">Deploying managed API's in an Azure Resource manager template</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can create a full application in an ARM template as long as it doesn’t require interactive sign-in.</source>
          <target state="new">You can create a full application in an ARM template as long as it doesn’t require interactive sign-in.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If it requires sign-in, you can set everything up with the ARM template, but will still have to visit the portal to authorize the connections.</source>
          <target state="new">If it requires sign-in, you can set everything up with the ARM template, but will still have to visit the portal to authorize the connections.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can see in this example that the connections are just normal resources that live in your resource group.</source>
          <target state="new">You can see in this example that the connections are just normal resources that live in your resource group.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>They reference the managedAPIs available to you in your subscription.</source>
          <target state="new">They reference the managedAPIs available to you in your subscription.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Your custom Web API's</source>
          <target state="new">Your custom Web API's</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you use your own API's (specifically, not Microsoft-managed ones), then you should use the built-in <bpt id="p1">**</bpt>HTTP<ept id="p1">**</ept> action to call them.</source>
          <target state="new">If you use your own API's (specifically, not Microsoft-managed ones), then you should use the built-in <bpt id="p1">**</bpt>HTTP<ept id="p1">**</ept> action to call them.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In order to have an ideal experience, you should expose a swagger endpoint for your API.</source>
          <target state="new">In order to have an ideal experience, you should expose a swagger endpoint for your API.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This will enable the Logic app designer to render the inputs and outputs for your API.</source>
          <target state="new">This will enable the Logic app designer to render the inputs and outputs for your API.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Without a swagger, the designer will only be able to show the inputs and outputs as opaque JSON objects.</source>
          <target state="new">Without a swagger, the designer will only be able to show the inputs and outputs as opaque JSON objects.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Here is an example showing the new <ph id="ph1">`metadata.apiDefinitionUrl`</ph> property:</source>
          <target state="new">Here is an example showing the new <ph id="ph1">`metadata.apiDefinitionUrl`</ph> property:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you host your Web API on <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> then it will automatically show up in the list of actions available in the designer.</source>
          <target state="new">If you host your Web API on <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> then it will automatically show up in the list of actions available in the designer.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If not, you'll have to paste in the URL directly.</source>
          <target state="new">If not, you'll have to paste in the URL directly.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The swagger endpoint must be unauthenticated in order to be usable inside of the Logic apps designer (although you may secure the API itself with whatever methods are supported in the Swagger).</source>
          <target state="new">The swagger endpoint must be unauthenticated in order to be usable inside of the Logic apps designer (although you may secure the API itself with whatever methods are supported in the Swagger).</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Using your already deployed API apps with 2015-08-01-preview</source>
          <target state="new">Using your already deployed API apps with 2015-08-01-preview</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you previously deployed an API app, you can call it via the <bpt id="p1">**</bpt>HTTP<ept id="p1">**</ept> action.</source>
          <target state="new">If you previously deployed an API app, you can call it via the <bpt id="p1">**</bpt>HTTP<ept id="p1">**</ept> action.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, if you use Dropbox to list files, you may have something like this in your <bpt id="p1">**</bpt>2014-12-01-preview<ept id="p1">**</ept> schema version definition:</source>
          <target state="new">For example, if you use Dropbox to list files, you may have something like this in your <bpt id="p1">**</bpt>2014-12-01-preview<ept id="p1">**</ept> schema version definition:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can construct the equivalent HTTP action like below (the parameters section of the Logic app definition remains unchanged):</source>
          <target state="new">You can construct the equivalent HTTP action like below (the parameters section of the Logic app definition remains unchanged):</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Walking through these properties one-by-one:</source>
          <target state="new">Walking through these properties one-by-one:</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Action property</source>
          <target state="new">Action property</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Http`</ph> instead of <ph id="ph2">`APIapp`</ph></source>
          <target state="new"><ph id="ph1">`Http`</ph> instead of <ph id="ph2">`APIapp`</ph></target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you want to use this action in the Logic apps designer, you'll want to include the metadata endpoint.</source>
          <target state="new">If you want to use this action in the Logic apps designer, you'll want to include the metadata endpoint.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is constructed from: <ph id="ph1">`{api app host.gateway}/api/service/apidef/{last segment of the api app host.id}/?api-version=2015-01-14&amp;format=swagger-2.0-standard`</ph></source>
          <target state="new">This is constructed from: <ph id="ph1">`{api app host.gateway}/api/service/apidef/{last segment of the api app host.id}/?api-version=2015-01-14&amp;format=swagger-2.0-standard`</ph></target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This is constructed from: <ph id="ph1">`{api app host.gateway}/api/service/invoke/{last segment of the api app host.id}/{api app operation}?api-version=2015-01-14`</ph></source>
          <target state="new">This is constructed from: <ph id="ph1">`{api app host.gateway}/api/service/invoke/{last segment of the api app host.id}/{api app operation}?api-version=2015-01-14`</ph></target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Always <ph id="ph1">`POST`</ph></source>
          <target state="new">Always <ph id="ph1">`POST`</ph></target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Identical to the api app parameters</source>
          <target state="new">Identical to the api app parameters</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Identical to the api app authentication</source>
          <target state="new">Identical to the api app authentication</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This approach should work for all API app actions.</source>
          <target state="new">This approach should work for all API app actions.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>However, please keep in mind that these previous API apps are no longer supported, and you should move to one of the two other options above (either a managed API or hosting your custom Web API).</source>
          <target state="new">However, please keep in mind that these previous API apps are no longer supported, and you should move to one of the two other options above (either a managed API or hosting your custom Web API).</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>2. Repeat renamed to Foreach</source>
          <target state="new">2. Repeat renamed to Foreach</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For the previous schema version we received a lot of customer feedback that <bpt id="p1">**</bpt>Repeat<ept id="p1">**</ept> was confusing and didn't properly capture that it was really a for each loop.</source>
          <target state="new">For the previous schema version we received a lot of customer feedback that <bpt id="p1">**</bpt>Repeat<ept id="p1">**</ept> was confusing and didn't properly capture that it was really a for each loop.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>As a result, we have renamed it to <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept>.</source>
          <target state="new">As a result, we have renamed it to <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Would now be written as:</source>
          <target state="new">Would now be written as:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Previously the function <ph id="ph1">`@repeatItem()`</ph> was used to reference the current item being iterated over.</source>
          <target state="new">Previously the function <ph id="ph1">`@repeatItem()`</ph> was used to reference the current item being iterated over.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This has been simplified to just <ph id="ph1">`@item()`</ph>.</source>
          <target state="new">This has been simplified to just <ph id="ph1">`@item()`</ph>.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Referencing the outputs of the Foreach</source>
          <target state="new">Referencing the outputs of the Foreach</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To further simplify, the outputs of <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> actions will not be wrapped in an object called <bpt id="p2">**</bpt>repeatItems<ept id="p2">**</ept>.</source>
          <target state="new">To further simplify, the outputs of <bpt id="p1">**</bpt>Foreach<ept id="p1">**</ept> actions will not be wrapped in an object called <bpt id="p2">**</bpt>repeatItems<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This means, whereas the outputs of the above repeat were:</source>
          <target state="new">This means, whereas the outputs of the above repeat were:</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Now it will be:</source>
          <target state="new">Now it will be:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>When referencing these outputs, to get to the body of the action you'd have to do:</source>
          <target state="new">When referencing these outputs, to get to the body of the action you'd have to do:</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Now you can do instead:</source>
          <target state="new">Now you can do instead:</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>With these changes, the functions <ph id="ph1">`@repeatItem()`</ph>, <ph id="ph2">`@repeatBody()`</ph> and <ph id="ph3">`@repeatOutputs()`</ph> are removed.</source>
          <target state="new">With these changes, the functions <ph id="ph1">`@repeatItem()`</ph>, <ph id="ph2">`@repeatBody()`</ph> and <ph id="ph3">`@repeatOutputs()`</ph> are removed.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>3. Native HTTP listener</source>
          <target state="new">3. Native HTTP listener</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The HTTP Listener capabilities are now built-in, so you no longer need to deploy an HTTP Listener API app.</source>
          <target state="new">The HTTP Listener capabilities are now built-in, so you no longer need to deploy an HTTP Listener API app.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Read about <bpt id="p1">[</bpt>the full details for how to make your Logic app endpoint callable here<ept id="p1">](app-service-logic-http-endpoint.md)</ept>.</source>
          <target state="new">Read about <bpt id="p1">[</bpt>the full details for how to make your Logic app endpoint callable here<ept id="p1">](app-service-logic-http-endpoint.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>With these changes, the function <ph id="ph1">`@accessKeys()`</ph> is removed and has been replaced with the <ph id="ph2">`@listCallbackURL()`</ph> function for the purposes of getting the endpoint (when needed).</source>
          <target state="new">With these changes, the function <ph id="ph1">`@accessKeys()`</ph> is removed and has been replaced with the <ph id="ph2">`@listCallbackURL()`</ph> function for the purposes of getting the endpoint (when needed).</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In addition, you now must define at least one trigger in your Logic app now.</source>
          <target state="new">In addition, you now must define at least one trigger in your Logic app now.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If you want to <ph id="ph1">`/run`</ph> the workflow, you'll need to have one of a <ph id="ph2">`manual`</ph>, <ph id="ph3">`apiConnectionWebhook`</ph> or <ph id="ph4">`httpWebhook`</ph> triggers.</source>
          <target state="new">If you want to <ph id="ph1">`/run`</ph> the workflow, you'll need to have one of a <ph id="ph2">`manual`</ph>, <ph id="ph3">`apiConnectionWebhook`</ph> or <ph id="ph4">`httpWebhook`</ph> triggers.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>4. Calling child Workflows</source>
          <target state="new">4. Calling child Workflows</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Previously, calling child workflows required going to that workflow, getting the access token, and then pasting that in to the definition of the logic app that you want to call that child.</source>
          <target state="new">Previously, calling child workflows required going to that workflow, getting the access token, and then pasting that in to the definition of the logic app that you want to call that child.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>With the new schema version, the Logic apps engine will automatically generate a SAS at runtime for the child workflow, which means that you don't have to paste any secrets into the definition.</source>
          <target state="new">With the new schema version, the Logic apps engine will automatically generate a SAS at runtime for the child workflow, which means that you don't have to paste any secrets into the definition.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Here is an example:</source>
          <target state="new">Here is an example:</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A second improvement is we will be giving the child workflows full access to the incoming request.</source>
          <target state="new">A second improvement is we will be giving the child workflows full access to the incoming request.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>That means that you can pass parameters in the <bpt id="p1">*</bpt>queries<ept id="p1">*</ept> section and in the <bpt id="p2">*</bpt>headers<ept id="p2">*</ept> object and that you can fully define the entire body.</source>
          <target state="new">That means that you can pass parameters in the <bpt id="p1">*</bpt>queries<ept id="p1">*</ept> section and in the <bpt id="p2">*</bpt>headers<ept id="p2">*</ept> object and that you can fully define the entire body.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Finally, there are required changes to the child workflow.</source>
          <target state="new">Finally, there are required changes to the child workflow.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Whereas before you could just call a child workflow directly; now, you’ll need to define a trigger endpoint in the workflow for the parent to call.</source>
          <target state="new">Whereas before you could just call a child workflow directly; now, you’ll need to define a trigger endpoint in the workflow for the parent to call.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Generally, this means you’ll add a trigger of type <bpt id="p1">**</bpt>manual<ept id="p1">**</ept> and then use that in the parent definition.</source>
          <target state="new">Generally, this means you’ll add a trigger of type <bpt id="p1">**</bpt>manual<ept id="p1">**</ept> and then use that in the parent definition.</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`host`</ph> property specifically has a <ph id="ph2">`triggerName`</ph>, because you must always specify which trigger you are invoking.</source>
          <target state="new">Note that the <ph id="ph1">`host`</ph> property specifically has a <ph id="ph2">`triggerName`</ph>, because you must always specify which trigger you are invoking.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Other changes</source>
          <target state="new">Other changes</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>New queries property</source>
          <target state="new">New queries property</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>All action types now support a new input called <bpt id="p1">**</bpt>queries<ept id="p1">**</ept>.</source>
          <target state="new">All action types now support a new input called <bpt id="p1">**</bpt>queries<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This can be a structured object rather than you having to assemble the string by hand.</source>
          <target state="new">This can be a structured object rather than you having to assemble the string by hand.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>parse() function renamed</source>
          <target state="new">parse() function renamed</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>As we will soon be adding more content types, the <ph id="ph1">`parse()`</ph> function has been renamed to <ph id="ph2">`json()`</ph>.</source>
          <target state="new">As we will soon be adding more content types, the <ph id="ph1">`parse()`</ph> function has been renamed to <ph id="ph2">`json()`</ph>.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Coming soon: Enterprise Integration APIs</source>
          <target state="new">Coming soon: Enterprise Integration APIs</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>At this point in time, we do not yet have managed versions of the Enterprise Integration APIs available (such as AS2).</source>
          <target state="new">At this point in time, we do not yet have managed versions of the Enterprise Integration APIs available (such as AS2).</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>These will be coming soon as covered in the <bpt id="p1">[</bpt>roadmap<ept id="p1">](http://www.zdnet.com/article/microsoft-outlines-its-cloud-and-server-integration-roadmap-for-2016/)</ept>.</source>
          <target state="new">These will be coming soon as covered in the <bpt id="p1">[</bpt>roadmap<ept id="p1">](http://www.zdnet.com/article/microsoft-outlines-its-cloud-and-server-integration-roadmap-for-2016/)</ept>.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the meanwhile, you can use your existing deployed BizTalk APIs via the HTTP action, as covered above in "Using your already deployed API apps."</source>
          <target state="new">In the meanwhile, you can use your existing deployed BizTalk APIs via the HTTP action, as covered above in "Using your already deployed API apps."</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>