<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="de-de">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_hi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27b6533d3bdd112ad8e8da2f854ba14202a85dc4</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>User authentication for API Apps in Azure App Service | Microsoft Azure</source>
          <target state="new">User authentication for API Apps in Azure App Service | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how to protect an API app in Azure App Service by allowing access only to authenticated users.</source>
          <target state="new">Learn how to protect an API app in Azure App Service by allowing access only to authenticated users.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>User authentication for API Apps in Azure App Service</source>
          <target state="new">User authentication for API Apps in Azure App Service</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="new">Overview</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial shows how to use the authentication and authorization features of Azure App Service to protect an API app, and how to consume the API app on behalf of end users.</source>
          <target state="new">This tutorial shows how to use the authentication and authorization features of Azure App Service to protect an API app, and how to consume the API app on behalf of end users.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The authentication provider shown in the tutorial is Azure Active Directory, the API is ASP.NET Web API, and the client is an AngularJS single page application running in a browser.</source>
          <target state="new">The authentication provider shown in the tutorial is Azure Active Directory, the API is ASP.NET Web API, and the client is an AngularJS single page application running in a browser.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Authentication and authorization in App Service</source>
          <target state="new">Authentication and authorization in App Service</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For an introduction to authentication features used in this tutorial, see the previous tutorial in this series, <bpt id="p1">[</bpt>authentication and authorization for API Apps in Azure App Service<ept id="p1">](app-service-api-authentication.md)</ept>.</source>
          <target state="new">For an introduction to authentication features used in this tutorial, see the previous tutorial in this series, <bpt id="p1">[</bpt>authentication and authorization for API Apps in Azure App Service<ept id="p1">](app-service-api-authentication.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>How to follow this tutorial</source>
          <target state="new">How to follow this tutorial</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This tutorial builds on a sample application that you download and create an API app for in the <bpt id="p1">[</bpt>first tutorial of the API Apps and ASP.NET getting started series<ept id="p1">](app-service-api-dotnet-get-started.md)</ept>.</source>
          <target state="new">This tutorial builds on a sample application that you download and create an API app for in the <bpt id="p1">[</bpt>first tutorial of the API Apps and ASP.NET getting started series<ept id="p1">](app-service-api-dotnet-get-started.md)</ept>.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The ContactsList.Angular.AAD sample project</source>
          <target state="new">The ContactsList.Angular.AAD sample project</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>ContactsList sample application<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept>, the ContactsList.Angular.AAD project is an AngularJS client that includes code for working with Azure Active Directory.</source>
          <target state="new">In the <bpt id="p1">[</bpt>ContactsList sample application<ept id="p1">](https://github.com/Azure-Samples/app-service-api-dotnet-contact-list)</ept>, the ContactsList.Angular.AAD project is an AngularJS client that includes code for working with Azure Active Directory.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The code is based on an AAD sample that can be found in the <bpt id="p1">[</bpt>Azure-Samples/active-directory-angularjs-singlepageapp-dotnet-webapi<ept id="p1">](https://github.com/Azure-Samples/active-directory-angularjs-singlepageapp-dotnet-webapi)</ept> repository.</source>
          <target state="new">The code is based on an AAD sample that can be found in the <bpt id="p1">[</bpt>Azure-Samples/active-directory-angularjs-singlepageapp-dotnet-webapi<ept id="p1">](https://github.com/Azure-Samples/active-directory-angularjs-singlepageapp-dotnet-webapi)</ept> repository.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The code in the ContactsList.Angular.AAD project is structured differently than the simpler ContactsLists.Angular project.</source>
          <target state="new">The code in the ContactsList.Angular.AAD project is structured differently than the simpler ContactsLists.Angular project.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The code that calls the API is in the <bpt id="p1">*</bpt>app/scripts/contactsSvc.js<ept id="p1">*</ept> file in the ContactsList.Angular.AAD project.</source>
          <target state="new">The code that calls the API is in the <bpt id="p1">*</bpt>app/scripts/contactsSvc.js<ept id="p1">*</ept> file in the ContactsList.Angular.AAD project.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Here, the <ph id="ph1">`Get`</ph> method is labeled <ph id="ph2">`getItems`</ph>.</source>
          <target state="new">Here, the <ph id="ph1">`Get`</ph> method is labeled <ph id="ph2">`getItems`</ph>.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the controller (<bpt id="p1">*</bpt>app/scripts/contactsCtrl.js<ept id="p1">*</ept>), <ph id="ph1">`getItems`</ph> is wired up to <ph id="ph2">`$scope.populate`</ph>.</source>
          <target state="new">In the controller (<bpt id="p1">*</bpt>app/scripts/contactsCtrl.js<ept id="p1">*</ept>), <ph id="ph1">`getItems`</ph> is wired up to <ph id="ph2">`$scope.populate`</ph>.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the view (<bpt id="p1">*</bpt>app/views/Contacts.html<ept id="p1">*</ept>), $scope.populate is called on initialization.</source>
          <target state="new">In the view (<bpt id="p1">*</bpt>app/views/Contacts.html<ept id="p1">*</ept>), $scope.populate is called on initialization.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The additional code for logging in and including an authorization token with API requests is provided by the <bpt id="p1">[</bpt>Azure Active Directory Authentication Library for JavaScript<ept id="p1">](https://github.com/AzureAD/azure-activedirectory-library-for-js)</ept>, in the <bpt id="p2">*</bpt>adal.js<ept id="p2">*</ept> and <bpt id="p3">*</bpt>adal-angular.js<ept id="p3">*</ept> files.</source>
          <target state="new">The additional code for logging in and including an authorization token with API requests is provided by the <bpt id="p1">[</bpt>Azure Active Directory Authentication Library for JavaScript<ept id="p1">](https://github.com/AzureAD/azure-activedirectory-library-for-js)</ept>, in the <bpt id="p2">*</bpt>adal.js<ept id="p2">*</ept> and <bpt id="p3">*</bpt>adal-angular.js<ept id="p3">*</ept> files.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">*</bpt>app.js<ept id="p1">*</ept> file, the code passes configuration information and the <ph id="ph1">`$http`</ph> provider to the <ph id="ph2">`adalProvider.init`</ph> function.</source>
          <target state="new">In the <bpt id="p1">*</bpt>app.js<ept id="p1">*</ept> file, the code passes configuration information and the <ph id="ph1">`$http`</ph> provider to the <ph id="ph2">`adalProvider.init`</ph> function.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Configuration information includes the AAD application client ID that pertains to each API endpoint and the client ID that pertains to this AngularJS app.</source>
          <target state="new">Configuration information includes the AAD application client ID that pertains to each API endpoint and the client ID that pertains to this AngularJS app.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`init`</ph> function adds interceptors to the <ph id="ph2">`$http`</ph> provider, that these add the authorization token to requests.</source>
          <target state="new">The <ph id="ph1">`init`</ph> function adds interceptors to the <ph id="ph2">`$http`</ph> provider, that these add the authorization token to requests.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Set up authentication and authorization in Azure</source>
          <target state="new">Set up authentication and authorization in Azure</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>, navigate to the <bpt id="p2">**</bpt>API App<ept id="p2">**</ept> blade of the API app that you want to protect so that only authenticated users can call it.</source>
          <target state="new">In the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/)</ept>, navigate to the <bpt id="p2">**</bpt>API App<ept id="p2">**</ept> blade of the API app that you want to protect so that only authenticated users can call it.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(For this tutorial, choose the API app to which you deployed the ContactsList.API project.)</source>
          <target state="new">(For this tutorial, choose the API app to which you deployed the ContactsList.API project.)</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept></source>
          <target state="new">Click <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Find the <bpt id="p1">**</bpt>Features<ept id="p1">**</ept> section, and then click <bpt id="p2">**</bpt>Authentication/ Authorization<ept id="p2">**</ept>.</source>
          <target state="new">Find the <bpt id="p1">**</bpt>Features<ept id="p1">**</ept> section, and then click <bpt id="p2">**</bpt>Authentication/ Authorization<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Authentication / Authorization<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>On<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Authentication / Authorization<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>On<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Action to take when request is not authenticated<ept id="p1">**</ept> drop-down list, select <bpt id="p2">**</bpt>Log in with Azure Active Directory<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Action to take when request is not authenticated<ept id="p1">**</ept> drop-down list, select <bpt id="p2">**</bpt>Log in with Azure Active Directory<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Authentication Providers<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Azure Active Directory<ept id="p2">**</ept>.</source>
          <target state="new">Under <bpt id="p1">**</bpt>Authentication Providers<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Azure Active Directory<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Azure Active Directory Settings<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Express<ept id="p2">**</ept></source>
          <target state="new">In the <bpt id="p1">**</bpt>Azure Active Directory Settings<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Express<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>"Express" here means that Azure will automatically create an AAD application in your AAD tenant.</source>
          <target state="new">"Express" here means that Azure will automatically create an AAD application in your AAD tenant.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Make a note of the name of the new AAD application, as you'll select it later when you go to the Azure classic portal to get the client ID of the new AAD application.</source>
          <target state="new">Make a note of the name of the new AAD application, as you'll select it later when you go to the Azure classic portal to get the client ID of the new AAD application.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Authentication / Authorization<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Authentication / Authorization<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To verify that the API app is now protected, go to the API app's URL + <ph id="ph1">`/swagger`</ph> as you did in the first tutorial to use the Swagger UI.</source>
          <target state="new">To verify that the API app is now protected, go to the API app's URL + <ph id="ph1">`/swagger`</ph> as you did in the first tutorial to use the Swagger UI.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This time you are redirected to a logon page.</source>
          <target state="new">This time you are redirected to a logon page.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>Azure classic portal<ept id="p1">](https://manage.windowsazure.com/)</ept>, go to <bpt id="p2">**</bpt>Azure Active Directory<ept id="p2">**</ept>.</source>
          <target state="new">In the <bpt id="p1">[</bpt>Azure classic portal<ept id="p1">](https://manage.windowsazure.com/)</ept>, go to <bpt id="p2">**</bpt>Azure Active Directory<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You have to go to the classic portal because certain Azure Active Directory settings that you need access to are not yet available in the current Azure portal.</source>
          <target state="new">You have to go to the classic portal because certain Azure Active Directory settings that you need access to are not yet available in the current Azure portal.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Directory<ept id="p1">**</ept> tab, click your AAD tenant.</source>
          <target state="new">On the <bpt id="p1">**</bpt>Directory<ept id="p1">**</ept> tab, click your AAD tenant.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Applications &gt; Applications my company owns<ept id="p1">**</ept>, and then click the check mark.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Applications &gt; Applications my company owns<ept id="p1">**</ept>, and then click the check mark.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You might also have to refresh the page to see the new application.</source>
          <target state="new">You might also have to refresh the page to see the new application.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the list of applications, click the name of the one that Azure created for you when you enabled authentication for your API app.</source>
          <target state="new">In the list of applications, click the name of the one that Azure created for you when you enabled authentication for your API app.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>At the bottom of the page, click <bpt id="p1">**</bpt>Manage manifest &gt; Download manifest<ept id="p1">**</ept>, and save the file in a location where you can edit it.</source>
          <target state="new">At the bottom of the page, click <bpt id="p1">**</bpt>Manage manifest &gt; Download manifest<ept id="p1">**</ept>, and save the file in a location where you can edit it.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the downloaded manifest file, search for the  <ph id="ph1">`oauth2AllowImplicitFlow`</ph> property.</source>
          <target state="new">In the downloaded manifest file, search for the  <ph id="ph1">`oauth2AllowImplicitFlow`</ph> property.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Change the value of this property from <ph id="ph1">`false`</ph> to <ph id="ph2">`true`</ph>, and then save the file.</source>
          <target state="new">Change the value of this property from <ph id="ph1">`false`</ph> to <ph id="ph2">`true`</ph>, and then save the file.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This setting is required for access from a JavaScript single-page application.</source>
          <target state="new">This setting is required for access from a JavaScript single-page application.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It enables the Oauth 2.0 bearer token to be returned in the URL fragment.</source>
          <target state="new">It enables the Oauth 2.0 bearer token to be returned in the URL fragment.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Manage manifest &gt; Upload manifest<ept id="p1">**</ept>, and upload the file that you updated in the preceding step.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Manage manifest &gt; Upload manifest<ept id="p1">**</ept>, and upload the file that you updated in the preceding step.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Keep this page open so you can copy and paste values from it and update values on the page in later steps of the tutorial.</source>
          <target state="new">Keep this page open so you can copy and paste values from it and update values on the page in later steps of the tutorial.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Configure the ContactsList.Angular.AAD project to call the Azure API app</source>
          <target state="new">Configure the ContactsList.Angular.AAD project to call the Azure API app</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following instructions explain how to deploy the application to Azure and run it there, but with minor changes you could run locally.</source>
          <target state="new">The following instructions explain how to deploy the application to Azure and run it there, but with minor changes you could run locally.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The sample code contains localhost URL endpoints.</source>
          <target state="new">The sample code contains localhost URL endpoints.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you want to run locally, set up the projects for SSL, use the localhost SSL URLs in project code, and use the localhost SSL URLs in the AAD application configuration.</source>
          <target state="new">If you want to run locally, set up the projects for SSL, use the localhost SSL URLs in project code, and use the localhost SSL URLs in the AAD application configuration.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>While running locally, the AngularJS code will only allow logged on users to call the API, but unauthenticated callers from other clients could call the API.</source>
          <target state="new">While running locally, the AngularJS code will only allow logged on users to call the API, but unauthenticated callers from other clients could call the API.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the ContactsList.Angular.AAD project, open the <bpt id="p1">*</bpt>app/scripts/app.js<ept id="p1">*</ept> file.</source>
          <target state="new">In the ContactsList.Angular.AAD project, open the <bpt id="p1">*</bpt>app/scripts/app.js<ept id="p1">*</ept> file.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the code that sets the <ph id="ph1">`endpoints`</ph> variable, comment out the localhost endpoint and uncomment the Azure endpoint.</source>
          <target state="new">In the code that sets the <ph id="ph1">`endpoints`</ph> variable, comment out the localhost endpoint and uncomment the Azure endpoint.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Replace "yourclientid" with the actual value of the AAD application's client ID from the classic portal's <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab for the AAD application.</source>
          <target state="new">Replace "yourclientid" with the actual value of the AAD application's client ID from the classic portal's <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab for the AAD application.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Replace "{your api app name}" with the name of the API app that you deployed the ContactsList.API project to.</source>
          <target state="new">Replace "{your api app name}" with the name of the API app that you deployed the ContactsList.API project to.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The code is now similar to the following example.</source>
          <target state="new">The code is now similar to the following example.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Also in <bpt id="p1">*</bpt>app.js<ept id="p1">*</ept>, in the call to <ph id="ph1">`adalProvider.init`</ph>, replace "{your tenant url}" and "{your client id}" with the actual values.</source>
          <target state="new">Also in <bpt id="p1">*</bpt>app.js<ept id="p1">*</ept>, in the call to <ph id="ph1">`adalProvider.init`</ph>, replace "{your tenant url}" and "{your client id}" with the actual values.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The code will look similar to the following example:</source>
          <target state="new">The code will look similar to the following example:</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">*</bpt>app/scripts/contactsSvc.js<ept id="p1">*</ept> file, make the same endpoint URL change from localhost to API app URL that you did earlier in <bpt id="p2">*</bpt>app.js<ept id="p2">*</ept>.</source>
          <target state="new">In the <bpt id="p1">*</bpt>app/scripts/contactsSvc.js<ept id="p1">*</ept> file, make the same endpoint URL change from localhost to API app URL that you did earlier in <bpt id="p2">*</bpt>app.js<ept id="p2">*</ept>.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The code is now similar to the following example.</source>
          <target state="new">The code is now similar to the following example.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Configure the AAD application for the Azure web app</source>
          <target state="new">Configure the AAD application for the Azure web app</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab for the AAD application in the classic portal, in the <bpt id="p2">**</bpt>Sign-on URL<ept id="p2">**</ept> field, delete the URL that is already there and replace it with the web app's base URL, including the trailing slash.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Configure<ept id="p1">**</ept> tab for the AAD application in the classic portal, in the <bpt id="p2">**</bpt>Sign-on URL<ept id="p2">**</ept> field, delete the URL that is already there and replace it with the web app's base URL, including the trailing slash.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>(Note that this is the URL of the web app that will run the AngularJS code, not the API app's URL.)</source>
          <target state="new">(Note that this is the URL of the web app that will run the AngularJS code, not the API app's URL.)</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reply URL<ept id="p1">**</ept> field, replace the URL that is already there with the web app's base URL.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Reply URL<ept id="p1">**</ept> field, replace the URL that is already there with the web app's base URL.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Deploy the ContactsList.Angular.AAD project to Azure</source>
          <target state="new">Deploy the ContactsList.Angular.AAD project to Azure</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the ContactsList.Angular.AAD project, and then click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</source>
          <target state="new">In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the ContactsList.Angular.AAD project, and then click <bpt id="p2">**</bpt>Publish<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Microsoft Azure App Service<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Microsoft Azure App Service<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, in the <bpt id="p2">**</bpt>Subscription<ept id="p2">**</ept> drop-down list, choose your subscription.</source>
          <target state="new">In the <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> dialog box, in the <bpt id="p2">**</bpt>Subscription<ept id="p2">**</ept> drop-down list, choose your subscription.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Expand the resource group that you created for this tutorial, and select the web app that you created in the second tutorial.</source>
          <target state="new">Expand the resource group that you created for this tutorial, and select the web app that you created in the second tutorial.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard, click the <bpt id="p2">**</bpt>Connection<ept id="p2">**</ept> tab, and then in the <bpt id="p3">**</bpt>Destination URL<ept id="p3">**</ept> box change <ph id="ph1">`http://`</ph> to <ph id="ph2">`https://`</ph></source>
          <target state="new">In the <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard, click the <bpt id="p2">**</bpt>Connection<ept id="p2">**</ept> tab, and then in the <bpt id="p3">**</bpt>Destination URL<ept id="p3">**</ept> box change <ph id="ph1">`http://`</ph> to <ph id="ph2">`https://`</ph></target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This setting determines what URL the default browser will be opened to after a successful deployment.</source>
          <target state="new">This setting determines what URL the default browser will be opened to after a successful deployment.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard, click the <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept> tab, expand <bpt id="p3">**</bpt>File Publish Options<ept id="p3">**</ept>, and select the <bpt id="p4">**</bpt>Remove additional files at destination<ept id="p4">**</ept> check box.</source>
          <target state="new">In the <bpt id="p1">**</bpt>Publish Web<ept id="p1">**</ept> wizard, click the <bpt id="p2">**</bpt>Settings<ept id="p2">**</ept> tab, expand <bpt id="p3">**</bpt>File Publish Options<ept id="p3">**</ept>, and select the <bpt id="p4">**</bpt>Remove additional files at destination<ept id="p4">**</ept> check box.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept>.</source>
          <target state="new">Click <bpt id="p1">**</bpt>Publish<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Visual Studio deploys the project and opens a browser to the app's home page.</source>
          <target state="new">Visual Studio deploys the project and opens a browser to the app's home page.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Test the AngularJS web app in Azure</source>
          <target state="new">Test the AngularJS web app in Azure</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Contacts<ept id="p1">**</ept> tab.</source>
          <target state="new">Click the <bpt id="p1">**</bpt>Contacts<ept id="p1">**</ept> tab.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You are prompted to log in.</source>
          <target state="new">You are prompted to log in.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Log in with the credentials of a user in your AAD tenant.</source>
          <target state="new">Log in with the credentials of a user in your AAD tenant.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Contacts<ept id="p1">**</ept> page appears.</source>
          <target state="new">The <bpt id="p1">**</bpt>Contacts<ept id="p1">**</ept> page appears.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The front-end can now call the API on behalf of an authenticated user, but unauthenticated users can't call the API.</source>
          <target state="new">The front-end can now call the API on behalf of an authenticated user, but unauthenticated users can't call the API.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In this tutorial you used App Service Authentication/Authorization to restrict access to an API app so that only authenticated users can call it.</source>
          <target state="new">In this tutorial you used App Service Authentication/Authorization to restrict access to an API app so that only authenticated users can call it.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In the next tutorial in the series you'll learn how to <bpt id="p1">[</bpt>restrict access to your API app for service-to-service scenarios<ept id="p1">](app-service-api-dotnet-service-principal-auth.md)</ept>.</source>
          <target state="new">In the next tutorial in the series you'll learn how to <bpt id="p1">[</bpt>restrict access to your API app for service-to-service scenarios<ept id="p1">](app-service-api-dotnet-service-principal-auth.md)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>