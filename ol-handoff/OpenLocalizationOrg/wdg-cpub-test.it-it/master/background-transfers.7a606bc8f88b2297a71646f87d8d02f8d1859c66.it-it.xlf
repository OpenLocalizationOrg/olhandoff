<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">8659075e945c9479119ea2e04bdacd903d89c41f</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">description: Use the background transfer API to copy files reliably over the network.</source>
          <target xml:space="preserve">description: Use the background transfer API to copy files reliably over the network.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Background transfers</source>
          <target xml:space="preserve">title: Background transfers</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 1207B089-BC16-4BF0-BBD4-FD99950C764B</source>
          <target xml:space="preserve">ms.assetid: 1207B089-BC16-4BF0-BBD4-FD99950C764B</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Background transfers</source>
          <target xml:space="preserve">Background transfers</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Important APIs</source>
          <target xml:space="preserve">Important APIs</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Windows.Networking.backgroundTransfer</source>
          <target xml:space="preserve">Windows.Networking.backgroundTransfer</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Windows.Foundation.Uri</source>
          <target xml:space="preserve">Windows.Foundation.Uri</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Windows.Networking.Sockets</source>
          <target xml:space="preserve">Windows.Networking.Sockets</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">Use the background transfer API to copy files reliably over the network.</source>
          <target xml:space="preserve">Use the background transfer API to copy files reliably over the network.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">The background transfer API provides advanced upload and download features that run in the background during app suspension and persist beyond app termination.</source>
          <target xml:space="preserve">The background transfer API provides advanced upload and download features that run in the background during app suspension and persist beyond app termination.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">The API monitors network status and automatically suspends and resumes transfers when connectivity is lost, and transfers are also Data Sense-aware and Battery Sense-aware, meaning that download activity adjusts based on your current connectivity and device battery status.</source>
          <target xml:space="preserve">The API monitors network status and automatically suspends and resumes transfers when connectivity is lost, and transfers are also Data Sense-aware and Battery Sense-aware, meaning that download activity adjusts based on your current connectivity and device battery status.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">The API is ideal for uploading and downloading large files using HTTP(S).</source>
          <target xml:space="preserve">The API is ideal for uploading and downloading large files using HTTP(S).</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">FTP is also supported, but only for downloads.</source>
          <target xml:space="preserve">FTP is also supported, but only for downloads.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">Background Transfer runs separately from the calling app and is primarily designed for long-term transfer operations for resources like video, music, and large images.</source>
          <target xml:space="preserve">Background Transfer runs separately from the calling app and is primarily designed for long-term transfer operations for resources like video, music, and large images.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">For these scenarios, using Background Transfer is essential because downloads continue to progress even when the app is suspended.</source>
          <target xml:space="preserve">For these scenarios, using Background Transfer is essential because downloads continue to progress even when the app is suspended.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn298639)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you are downloading small resources that are likely to complete quickly, you should use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HttpClient</pc></pc> APIs instead of Background Transfer.</source>
          <target xml:space="preserve">If you are downloading small resources that are likely to complete quickly, you should use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HttpClient</pc></pc> APIs instead of Background Transfer.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Using Windows.Networking.BackgroundTransfer</source>
          <target xml:space="preserve">Using Windows.Networking.BackgroundTransfer</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">How does the Background Transfer feature work?</source>
          <target xml:space="preserve">How does the Background Transfer feature work?</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207126)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br207140)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When an app uses Background Transfer to initiate a transfer, the request is configured and initialized using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundDownloader</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BackgroundUploader</pc></pc> class objects.</source>
          <target xml:space="preserve">When an app uses Background Transfer to initiate a transfer, the request is configured and initialized using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundDownloader</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BackgroundUploader</pc></pc> class objects.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">Each transfer operation is handled individually by the system and separate from the calling app.</source>
          <target xml:space="preserve">Each transfer operation is handled individually by the system and separate from the calling app.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Progress information is available if you want to give status to the user in your app's UI, and your app can pause, resume, cancel, or even read from the data while the transfer is occurring.</source>
          <target xml:space="preserve">Progress information is available if you want to give status to the user in your app's UI, and your app can pause, resume, cancel, or even read from the data while the transfer is occurring.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">The way transfers are handled by the system promotes smart power usage and prevents problems that can arise when a connected app encounters events such as app suspension, termination, or sudden network status changes.</source>
          <target xml:space="preserve">The way transfers are handled by the system promotes smart power usage and prevents problems that can arise when a connected app encounters events such as app suspension, termination, or sudden network status changes.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">Performing authenticated file requests with Background Transfer</source>
          <target xml:space="preserve">Performing authenticated file requests with Background Transfer</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207146)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Background Transfer provides methods that support basic server and proxy credentials, cookies, and the use of custom HTTP headers (via <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetRequestHeader</pc></pc>) for each transfer operation.</source>
          <target xml:space="preserve">Background Transfer provides methods that support basic server and proxy credentials, cookies, and the use of custom HTTP headers (via <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetRequestHeader</pc></pc>) for each transfer operation.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">How does this feature adapt to network status changes or unexpected shutdowns?</source>
          <target xml:space="preserve">How does this feature adapt to network status changes or unexpected shutdowns?</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh452990)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The Background Transfer feature maintains a consistent experience for each transfer operation when network status changes occur, by intelligently leveraging connectivity and carrier data-plan status information provided by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Connectivity</pc> feature.</source>
          <target xml:space="preserve">The Background Transfer feature maintains a consistent experience for each transfer operation when network status changes occur, by intelligently leveraging connectivity and carrier data-plan status information provided by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Connectivity</pc> feature.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207138)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To define behavior for different network scenarios, an app sets a cost policy for each operation using values defined by <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferCostPolicy</pc></pc>.</source>
          <target xml:space="preserve">To define behavior for different network scenarios, an app sets a cost policy for each operation using values defined by <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferCostPolicy</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">For example, the cost policy defined for an operation can indicate that the operation should be paused automatically when the device is using a metered network.</source>
          <target xml:space="preserve">For example, the cost policy defined for an operation can indicate that the operation should be paused automatically when the device is using a metered network.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">The transfer is then automatically resumed (or restarted) when a connection to an "unrestricted" network has been established.</source>
          <target xml:space="preserve">The transfer is then automatically resumed (or restarted) when a connection to an "unrestricted" network has been established.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207292)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information on how networks are defined by cost, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">NetworkCostType</pc></pc>.</source>
          <target xml:space="preserve">For more information on how networks are defined by cost, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">NetworkCostType</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">While the Background Transfer feature has its own mechanisms for handling network status changes, there are other general connectivity considerations for network-connected apps.</source>
          <target xml:space="preserve">While the Background Transfer feature has its own mechanisms for handling network status changes, there are other general connectivity considerations for network-connected apps.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh452983)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Leveraging available network connection information</pc> for additional info.</source>
          <target xml:space="preserve">Read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Leveraging available network connection information</pc> for additional info.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">Note</source>
          <target xml:space="preserve">Note</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">For apps running on mobile devices, there are features that allow the user to monitor and restrict the amount of data that is transferred based on the type of connection, roaming status, and the user's data plan.</source>
          <target xml:space="preserve">For apps running on mobile devices, there are features that allow the user to monitor and restrict the amount of data that is transferred based on the type of connection, roaming status, and the user's data plan.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207138)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Because of this, background transfers may be paused on the phone even when the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferCostPolicy</pc></pc> indicates that the transfer should proceed.</source>
          <target xml:space="preserve">Because of this, background transfers may be paused on the phone even when the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferCostPolicy</pc></pc> indicates that the transfer should proceed.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207138)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The following table indicates when background transfers are allowed on the phone for each <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferCostPolicy</pc></pc> value, given the current state of the phone.</source>
          <target xml:space="preserve">The following table indicates when background transfers are allowed on the phone for each <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferCostPolicy</pc></pc> value, given the current state of the phone.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207244)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConnectionCost</pc></pc> class to determine the phone's current state.</source>
          <target xml:space="preserve">You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ConnectionCost</pc></pc> class to determine the phone's current state.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">Device State</source>
          <target xml:space="preserve">Device State</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">UnrestrictedOnly</source>
          <target xml:space="preserve">UnrestrictedOnly</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">Default</source>
          <target xml:space="preserve">Default</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">Always</source>
          <target xml:space="preserve">Always</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">Connected to WiFi</source>
          <target xml:space="preserve">Connected to WiFi</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">Allow</source>
          <target xml:space="preserve">Allow</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">Allow</source>
          <target xml:space="preserve">Allow</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">Allow</source>
          <target xml:space="preserve">Allow</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">Metered Connection, not roaming, under data limit, on track to stay under limit</source>
          <target xml:space="preserve">Metered Connection, not roaming, under data limit, on track to stay under limit</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Deny</source>
          <target xml:space="preserve">Deny</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">Allow</source>
          <target xml:space="preserve">Allow</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">Allow</source>
          <target xml:space="preserve">Allow</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">Metered Connection, not roaming, under data limit, on track to exceed limit</source>
          <target xml:space="preserve">Metered Connection, not roaming, under data limit, on track to exceed limit</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">Deny</source>
          <target xml:space="preserve">Deny</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">Deny</source>
          <target xml:space="preserve">Deny</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">Allow</source>
          <target xml:space="preserve">Allow</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">Metered Connection, roaming, under data limit</source>
          <target xml:space="preserve">Metered Connection, roaming, under data limit</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source xml:space="preserve">Deny</source>
          <target xml:space="preserve">Deny</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source xml:space="preserve">Deny</source>
          <target xml:space="preserve">Deny</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">Allow</source>
          <target xml:space="preserve">Allow</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">Metered Connection, over data limit.</source>
          <target xml:space="preserve">Metered Connection, over data limit.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">This state only occurs when the user enables "Restrict background data in the Data Sense UI.</source>
          <target xml:space="preserve">This state only occurs when the user enables "Restrict background data in the Data Sense UI.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">Deny</source>
          <target xml:space="preserve">Deny</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">Deny</source>
          <target xml:space="preserve">Deny</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">Deny</source>
          <target xml:space="preserve">Deny</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">Uploading files</source>
          <target xml:space="preserve">Uploading files</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207224)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When using Background Transfer an upload exists as an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc> that exposes a number of control methods that are used to restart or cancel the operation.</source>
          <target xml:space="preserve">When using Background Transfer an upload exists as an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc> that exposes a number of control methods that are used to restart or cancel the operation.</target>
        </segment>
      </unit>
      <unit id="167">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">App events (e.g. suspension or termination) and connectivity changes are handled automatically by the system per <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UploadOperation</pc>; uploads will continue during app suspension periods or pause and persist beyond app termination.</source>
          <target xml:space="preserve">App events (e.g. suspension or termination) and connectivity changes are handled automatically by the system per <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UploadOperation</pc>; uploads will continue during app suspension periods or pause and persist beyond app termination.</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701018)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Additionally, setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CostPolicy</pc></pc> property will indicate whether or not your app will start uploads while a metered network is being used for Internet connectivity.</source>
          <target xml:space="preserve">Additionally, setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CostPolicy</pc></pc> property will indicate whether or not your app will start uploads while a metered network is being used for Internet connectivity.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">The following examples will walk you through the creation and initialization of a basic upload and how to enumerate and reintroduce operations persisted from a previous app session.</source>
          <target xml:space="preserve">The following examples will walk you through the creation and initialization of a basic upload and how to enumerate and reintroduce operations persisted from a previous app session.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">Uploading a single file</source>
          <target xml:space="preserve">Uploading a single file</target>
        </segment>
      </unit>
      <unit id="171">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207140)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The creation of an upload begins with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundUploader</pc></pc>.</source>
          <target xml:space="preserve">The creation of an upload begins with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundUploader</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207224)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This class is used to provide the methods that enable your app to configure the upload before creating the resultant <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc>.</source>
          <target xml:space="preserve">This class is used to provide the methods that enable your app to configure the upload before creating the resultant <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="173">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225998)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227171)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The following example shows how to do this with the required <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Uri</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFile</pc></pc> objects.</source>
          <target xml:space="preserve">The following example shows how to do this with the required <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Uri</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFile</pc></pc> objects.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">Identify the file and destination for the upload</source>
          <target xml:space="preserve">Identify the file and destination for the upload</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207224)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Before we can begin with the creation of an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc>, we first need to identify the URI of the location to upload to, and the file that will be uploaded.</source>
          <target xml:space="preserve">Before we can begin with the creation of an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc>, we first need to identify the URI of the location to upload to, and the file that will be uploaded.</target>
        </segment>
      </unit>
      <unit id="176">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227171)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/jj635275)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the following example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">uriString</pc> value is populated using a string from UI input, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">file</pc> value using the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFile</pc></pc> object returned by a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">PickSingleFileAsync</pc></pc> operation.</source>
          <target xml:space="preserve">In the following example, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">uriString</pc> value is populated using a string from UI input, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">file</pc> value using the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFile</pc></pc> object returned by a <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">PickSingleFileAsync</pc></pc> operation.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]</data>
          <data id="id3">(./code/backgroundtransfer/upload_quickstart/js/main.js#Snippetupload_quickstart_B "</data>
          <data id="id4">")</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Identify the file and destination for the upload</pc>]</source>
          <target xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Identify the file and destination for the upload</pc>]</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">Create and initialize the upload operation</source>
          <target xml:space="preserve">Create and initialize the upload operation</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the previous step the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">uriString</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">file</pc> values are passed to an instance of our next example, UploadOp, where they are used to configure and start the new upload operation.</source>
          <target xml:space="preserve">In the previous step the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">uriString</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">file</pc> values are passed to an instance of our next example, UploadOp, where they are used to configure and start the new upload operation.</target>
        </segment>
      </unit>
      <unit id="180">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br225998)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">First, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">uriString</pc> is parsed to create the required <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Uri</pc></pc> object.</source>
          <target xml:space="preserve">First, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">uriString</pc> is parsed to create the required <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Uri</pc></pc> object.</target>
        </segment>
      </unit>
      <unit id="181">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227171)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/br207140)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">*</data>
          <data id="id12">*</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Next, the properties of the provided <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFile</pc></pc> (<pc dataRefEnd="id6" dataRefStart="id5" id="p3">file</pc>) are used by <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">BackgroundUploader</pc></pc> to populate the request header and set the <pc dataRefEnd="id12" dataRefStart="id11" id="p6">SourceFile</pc> property with the <pc dataRefEnd="id14" dataRefStart="id13" id="p7">StorageFile</pc> object.</source>
          <target xml:space="preserve">Next, the properties of the provided <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">StorageFile</pc></pc> (<pc dataRefEnd="id6" dataRefStart="id5" id="p3">file</pc>) are used by <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">BackgroundUploader</pc></pc> to populate the request header and set the <pc dataRefEnd="id12" dataRefStart="id11" id="p6">SourceFile</pc> property with the <pc dataRefEnd="id14" dataRefStart="id13" id="p7">StorageFile</pc> object.</target>
        </segment>
      </unit>
      <unit id="182">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207146)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227220)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetRequestHeader</pc></pc> method is then called to insert the file name, provided as a string, and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFile.Name</pc></pc> property.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SetRequestHeader</pc></pc> method is then called to insert the file name, provided as a string, and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFile.Name</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="183">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207140)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br207224)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">*</data>
          <data id="id10">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Finally, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundUploader</pc></pc> creates the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">UploadOperation</pc></pc> (<pc dataRefEnd="id10" dataRefStart="id9" id="p5">upload</pc>).</source>
          <target xml:space="preserve">Finally, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundUploader</pc></pc> creates the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">UploadOperation</pc></pc> (<pc dataRefEnd="id10" dataRefStart="id9" id="p5">upload</pc>).</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]</data>
          <data id="id3">(./code/backgroundtransfer/upload_quickstart/js/main.js#Snippetupload_quickstart_A "</data>
          <data id="id4">")</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create and initialize the upload operation</pc>]</source>
          <target xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create and initialize the upload operation</pc>]</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">Uploading multiple files</source>
          <target xml:space="preserve">Uploading multiple files</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">Identify the files and destination for the upload</source>
          <target xml:space="preserve">Identify the files and destination for the upload</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207224)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In a scenario involving multiple files transferred with a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc>, the process begins as it usually does by first providing the required destination URI and local file information.</source>
          <target xml:space="preserve">In a scenario involving multiple files transferred with a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc>, the process begins as it usually does by first providing the required destination URI and local file information.</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207847)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Similar to the example in the previous section, the URI is provided as a string by the end-user and <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileOpenPicker</pc></pc> can be used to provide the ability to indicate files through the user interface as well.</source>
          <target xml:space="preserve">Similar to the example in the previous section, the URI is provided as a string by the end-user and <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileOpenPicker</pc></pc> can be used to provide the ability to indicate files through the user interface as well.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207851)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">However, in this scenario the app should instead call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PickMultipleFilesAsync</pc></pc> method to enable the selection of multiple files through the UI.</source>
          <target xml:space="preserve">However, in this scenario the app should instead call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PickMultipleFilesAsync</pc></pc> method to enable the selection of multiple files through the UI.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source xml:space="preserve">Create objects for the provided parameters</source>
          <target xml:space="preserve">Create objects for the provided parameters</target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The next two examples use code contained in a single example method, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">startMultipart</pc>, which was called at the end of the last step.</source>
          <target xml:space="preserve">The next two examples use code contained in a single example method, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">startMultipart</pc>, which was called at the end of the last step.</target>
        </segment>
      </unit>
      <unit id="192">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh923029)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br207224)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For the purpose of instruction the code in the method that creates an array of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferContentPart</pc></pc> objects has been split from the code that creates the resultant <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">UploadOperation</pc></pc>.</source>
          <target xml:space="preserve">For the purpose of instruction the code in the method that creates an array of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferContentPart</pc></pc> objects has been split from the code that creates the resultant <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">UploadOperation</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225998)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">First, the URI string provided by the user is initialized as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Uri</pc></pc>.</source>
          <target xml:space="preserve">First, the URI string provided by the user is initialized as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Uri</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="194">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227102)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/hh923029)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Next, the array of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IStorageFile</pc></pc> objects (<pc dataRefEnd="id6" dataRefStart="id5" id="p3">files</pc>) passed to this method is iterated through, each object is used to create a new <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">BackgroundTransferContentPart</pc></pc> object which is then placed in the <pc dataRefEnd="id12" dataRefStart="id11" id="p6">contentParts</pc> array.</source>
          <target xml:space="preserve">Next, the array of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IStorageFile</pc></pc> objects (<pc dataRefEnd="id6" dataRefStart="id5" id="p3">files</pc>) passed to this method is iterated through, each object is used to create a new <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">BackgroundTransferContentPart</pc></pc> object which is then placed in the <pc dataRefEnd="id12" dataRefStart="id11" id="p6">contentParts</pc> array.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source xml:space="preserve">Create and initialize the multi-part upload operation</source>
          <target xml:space="preserve">Create and initialize the multi-part upload operation</target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh923029)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227102)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/hh923973)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/br225998)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">With our contentParts array populated with all of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferContentPart</pc></pc> objects representing each <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IStorageFile</pc></pc> for upload, we are ready to call <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">CreateUploadAsync</pc></pc> using the <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Uri</pc></pc> to indicate where the request will be sent.</source>
          <target xml:space="preserve">With our contentParts array populated with all of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferContentPart</pc></pc> objects representing each <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IStorageFile</pc></pc> for upload, we are ready to call <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">CreateUploadAsync</pc></pc> using the <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Uri</pc></pc> to indicate where the request will be sent.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">Restarting interrupted upload operations</source>
          <target xml:space="preserve">Restarting interrupted upload operations</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207224)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">On completion or cancellation of an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc>, any associated system resources are released.</source>
          <target xml:space="preserve">On completion or cancellation of an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc>, any associated system resources are released.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">However, if your app is terminated before either of these things can occur, any active operations are paused and the resources associated with each remain occupied.</source>
          <target xml:space="preserve">However, if your app is terminated before either of these things can occur, any active operations are paused and the resources associated with each remain occupied.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">If these operations are not enumerated and re-introduced to the next app session, they will not be completed and will continue to occupy device resources.</source>
          <target xml:space="preserve">If these operations are not enumerated and re-introduced to the next app session, they will not be completed and will continue to occupy device resources.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207224)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Before defining the function that enumerates persisted operations, we need to create an array that will contain the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc> objects that it will return:</source>
          <target xml:space="preserve">Before defining the function that enumerates persisted operations, we need to create an array that will contain the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">UploadOperation</pc></pc> objects that it will return:</target>
        </segment>
      </unit>
      <unit id="202">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]</data>
          <data id="id3">(./code/backgroundtransfer/upload_quickstart/js/main.js#Snippetupload_quickstart_C "</data>
          <data id="id4">")</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Restart interrupted upload operation</pc>]</source>
          <target xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Restart interrupted upload operation</pc>]</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">Next we define the function that enumerates persisted operations and stores them in our array.</source>
          <target xml:space="preserve">Next we define the function that enumerates persisted operations and stores them in our array.</target>
        </segment>
      </unit>
      <unit id="204">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br207224)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">load</pc> method called to re-assign callbacks to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">UploadOperation</pc></pc>, should it persist through app termination, is in the UploadOp class we define later in this section.</source>
          <target xml:space="preserve">Note that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">load</pc> method called to re-assign callbacks to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">UploadOperation</pc></pc>, should it persist through app termination, is in the UploadOp class we define later in this section.</target>
        </segment>
      </unit>
      <unit id="205">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]</data>
          <data id="id3">(./code/backgroundtransfer/upload_quickstart/js/main.js#Snippetupload_quickstart_D "</data>
          <data id="id4">")</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enumerate persisted operations</pc>]</source>
          <target xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enumerate persisted operations</pc>]</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">Downloading files</source>
          <target xml:space="preserve">Downloading files</target>
        </segment>
      </unit>
      <unit id="207">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207154)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When using Background Transfer, each download exists as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DownloadOperation</pc></pc> that exposes a number of control methods used to pause, resume, restart, and cancel the operation.</source>
          <target xml:space="preserve">When using Background Transfer, each download exists as a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DownloadOperation</pc></pc> that exposes a number of control methods used to pause, resume, restart, and cancel the operation.</target>
        </segment>
      </unit>
      <unit id="208">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">App events (e.g. suspension or termination) and connectivity changes are handled automatically by the system per <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DownloadOperation</pc>; downloads will continue during app suspension periods or pause and persist beyond app termination.</source>
          <target xml:space="preserve">App events (e.g. suspension or termination) and connectivity changes are handled automatically by the system per <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DownloadOperation</pc>; downloads will continue during app suspension periods or pause and persist beyond app termination.</target>
        </segment>
      </unit>
      <unit id="209">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701018)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For mobile network scenarios, setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CostPolicy</pc></pc> property will indicate whether or not your app will begin or continue downloads while a metered network is being used for Internet connectivity.</source>
          <target xml:space="preserve">For mobile network scenarios, setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CostPolicy</pc></pc> property will indicate whether or not your app will begin or continue downloads while a metered network is being used for Internet connectivity.</target>
        </segment>
      </unit>
      <unit id="210">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn298639)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you are downloading small resources that are likely to complete quickly, you should use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HttpClient</pc></pc> APIs instead of Background Transfer.</source>
          <target xml:space="preserve">If you are downloading small resources that are likely to complete quickly, you should use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">HttpClient</pc></pc> APIs instead of Background Transfer.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source xml:space="preserve">The following examples will walk you through the creation and initialization of a basic download, and how to enumerate and reintroduce operations persisted from a previous app session.</source>
          <target xml:space="preserve">The following examples will walk you through the creation and initialization of a basic download, and how to enumerate and reintroduce operations persisted from a previous app session.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source xml:space="preserve">Configure and start a Background Transfer file download</source>
          <target xml:space="preserve">Configure and start a Background Transfer file download</target>
        </segment>
      </unit>
      <unit id="213">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br225998)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227171)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The following example demonstrates how strings representing a URI and a file name can be used to create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Uri</pc></pc> object and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFile</pc></pc> that will contain the requested file.</source>
          <target xml:space="preserve">The following example demonstrates how strings representing a URI and a file name can be used to create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Uri</pc></pc> object and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">StorageFile</pc></pc> that will contain the requested file.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source xml:space="preserve">In this example, the new file is automatically placed in a pre-defined location.</source>
          <target xml:space="preserve">In this example, the new file is automatically placed in a pre-defined location.</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207871)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Alternatively, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileSavePicker</pc></pc> can be used allow users to indicate where to save the file on the device.</source>
          <target xml:space="preserve">Alternatively, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FileSavePicker</pc></pc> can be used allow users to indicate where to save the file on the device.</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br207154)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">load</pc> method called to re-assign callbacks to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DownloadOperation</pc></pc>, should it persist through app termination, is in the DownloadOp class defined later in this section.</source>
          <target xml:space="preserve">Note that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">load</pc> method called to re-assign callbacks to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DownloadOperation</pc></pc>, should it persist through app termination, is in the DownloadOp class defined later in this section.</target>
        </segment>
      </unit>
      <unit id="217">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/backgroundtransfer/download_quickstart/js/main.js#Snippetdownload_quickstart_A)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc>]</source>
          <target xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc>]</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source xml:space="preserve">Note the asynchronous method calls defined using JavaScript promises.</source>
          <target xml:space="preserve">Note the asynchronous method calls defined using JavaScript promises.</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source xml:space="preserve">Looking at line 17 from the previous code example:</source>
          <target xml:space="preserve">Looking at line 17 from the previous code example:</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source xml:space="preserve">The async method call is followed by a then statement which indicates methods, defined by the app, that are called when a result from the async method call is returned.</source>
          <target xml:space="preserve">The async method call is followed by a then statement which indicates methods, defined by the app, that are called when a result from the async method call is returned.</target>
        </segment>
      </unit>
      <unit id="221">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://msdn.microsoft.com/library/windows/apps/hh464930.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information on this programming pattern, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Asynchronous programming in JavaScript using promises</pc>.</source>
          <target xml:space="preserve">For more information on this programming pattern, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Asynchronous programming in JavaScript using promises</pc>.</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source xml:space="preserve">Adding additional operation control methods</source>
          <target xml:space="preserve">Adding additional operation control methods</target>
        </segment>
      </unit>
      <unit id="223">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207154)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The level of control can be increased by implementing additional <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DownloadOperation</pc></pc> methods.</source>
          <target xml:space="preserve">The level of control can be increased by implementing additional <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DownloadOperation</pc></pc> methods.</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source xml:space="preserve">For example, adding the following code to the example above will introduce the ability to cancel the download.</source>
          <target xml:space="preserve">For example, adding the following code to the example above will introduce the ability to cancel the download.</target>
        </segment>
      </unit>
      <unit id="225">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/backgroundtransfer/download_quickstart/js/main.js#Snippetdownload_quickstart_B)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc>]</source>
          <target xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc>]</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source xml:space="preserve">Enumerating persisted operations at start-up</source>
          <target xml:space="preserve">Enumerating persisted operations at start-up</target>
        </segment>
      </unit>
      <unit id="227">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207154)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">On completion or cancellation of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DownloadOperation</pc></pc>, any associated system resources are released.</source>
          <target xml:space="preserve">On completion or cancellation of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DownloadOperation</pc></pc>, any associated system resources are released.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source xml:space="preserve">However, if your app is terminated before either of these events occur, downloads will pause and persist in the background.</source>
          <target xml:space="preserve">However, if your app is terminated before either of these events occur, downloads will pause and persist in the background.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source xml:space="preserve">The following examples demonstrate how to re-introduce persisted downloads into a new app session.</source>
          <target xml:space="preserve">The following examples demonstrate how to re-introduce persisted downloads into a new app session.</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br207154)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Before defining the function that enumerates persisted operations, we need to create an array that will contain the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DownloadOperation</pc></pc> objects that it will return:</source>
          <target xml:space="preserve">Before defining the function that enumerates persisted operations, we need to create an array that will contain the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DownloadOperation</pc></pc> objects that it will return:</target>
        </segment>
      </unit>
      <unit id="231">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/backgroundtransfer/download_quickstart/js/main.js#Snippetdownload_quickstart_D)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc>]</source>
          <target xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc>]</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source xml:space="preserve">Next we define the function that enumerates persisted operations and stores them in our array.</source>
          <target xml:space="preserve">Next we define the function that enumerates persisted operations and stores them in our array.</target>
        </segment>
      </unit>
      <unit id="233">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br207154)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">load</pc> method called to re-assign callbacks for a persisted <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DownloadOperation</pc></pc> is in the DownloadOp example we define later in this section.</source>
          <target xml:space="preserve">Note that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">load</pc> method called to re-assign callbacks for a persisted <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DownloadOperation</pc></pc> is in the DownloadOp example we define later in this section.</target>
        </segment>
      </unit>
      <unit id="234">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/backgroundtransfer/download_quickstart/js/main.js#Snippetdownload_quickstart_E)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc>]</source>
          <target xml:space="preserve">[!code-js<pc dataRefEnd="id2" dataRefStart="id1" id="p1">uploadFile</pc>]</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source xml:space="preserve">You can now use the populated list to restart pending operations.</source>
          <target xml:space="preserve">You can now use the populated list to restart pending operations.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source xml:space="preserve">Post-processing</source>
          <target xml:space="preserve">Post-processing</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source xml:space="preserve">A new feature in Windows 10 is the ability to run application code at the completion of a background transfer even when the app is not running.</source>
          <target xml:space="preserve">A new feature in Windows 10 is the ability to run application code at the completion of a background transfer even when the app is not running.</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source xml:space="preserve">For example, your app might want to update a list of available movies after a movie has finished downloading, rather than have your app scan for new movies every time it starts.</source>
          <target xml:space="preserve">For example, your app might want to update a list of available movies after a movie has finished downloading, rather than have your app scan for new movies every time it starts.</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source xml:space="preserve">Or your app might want to handle a failed file transfer by trying again using a different server or port.</source>
          <target xml:space="preserve">Or your app might want to handle a failed file transfer by trying again using a different server or port.</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source xml:space="preserve">Post-processing is invoked for both successful and failed transfers, so you can use it to implement custom error-handling and retry logic.</source>
          <target xml:space="preserve">Post-processing is invoked for both successful and failed transfers, so you can use it to implement custom error-handling and retry logic.</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source xml:space="preserve">Postprocessing uses the existing background task infrastructure.</source>
          <target xml:space="preserve">Postprocessing uses the existing background task infrastructure.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source xml:space="preserve">You create a background task and associate it with your transfers before you start the transfers.</source>
          <target xml:space="preserve">You create a background task and associate it with your transfers before you start the transfers.</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source xml:space="preserve">The transfers are then executed in the background, and when they are complete, your background task is called to perform post-processing.</source>
          <target xml:space="preserve">The transfers are then executed in the background, and when they are complete, your background task is called to perform post-processing.</target>
        </segment>
      </unit>
      <unit id="244">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn804209)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Post-processing uses a new class, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferCompletionGroup</pc></pc>.</source>
          <target xml:space="preserve">Post-processing uses a new class, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferCompletionGroup</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="245">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn279030)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This class is similar to the existing <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferGroup</pc></pc> in that it allows you to group background transfers together, but <pc dataRefEnd="id6" dataRefStart="id5" id="p3">BackgroundTransferCompletionGroup</pc> adds the ability to designate a background task to be run when the transfer is complete.</source>
          <target xml:space="preserve">This class is similar to the existing <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferGroup</pc></pc> in that it allows you to group background transfers together, but <pc dataRefEnd="id6" dataRefStart="id5" id="p3">BackgroundTransferCompletionGroup</pc> adds the ability to designate a background task to be run when the transfer is complete.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source xml:space="preserve">You initiate a background transfer with post-processing as follows.</source>
          <target xml:space="preserve">You initiate a background transfer with post-processing as follows.</target>
        </segment>
      </unit>
      <unit id="247">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn804209)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferCompletionGroup</pc></pc> object.</source>
          <target xml:space="preserve">Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTransferCompletionGroup</pc></pc> object.</target>
        </segment>
      </unit>
      <unit id="248">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224768)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Then, create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTaskBuilder</pc></pc> object.</source>
          <target xml:space="preserve">Then, create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTaskBuilder</pc></pc> object.</target>
        </segment>
      </unit>
      <unit id="249">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trigger</pc> property of the builder object to the completion group object, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TaskEngtyPoint</pc> property of the builder to the entry point of the background task that should execute on transfer completion.</source>
          <target xml:space="preserve">Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trigger</pc> property of the builder object to the completion group object, and the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TaskEngtyPoint</pc> property of the builder to the entry point of the background task that should execute on transfer completion.</target>
        </segment>
      </unit>
      <unit id="250">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br224772)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Finally, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTaskBuilder.Register</pc></pc> method to register your background task.</source>
          <target xml:space="preserve">Finally, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackgroundTaskBuilder.Register</pc></pc> method to register your background task.</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source xml:space="preserve">Note that many completion groups can share one background task entry point, but you can have only one completion group per background task registration.</source>
          <target xml:space="preserve">Note that many completion groups can share one background task entry point, but you can have only one completion group per background task registration.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>