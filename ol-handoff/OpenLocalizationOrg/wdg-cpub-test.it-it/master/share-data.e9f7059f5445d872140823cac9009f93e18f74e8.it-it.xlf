<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">b34d0b68388aa72abab4f30bf7e41d6707195b19</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">description: This article explains how to support the Share contract in a Universal Windows Platform (UWP) app.</source>
          <target xml:space="preserve">description: This article explains how to support the Share contract in a Universal Windows Platform (UWP) app.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Share data</source>
          <target xml:space="preserve">title: Share data</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 32287F5E-EB86-4B98-97FF-8F6228D06782</source>
          <target xml:space="preserve">ms.assetid: 32287F5E-EB86-4B98-97FF-8F6228D06782</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Share data</source>
          <target xml:space="preserve">Share data</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">This article explains how to support the Share contract in a Universal Windows Platform (UWP) app.</source>
          <target xml:space="preserve">This article explains how to support the Share contract in a Universal Windows Platform (UWP) app.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">The Share contract is an easy way to quickly share data, such as text, links, photos, and videos, between apps.</source>
          <target xml:space="preserve">The Share contract is an easy way to quickly share data, such as text, links, photos, and videos, between apps.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">For example, a user might want to share a webpage with their friends using a social networking app, or save a link in a notes app to refer to later.</source>
          <target xml:space="preserve">For example, a user might want to share a webpage with their friends using a social networking app, or save a link in a notes app to refer to later.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Set up an event handler</source>
          <target xml:space="preserve">Set up an event handler</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">][DataRequested]</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataRequested</pc></pc> event handler to be called whenever a user invokes share.</source>
          <target xml:space="preserve">Add a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataRequested</pc></pc> event handler to be called whenever a user invokes share.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">This can occur either when the user taps a control in your app (such as a button or app bar command) or automatically in a specific scenario (if the user finishes a level and gets a high score, for example).</source>
          <target xml:space="preserve">This can occur either when the user taps a control in your app (such as a button or app bar command) or automatically in a specific scenario (if the user finishes a level and gets a high score, for example).</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/share_data/cs/MainPage.xaml.cs#SnippetPrepareToShare)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">][DataRequested]</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">][DataRequest]</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataRequested</pc></pc> event occurs, your app receives a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DataRequest</pc></pc> object.</source>
          <target xml:space="preserve">When a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataRequested</pc></pc> event occurs, your app receives a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DataRequest</pc></pc> object.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">][DataPackage]</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This contains a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc> that you can use to provide the content that the user wants to share.</source>
          <target xml:space="preserve">This contains a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc> that you can use to provide the content that the user wants to share.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">You must provide a title and data to share.</source>
          <target xml:space="preserve">You must provide a title and data to share.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">A description is optional, but recommended.</source>
          <target xml:space="preserve">A description is optional, but recommended.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/share_data/cs/MainPage.xaml.cs#SnippetCreateRequest)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Choose data</source>
          <target xml:space="preserve">Choose data</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">You can share various types of data, including:</source>
          <target xml:space="preserve">You can share various types of data, including:</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">Plain text</source>
          <target xml:space="preserve">Plain text</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">Uniform Resource Identifiers (URIs)</source>
          <target xml:space="preserve">Uniform Resource Identifiers (URIs)</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">HTML</source>
          <target xml:space="preserve">HTML</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">Formatted text</source>
          <target xml:space="preserve">Formatted text</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">Bitmaps</source>
          <target xml:space="preserve">Bitmaps</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Plain text</source>
          <target xml:space="preserve">Plain text</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Files</source>
          <target xml:space="preserve">Files</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Custom developer-defined data</source>
          <target xml:space="preserve">Custom developer-defined data</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">][DataPackage]</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc> object can contain one or more of these formats, in any combination.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc> object can contain one or more of these formats, in any combination.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">The following example demonstrates sharing text.</source>
          <target xml:space="preserve">The following example demonstrates sharing text.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/share_data/cs/MainPage.xaml.cs#SnippetSetContent)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">Set properties</source>
          <target xml:space="preserve">Set properties</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">When you package data for sharing, you can supply a variety of properties that provide additional information about the content being shared.</source>
          <target xml:space="preserve">When you package data for sharing, you can supply a variety of properties that provide additional information about the content being shared.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">These properties help target apps improve the user experience.</source>
          <target xml:space="preserve">These properties help target apps improve the user experience.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">For example, a description helps when the user is sharing content with more than one app.</source>
          <target xml:space="preserve">For example, a description helps when the user is sharing content with more than one app.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">Adding a thumbnail when sharing an image or a link to a web page provides a visual reference to the user.</source>
          <target xml:space="preserve">Adding a thumbnail when sharing an image or a link to a web page provides a visual reference to the user.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">][DataPackagePropertySet]</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage.DataPackagePropertySet</pc></pc>.</source>
          <target xml:space="preserve">For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage.DataPackagePropertySet</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">All properties except the title are optional.</source>
          <target xml:space="preserve">All properties except the title are optional.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">The title property is mandatory and must be set.</source>
          <target xml:space="preserve">The title property is mandatory and must be set.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/share_data/cs/MainPage.xaml.cs#SnippetSetProperties)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">Launch the share UI</source>
          <target xml:space="preserve">Launch the share UI</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">A UI for sharing is provided by the system.</source>
          <target xml:space="preserve">A UI for sharing is provided by the system.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">][ShowShareUi]</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To launch it, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ShowShareUI</pc></pc> method.</source>
          <target xml:space="preserve">To launch it, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ShowShareUI</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](./code/share_data/cs/MainPage.xaml.cs#SnippetShowUI)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</source>
          <target xml:space="preserve">[!code-cs<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Main</pc>]</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">Handle errors</source>
          <target xml:space="preserve">Handle errors</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">In most cases, sharing content is a straightforward process.</source>
          <target xml:space="preserve">In most cases, sharing content is a straightforward process.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">However, there's always a chance that something unexpected could happen.</source>
          <target xml:space="preserve">However, there's always a chance that something unexpected could happen.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">For example, the app might require the user to select content for sharing but the user didn't select any.</source>
          <target xml:space="preserve">For example, the app might require the user to select content for sharing but the user didn't select any.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">][FailWithDisplayText]</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To handle these situations, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FailWithDisplayText</pc></pc> method, which will display a message to the user if something goes wrong.</source>
          <target xml:space="preserve">To handle these situations, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FailWithDisplayText</pc></pc> method, which will display a message to the user if something goes wrong.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">Delay share with delegates</source>
          <target xml:space="preserve">Delay share with delegates</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">Sometimes, it might not make sense to prepare the data that the user wants to share right away.</source>
          <target xml:space="preserve">Sometimes, it might not make sense to prepare the data that the user wants to share right away.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">For example, if your app supports sending a large image file in several different possible formats, it's inefficient to create all those images before the user makes their selection.</source>
          <target xml:space="preserve">For example, if your app supports sending a large image file in several different possible formats, it's inefficient to create all those images before the user makes their selection.</target>
        </segment>
      </unit>
      <unit id="153">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">][DataPackage]</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To solve this problem, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc> can contain a delegate — a function that is called when the receiving app requests data.</source>
          <target xml:space="preserve">To solve this problem, a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc> can contain a delegate — a function that is called when the receiving app requests data.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">We recommend using a delegate any time that the data a user wants to share is resource-intensive.</source>
          <target xml:space="preserve">We recommend using a delegate any time that the data a user wants to share is resource-intensive.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">
```cs
async void OnDeferredImageRequestedHandler(DataProviderRequest request)
{
    // Provide updated bitmap data using delayed rendering
    if (this.imageStream != null)
    {
        DataProviderDeferral deferral = request.GetDeferral();
        InMemoryRandomAccessStream inMemoryStream = new InMemoryRandomAccessStream();

        // Decode the image.
        BitmapDecoder imageDecoder = await BitmapDecoder.CreateAsync(this.imageStream);

        // Re-encode the image at 50% width and height.
        BitmapEncoder imageEncoder = await BitmapEncoder.CreateForTranscodingAsync(inMemoryStream, imageDecoder);
        imageEncoder.BitmapTransform.ScaledWidth = (uint)(imageDecoder.OrientedPixelHeight * 0.5);
        imageEncoder.BitmapTransform.ScaledHeight = (uint)(imageDecoder.OrientedPixelHeight * 0.5);
        await imageEncoder.FlushAsync();

        request.SetData(RandomAccessStreamReference.CreateFromStream(inMemoryStream));
        deferral.Complete();
    }
}
```

##</data>
          <data id="id2">* [</data>
          <data id="id3">Receive data](receive-data.md)</data>
          <data id="id4">
          </data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> Related topics
<pc dataRefEnd="id3" dataRefStart="id2" id="p1"></pc><ph dataRef="id4" id="ph2" /></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> Related topics
<pc dataRefEnd="id3" dataRefStart="id2" id="p1"></pc><ph dataRef="id4" id="ph2" /></target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>