<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">93c48f2e8199e10237b148f6a3ea3a08a6703dac</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 95CF7F3D-9E3A-40AC-A083-D8A375272181</source>
          <target xml:space="preserve">ms.assetid: 95CF7F3D-9E3A-40AC-A083-D8A375272181</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Best practices for using the thread pool</source>
          <target xml:space="preserve">title: Best practices for using the thread pool</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">description: This topic describes best practices for working with the thread pool.</source>
          <target xml:space="preserve">description: This topic describes best practices for working with the thread pool.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Best practices for using the thread pool</source>
          <target xml:space="preserve">Best practices for using the thread pool</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">This topic describes best practices for working with the thread pool.</source>
          <target xml:space="preserve">This topic describes best practices for working with the thread pool.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Do's</source>
          <target xml:space="preserve">Do's</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">Use the thread pool to do parallel work in your app.</source>
          <target xml:space="preserve">Use the thread pool to do parallel work in your app.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Use work items to accomplish extended tasks without blocking the UI thread.</source>
          <target xml:space="preserve">Use work items to accomplish extended tasks without blocking the UI thread.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">Create work items that are short-lived and independent.</source>
          <target xml:space="preserve">Create work items that are short-lived and independent.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Work items run asynchronously and they can be submitted to the pool in any order from the queue.</source>
          <target xml:space="preserve">Work items run asynchronously and they can be submitted to the pool in any order from the queue.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208211)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Dispatch updates to the UI thread with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Core.CoreDispatcher</pc></pc>.</source>
          <target xml:space="preserve">Dispatch updates to the UI thread with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Core.CoreDispatcher</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh967921)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThreadPoolTimer.CreateTimer</pc></pc> instead of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Sleep</pc> function.</source>
          <target xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThreadPoolTimer.CreateTimer</pc></pc> instead of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Sleep</pc> function.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Use the thread pool instead of creating your own thread management system.</source>
          <target xml:space="preserve">Use the thread pool instead of creating your own thread management system.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">The thread pool runs at the OS level with advanced capability and is optimized to dynamically scale according to device resources and activity within the process and across the system.</source>
          <target xml:space="preserve">The thread pool runs at the OS level with advanced capability and is optimized to dynamically scale according to device resources and activity within the process and across the system.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">In C++, ensure that work item delegates use the agile threading model (C++ delegates are agile by default).</source>
          <target xml:space="preserve">In C++, ensure that work item delegates use the agile threading model (C++ delegates are agile by default).</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">Use pre-allocated work items when you can't tolerate a resource allocation failure at time of use.</source>
          <target xml:space="preserve">Use pre-allocated work items when you can't tolerate a resource allocation failure at time of use.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Dont's</source>
          <target xml:space="preserve">Dont's</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Don't create periodic timers with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">period</pc> value of &amp;lt;1 millisecond (including 0).</source>
          <target xml:space="preserve">Don't create periodic timers with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">period</pc> value of &amp;lt;1 millisecond (including 0).</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">This will cause the work item to behave as a single-shot timer.</source>
          <target xml:space="preserve">This will cause the work item to behave as a single-shot timer.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Don't submit periodic work items that take longer to complete than the amount of time you specified in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">period</pc> parameter.</source>
          <target xml:space="preserve">Don't submit periodic work items that take longer to complete than the amount of time you specified in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">period</pc> parameter.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Don't try to send UI updates (other than toasts and notifications) from a work item dispatched from a background task.</source>
          <target xml:space="preserve">Don't try to send UI updates (other than toasts and notifications) from a work item dispatched from a background task.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR224800)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Instead, use background task progress and completion handlers - for example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBackgroundTaskInstance.Progress</pc></pc>.</source>
          <target xml:space="preserve">Instead, use background task progress and completion handlers - for example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBackgroundTaskInstance.Progress</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When you use work-item handlers that use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> keyword, be aware that the thread pool work item may be set to the complete state before all of the code in the handler has executed.</source>
          <target xml:space="preserve">When you use work-item handlers that use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">async</pc> keyword, be aware that the thread pool work item may be set to the complete state before all of the code in the handler has executed.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Code following an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> keyword within the handler may execute after the work item has been set to the complete state.</source>
          <target xml:space="preserve">Code following an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">await</pc> keyword within the handler may execute after the work item has been set to the complete state.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Don't try to run a pre-allocated work item more than once without reinitializing it.</source>
          <target xml:space="preserve">Don't try to run a pre-allocated work item more than once without reinitializing it.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](create-a-periodic-work-item.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a periodic work item</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a periodic work item</pc>
					</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">Create a periodic work item</source>
          <target xml:space="preserve">Create a periodic work item</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">Submit a work item to the thread pool</source>
          <target xml:space="preserve">Submit a work item to the thread pool</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">Use a timer to submit a work item</source>
          <target xml:space="preserve">Use a timer to submit a work item</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>