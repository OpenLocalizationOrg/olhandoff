<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">167ae7ee519736967c5163e2c37e3ca1fd507a7d</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">description: Uniquely identifies object elements for access to the instantiated object from code-behind or general code.</source>
          <target xml:space="preserve">description: Uniquely identifies object elements for access to the instantiated object from code-behind or general code.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: x:Name attribute'</source>
          <target xml:space="preserve">title: x:Name attribute'</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 4FF1F3ED-903A-4305-B2BD-DCD29E0C9E6D</source>
          <target xml:space="preserve">ms.assetid: 4FF1F3ED-903A-4305-B2BD-DCD29E0C9E6D</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">x:Name attribute</source>
          <target xml:space="preserve">x:Name attribute</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Uniquely identifies object elements for access to the instantiated object from code-behind or general code.</source>
          <target xml:space="preserve">Uniquely identifies object elements for access to the instantiated object from code-behind or general code.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Once applied to a backing programming model, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can be considered equivalent to the variable holding an object reference, as returned by a constructor.</source>
          <target xml:space="preserve">Once applied to a backing programming model, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can be considered equivalent to the variable holding an object reference, as returned by a constructor.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">XAML attribute usage</source>
          <target xml:space="preserve">XAML attribute usage</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">XAML values</source>
          <target xml:space="preserve">XAML values</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">XAMLNameValue</source>
          <target xml:space="preserve">XAMLNameValue</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">A string that conforms to the restrictions of the XamlName grammar.</source>
          <target xml:space="preserve">A string that conforms to the restrictions of the XamlName grammar.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">XamlName grammar</source>
          <target xml:space="preserve">XamlName grammar</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">The following is the normative grammar for a string that is used as a key in this XAML implementation:</source>
          <target xml:space="preserve">The following is the normative grammar for a string that is used as a key in this XAML implementation:</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Characters are restricted to the lower ASCII range, and more specifically to Roman alphabet uppercase and lowercase letters, digits, and the underscore (\_) character.</source>
          <target xml:space="preserve">Characters are restricted to the lower ASCII range, and more specifically to Roman alphabet uppercase and lowercase letters, digits, and the underscore (\_) character.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">The Unicode character range is not supported.</source>
          <target xml:space="preserve">The Unicode character range is not supported.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">A name cannot begin with a digit.</source>
          <target xml:space="preserve">A name cannot begin with a digit.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Some tool implementations prepend an underscore (\_) to a string if the user supplies a digit as the initial character, or the tool autogenerates <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> values based on other values that contain digits.</source>
          <target xml:space="preserve">Some tool implementations prepend an underscore (\_) to a string if the user supplies a digit as the initial character, or the tool autogenerates <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> values based on other values that contain digits.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">Remarks</source>
          <target xml:space="preserve">Remarks</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The specified <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object.</source>
          <target xml:space="preserve">The specified <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">The process of creating this field is performed by the MSBuild target steps, which also are responsible for joining the partial classes for a XAML file and its code-behind.</source>
          <target xml:space="preserve">The process of creating this field is performed by the MSBuild target steps, which also are responsible for joining the partial classes for a XAML file and its code-behind.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This behavior is not necessarily XAML-language specified; it is the particular implementation that Universal Windows Platform (UWP) programming for XAML applies to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> in its programming and application models.</source>
          <target xml:space="preserve">This behavior is not necessarily XAML-language specified; it is the particular implementation that Universal Windows Platform (UWP) programming for XAML applies to use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> in its programming and application models.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Each defined <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> must be unique within a XAML namescope.</source>
          <target xml:space="preserve">Each defined <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> must be unique within a XAML namescope.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Generally, a XAML namescope is defined at the root element level of a loaded page and contains all elements under that element in a single XAML page.</source>
          <target xml:space="preserve">Generally, a XAML namescope is defined at the root element level of a loaded page and contains all elements under that element in a single XAML page.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Additional XAML namescopes are defined by any control template or data template that is defined on that page.</source>
          <target xml:space="preserve">Additional XAML namescopes are defined by any control template or data template that is defined on that page.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br228048)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">At run time, another XAML namescope is created for the root of the object tree that is created from an applied control template, and also by object trees created from a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">XamlReader.Load</pc></pc>.</source>
          <target xml:space="preserve">At run time, another XAML namescope is created for the root of the object tree that is created from an applied control template, and also by object trees created from a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">XamlReader.Load</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](xaml-namescopes.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML namescopes</pc>.</source>
          <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML namescopes</pc>.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Design tools often autogenerate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> values for elements when they are introduced to the design surface.</source>
          <target xml:space="preserve">Design tools often autogenerate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> values for elements when they are introduced to the design surface.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">The autogeneration scheme varies depending on which designer you are using, but a typical scheme is to generate a string that starts with the class name that backs the element, followed by an advancing integer.</source>
          <target xml:space="preserve">The autogeneration scheme varies depending on which designer you are using, but a typical scheme is to generate a string that starts with the class name that backs the element, followed by an advancing integer.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209265)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, if you introduce the first <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> element to the designer, you might see that in the XAML this element has the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Name</pc> attribute value of "Button1".</source>
          <target xml:space="preserve">For example, if you introduce the first <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Button</pc></pc> element to the designer, you might see that in the XAML this element has the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Name</pc> attribute value of "Button1".</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242361)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> cannot be set in XAML property element syntax, or in code using <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetValue</pc></pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> cannot be set in XAML property element syntax, or in code using <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SetValue</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can only be set using XAML attribute syntax on elements.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can only be set using XAML attribute syntax on elements.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Specifically for C++/CX apps, a backing field for an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Name</pc> reference is not created for the root element of a XAML file or page.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Specifically for C++/CX apps, a backing field for an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">x:Name</pc> reference is not created for the root element of a XAML file or page.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">If you need to reference the root object from C++ code-behind, use other APIs or tree traversal.</source>
          <target xml:space="preserve">If you need to reference the root object from C++ code-behind, use other APIs or tree traversal.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208715)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208739)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example you can call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FindName</pc></pc> for a known named child element and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Parent</pc></pc>.</source>
          <target xml:space="preserve">For example you can call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FindName</pc></pc> for a known named child element and then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Parent</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">x:Name and other Name properties</source>
          <target xml:space="preserve">x:Name and other Name properties</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Some types used in UWP XAML also have a property named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc>.</source>
          <target xml:space="preserve">Some types used in UWP XAML also have a property named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc>.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208735)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh702125)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.Name</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextElement.Name</pc></pc>.</source>
          <target xml:space="preserve">For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement.Name</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">TextElement.Name</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> is available as a settable property on an element, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Name</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Name</pc> can be used interchangeably in XAML, but an error results if both attributes are specified on the same element.</source>
          <target xml:space="preserve">If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> is available as a settable property on an element, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Name</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">x:Name</pc> can be used interchangeably in XAML, but an error results if both attributes are specified on the same element.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209031)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There are also cases where there's a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> property but it's read-only (like <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">VisualState.Name</pc></pc>).</source>
          <target xml:space="preserve">There are also cases where there's a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> property but it's read-only (like <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">VisualState.Name</pc></pc>).</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If that's the case you always use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> to name that element in the XAML and the read-only <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Name</pc> exists for some less-common code scenario.</source>
          <target xml:space="preserve">If that's the case you always use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> to name that element in the XAML and the read-only <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Name</pc> exists for some less-common code scenario.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208735)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">FrameworkElement.Name</pc></pc> generally should not be used as a way to change values originally set by <pc dataRefEnd="id8" dataRefStart="id7" id="p4">x:Name</pc>, although there are some scenarios that are exceptions to that general rule.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">FrameworkElement.Name</pc></pc> generally should not be used as a way to change values originally set by <pc dataRefEnd="id8" dataRefStart="id7" id="p4">x:Name</pc>, although there are some scenarios that are exceptions to that general rule.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">In typical scenarios, the creation and definition of XAML namescopes is a XAML processor operation.</source>
          <target xml:space="preserve">In typical scenarios, the creation and definition of XAML namescopes is a XAML processor operation.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Modifying <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FrameworkElement.Name</pc> at run time can result in an inconsistent XAML namescope / private field naming alignment, which is hard to keep track of in your code-behind.</source>
          <target xml:space="preserve">Modifying <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FrameworkElement.Name</pc> at run time can result in an inconsistent XAML namescope / private field naming alignment, which is hard to keep track of in your code-behind.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">x:Name and x:Key</source>
          <target xml:space="preserve">x:Name and x:Key</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208794)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](x-key-attribute.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can be applied as an attribute to elements within a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ResourceDictionary</pc></pc> to act as a substitute for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">x:Key attribute</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Name</pc> can be applied as an attribute to elements within a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ResourceDictionary</pc></pc> to act as a substitute for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">x:Key attribute</pc>.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/mt187354)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">(Normally it's a rule that all elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary</pc> must have an x:Key attribute.) This is common for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Storyboarded animations</pc>.</source>
          <target xml:space="preserve">(Normally it's a rule that all elements in a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary</pc> must have an x:Key attribute.) This is common for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Storyboarded animations</pc>.</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt187273)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see section of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary and XAML resource references</pc>.</source>
          <target xml:space="preserve">For more info, see section of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ResourceDictionary and XAML resource references</pc>.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>