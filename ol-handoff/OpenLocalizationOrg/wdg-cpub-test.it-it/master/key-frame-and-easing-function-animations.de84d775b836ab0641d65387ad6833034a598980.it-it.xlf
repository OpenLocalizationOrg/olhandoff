<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">7eb519c64fd9f0bc8b669c758b6aad0e9d4b4d5f</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: D8AF24CD-F4C2-4562-AFD7-25010955D677</source>
          <target xml:space="preserve">ms.assetid: D8AF24CD-F4C2-4562-AFD7-25010955D677</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Key-frame animations and easing function animations</source>
          <target xml:space="preserve">title: Key-frame animations and easing function animations</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">description: Linear key-frame animations, key-frame animations with a KeySpline value, or easing functions are three different techniques for approximately the same scenario: creating a storyboarded animation that's a bit more complex, and that uses a nonlinear animation behavior from a starting state to an end state.</source>
          <target xml:space="preserve">description: Linear key-frame animations, key-frame animations with a KeySpline value, or easing functions are three different techniques for approximately the same scenario: creating a storyboarded animation that's a bit more complex, and that uses a nonlinear animation behavior from a starting state to an end state.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Key-frame animations and easing function animations</source>
          <target xml:space="preserve">Key-frame animations and easing function animations</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Linear key-frame animations, key-frame animations with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> value, or easing functions are three different techniques for approximately the same scenario: creating a storyboarded animation that's a bit more complex, and that uses a nonlinear animation behavior from a starting state to an end state.</source>
          <target xml:space="preserve">Linear key-frame animations, key-frame animations with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> value, or easing functions are three different techniques for approximately the same scenario: creating a storyboarded animation that's a bit more complex, and that uses a nonlinear animation behavior from a starting state to an end state.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Prerequisites</source>
          <target xml:space="preserve">Prerequisites</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](storyboarded-animations.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Make sure you've read the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> topic.</source>
          <target xml:space="preserve">Make sure you've read the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> topic.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](storyboarded-animations.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This topic builds on the animation concepts that were explained in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> and won't go over them again.</source>
          <target xml:space="preserve">This topic builds on the animation concepts that were explained in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> and won't go over them again.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](storyboarded-animations.md)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR210517)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.duration)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.fillbehavior)</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> describes how to target animations, storyboards as resources, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Timeline</pc></pc> property values such as <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Duration</pc></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">FillBehavior</pc></pc>, and so on.</source>
          <target xml:space="preserve">For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Storyboarded animations</pc> describes how to target animations, storyboards as resources, the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Timeline</pc></pc> property values such as <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Duration</pc></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">FillBehavior</pc></pc>, and so on.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Animating using key-frame animations</source>
          <target xml:space="preserve">Animating using key-frame animations</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Key-frame animations permit more than one target value that is reached at a point along the animation timeline.</source>
          <target xml:space="preserve">Key-frame animations permit more than one target value that is reached at a point along the animation timeline.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">In other words each key frame can specify a different intermediate value, and the last key frame reached is the final animation value.</source>
          <target xml:space="preserve">In other words each key frame can specify a different intermediate value, and the last key frame reached is the final animation value.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">By specifying multiple values to animate, you can make more complex animations.</source>
          <target xml:space="preserve">By specifying multiple values to animate, you can make more complex animations.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Key-frame animations also enable different interpolation logic, which are each implemented as a different <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyFrame</pc> subclass per animation type.</source>
          <target xml:space="preserve">Key-frame animations also enable different interpolation logic, which are each implemented as a different <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyFrame</pc> subclass per animation type.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Specifically, each key-frame animation type has a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Discrete</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Linear</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Spline</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Easing</pc> variation of its <pc dataRefEnd="id10" dataRefStart="id9" id="p5">KeyFrame</pc> class for specifying its key frames.</source>
          <target xml:space="preserve">Specifically, each key-frame animation type has a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Discrete</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Linear</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Spline</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Easing</pc> variation of its <pc dataRefEnd="id10" dataRefStart="id9" id="p5">KeyFrame</pc> class for specifying its key frames.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR243130)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR210316)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/BR210446)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
          <data id="id17">[</data>
          <data id="id18">](https://msdn.microsoft.com/library/windows/apps/BR210269)</data>
          <data id="id19">**</data>
          <data id="id20">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, to specify an animation that targets a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc> and uses key frames, you could declare key frames with <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DiscreteDoubleKeyFrame</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">LinearDoubleKeyFrame</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">SplineDoubleKeyFrame</pc></pc>, and <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">EasingDoubleKeyFrame</pc></pc>.</source>
          <target xml:space="preserve">For example, to specify an animation that targets a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc> and uses key frames, you could declare key frames with <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DiscreteDoubleKeyFrame</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">LinearDoubleKeyFrame</pc></pc>, <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">SplineDoubleKeyFrame</pc></pc>, and <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">EasingDoubleKeyFrame</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can use any and all of these types within a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyFrames</pc> collection, to change the interpolation each time a new key frame is reached.</source>
          <target xml:space="preserve">You can use any and all of these types within a single <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyFrames</pc> collection, to change the interpolation each time a new key frame is reached.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For interpolation behavior, each key frame controls the interpolation until its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> time is reached.</source>
          <target xml:space="preserve">For interpolation behavior, each key frame controls the interpolation until its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> time is reached.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc> is reached at that time also.</source>
          <target xml:space="preserve">Its <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc> is reached at that time also.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">If there are more key frames beyond, the value then becomes the starting value for the next key frame in a sequence.</source>
          <target xml:space="preserve">If there are more key frames beyond, the value then becomes the starting value for the next key frame in a sequence.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">At the start of the animation, if no key frame with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> of "0:0:0" exists, the starting value is whatever the non-animated value of the property is.</source>
          <target xml:space="preserve">At the start of the animation, if no key frame with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> of "0:0:0" exists, the starting value is whatever the non-animated value of the property is.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This is similar to how a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">By</pc> animation acts if there is no <pc dataRefEnd="id8" dataRefStart="id7" id="p4">From</pc>.</source>
          <target xml:space="preserve">This is similar to how a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">By</pc> animation acts if there is no <pc dataRefEnd="id8" dataRefStart="id7" id="p4">From</pc>.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The duration of a key-frame animation is implicitly the duration equal to the highest <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> value set in any of its key frames.</source>
          <target xml:space="preserve">The duration of a key-frame animation is implicitly the duration equal to the highest <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> value set in any of its key frames.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.duration)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can set an explicit <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc> if you want, but be careful it's not shorter than a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">KeyTime</pc> in your own key frames or you'll cut off part of the animation.</source>
          <target xml:space="preserve">You can set an explicit <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc> if you want, but be careful it's not shorter than a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">KeyTime</pc> in your own key frames or you'll cut off part of the animation.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.duration)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210517)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In addition to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc>, you can set all the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Timeline</pc></pc> based properties on a key-frame animation, like you can with a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">From</pc>/<pc dataRefEnd="id12" dataRefStart="id11" id="p6">To</pc>/<pc dataRefEnd="id14" dataRefStart="id13" id="p7">By</pc> animation, because the key-frame animation classes also derive from <pc dataRefEnd="id16" dataRefStart="id15" id="p8">Timeline</pc>.</source>
          <target xml:space="preserve">In addition to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc>, you can set all the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Timeline</pc></pc> based properties on a key-frame animation, like you can with a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">From</pc>/<pc dataRefEnd="id12" dataRefStart="id11" id="p6">To</pc>/<pc dataRefEnd="id14" dataRefStart="id13" id="p7">By</pc> animation, because the key-frame animation classes also derive from <pc dataRefEnd="id16" dataRefStart="id15" id="p8">Timeline</pc>.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">These are:</source>
          <target xml:space="preserve">These are:</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.autoreverse)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoReverse</pc>
						</pc>: once the last key frame is reached, the frames are repeated in reverse order from the end.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">AutoReverse</pc>
						</pc>: once the last key frame is reached, the frames are repeated in reverse order from the end.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">This doubles the apparent duration of the animation.</source>
          <target xml:space="preserve">This doubles the apparent duration of the animation.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.begintime)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">BeginTime</pc>
						</pc>: delays the start of the animation.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">BeginTime</pc>
						</pc>: delays the start of the animation.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The timeline for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> values in the frames doesn't start counting until <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BeginTime</pc> is reached, so there's no risk of cutting off frames</source>
          <target xml:space="preserve">The timeline for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> values in the frames doesn't start counting until <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BeginTime</pc> is reached, so there's no risk of cutting off frames</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.fillbehavior)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">FillBehavior</pc>
						</pc>: controls what happens when the last key frame is reached.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">FillBehavior</pc>
						</pc>: controls what happens when the last key frame is reached.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">FillBehavior</pc> has no effect on any intermediate key frames.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">FillBehavior</pc> has no effect on any intermediate key frames.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.repeatbehaviorproperty)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">RepeatBehavior</pc>
						</pc>:</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">RepeatBehavior</pc>
						</pc>:</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Forever</pc>, then the key frames and their timeline repeat infinitely.</source>
          <target xml:space="preserve">If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Forever</pc>, then the key frames and their timeline repeat infinitely.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">If set to an iteration count, the timeline repeats that many times.</source>
          <target xml:space="preserve">If set to an iteration count, the timeline repeats that many times.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242377)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If set to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc>, the timeline repeats until that time is reached.</source>
          <target xml:space="preserve">If set to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Duration</pc></pc>, the timeline repeats until that time is reached.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">This might truncate the animation part way through the key frame sequence, if it's not an integer factor of the timeline's implicit duration.</source>
          <target xml:space="preserve">This might truncate the animation part way through the key frame sequence, if it's not an integer factor of the timeline's implicit duration.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.speedratioproperty)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">SpeedRatio</pc>
						</pc> (not commonly used)</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">SpeedRatio</pc>
						</pc> (not commonly used)</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">Linear key frames</source>
          <target xml:space="preserve">Linear key frames</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Linear key frames result in a simple linear interpolation of the value until the frame's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached.</source>
          <target xml:space="preserve">Linear key frames result in a simple linear interpolation of the value until the frame's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](storyboarded-animations.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This interpolation behavior is the most similar to the simpler <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">By</pc> animations described in the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Storyboarded animations</pc> topic.</source>
          <target xml:space="preserve">This interpolation behavior is the most similar to the simpler <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">By</pc> animations described in the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Storyboarded animations</pc> topic.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">Here's how to use a key-frame animation to scale the render height of a rectangle, using linear key frames.</source>
          <target xml:space="preserve">Here's how to use a key-frame animation to scale the render height of a rectangle, using linear key frames.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">This example runs an animation where the height of the rectangle increases slightly and linearly for the first 4 seconds, then scales rapidly for the last second until the rectangle is double the starting height.</source>
          <target xml:space="preserve">This example runs an animation where the height of the rectangle increases slightly and linearly for the first 4 seconds, then scales rapidly for the last second until the rectangle is double the starting height.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">Discrete key frames</source>
          <target xml:space="preserve">Discrete key frames</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">Discrete key frames don't use any interpolation at all.</source>
          <target xml:space="preserve">Discrete key frames don't use any interpolation at all.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached, the new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Value</pc> is simply applied.</source>
          <target xml:space="preserve">When a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached, the new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Value</pc> is simply applied.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Depending on which UI property is being animated, this often produces an animation that appears to "jump".</source>
          <target xml:space="preserve">Depending on which UI property is being animated, this often produces an animation that appears to "jump".</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">Be certain that this is the aesthetic behavior that you really want.</source>
          <target xml:space="preserve">Be certain that this is the aesthetic behavior that you really want.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">You can minimize the apparent jumps by increasing the number of key frames you declare, but if a smooth animation is your goal, you might be better off using linear or spline key frames instead.</source>
          <target xml:space="preserve">You can minimize the apparent jumps by increasing the number of key frames you declare, but if a smooth animation is your goal, you might be better off using linear or spline key frames instead.</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR225870)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/apps/Hh673723)</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
          <data id="id15">[</data>
          <data id="id16">](https://msdn.microsoft.com/library/windows/apps/BR243132)</data>
          <data id="id17">**</data>
          <data id="id18">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Discrete key frames are the only way to animate a value that isn't of type <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Point</pc></pc>, and <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Color</pc></pc>, with a <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">DiscreteObjectKeyFrame</pc></pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Discrete key frames are the only way to animate a value that isn't of type <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Point</pc></pc>, and <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Color</pc></pc>, with a <pc dataRefEnd="id16" dataRefStart="id15" id="p8"><pc dataRefEnd="id18" dataRefStart="id17" id="p9">DiscreteObjectKeyFrame</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">We'll discuss this in more detail later in this topic.</source>
          <target xml:space="preserve">We'll discuss this in more detail later in this topic.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">Spline key frames</source>
          <target xml:space="preserve">Spline key frames</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A spline key frame create a variable transition between values according to the value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> property.</source>
          <target xml:space="preserve">A spline key frame create a variable transition between values according to the value of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> property.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">This property specifies the first and second control points of a Bezier curve, which describes the acceleration of the animation.</source>
          <target xml:space="preserve">This property specifies the first and second control points of a Bezier curve, which describes the acceleration of the animation.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210307)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Basically a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeySpline</pc></pc> defines a function over time relationship where the function-time graph is the shape of that Bezier curve.</source>
          <target xml:space="preserve">Basically a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeySpline</pc></pc> defines a function over time relationship where the function-time graph is the shape of that Bezier curve.</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Typically you specify a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> value in a XAML shorthand attribute string that has four <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc> values separated by spaces or commas.</source>
          <target xml:space="preserve">Typically you specify a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc> value in a XAML shorthand attribute string that has four <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc> values separated by spaces or commas.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">These values are "X,Y" pairs for two control points of the Bezier curve.</source>
          <target xml:space="preserve">These values are "X,Y" pairs for two control points of the Bezier curve.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">"X" is time and "Y" is the function modifier to the value.</source>
          <target xml:space="preserve">"X" is time and "Y" is the function modifier to the value.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">Each value should always be between 0 and 1 inclusive.</source>
          <target xml:space="preserve">Each value should always be between 0 and 1 inclusive.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Without control point modification to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc>, the straight line from 0,0 to 1,1 is the representation of a function over time for a linear interpolation.</source>
          <target xml:space="preserve">Without control point modification to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc>, the straight line from 0,0 to 1,1 is the representation of a function over time for a linear interpolation.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">Your control points change the shape of that curve and thus the behavior of the function over time for the spline animation.</source>
          <target xml:space="preserve">Your control points change the shape of that curve and thus the behavior of the function over time for the spline animation.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">It's probably best to see this visually as a graph.</source>
          <target xml:space="preserve">It's probably best to see this visually as a graph.</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://samples.msdn.microsoft.com/Silverlight/SampleBrowser/index.htm#/?sref=KeySplineExample)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can run the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Silverlight key-spline visualizer sample</pc> in a browser to see how the control points modify the curve and how a sample animation runs when using it as a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeySpline</pc> value.</source>
          <target xml:space="preserve">You can run the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Silverlight key-spline visualizer sample</pc> in a browser to see how the control points modify the curve and how a sample animation runs when using it as a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeySpline</pc> value.</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210446)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This next example shows three different key frames applied to an animation, with the last one being a key spline animation for a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc> value (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SplineDoubleKeyFrame</pc></pc>).</source>
          <target xml:space="preserve">This next example shows three different key frames applied to an animation, with the last one being a key spline animation for a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc> value (<pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">SplineDoubleKeyFrame</pc></pc>).</target>
        </segment>
      </unit>
      <unit id="167">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note the string "0.6,0.0 0.9,0.00" applied for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc>.</source>
          <target xml:space="preserve">Note the string "0.6,0.0 0.9,0.00" applied for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeySpline</pc>.</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This produces a curve where the animation appears to run slowly at first but then rapidly reaches the value just before the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached.</source>
          <target xml:space="preserve">This produces a curve where the animation appears to run slowly at first but then rapidly reaches the value just before the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KeyTime</pc> is reached.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">This is just one easing function example.</source>
          <target xml:space="preserve">This is just one easing function example.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source xml:space="preserve">We'll cover more in the next section.</source>
          <target xml:space="preserve">We'll cover more in the next section.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">Easing functions</source>
          <target xml:space="preserve">Easing functions</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">Easing functions allow you to apply custom mathematical formulas to your animations.</source>
          <target xml:space="preserve">Easing functions allow you to apply custom mathematical formulas to your animations.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source xml:space="preserve">Mathematical operations are often useful to produce animations that simulate real-world physics in a 2-D coordinate system.</source>
          <target xml:space="preserve">Mathematical operations are often useful to produce animations that simulate real-world physics in a 2-D coordinate system.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source xml:space="preserve">For example, you may want an object to realistically bounce or behave as though it were on a spring.</source>
          <target xml:space="preserve">For example, you may want an object to realistically bounce or behave as though it were on a spring.</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You could use key frame or even <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">By</pc> animations to approximate these effects but it would take a significant amount of work and the animation would be less accurate than using a mathematical formula.</source>
          <target xml:space="preserve">You could use key frame or even <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">By</pc> animations to approximate these effects but it would take a significant amount of work and the animation would be less accurate than using a mathematical formula.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">Easing functions can be applied to animations in three ways:</source>
          <target xml:space="preserve">Easing functions can be applied to animations in three ways:</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">By using an easing keyframe in a keyframe animation, as described in the previous section.</source>
          <target xml:space="preserve">By using an easing keyframe in a keyframe animation, as described in the previous section.</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210267)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.easingdoublekeyframe.easingfunction.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR210279)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EasingColorKeyFrame.EasingFunction</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">EasingDoubleKeyFrame.EasingFunction</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">EasingPointKeyFrame.EasingFunction</pc></pc>.</source>
          <target xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">EasingColorKeyFrame.EasingFunction</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">EasingDoubleKeyFrame.EasingFunction</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">EasingPointKeyFrame.EasingFunction</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">By setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EasingFunction</pc> property on one of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">From</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">To</pc>/<pc dataRefEnd="id8" dataRefStart="id7" id="p4">By</pc> animation types.</source>
          <target xml:space="preserve">By setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EasingFunction</pc> property on one of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">From</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">To</pc>/<pc dataRefEnd="id8" dataRefStart="id7" id="p4">By</pc> animation types.</target>
        </segment>
      </unit>
      <unit id="180">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243075)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.doubleanimation.easingfunction.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR210354)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ColorAnimation.EasingFunction</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DoubleAnimation.EasingFunction</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">PointAnimation.EasingFunction</pc></pc>.</source>
          <target xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ColorAnimation.EasingFunction</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DoubleAnimation.EasingFunction</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">PointAnimation.EasingFunction</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="181">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209037)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209034)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">By setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GeneratedEasingFunction</pc></pc> as part of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VisualTransition</pc></pc>.</source>
          <target xml:space="preserve">By setting <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GeneratedEasingFunction</pc></pc> as part of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">VisualTransition</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="182">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209037)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/xaml/JJ819808)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This is specific to defining visual states for controls; for more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GeneratedEasingFunction</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Storyboards for visual states</pc>.</source>
          <target xml:space="preserve">This is specific to defining visual states for controls; for more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GeneratedEasingFunction</pc></pc> or <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Storyboards for visual states</pc>.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">Here is a list of the easing functions:</source>
          <target xml:space="preserve">Here is a list of the easing functions:</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243049)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackEase</pc>
						</pc>: Retracts the motion of an animation slightly before it begins to animate in the path indicated.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackEase</pc>
						</pc>: Retracts the motion of an animation slightly before it begins to animate in the path indicated.</target>
        </segment>
      </unit>
      <unit id="185">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243057)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">BounceEase</pc>
						</pc>: Creates a bouncing effect.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">BounceEase</pc>
						</pc>: Creates a bouncing effect.</target>
        </segment>
      </unit>
      <unit id="186">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243063)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">CircleEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using a circular function.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">CircleEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using a circular function.</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243126)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">CubicEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t3.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">CubicEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t3.</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210282)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElasticEase</pc>
						</pc>: Creates an animation that resembles a spring oscillating back and forth until it comes to rest.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElasticEase</pc>
						</pc>: Creates an animation that resembles a spring oscillating back and forth until it comes to rest.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210294)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">ExponentialEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using an exponential formula.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">ExponentialEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using an exponential formula.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210399)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.powerease.power)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">PowerEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using the formula f(t) = tp where p is equal to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Power</pc></pc> property.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">PowerEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using the formula f(t) = tp where p is equal to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Power</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210403)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuadraticEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t2.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuadraticEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t2.</target>
        </segment>
      </unit>
      <unit id="192">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210405)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuarticEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t4.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuarticEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using the formula f(t) = t4.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210407)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuinticEase</pc>
						</pc>: Create an animation that accelerates or decelerates using the formula f(t) = t5.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuinticEase</pc>
						</pc>: Create an animation that accelerates or decelerates using the formula f(t) = t5.</target>
        </segment>
      </unit>
      <unit id="194">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210439)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">SineEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using a sine formula.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">
							<pc dataRefEnd="id4" dataRefStart="id3" id="p2">SineEase</pc>
						</pc>: Creates an animation that accelerates or decelerates using a sine formula.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source xml:space="preserve">Some of the easing functions have their own properties.</source>
          <target xml:space="preserve">Some of the easing functions have their own properties.</target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243057)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.bounceease.bounces.aspx)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.media.animation.bounceease.bounciness.aspx)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BounceEase</pc></pc> has two properties <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Bounces</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Bounciness</pc></pc> that modify the function-over-time behavior of that particular <pc dataRefEnd="id14" dataRefStart="id13" id="p7">BounceEase</pc>.</source>
          <target xml:space="preserve">For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BounceEase</pc></pc> has two properties <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Bounces</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Bounciness</pc></pc> that modify the function-over-time behavior of that particular <pc dataRefEnd="id14" dataRefStart="id13" id="p7">BounceEase</pc>.</target>
        </segment>
      </unit>
      <unit id="197">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243126)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210275)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Other easing functions such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CubicEase</pc></pc> don't have properties other than the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">EasingMode</pc></pc> property that all easing functions share, and always produce the same function-over-time behavior.</source>
          <target xml:space="preserve">Other easing functions such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CubicEase</pc></pc> don't have properties other than the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">EasingMode</pc></pc> property that all easing functions share, and always produce the same function-over-time behavior.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">Some of these easing functions have a bit of overlap, depending on how you set properties on the easing functions that have properties.</source>
          <target xml:space="preserve">Some of these easing functions have a bit of overlap, depending on how you set properties on the easing functions that have properties.</target>
        </segment>
      </unit>
      <unit id="199">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210403)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210399)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.powerease.power)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuadraticEase</pc></pc> is exactly the same as a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PowerEase</pc></pc> with <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Power</pc></pc> equal to 2.</source>
          <target xml:space="preserve">For example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuadraticEase</pc></pc> is exactly the same as a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PowerEase</pc></pc> with <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Power</pc></pc> equal to 2.</target>
        </segment>
      </unit>
      <unit id="200">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243063)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210294)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">And <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CircleEase</pc></pc> is basically a default-value <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ExponentialEase</pc></pc>.</source>
          <target xml:space="preserve">And <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CircleEase</pc></pc> is basically a default-value <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ExponentialEase</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243049)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackEase</pc></pc> easing function is unique because it can change the value outside of the normal range as set by <pc dataRefEnd="id6" dataRefStart="id5" id="p3">From</pc>/<pc dataRefEnd="id8" dataRefStart="id7" id="p4">To</pc> or values of key frames.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BackEase</pc></pc> easing function is unique because it can change the value outside of the normal range as set by <pc dataRefEnd="id6" dataRefStart="id5" id="p3">From</pc>/<pc dataRefEnd="id8" dataRefStart="id7" id="p4">To</pc> or values of key frames.</target>
        </segment>
      </unit>
      <unit id="202">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">It starts the animation by changing the value in the opposite direction as would be expected from a normal <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc> behavior, goes back to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">From</pc> or starting value again, and then runs the animation as normal.</source>
          <target xml:space="preserve">It starts the animation by changing the value in the opposite direction as would be expected from a normal <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc> behavior, goes back to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">From</pc> or starting value again, and then runs the animation as normal.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source xml:space="preserve">In an earlier example, we showed how to declare an easing function for a key-frame animation.</source>
          <target xml:space="preserve">In an earlier example, we showed how to declare an easing function for a key-frame animation.</target>
        </segment>
      </unit>
      <unit id="204">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This next sample applies an easing function to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">By</pc> animation.</source>
          <target xml:space="preserve">This next sample applies an easing function to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">By</pc> animation.</target>
        </segment>
      </unit>
      <unit id="205">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.media.animation.timeline.duration)</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When an easing function is applied to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">By</pc> animation, it's changing the function- over-time characteristics of how the value interpolates between the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">From</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">To</pc> values over the <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Duration</pc></pc> of the animation.</source>
          <target xml:space="preserve">When an easing function is applied to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">From</pc>/<pc dataRefEnd="id4" dataRefStart="id3" id="p2">To</pc>/<pc dataRefEnd="id6" dataRefStart="id5" id="p3">By</pc> animation, it's changing the function- over-time characteristics of how the value interpolates between the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">From</pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">To</pc> values over the <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Duration</pc></pc> of the animation.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">Without an easing function, that would be a linear interpolation.</source>
          <target xml:space="preserve">Without an easing function, that would be a linear interpolation.</target>
        </segment>
      </unit>
      <unit id="207">
        <originalData>
          <data id="id1">&lt;span id="Discrete_object_value_animations"&gt;</data>
          <data id="id2">&lt;/span&gt;</data>
          <data id="id3">&lt;span id="discrete_object_value_animations"&gt;</data>
          <data id="id4">&lt;/span&gt;</data>
          <data id="id5">&lt;span id="DISCRETE_OBJECT_VALUE_ANIMATIONS"&gt;</data>
          <data id="id6">&lt;/span&gt;</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" />
						<ph dataRef="id3" id="ph3" />
						<ph dataRef="id4" id="ph4" />
						<ph dataRef="id5" id="ph5" />
						<ph dataRef="id6" id="ph6" />Discrete object value animations</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" />
						<ph dataRef="id3" id="ph3" />
						<ph dataRef="id4" id="ph4" />
						<ph dataRef="id5" id="ph5" />
						<ph dataRef="id6" id="ph6" />Discrete object value animations</target>
        </segment>
      </unit>
      <unit id="208">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR225870)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/Hh673723)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">One type of animation deserves special mention because it's the only way you can apply an animated value to properties that aren't of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Point</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Color</pc></pc>.</source>
          <target xml:space="preserve">One type of animation deserves special mention because it's the only way you can apply an animated value to properties that aren't of type <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Double</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Point</pc></pc>, or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Color</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="209">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210320)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This is the key-frame animation <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObjectAnimationUsingKeyFrames</pc></pc>.</source>
          <target xml:space="preserve">This is the key-frame animation <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObjectAnimationUsingKeyFrames</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="210">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/system.object.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Animating using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Object</pc></pc> values is different because there's no possibility of interpolating the values between the frames.</source>
          <target xml:space="preserve">Animating using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Object</pc></pc> values is different because there's no possibility of interpolating the values between the frames.</target>
        </segment>
      </unit>
      <unit id="211">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210342)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When the frame's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeyTime</pc></pc> is reached, the animated value is immediately set to the value specified in the key frame's <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Value</pc>.</source>
          <target xml:space="preserve">When the frame's <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">KeyTime</pc></pc> is reached, the animated value is immediately set to the value specified in the key frame's <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Value</pc>.</target>
        </segment>
      </unit>
      <unit id="212">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR243132)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Because there's no interpolation, there's only one key frame you use in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectAnimationUsingKeyFrames</pc> key frames collection: <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DiscreteObjectKeyFrame</pc></pc>.</source>
          <target xml:space="preserve">Because there's no interpolation, there's only one key frame you use in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectAnimationUsingKeyFrames</pc> key frames collection: <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DiscreteObjectKeyFrame</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="213">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210344)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR243132)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Value</pc></pc> of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DiscreteObjectKeyFrame</pc></pc> is often set using property element syntax, because the object value you are trying to set often is not expressible as a string to fill <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Value</pc> in attribute syntax.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Value</pc></pc> of a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DiscreteObjectKeyFrame</pc></pc> is often set using property element syntax, because the object value you are trying to set often is not expressible as a string to fill <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Value</pc> in attribute syntax.</target>
        </segment>
      </unit>
      <unit id="214">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt185588)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can still use attribute syntax if you use a reference such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc>.</source>
          <target xml:space="preserve">You can still use attribute syntax if you use a reference such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StaticResource</pc>.</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR210320)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR228076)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">One place you'll see an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObjectAnimationUsingKeyFrames</pc></pc> used in the default templates is when a template property references a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Brush</pc></pc> resource.</source>
          <target xml:space="preserve">One place you'll see an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObjectAnimationUsingKeyFrames</pc></pc> used in the default templates is when a template property references a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Brush</pc></pc> resource.</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242962)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh673723)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR208807)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">These resources are <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SolidColorBrush</pc></pc> objects, not just a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Color</pc></pc> value, and they use resources that are defined as system themes (<pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ThemeDictionaries</pc></pc>).</source>
          <target xml:space="preserve">These resources are <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">SolidColorBrush</pc></pc> objects, not just a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Color</pc></pc> value, and they use resources that are defined as system themes (<pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ThemeDictionaries</pc></pc>).</target>
        </segment>
      </unit>
      <unit id="217">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR209665)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">They can be assigned directly to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Brush</pc>-type value such as <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TextBlock.Foreground</pc></pc> and don't need to use indirect targeting.</source>
          <target xml:space="preserve">They can be assigned directly to a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Brush</pc>-type value such as <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">TextBlock.Foreground</pc></pc> and don't need to use indirect targeting.</target>
        </segment>
      </unit>
      <unit id="218">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/xaml/system.double.aspx)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR225870)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">But because a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SolidColorBrush</pc> is not <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Point</pc></pc>, or <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Color</pc>, you have to use a <pc dataRefEnd="id14" dataRefStart="id13" id="p7">ObjectAnimationUsingKeyFrames</pc> to use the resource.</source>
          <target xml:space="preserve">But because a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SolidColorBrush</pc> is not <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Double</pc></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Point</pc></pc>, or <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Color</pc>, you have to use a <pc dataRefEnd="id14" dataRefStart="id13" id="p7">ObjectAnimationUsingKeyFrames</pc> to use the resource.</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR243132)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR210320)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can use more than one <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DiscreteObjectKeyFrame</pc></pc> for an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ObjectAnimationUsingKeyFrames</pc></pc> frame set.</source>
          <target xml:space="preserve">You can use more than one <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DiscreteObjectKeyFrame</pc></pc> for an <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ObjectAnimationUsingKeyFrames</pc></pc> frame set.</target>
        </segment>
      </unit>
      <unit id="220">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242760)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This might be an interesting way to create a "slide show" animation by animating the value of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image.Source</pc></pc>, as an example scenario for where multiple object values might be useful.</source>
          <target xml:space="preserve">This might be an interesting way to create a "slide show" animation by animating the value of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image.Source</pc></pc>, as an example scenario for where multiple object values might be useful.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source xml:space="preserve">Property-path syntax</source>
          <target xml:space="preserve">Property-path syntax</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source xml:space="preserve">Dependency properties overview</source>
          <target xml:space="preserve">Dependency properties overview</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source xml:space="preserve">Storyboard</source>
          <target xml:space="preserve">Storyboard</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source xml:space="preserve">Storyboard.TargetProperty</source>
          <target xml:space="preserve">Storyboard.TargetProperty</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>