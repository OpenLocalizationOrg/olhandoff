<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">e6969bf7938c29b34f28c02e0f5c565be2ca2417</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">description: Links the value of a property in a control template to the value of some other exposed property on the templated control.</source>
          <target xml:space="preserve">description: Links the value of a property in a control template to the value of some other exposed property on the templated control.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">TemplateBinding can only be used within a ControlTemplate definition in XAML.</source>
          <target xml:space="preserve">TemplateBinding can only be used within a ControlTemplate definition in XAML.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">title: {TemplateBinding} markup extension'</source>
          <target xml:space="preserve">title: {TemplateBinding} markup extension'</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: FDE71086-9D42-4287-89ED-8FBFCDF169DC</source>
          <target xml:space="preserve">ms.assetid: FDE71086-9D42-4287-89ED-8FBFCDF169DC</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">{TemplateBinding} markup extension</source>
          <target xml:space="preserve">{TemplateBinding} markup extension</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Links the value of a property in a control template to the value of some other exposed property on the templated control.</source>
          <target xml:space="preserve">Links the value of a property in a control template to the value of some other exposed property on the templated control.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209391)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> can only be used within a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ControlTemplate</pc></pc> definition in XAML.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> can only be used within a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ControlTemplate</pc></pc> definition in XAML.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">XAML attribute usage</source>
          <target xml:space="preserve">XAML attribute usage</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">XAML attribute usage (for Setter property in template or style)</source>
          <target xml:space="preserve">XAML attribute usage (for Setter property in template or style)</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">XAML values</source>
          <target xml:space="preserve">XAML values</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">propertyName</source>
          <target xml:space="preserve">propertyName</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">The name of the property being set in the setter syntax.</source>
          <target xml:space="preserve">The name of the property being set in the setter syntax.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">This must be a dependency property.</source>
          <target xml:space="preserve">This must be a dependency property.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">sourceProperty</source>
          <target xml:space="preserve">sourceProperty</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">The name of another dependency property that exists on the type being templated.</source>
          <target xml:space="preserve">The name of another dependency property that exists on the type being templated.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">Remarks</source>
          <target xml:space="preserve">Remarks</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is a fundamental part of how you define a control template, either if you are a custom control author or if you are replacing a control template for existing controls.</source>
          <target xml:space="preserve">Using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is a fundamental part of how you define a control template, either if you are a custom control author or if you are replacing a control template for existing controls.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh465374)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Control templates</pc>.</source>
          <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Quickstart: Control templates</pc>.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">It's fairly common for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">propertyName</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">targetProperty</pc> to use the same property name.</source>
          <target xml:space="preserve">It's fairly common for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">propertyName</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">targetProperty</pc> to use the same property name.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">In this case, a control might define a property on itself and forward the property to an existing and intuitively named property of one of its component parts.</source>
          <target xml:space="preserve">In this case, a control might define a property on itself and forward the property to an existing and intuitively named property of one of its component parts.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209652)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">`&lt;TextBlock Text="{TemplateBinding Text}" .... /&gt;`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, a control that incorporates a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> in its compositing, which is used to display the control's own <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Text</pc> property, might include this XAML as a part in the control template: <ph dataRef="id7" id="ph1" /></source>
          <target xml:space="preserve">For example, a control that incorporates a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBlock</pc></pc> in its compositing, which is used to display the control's own <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Text</pc> property, might include this XAML as a part in the control template: <ph dataRef="id7" id="ph1" /></target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">The types used as the value for the source property and the target property must match.</source>
          <target xml:space="preserve">The types used as the value for the source property and the target property must match.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">There's no opportunity to introduce a converter when you're using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc>.</source>
          <target xml:space="preserve">There's no opportunity to introduce a converter when you're using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc>.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Failing to match values results in an error when parsing the XAML.</source>
          <target xml:space="preserve">Failing to match values results in an error when parsing the XAML.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">`{Binding RelativeSource={RelativeSource TemplatedParent}, Converter="..." ...}`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you need a converter you can use the verbose syntax for a template binding such as: <ph dataRef="id1" id="ph1" /></source>
          <target xml:space="preserve">If you need a converter you can use the verbose syntax for a template binding such as: <ph dataRef="id1" id="ph1" /></target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br209391)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Attempting to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> outside of a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ControlTemplate</pc></pc> definition in XAML will result in a parser error.</source>
          <target xml:space="preserve">Attempting to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> outside of a <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ControlTemplate</pc></pc> definition in XAML will result in a parser error.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> for cases where the templated parent value is also deferred as another binding.</source>
          <target xml:space="preserve">You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> for cases where the templated parent value is also deferred as another binding.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The evaluation for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> can wait until any required runtime bindings have values.</source>
          <target xml:space="preserve">The evaluation for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> can wait until any required runtime bindings have values.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is always a one-way binding.</source>
          <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is always a one-way binding.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">Both properties involved must be dependency properties.</source>
          <target xml:space="preserve">Both properties involved must be dependency properties.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is a markup extension.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is a markup extension.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</source>
          <target xml:space="preserve">Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">All markup extensions in XAML use the "{" and "}" characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute.</source>
          <target xml:space="preserve">All markup extensions in XAML use the "{" and "}" characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  In the Windows Runtime XAML processor implementation, there is no backing class representation for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TemplateBinding</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  In the Windows Runtime XAML processor implementation, there is no backing class representation for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">TemplateBinding</pc>.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is exclusively for use in XAML markup.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">TemplateBinding</pc> is exclusively for use in XAML markup.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">There isn't a straightforward way to reproduce the behavior in code.</source>
          <target xml:space="preserve">There isn't a straightforward way to reproduce the behavior in code.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">Quickstart: Control templates</source>
          <target xml:space="preserve">Quickstart: Control templates</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">Data binding in depth</source>
          <target xml:space="preserve">Data binding in depth</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">ControlTemplate</source>
          <target xml:space="preserve">ControlTemplate</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">XAML overview</source>
          <target xml:space="preserve">XAML overview</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">Dependency properties overview</source>
          <target xml:space="preserve">Dependency properties overview</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>