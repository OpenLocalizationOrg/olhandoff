<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">afccd56780f303dd8daf72267928a047385673df</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">description: Provides a means to specify the source of a binding in terms of a relative relationship in the run-time object graph.</source>
          <target xml:space="preserve">description: Provides a means to specify the source of a binding in terms of a relative relationship in the run-time object graph.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: {RelativeSource} markup extension'</source>
          <target xml:space="preserve">title: {RelativeSource} markup extension'</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: B87DEF36-BE1F-4C16-B32E-7A896BD09272</source>
          <target xml:space="preserve">ms.assetid: B87DEF36-BE1F-4C16-B32E-7A896BD09272</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">{RelativeSource} markup extension</source>
          <target xml:space="preserve">{RelativeSource} markup extension</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Provides a means to specify the source of a binding in terms of a relative relationship in the run-time object graph.</source>
          <target xml:space="preserve">Provides a means to specify the source of a binding in terms of a relative relationship in the run-time object graph.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">XAML attribute usage (Self mode)</source>
          <target xml:space="preserve">XAML attribute usage (Self mode)</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">XAML attribute usage (TemplatedParent mode)</source>
          <target xml:space="preserve">XAML attribute usage (TemplatedParent mode)</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">XAML values</source>
          <target xml:space="preserve">XAML values</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">| Term | Description |</source>
          <target xml:space="preserve">| Term | Description |</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209915)</data>
          <data id="id3">&lt;strong&gt;</data>
          <data id="id4">&lt;/strong&gt;</data>
          <data id="id5">&lt;strong&gt;</data>
          <data id="id6">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">| {RelativeSource Self} | Produces a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />Mode<ph dataRef="id4" id="ph2" /></pc> value is <ph dataRef="id5" id="ph3" />Self<ph dataRef="id6" id="ph4" />.</source>
          <target xml:space="preserve">| {RelativeSource Self} | Produces a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />Mode<ph dataRef="id4" id="ph2" /></pc> value is <ph dataRef="id5" id="ph3" />Self<ph dataRef="id6" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">The target element should be used as the source for this binding.</source>
          <target xml:space="preserve">The target element should be used as the source for this binding.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">This is useful for binding one property of an element to another property on the same element.</source>
          <target xml:space="preserve">This is useful for binding one property of an element to another property on the same element.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209391)</data>
          <data id="id3">&lt;strong&gt;</data>
          <data id="id4">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">| {RelativeSource TemplatedParent} | Produces a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />ControlTemplate<ph dataRef="id4" id="ph2" /></pc> is applied is the source for this binding.</source>
          <target xml:space="preserve">| {RelativeSource TemplatedParent} | Produces a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />ControlTemplate<ph dataRef="id4" id="ph2" /></pc> is applied is the source for this binding.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">This is useful for applying runtime information to bindings at the template level.</source>
          <target xml:space="preserve">This is useful for applying runtime information to bindings at the template level.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Remarks</source>
          <target xml:space="preserve">Remarks</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209820)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209831)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">[</data>
          <data id="id12">](binding-markup-extension.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> can set <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Binding.RelativeSource</pc></pc> either as an attribute on a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Binding</pc> object element or as a component within a <pc dataRefEnd="id12" dataRefStart="id11" id="p6">{Binding} markup extension</pc>.</source>
          <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> can set <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Binding.RelativeSource</pc></pc> either as an attribute on a <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Binding</pc> object element or as a component within a <pc dataRefEnd="id12" dataRefStart="id11" id="p6">{Binding} markup extension</pc>.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">This is why two different XAML syntaxes are shown.</source>
          <target xml:space="preserve">This is why two different XAML syntaxes are shown.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](binding-markup-extension.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">RelativeSource</pc> is similar to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding} markup extension</pc> in that it is a markup extension that is capable of returning instances of itself, supporting a string-based construction that essentially passes an argument to the constructor.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">RelativeSource</pc> is similar to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding} markup extension</pc> in that it is a markup extension that is capable of returning instances of itself, supporting a string-based construction that essentially passes an argument to the constructor.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209915)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In this case, the argument being passed is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Mode</pc></pc> value.</source>
          <target xml:space="preserve">In this case, the argument being passed is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Mode</pc></pc> value.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Self</pc> mode is useful for cases where the same element should be used as the source object and target object for a binding, but different properties are the source and the target.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Self</pc> mode is useful for cases where the same element should be used as the source object and target object for a binding, but different properties are the source and the target.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209828)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This is useful for binding one property of an element to another property on the same element, and is a variation on <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElementName</pc></pc> binding that does not require naming and then self-referencing the element.</source>
          <target xml:space="preserve">This is useful for binding one property of an element to another property on the same element, and is a variation on <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElementName</pc></pc> binding that does not require naming and then self-referencing the element.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209826)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you bind one property of an element to another property on the same element, either the properties must use the same property type, or you must also use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc> on the binding to convert the values.</source>
          <target xml:space="preserve">If you bind one property of an element to another property on the same element, either the properties must use the same property type, or you must also use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Converter</pc></pc> on the binding to convert the values.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br208718)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br208751)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/br209419)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/br209006)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, you could use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Height</pc></pc> as a source for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Width</pc></pc> without conversion, but you'd need a converter to use <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">IsEnabled</pc></pc> as a source for <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Visibility</pc></pc>.</source>
          <target xml:space="preserve">For example, you could use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Height</pc></pc> as a source for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Width</pc></pc> without conversion, but you'd need a converter to use <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">IsEnabled</pc></pc> as a source for <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Visibility</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Here's an example.</source>
          <target xml:space="preserve">Here's an example.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243371)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](binding-markup-extension.md)</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/br208718)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/apps/br208751)</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rectangle</pc></pc> uses a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding} markup extension</pc> so that its <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Height</pc></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Width</pc></pc> are always equal and it renders as a square.</source>
          <target xml:space="preserve">This <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Rectangle</pc></pc> uses a <pc dataRefEnd="id6" dataRefStart="id5" id="p3">{Binding} markup extension</pc> so that its <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">Height</pc></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">Width</pc></pc> are always equal and it renders as a square.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">Only the Height is set as a fixed value.</source>
          <target xml:space="preserve">Only the Height is set as a fixed value.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br208713)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For this <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rectangle</pc> its default <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc></pc> is <pc dataRefEnd="id8" dataRefStart="id7" id="p4">null</pc>, not <pc dataRefEnd="id10" dataRefStart="id9" id="p5">this</pc>.</source>
          <target xml:space="preserve">For this <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rectangle</pc> its default <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc></pc> is <pc dataRefEnd="id8" dataRefStart="id7" id="p4">null</pc>, not <pc dataRefEnd="id10" dataRefStart="id9" id="p5">this</pc>.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">`RelativeSource={RelativeSource Self}`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">So to establish the data context source to be the object itself (and enable binding to its other properties) we use the <ph dataRef="id1" id="ph1" /> argument in the {Binding} markup extension usage.</source>
          <target xml:space="preserve">So to establish the data context source to be the object itself (and enable binding to its other properties) we use the <ph dataRef="id1" id="ph1" /> argument in the {Binding} markup extension usage.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">`RelativeSource={RelativeSource Self}`</data>
          <data id="id2">[</data>
          <data id="id3">](https://msdn.microsoft.com/library/windows/apps/br208713)</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">[</data>
          <data id="id7">](https://msdn.microsoft.com/library/windows/apps/br227503)</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Another technique that can be useful is to use <ph dataRef="id1" id="ph1" /> as a way to set an object's <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">DataContext</pc></pc> to itself, where the <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">Page</pc></pc> class has been extended with a custom property that's already providing a ready-to-go view model for its own data binding.</source>
          <target xml:space="preserve">Another technique that can be useful is to use <ph dataRef="id1" id="ph1" /> as a way to set an object's <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">DataContext</pc></pc> to itself, where the <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">Page</pc></pc> class has been extended with a custom property that's already providing a ready-to-go view model for its own data binding.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">`&lt;common:LayoutAwarePage ... DataContext="{Binding DefaultViewModel, RelativeSource={RelativeSource Self}}"&gt;`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You see this technique in some of the SDK examples: <ph dataRef="id1" id="ph1" /></source>
          <target xml:space="preserve">You see this technique in some of the SDK examples: <ph dataRef="id1" id="ph1" /></target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br209831)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The XAML usage for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">RelativeSource</pc> shows only the usage for which it is intended: setting a value for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Binding.RelativeSource</pc></pc> in XAML as part of a binding expression.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The XAML usage for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">RelativeSource</pc> shows only the usage for which it is intended: setting a value for <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Binding.RelativeSource</pc></pc> in XAML as part of a binding expression.</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br209913)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Theoretically, other usages are possible if setting a property where the value is <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RelativeSource</pc></pc>.</source>
          <target xml:space="preserve">Theoretically, other usages are possible if setting a property where the value is <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RelativeSource</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">XAML overview</source>
          <target xml:space="preserve">XAML overview</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">Data binding in depth</source>
          <target xml:space="preserve">Data binding in depth</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">{Binding} markup extension</source>
          <target xml:space="preserve">{Binding} markup extension</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">Binding</source>
          <target xml:space="preserve">Binding</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">RelativeSource</source>
          <target xml:space="preserve">RelativeSource</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>