<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">a8248411c086179840065aa2581821a10f3e751b</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">Description: Put string resources for your UI into resource files.</source>
          <target xml:space="preserve">Description: Put string resources for your UI into resource files.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">You can then reference those strings from your code or markup.</source>
          <target xml:space="preserve">You can then reference those strings from your code or markup.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">title: Put UI strings into resources</source>
          <target xml:space="preserve">title: Put UI strings into resources</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: E420B9BB-C0F6-4EC0-BA3A-BA2875B69722</source>
          <target xml:space="preserve">ms.assetid: E420B9BB-C0F6-4EC0-BA3A-BA2875B69722</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">label: Put UI strings into resources</source>
          <target xml:space="preserve">label: Put UI strings into resources</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">template: detail.hbs</source>
          <target xml:space="preserve">template: detail.hbs</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Put UI strings into resources</source>
          <target xml:space="preserve">Put UI strings into resources</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Important APIs</source>
          <target xml:space="preserve">Important APIs</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">ApplicationModel.Resources.ResourceLoader</source>
          <target xml:space="preserve">ApplicationModel.Resources.ResourceLoader</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">WinJS.Resources.processAll</source>
          <target xml:space="preserve">WinJS.Resources.processAll</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Put string resources for your UI into resource files.</source>
          <target xml:space="preserve">Put string resources for your UI into resource files.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">You can then reference those strings from your code or markup.</source>
          <target xml:space="preserve">You can then reference those strings from your code or markup.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">This topic shows the steps to add several language string resources to your Universal Windows app, and how to briefly test it.</source>
          <target xml:space="preserve">This topic shows the steps to add several language string resources to your Universal Windows app, and how to briefly test it.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">Put strings into resource files, instead of putting them directly in code or markup.</source>
          <target xml:space="preserve">Put strings into resource files, instead of putting them directly in code or markup.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Open your solution (or create a new one) in Visual Studio.</source>
          <target xml:space="preserve">Open your solution (or create a new one) in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Open package.appxmanifest in Visual Studio, go to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application</pc> tab, and (for this example) set the Default language to "en-US".</source>
          <target xml:space="preserve">Open package.appxmanifest in Visual Studio, go to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application</pc> tab, and (for this example) set the Default language to "en-US".</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">If there are multiple package.appxmanifest files in your solution, do this for each one.</source>
          <target xml:space="preserve">If there are multiple package.appxmanifest files in your solution, do this for each one.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This specifies the default language for the project.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This specifies the default language for the project.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">The default language resources are used if the user's preferred language or display languages do not match the language resources provided in the application.</source>
          <target xml:space="preserve">The default language resources are used if the user's preferred language or display languages do not match the language resources provided in the application.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">Create a folder to contain the resource files.</source>
          <target xml:space="preserve">Create a folder to contain the resource files.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the Solution Explorer, right-click the project (the Shared project if your solution contains multiple projects) and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc> &amp;gt; <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New Folder</pc>.</source>
          <target xml:space="preserve">In the Solution Explorer, right-click the project (the Shared project if your solution contains multiple projects) and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc> &amp;gt; <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New Folder</pc>.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">Name the new folder "Strings".</source>
          <target xml:space="preserve">Name the new folder "Strings".</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If the new folder is not visible in Solution Explorer, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Project</pc> &amp;gt; <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> from the Microsoft Visual Studio menu while the project is still selected.</source>
          <target xml:space="preserve">If the new folder is not visible in Solution Explorer, select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Project</pc> &amp;gt; <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show All Files</pc> from the Microsoft Visual Studio menu while the project is still selected.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Create a sub-folder and a resource file for English (United States).</source>
          <target xml:space="preserve">Create a sub-folder and a resource file for English (United States).</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">Right-click the Strings folder and add a new folder beneath it.</source>
          <target xml:space="preserve">Right-click the Strings folder and add a new folder beneath it.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Name it "en-US".</source>
          <target xml:space="preserve">Name it "en-US".</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=227302)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The resource file is to be placed in a folder that has been named for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BCP-47</pc> language tag.</source>
          <target xml:space="preserve">The resource file is to be placed in a folder that has been named for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BCP-47</pc> language tag.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965324)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to name resources using qualifiers</pc> for details on the language qualifier and a list of common language tags.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to name resources using qualifiers</pc> for details on the language qualifier and a list of common language tags.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Right-click the en-US folder and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc> &amp;gt; <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New Item…</pc>.</source>
          <target xml:space="preserve">Right-click the en-US folder and select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc> &amp;gt; <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New Item…</pc>.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML:</pc> Select "Resources File (.resw)".</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML:</pc> Select "Resources File (.resw)".</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">HTML:</pc> Select "Resources File (.resjson)".</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">HTML:</pc> Select "Resources File (.resjson)".</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc>.</source>
          <target xml:space="preserve">Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc>.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This adds a resource file with the default name "Resources.resw" (for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc>) or "resources.rejson" (for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HTML</pc>).</source>
          <target xml:space="preserve">This adds a resource file with the default name "Resources.resw" (for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc>) or "resources.rejson" (for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HTML</pc>).</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">We recommend that you use this default filename.</source>
          <target xml:space="preserve">We recommend that you use this default filename.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/xaml/hh965323)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Apps can partition their resources into other files, but you must be careful to refer to them correctly (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to load string resources</pc>).</source>
          <target xml:space="preserve">Apps can partition their resources into other files, but you must be careful to refer to them correctly (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to load string resources</pc>).</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML only:</pc> If you have .resx files with only string resources from previous .NET projects, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add</pc> &amp;gt; <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Existing Item…</pc>, add the .resx file, and rename it to .resw.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML only:</pc> If you have .resx files with only string resources from previous .NET projects, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add</pc> &amp;gt; <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Existing Item…</pc>, add the .resx file, and rename it to .resw.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source xml:space="preserve">Open the file and use the editor to add these resources:</source>
          <target xml:space="preserve">Open the file and use the editor to add these resources:</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">XAML:</source>
          <target xml:space="preserve">XAML:</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source xml:space="preserve">Strings/en-US/Resources.resw</source>
          <target xml:space="preserve">Strings/en-US/Resources.resw</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source xml:space="preserve">add resource, english</source>
          <target xml:space="preserve">add resource, english</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">In this example, "Greeting.Text" and "Farewell" identify the strings that are to be displayed.</source>
          <target xml:space="preserve">In this example, "Greeting.Text" and "Farewell" identify the strings that are to be displayed.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">"Greeting.Width" identifies the Width property of the "Greeting" string.</source>
          <target xml:space="preserve">"Greeting.Width" identifies the Width property of the "Greeting" string.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source xml:space="preserve">The comments are a good place to provide any special instructions to translators who localize the strings to other languages.</source>
          <target xml:space="preserve">The comments are a good place to provide any special instructions to translators who localize the strings to other languages.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">HTML:</source>
          <target xml:space="preserve">HTML:</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source xml:space="preserve">The new file contains default content.</source>
          <target xml:space="preserve">The new file contains default content.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">Replace the content with the following (which may be similar to the default):</source>
          <target xml:space="preserve">Replace the content with the following (which may be similar to the default):</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Strings/en-US/resources.resjson</source>
          <target xml:space="preserve">Strings/en-US/resources.resjson</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source xml:space="preserve">This is strict JavaScript Object Notation (JSON) syntax where a comma must be placed after each name/value pair, except the last one.</source>
          <target xml:space="preserve">This is strict JavaScript Object Notation (JSON) syntax where a comma must be placed after each name/value pair, except the last one.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source xml:space="preserve">In this sample, "greeting" and "farewell" identify the strings that are to be displayed.</source>
          <target xml:space="preserve">In this sample, "greeting" and "farewell" identify the strings that are to be displayed.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source xml:space="preserve">The other pairs ("\_greeting.comment" and "\_farewell.comment") are comments that describe the strings.</source>
          <target xml:space="preserve">The other pairs ("\_greeting.comment" and "\_farewell.comment") are comments that describe the strings.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source xml:space="preserve">The comments are a good place to provide any special instructions to translators who localize the strings to other languages.</source>
          <target xml:space="preserve">The comments are a good place to provide any special instructions to translators who localize the strings to other languages.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">Associate controls to resources.</source>
          <target xml:space="preserve">Associate controls to resources.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">XAML only:</source>
          <target xml:space="preserve">XAML only:</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source xml:space="preserve">You need to associate every control that needs localized text with the .resw file.</source>
          <target xml:space="preserve">You need to associate every control that needs localized text with the .resw file.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You do this using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Uid</pc> attribute on your XAML elements like this:</source>
          <target xml:space="preserve">You do this using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">x:Uid</pc> attribute on your XAML elements like this:</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For the resource name, you give the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uid</pc> attribute value, plus you specify what property is to get the translated string (in this case the Text property).</source>
          <target xml:space="preserve">For the resource name, you give the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Uid</pc> attribute value, plus you specify what property is to get the translated string (in this case the Text property).</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source xml:space="preserve">You can specify other properties/values for different languages such as Greeting.Width, but be careful with such layout-related properties.</source>
          <target xml:space="preserve">You can specify other properties/values for different languages such as Greeting.Width, but be careful with such layout-related properties.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source xml:space="preserve">You should strive to allow the controls to lay out dynamically based on the device's screen.</source>
          <target xml:space="preserve">You should strive to allow the controls to lay out dynamically based on the device's screen.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source xml:space="preserve">Note that attached properties are handled differently in resw files such as AutomationPeer.Name.</source>
          <target xml:space="preserve">Note that attached properties are handled differently in resw files such as AutomationPeer.Name.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source xml:space="preserve">You need to explicitly write out the namespace like this:</source>
          <target xml:space="preserve">You need to explicitly write out the namespace like this:</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source xml:space="preserve">Add string resource identifiers to code and markup.</source>
          <target xml:space="preserve">Add string resource identifiers to code and markup.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source xml:space="preserve">XAML:</source>
          <target xml:space="preserve">XAML:</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source xml:space="preserve">In your code, you can dynamically reference strings:</source>
          <target xml:space="preserve">In your code, you can dynamically reference strings:</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">C</source>
          <target xml:space="preserve">C</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">C++</source>
          <target xml:space="preserve">C++</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source xml:space="preserve">HTML:</source>
          <target xml:space="preserve">HTML:</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">Add references to the Windows Library for JavaScript to your HTML file, if they aren't already there.</source>
          <target xml:space="preserve">Add references to the Windows Library for JavaScript to your HTML file, if they aren't already there.</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The following code shows the HTML for the default.html file of the Windows project that is generated when you create a new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Blank App (Universal Windows)</pc> JavaScript project in Visual Studio.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The following code shows the HTML for the default.html file of the Windows project that is generated when you create a new <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Blank App (Universal Windows)</pc> JavaScript project in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source xml:space="preserve">Note that the file already contains references to the WinJS.</source>
          <target xml:space="preserve">Note that the file already contains references to the WinJS.</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br211864)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the JavaScript code that accompanies your HTML file, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.Resources.processAll</pc></pc> function when your HTML is loaded.</source>
          <target xml:space="preserve">In the JavaScript code that accompanies your HTML file, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.Resources.processAll</pc></pc> function when your HTML is loaded.</target>
        </segment>
      </unit>
      <unit id="173">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/jj126158)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br211864)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">*</data>
          <data id="id10">*</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/apps/hh770590)</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
          <data id="id15">*</data>
          <data id="id16">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If additional HTML is loaded into a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.Pages.PageControl</pc></pc> object, call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.Resources.processAll</pc></pc>(<pc dataRefEnd="id10" dataRefStart="id9" id="p5">element</pc>) in the page control's <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">IPageControlMembers.ready</pc></pc> method, where <pc dataRefEnd="id16" dataRefStart="id15" id="p8">element</pc> is the HTML element (and its child elements) being loaded.</source>
          <target xml:space="preserve">If additional HTML is loaded into a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">WinJS.UI.Pages.PageControl</pc></pc> object, call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">WinJS.Resources.processAll</pc></pc>(<pc dataRefEnd="id10" dataRefStart="id9" id="p5">element</pc>) in the page control's <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">IPageControlMembers.ready</pc></pc> method, where <pc dataRefEnd="id16" dataRefStart="id15" id="p8">element</pc> is the HTML element (and its child elements) being loaded.</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=227301)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This example is based on scenario 6 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application resources and localization sample</pc>:</source>
          <target xml:space="preserve">This example is based on scenario 6 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Application resources and localization sample</pc>:</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source xml:space="preserve">In the HTML, refer to the string resources using the resource identifiers ('greeting' and 'farewell') from the resource files.</source>
          <target xml:space="preserve">In the HTML, refer to the string resources using the resource identifiers ('greeting' and 'farewell') from the resource files.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">Refer to string resources for attributes.</source>
          <target xml:space="preserve">Refer to string resources for attributes.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The general pattern of the data-win-res attribute for HTML replacement is data-win-res="{<pc dataRefEnd="id2" dataRefStart="id1" id="p1">propertyname1</pc>: '<pc dataRefEnd="id4" dataRefStart="id3" id="p2">resource ID</pc>', <pc dataRefEnd="id6" dataRefStart="id5" id="p3">propertyname2</pc>: '<pc dataRefEnd="id8" dataRefStart="id7" id="p4">resource ID2</pc>'}".</source>
          <target xml:space="preserve">The general pattern of the data-win-res attribute for HTML replacement is data-win-res="{<pc dataRefEnd="id2" dataRefStart="id1" id="p1">propertyname1</pc>: '<pc dataRefEnd="id4" dataRefStart="id3" id="p2">resource ID</pc>', <pc dataRefEnd="id6" dataRefStart="id5" id="p3">propertyname2</pc>: '<pc dataRefEnd="id8" dataRefStart="id7" id="p4">resource ID2</pc>'}".</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If the string does not contain any markup, then bind the resource wherever possible to the textContent property instead of innerHTML.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If the string does not contain any markup, then bind the resource wherever possible to the textContent property instead of innerHTML.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">The textContent property is much faster to replace than innerHTML.</source>
          <target xml:space="preserve">The textContent property is much faster to replace than innerHTML.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">Refer to string resources in JavaScript.</source>
          <target xml:space="preserve">Refer to string resources in JavaScript.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">Add folders and resource files for two additional languages.</source>
          <target xml:space="preserve">Add folders and resource files for two additional languages.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source xml:space="preserve">Add another folder under the Strings folder for German.</source>
          <target xml:space="preserve">Add another folder under the Strings folder for German.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">Name the folder "de-DE" for Deutsch (Deutschland).</source>
          <target xml:space="preserve">Name the folder "de-DE" for Deutsch (Deutschland).</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source xml:space="preserve">Create another resources file in the de-DE folder, and add the following:</source>
          <target xml:space="preserve">Create another resources file in the de-DE folder, and add the following:</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source xml:space="preserve">XAML:</source>
          <target xml:space="preserve">XAML:</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">strings/de-DE/Resources.resw</source>
          <target xml:space="preserve">strings/de-DE/Resources.resw</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source xml:space="preserve">add resource, german</source>
          <target xml:space="preserve">add resource, german</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source xml:space="preserve">HTML:</source>
          <target xml:space="preserve">HTML:</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">strings/de-DE/resources.resjson</source>
          <target xml:space="preserve">strings/de-DE/resources.resjson</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source xml:space="preserve">Create one more folder named "fr-FR", for français (France).</source>
          <target xml:space="preserve">Create one more folder named "fr-FR", for français (France).</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">Create a new resources file and add the following:</source>
          <target xml:space="preserve">Create a new resources file and add the following:</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">XAML:</source>
          <target xml:space="preserve">XAML:</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source xml:space="preserve">strings/fr-FR/Resources.resw</source>
          <target xml:space="preserve">strings/fr-FR/Resources.resw</target>
        </segment>
      </unit>
      <unit id="194">
        <originalData>
          <data id="id1">![</data>
          <data id="id2">](images/addresource-fr-fr.png)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />add resource, french<ph dataRef="id2" id="ph2" /></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />add resource, french<ph dataRef="id2" id="ph2" /></target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">HTML:</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">HTML:</pc>
					</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source xml:space="preserve">strings/fr-FR/resources.resjson</source>
          <target xml:space="preserve">strings/fr-FR/resources.resjson</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">Build and run the app.</source>
          <target xml:space="preserve">Build and run the app.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source xml:space="preserve">Test the app for your default display language.</source>
          <target xml:space="preserve">Test the app for your default display language.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source xml:space="preserve">Press F5 to build and run the app.</source>
          <target xml:space="preserve">Press F5 to build and run the app.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">Note that the greeting and farewell are displayed in the user's preferred language.</source>
          <target xml:space="preserve">Note that the greeting and farewell are displayed in the user's preferred language.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source xml:space="preserve">Exit the app.</source>
          <target xml:space="preserve">Exit the app.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source xml:space="preserve">Test the app for the other languages.</source>
          <target xml:space="preserve">Test the app for the other languages.</target>
        </segment>
      </unit>
      <unit id="203">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Bring up <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Settings</pc> on your device.</source>
          <target xml:space="preserve">Bring up <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Settings</pc> on your device.</target>
        </segment>
      </unit>
      <unit id="204">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Time &amp; language</pc>.</source>
          <target xml:space="preserve">Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Time &amp; language</pc>.</target>
        </segment>
      </unit>
      <unit id="205">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Region &amp; language</pc> (or on a phone or phone emulator, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Language</pc>).</source>
          <target xml:space="preserve">Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Region &amp; language</pc> (or on a phone or phone emulator, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Language</pc>).</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">Note that the language that was displayed when you ran the app is the top language listed that is English, German, or French.</source>
          <target xml:space="preserve">Note that the language that was displayed when you ran the app is the top language listed that is English, German, or French.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source xml:space="preserve">If your top language is not one of these three, the app falls back to the next one on the list that the app supports.</source>
          <target xml:space="preserve">If your top language is not one of these three, the app falls back to the next one on the list that the app supports.</target>
        </segment>
      </unit>
      <unit id="208">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you do not have all three of these languages on your machine, add the missing ones by clicking <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add a language</pc> and adding them to the list.</source>
          <target xml:space="preserve">If you do not have all three of these languages on your machine, add the missing ones by clicking <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add a language</pc> and adding them to the list.</target>
        </segment>
      </unit>
      <unit id="209">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To test the app with another language, select the language in the list and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set as default</pc> (or on a phone or phone emulator, tap and hold the language in the list and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Move up</pc> until it is at the top).</source>
          <target xml:space="preserve">To test the app with another language, select the language in the list and click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set as default</pc> (or on a phone or phone emulator, tap and hold the language in the list and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Move up</pc> until it is at the top).</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source xml:space="preserve">Then run the app.</source>
          <target xml:space="preserve">Then run the app.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source xml:space="preserve">How to name resources using qualifiers</source>
          <target xml:space="preserve">How to name resources using qualifiers</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source xml:space="preserve">How to load string resources</source>
          <target xml:space="preserve">How to load string resources</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source xml:space="preserve">The BCP-47 language tag</source>
          <target xml:space="preserve">The BCP-47 language tag</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>