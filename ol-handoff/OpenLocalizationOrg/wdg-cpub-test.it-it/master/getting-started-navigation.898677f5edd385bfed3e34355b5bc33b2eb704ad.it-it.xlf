<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">b29b3a2822da6791ac3de48ff4d3ca714c58366f</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: F4DF5C5F-C886-4483-BBDA-498C4E2C1BAF</source>
          <target xml:space="preserve">ms.assetid: F4DF5C5F-C886-4483-BBDA-498C4E2C1BAF</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">description: Getting started: Navigation</source>
          <target xml:space="preserve">description: Getting started: Navigation</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">title: Getting started: Navigation</source>
          <target xml:space="preserve">title: Getting started: Navigation</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Getting started: Navigation</source>
          <target xml:space="preserve">Getting started: Navigation</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">Adding navigation</source>
          <target xml:space="preserve">Adding navigation</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">iOS provides the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UINavigationController</pc> class to help with in-app navigation: you can push and pop views to create the hierarchy of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">UIViewControllers</pc> that define your app.</source>
          <target xml:space="preserve">iOS provides the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UINavigationController</pc> class to help with in-app navigation: you can push and pop views to create the hierarchy of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">UIViewControllers</pc> that define your app.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">In contrast, a Windows 10 app containing multiple views takes more of a web-site approach to navigation.</source>
          <target xml:space="preserve">In contrast, a Windows 10 app containing multiple views takes more of a web-site approach to navigation.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">You can imagine your users hopping from page to page as they click on controls to work their way through the app.</source>
          <target xml:space="preserve">You can imagine your users hopping from page to page as they click on controls to work their way through the app.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn958438)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation design basics</pc>.</source>
          <target xml:space="preserve">For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation design basics</pc>.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242682)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">One of the ways to manage this navigation in a Windows 10 app is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc></pc> class.</source>
          <target xml:space="preserve">One of the ways to manage this navigation in a Windows 10 app is to use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc></pc> class.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">The following walkthrough shows you how to try this out.</source>
          <target xml:space="preserve">The following walkthrough shows you how to try this out.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Continuing with the solution you started earlier, open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage.xaml</pc> file, and add a button in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Design</pc> view.</source>
          <target xml:space="preserve">Continuing with the solution you started earlier, open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MainPage.xaml</pc> file, and add a button in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Design</pc> view.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Change the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Content</pc> property from "Button" to "Go To Page".</source>
          <target xml:space="preserve">Change the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Content</pc> property from "Button" to "Go To Page".</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Then, create a handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> event, as shown in the following figure.</source>
          <target xml:space="preserve">Then, create a handler for the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Click</pc> event, as shown in the following figure.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you don't remember how to do this, review the walkthrough in the previous section (Hint: double-click the button in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Design</pc> view).</source>
          <target xml:space="preserve">If you don't remember how to do this, review the walkthrough in the previous section (Hint: double-click the button in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Design</pc> view).</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">adding a button and its click event in visual studio</source>
          <target xml:space="preserve">adding a button and its click event in visual studio</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Let's add a new page.</source>
          <target xml:space="preserve">Let's add a new page.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution</pc> view, tap the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Project</pc> menu, and tap <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add New Item</pc>.</source>
          <target xml:space="preserve">In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Solution</pc> view, tap the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Project</pc> menu, and tap <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add New Item</pc>.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Page</pc> as shown in the following figure, and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add</pc>.</source>
          <target xml:space="preserve">Tap <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Blank Page</pc> as shown in the following figure, and then tap <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add</pc>.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source xml:space="preserve">adding a new page in visual studio</source>
          <target xml:space="preserve">adding a new page in visual studio</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source xml:space="preserve">Next, add a button to the BlankPage.xaml file.</source>
          <target xml:space="preserve">Next, add a button to the BlankPage.xaml file.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">` &lt;AppBarButton Icon="Back"/&gt;`</data>
          <data id="id4">`&lt;Grid&gt; &lt;/Grid&gt;`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Let's use the AppBarButton control, and let's give it a back arrow image: in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc> view, add <ph dataRef="id3" id="ph1" /> between the <ph dataRef="id4" id="ph2" /> elements.</source>
          <target xml:space="preserve">Let's use the AppBarButton control, and let's give it a back arrow image: in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc> view, add <ph dataRef="id3" id="ph1" /> between the <ph dataRef="id4" id="ph2" /> elements.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Now, let's add an event handler to the button: double-click the control in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Design</pc> view and Microsoft Visual Studio adds the text "AppBarButton\_Click" to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc> box, as shown in the following figure, and then adds and displays the corresponding event handler in the BlankPage.xaml.cs file.</source>
          <target xml:space="preserve">Now, let's add an event handler to the button: double-click the control in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Design</pc> view and Microsoft Visual Studio adds the text "AppBarButton\_Click" to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Click</pc> box, as shown in the following figure, and then adds and displays the corresponding event handler in the BlankPage.xaml.cs file.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">adding a back button and its click event in visual studio</source>
          <target xml:space="preserve">adding a back button and its click event in visual studio</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">`&lt;AppBarButton&gt;`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you return to the BlankPage.xaml file's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc> view, the <ph dataRef="id3" id="ph1" /> element's Extensible Application Markup Language (XAML) code should now look like this:</source>
          <target xml:space="preserve">If you return to the BlankPage.xaml file's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML</pc> view, the <ph dataRef="id3" id="ph1" /> element's Extensible Application Markup Language (XAML) code should now look like this:</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">Return to the BlankPage.xaml.cs file, and add this code to go to the previous page after the user taps the button.</source>
          <target xml:space="preserve">Return to the BlankPage.xaml.cs file, and add this code to go to the previous page after the user taps the button.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">Finally, open the MainPage.xaml.cs file and add this code.</source>
          <target xml:space="preserve">Finally, open the MainPage.xaml.cs file and add this code.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">It opens BlankPage after the user taps the button.</source>
          <target xml:space="preserve">It opens BlankPage after the user taps the button.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">Now, run the program.</source>
          <target xml:space="preserve">Now, run the program.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">Tap the "Go To Page" button to go to the other page, and then tap the back-arrow button to return to the previous page.</source>
          <target xml:space="preserve">Tap the "Go To Page" button to go to the other page, and then tap the back-arrow button to return to the previous page.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br242682)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Page navigation is managed by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc></pc> class.</source>
          <target xml:space="preserve">Page navigation is managed by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc></pc> class.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/br242694)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](https://msdn.microsoft.com/library/windows/apps/dn996568)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">As the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UINavigationController</pc> class in iOS uses <pc dataRefEnd="id4" dataRefStart="id3" id="p2">pushViewController</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">popViewController</pc> methods, the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Frame</pc> class for Windows Store apps provides <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Navigate</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">GoBack</pc></pc> methods.</source>
          <target xml:space="preserve">As the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UINavigationController</pc> class in iOS uses <pc dataRefEnd="id4" dataRefStart="id3" id="p2">pushViewController</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">popViewController</pc> methods, the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Frame</pc> class for Windows Store apps provides <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">Navigate</pc></pc> and <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">GoBack</pc></pc> methods.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242693)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame</pc> class also has a method called <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">GoForward</pc></pc>, which does what you might expect.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame</pc> class also has a method called <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">GoForward</pc></pc>, which does what you might expect.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">This walkthrough creates a new instance of BlankPage each time you navigate to it.</source>
          <target xml:space="preserve">This walkthrough creates a new instance of BlankPage each time you navigate to it.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">(The previous instance will be freed, or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">released</pc>, automatically).</source>
          <target xml:space="preserve">(The previous instance will be freed, or <pc dataRefEnd="id2" dataRefStart="id1" id="p1">released</pc>, automatically).</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">If you don't want a new instance to be created each time, add the following code to the BlankPage class's constructor in the BlankPage.xaml.cs file.</source>
          <target xml:space="preserve">If you don't want a new instance to be created each time, add the following code to the BlankPage class's constructor in the BlankPage.xaml.cs file.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227506)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This will enable the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">NavigationCacheMode</pc></pc> behavior.</source>
          <target xml:space="preserve">This will enable the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">NavigationCacheMode</pc></pc> behavior.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242683)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can also get or set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame</pc> class's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CacheSize</pc></pc> property to manage how many pages in the navigation history can be cached.</source>
          <target xml:space="preserve">You can also get or set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Frame</pc> class's <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CacheSize</pc></pc> property to manage how many pages in the navigation history can be cached.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt187344)</data>
          <data id="id3">[</data>
          <data id="id4">](http://go.microsoft.com/fwlink/p/?LinkID=242401)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For more info about navigation, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">XAML personality animations sample</pc>.</source>
          <target xml:space="preserve">For more info about navigation, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Navigation</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">XAML personality animations sample</pc>.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/hh452768)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For info about navigation for Windows Store apps using JavaScript and HTML, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Quickstart: Using single-page navigation</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For info about navigation for Windows Store apps using JavaScript and HTML, see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Quickstart: Using single-page navigation</pc>.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source xml:space="preserve">Next step</source>
          <target xml:space="preserve">Next step</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">Getting started: Animation</source>
          <target xml:space="preserve">Getting started: Animation</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>