<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">a90f434035e360ed2caaadd1452f6cdaf60d4c4a</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 41E1B4F1-6CAF-4128-A61A-4E400B149011</source>
          <target xml:space="preserve">ms.assetid: 41E1B4F1-6CAF-4128-A61A-4E400B149011</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">title: Data binding in depth</source>
          <target xml:space="preserve">title: Data binding in depth</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">description: Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</source>
          <target xml:space="preserve">description: Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">Data binding in depth</source>
          <target xml:space="preserve">Data binding in depth</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source xml:space="preserve">** Important APIs **</source>
          <target xml:space="preserve">** Important APIs **</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Binding class</source>
          <target xml:space="preserve">Binding class</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source xml:space="preserve">DataContext</source>
          <target xml:space="preserve">DataContext</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">INotifyPropertyChanged</source>
          <target xml:space="preserve">INotifyPropertyChanged</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This topic describes data binding features in detail.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This topic describes data binding features in detail.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](data-binding-quickstart.md)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For a short, practical introduction, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding overview</pc>.</source>
          <target xml:space="preserve">For a short, practical introduction, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Data binding overview</pc>.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</source>
          <target xml:space="preserve">Data binding is a way for your app's UI to display data, and optionally to stay in sync with that data.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">Data binding allows you to separate the concern of data from the concern of UI, and that results in a simpler conceptual model as well as better readability, testability, and maintainability of your app.</source>
          <target xml:space="preserve">Data binding allows you to separate the concern of data from the concern of UI, and that results in a simpler conceptual model as well as better readability, testability, and maintainability of your app.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">You can use data binding to simply display values from a data source when the UI is first shown, but not to respond to changes in those values.</source>
          <target xml:space="preserve">You can use data binding to simply display values from a data source when the UI is first shown, but not to respond to changes in those values.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">This is called one-time binding, and it works well for data whose values don't change during run-time.</source>
          <target xml:space="preserve">This is called one-time binding, and it works well for data whose values don't change during run-time.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Additionally, you can choose to "observe" the values and to update the UI when they change.</source>
          <target xml:space="preserve">Additionally, you can choose to "observe" the values and to update the UI when they change.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">This is called one-way binding, and it works well for read-only data.</source>
          <target xml:space="preserve">This is called one-way binding, and it works well for read-only data.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">Ultimately, you can choose to both observe and update, so that changes that the user makes to values in the UI are automatically pushed back into the data source.</source>
          <target xml:space="preserve">Ultimately, you can choose to both observe and update, so that changes that the user makes to values in the UI are automatically pushed back into the data source.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source xml:space="preserve">This is called two-way binding, and it works well for read-write data.</source>
          <target xml:space="preserve">This is called two-way binding, and it works well for read-write data.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source xml:space="preserve">Here are some examples.</source>
          <target xml:space="preserve">Here are some examples.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242752)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You could use one-time binding to bind an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image</pc></pc> to the current user's photo.</source>
          <target xml:space="preserve">You could use one-time binding to bind an <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Image</pc></pc> to the current user's photo.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You could use one-way binding to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> to a collection of real-time news articles grouped by newspaper section.</source>
          <target xml:space="preserve">You could use one-way binding to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ListView</pc></pc> to a collection of real-time news articles grouped by newspaper section.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209683)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You could use two-way binding to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBox</pc></pc> to a customer's name in a form.</source>
          <target xml:space="preserve">You could use two-way binding to bind a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TextBox</pc></pc> to a customer's name in a form.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source xml:space="preserve">There are two kinds of binding, and they're both typically declared in UI markup.</source>
          <target xml:space="preserve">There are two kinds of binding, and they're both typically declared in UI markup.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can choose to use either the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind} markup extension</pc> or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding} markup extension</pc>.</source>
          <target xml:space="preserve">You can choose to use either the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind} markup extension</pc> or the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding} markup extension</pc>.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source xml:space="preserve">And you can even use a mixture of the two in the same app—even on the same UI element.</source>
          <target xml:space="preserve">And you can even use a mixture of the two in the same app—even on the same UI element.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source xml:space="preserve">{x:Bind} is new for Windows 10 and it has better performance.</source>
          <target xml:space="preserve">{x:Bind} is new for Windows 10 and it has better performance.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source xml:space="preserve">{Binding} has more features.</source>
          <target xml:space="preserve">{Binding} has more features.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source xml:space="preserve">All the details described in this topic apply to both kinds of binding unless we explicitly say otherwise.</source>
          <target xml:space="preserve">All the details described in this topic apply to both kinds of binding unless we explicitly say otherwise.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source xml:space="preserve">Sample apps that demonstrate {x:Bind}</source>
          <target xml:space="preserve">Sample apps that demonstrate {x:Bind}</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619989)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind} sample</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind} sample</pc>.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://github.com/Microsoft/Windows-appsample-quizgame)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuizGame</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">QuizGame</pc>.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619992)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML UI Basics sample</pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">XAML UI Basics sample</pc>.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">Sample apps that demonstrate {Binding}</source>
          <target xml:space="preserve">Sample apps that demonstrate {Binding}</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?linkid=532950)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc> app.</source>
          <target xml:space="preserve">Download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore1</pc> app.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?linkid=532952)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc> app.</source>
          <target xml:space="preserve">Download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Bookstore2</pc> app.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source xml:space="preserve">Every binding involves these pieces</source>
          <target xml:space="preserve">Every binding involves these pieces</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">binding source</pc>.</source>
          <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">binding source</pc>.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source xml:space="preserve">This is the source of the data for the binding, and it can be an instance of any class that has members whose values you want to display in your UI.</source>
          <target xml:space="preserve">This is the source of the data for the binding, and it can be an instance of any class that has members whose values you want to display in your UI.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">binding target</pc>.</source>
          <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">binding target</pc>.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242362)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR208706)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyProperty</pc></pc> of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FrameworkElement</pc></pc> in your UI that displays the data.</source>
          <target xml:space="preserve">This is a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyProperty</pc></pc> of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FrameworkElement</pc></pc> in your UI that displays the data.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">binding object</pc>.</source>
          <target xml:space="preserve">A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">binding object</pc>.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source xml:space="preserve">This is the piece that transfers data values from the source to the target, and optionally from the target back to the source.</source>
          <target xml:space="preserve">This is the piece that transfers data values from the source to the target, and optionally from the target back to the source.</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The binding object is created at XAML load time from your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> markup extension.</source>
          <target xml:space="preserve">The binding object is created at XAML load time from your <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> markup extension.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source xml:space="preserve">In the following sections, we'll take a closer look at the binding source, the binding target, and the binding object.</source>
          <target xml:space="preserve">In the following sections, we'll take a closer look at the binding source, the binding target, and the binding object.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">And we'll link the sections together with the example of binding a button's content to a string property named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NextButtonText</pc>, which belongs to a class named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HostViewModel</pc>.</source>
          <target xml:space="preserve">And we'll link the sections together with the example of binding a button's content to a string property named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NextButtonText</pc>, which belongs to a class named <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HostViewModel</pc>.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source xml:space="preserve">Binding source</source>
          <target xml:space="preserve">Binding source</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source xml:space="preserve">Here's a very rudimentary implementation of a class that we could use as a binding source.</source>
          <target xml:space="preserve">Here's a very rudimentary implementation of a class that we could use as a binding source.</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you're using <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> with Visual C++ component extensions (C++/CX) then you'll need to add the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BindableAttribute</pc></pc> attribute to your binding source class.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  If you're using <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc> with Visual C++ component extensions (C++/CX) then you'll need to add the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">BindableAttribute</pc></pc> attribute to your binding source class.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you're using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> then you don't need that attribute.</source>
          <target xml:space="preserve">If you're using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> then you don't need that attribute.</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](data-binding-quickstart.md#adding-a-details-view)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adding a details view</pc> for a code snippet.</source>
          <target xml:space="preserve">See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Adding a details view</pc> for a code snippet.</target>
        </segment>
      </unit>
      <unit id="153">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">That implementation of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HostViewModel</pc>, and its property <pc dataRefEnd="id4" dataRefStart="id3" id="p2">NextButtonText</pc>, are only appropriate for one-time binding.</source>
          <target xml:space="preserve">That implementation of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HostViewModel</pc>, and its property <pc dataRefEnd="id4" dataRefStart="id3" id="p2">NextButtonText</pc>, are only appropriate for one-time binding.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source xml:space="preserve">But one-way and two-way bindings are extremely common, and in those kinds of binding the UI automatically updates in response to changes in the data values of the binding source.</source>
          <target xml:space="preserve">But one-way and two-way bindings are extremely common, and in those kinds of binding the UI automatically updates in response to changes in the data values of the binding source.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source xml:space="preserve">In order for those kinds of binding to work correctly, you need to make your binding source "observable" to the binding object.</source>
          <target xml:space="preserve">In order for those kinds of binding to work correctly, you need to make your binding source "observable" to the binding object.</target>
        </segment>
      </unit>
      <unit id="156">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">So in our example, if we want to one-way or two-way bind to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NextButtonText</pc> property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object.</source>
          <target xml:space="preserve">So in our example, if we want to one-way or two-way bind to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NextButtonText</pc> property, then any changes that happen at run-time to the value of that property need to be made observable to the binding object.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242356)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR242362)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">One way of doing that is to derive the class that represents your binding source from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyObject</pc></pc>, and expose a data value through a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DependencyProperty</pc></pc>.</source>
          <target xml:space="preserve">One way of doing that is to derive the class that represents your binding source from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyObject</pc></pc>, and expose a data value through a <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DependencyProperty</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208706)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">That's how a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement</pc></pc> becomes observable.</source>
          <target xml:space="preserve">That's how a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FrameworkElement</pc></pc> becomes observable.</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">FrameworkElements</pc> are good binding sources right out of the box.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">FrameworkElements</pc> are good binding sources right out of the box.</target>
        </segment>
      </unit>
      <unit id="160">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.ComponentModel.INotifyPropertyChanged)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A more lightweight way of making a class observable—and a necessary one for classes that already have a base class—is to implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">System.ComponentModel.INotifyPropertyChanged</pc></pc>.</source>
          <target xml:space="preserve">A more lightweight way of making a class observable—and a necessary one for classes that already have a base class—is to implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">System.ComponentModel.INotifyPropertyChanged</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This really just involves implementing a single event named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyChanged</pc>.</source>
          <target xml:space="preserve">This really just involves implementing a single event named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyChanged</pc>.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">An example using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HostViewModel</pc> is below.</source>
          <target xml:space="preserve">An example using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HostViewModel</pc> is below.</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR209899)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/apps/BR209878)</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For C++/CX, you implement <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows::UI::Xaml::Data::INotifyPropertyChanged</pc></pc>, and the binding source class must either have the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">BindableAttribute</pc></pc> or implement <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">ICustomPropertyProvider</pc></pc>.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  For C++/CX, you implement <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows::UI::Xaml::Data::INotifyPropertyChanged</pc></pc>, and the binding source class must either have the <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">BindableAttribute</pc></pc> or implement <pc dataRefEnd="id12" dataRefStart="id11" id="p6"><pc dataRefEnd="id14" dataRefStart="id13" id="p7">ICustomPropertyProvider</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="164">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Now the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NextButtonText</pc> property is observable.</source>
          <target xml:space="preserve">Now the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NextButtonText</pc> property is observable.</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyChanged</pc> event.</source>
          <target xml:space="preserve">When you author a one-way or a two-way binding to that property (we'll show how later), the resulting binding object subscribes to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyChanged</pc> event.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source xml:space="preserve">When that event is raised, the binding object's handler receives an argument containing the name of the property that has changed.</source>
          <target xml:space="preserve">When that event is raised, the binding object's handler receives an argument containing the name of the property that has changed.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source xml:space="preserve">That's how the binding object knows which property's value to go and read again.</source>
          <target xml:space="preserve">That's how the binding object knows which property's value to go and read again.</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://github.com/Microsoft/Windows-appsample-quizgame)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">So that you don't have to implement the pattern shown above multiple times, you can just derive from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BindableBase</pc> bass class that you'll find in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuizGame</pc> sample (in the "Common" folder).</source>
          <target xml:space="preserve">So that you don't have to implement the pattern shown above multiple times, you can just derive from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BindableBase</pc> bass class that you'll find in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">QuizGame</pc> sample (in the "Common" folder).</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source xml:space="preserve">Here's an example of how that looks.</source>
          <target xml:space="preserve">Here's an example of how that looks.</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](T:System.String)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Raising the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyChanged</pc> event with an argument of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">String.Empty</pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">null</pc> indicates that all non-indexer properties on the object should be re-read.</source>
          <target xml:space="preserve">Raising the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PropertyChanged</pc> event with an argument of <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">String.Empty</pc></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p4">null</pc> indicates that all non-indexer properties on the object should be re-read.</target>
        </segment>
      </unit>
      <unit id="171">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can raise the event to indicate that indexer properties on the object have changed by using an argument of "Item\[<pc dataRefEnd="id2" dataRefStart="id1" id="p1">indexer</pc>\]" for specific indexers (where <pc dataRefEnd="id4" dataRefStart="id3" id="p2">indexer</pc> is the index value), or a value of "Item\[\]" for all indexers.</source>
          <target xml:space="preserve">You can raise the event to indicate that indexer properties on the object have changed by using an argument of "Item\[<pc dataRefEnd="id2" dataRefStart="id1" id="p1">indexer</pc>\]" for specific indexers (where <pc dataRefEnd="id4" dataRefStart="id3" id="p2">indexer</pc> is the index value), or a value of "Item\[\]" for all indexers.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source xml:space="preserve">A binding source can be treated either as a single object whose properties contain data, or as a collection of objects.</source>
          <target xml:space="preserve">A binding source can be treated either as a single object whose properties contain data, or as a collection of objects.</target>
        </segment>
      </unit>
      <unit id="173">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Collections.Generic.List%601)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In C# and Visual Basic code, you can one-time bind to an object that implements <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">List(Of T)</pc></pc> to display a collection that does not change at run-time.</source>
          <target xml:space="preserve">In C# and Visual Basic code, you can one-time bind to an object that implements <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">List(Of T)</pc></pc> to display a collection that does not change at run-time.</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Collections.ObjectModel.ObservableCollection%601)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For an observable collection (observing when items are added to and removed from the collection), one-way bind to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObservableCollection(Of T)</pc></pc> instead.</source>
          <target xml:space="preserve">For an observable collection (observing when items are added to and removed from the collection), one-way bind to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObservableCollection(Of T)</pc></pc> instead.</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/dn858385.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In C++ code, you can bind to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Vector&amp;lt;T&amp;gt;</pc></pc> for both observable and non-observable collections.</source>
          <target xml:space="preserve">In C++ code, you can bind to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Vector&amp;lt;T&amp;gt;</pc></pc> for both observable and non-observable collections.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source xml:space="preserve">To bind to your own collection classes, use the guidance in the following table.</source>
          <target xml:space="preserve">To bind to your own collection classes, use the guidance in the following table.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source xml:space="preserve">Scenario</source>
          <target xml:space="preserve">Scenario</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source xml:space="preserve">C# and VB (CLR)</source>
          <target xml:space="preserve">C# and VB (CLR)</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source xml:space="preserve">C++/CX</source>
          <target xml:space="preserve">C++/CX</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source xml:space="preserve">Bind to an object.</source>
          <target xml:space="preserve">Bind to an object.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source xml:space="preserve">Can be any object.</source>
          <target xml:space="preserve">Can be any object.</target>
        </segment>
      </unit>
      <unit id="182">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh701872)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209878)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Object must have <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BindableAttribute</pc></pc> or implement <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ICustomPropertyProvider</pc></pc>.</source>
          <target xml:space="preserve">Object must have <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">BindableAttribute</pc></pc> or implement <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ICustomPropertyProvider</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source xml:space="preserve">Get property change updates from a bound object.</source>
          <target xml:space="preserve">Get property change updates from a bound object.</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.ComponentModel.INotifyPropertyChanged)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Object must implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">System.ComponentModel. INotifyPropertyChanged</pc></pc>.</source>
          <target xml:space="preserve">Object must implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">System.ComponentModel. INotifyPropertyChanged</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="185">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209899)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Object must implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Xaml.Data. INotifyPropertyChanged</pc></pc>.</source>
          <target xml:space="preserve">Object must implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows.UI.Xaml.Data. INotifyPropertyChanged</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source xml:space="preserve">Bind to a collection.</source>
          <target xml:space="preserve">Bind to a collection.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source xml:space="preserve">List(Of T)</source>
          <target xml:space="preserve">List(Of T)</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source xml:space="preserve">Platform::Collections::Vector&amp;lt;T&amp;gt;</source>
          <target xml:space="preserve">Platform::Collections::Vector&amp;lt;T&amp;gt;</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source xml:space="preserve">Get collection change updates from a bound collection.</source>
          <target xml:space="preserve">Get collection change updates from a bound collection.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source xml:space="preserve">ObservableCollection(Of T)</source>
          <target xml:space="preserve">ObservableCollection(Of T)</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source xml:space="preserve">Platform::Collections::Vector&amp;lt;T&amp;gt;</source>
          <target xml:space="preserve">Platform::Collections::Vector&amp;lt;T&amp;gt;</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source xml:space="preserve">Implement a collection that supports binding.</source>
          <target xml:space="preserve">Implement a collection that supports binding.</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Collections.Generic.List%601)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](T:System.Collections.IList)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](T:System.Collections.Generic.IList%601)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](T:System.Object)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
          <data id="id17">[</data>
          <data id="id18">](T:System.Collections.IEnumerable)</data>
          <data id="id19">**</data>
          <data id="id20">**</data>
          <data id="id21">[</data>
          <data id="id22">](T:System.Collections.Generic.IEnumerable%601)</data>
          <data id="id23">**</data>
          <data id="id24">**</data>
          <data id="id25">**</data>
          <data id="id26">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">List(Of T)</pc></pc> or implement <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IList</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">IList</pc></pc>(Of <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Object</pc></pc>), <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">IEnumerable</pc></pc>, or <pc dataRefEnd="id22" dataRefStart="id21" id="p11"><pc dataRefEnd="id24" dataRefStart="id23" id="p12">IEnumerable</pc></pc>(Of <pc dataRefEnd="id26" dataRefStart="id25" id="p13">Object</pc>).</source>
          <target xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">List(Of T)</pc></pc> or implement <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IList</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">IList</pc></pc>(Of <pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Object</pc></pc>), <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">IEnumerable</pc></pc>, or <pc dataRefEnd="id22" dataRefStart="id21" id="p11"><pc dataRefEnd="id24" dataRefStart="id23" id="p12">IEnumerable</pc></pc>(Of <pc dataRefEnd="id26" dataRefStart="id25" id="p13">Object</pc>).</target>
        </segment>
      </unit>
      <unit id="194">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Binding to generic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IList(Of T)</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IEnumerable(Of T)</pc> is not supported.</source>
          <target xml:space="preserve">Binding to generic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IList(Of T)</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IEnumerable(Of T)</pc> is not supported.</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh701957)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR206631)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">[</data>
          <data id="id14">](T:System.Object)</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
          <data id="id17">[</data>
          <data id="id18">](https://msdn.microsoft.com/library/windows/apps/BR226024)</data>
          <data id="id19">**</data>
          <data id="id20">**</data>
          <data id="id21">**</data>
          <data id="id22">**</data>
          <data id="id23">**</data>
          <data id="id24">**</data>
          <data id="id25">[</data>
          <data id="id26">](https://msdn.microsoft.com/library/BR205821)</data>
          <data id="id27">**</data>
          <data id="id28">**</data>
          <data id="id29">**</data>
          <data id="id30">**</data>
          <data id="id31">**</data>
          <data id="id32">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBindableVector</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IBindableIterable</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">IVector</pc></pc>&amp;lt;<pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Object</pc></pc>^&amp;gt;, <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">IIterable</pc></pc>&amp;lt;<pc dataRefEnd="id22" dataRefStart="id21" id="p11">Object</pc>^&amp;gt;, <pc dataRefEnd="id24" dataRefStart="id23" id="p12">IVector</pc>&amp;lt;<pc dataRefEnd="id26" dataRefStart="id25" id="p13"><pc dataRefEnd="id28" dataRefStart="id27" id="p14">IInspectable</pc></pc>\*&amp;gt;, or <pc dataRefEnd="id30" dataRefStart="id29" id="p15">IIterable</pc>&amp;lt;<pc dataRefEnd="id32" dataRefStart="id31" id="p16">IInspectable</pc>\*&amp;gt;.</source>
          <target xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBindableVector</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IBindableIterable</pc></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">IVector</pc></pc>&amp;lt;<pc dataRefEnd="id14" dataRefStart="id13" id="p7"><pc dataRefEnd="id16" dataRefStart="id15" id="p8">Object</pc></pc>^&amp;gt;, <pc dataRefEnd="id18" dataRefStart="id17" id="p9"><pc dataRefEnd="id20" dataRefStart="id19" id="p10">IIterable</pc></pc>&amp;lt;<pc dataRefEnd="id22" dataRefStart="id21" id="p11">Object</pc>^&amp;gt;, <pc dataRefEnd="id24" dataRefStart="id23" id="p12">IVector</pc>&amp;lt;<pc dataRefEnd="id26" dataRefStart="id25" id="p13"><pc dataRefEnd="id28" dataRefStart="id27" id="p14">IInspectable</pc></pc>\*&amp;gt;, or <pc dataRefEnd="id30" dataRefStart="id29" id="p15">IIterable</pc>&amp;lt;<pc dataRefEnd="id32" dataRefStart="id31" id="p16">IInspectable</pc>\*&amp;gt;.</target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Binding to generic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IVector&amp;lt;T&amp;gt;</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IIterable&amp;lt;T&amp;gt;</pc> is not supported.</source>
          <target xml:space="preserve">Binding to generic <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IVector&amp;lt;T&amp;gt;</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">IIterable&amp;lt;T&amp;gt;</pc> is not supported.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source xml:space="preserve">Implement a collection that supports collection change updates.</source>
          <target xml:space="preserve">Implement a collection that supports collection change updates.</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Collections.ObjectModel.ObservableCollection%601)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](T:System.Collections.IList)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](T:System.Collections.Specialized.INotifyCollectionChanged)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObservableCollection(Of T)</pc></pc> or implement (non-generic) <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IList</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">INotifyCollectionChanged</pc></pc>.</source>
          <target xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObservableCollection(Of T)</pc></pc> or implement (non-generic) <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IList</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">INotifyCollectionChanged</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="199">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBindableVector</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IBindableObservableVector</pc></pc>.</source>
          <target xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBindableVector</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IBindableObservableVector</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source xml:space="preserve">Implement a collection that supports incremental loading.</source>
          <target xml:space="preserve">Implement a collection that supports incremental loading.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](T:System.Collections.ObjectModel.ObservableCollection%601)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](T:System.Collections.IList)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](T:System.Collections.Specialized.INotifyCollectionChanged)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObservableCollection(Of T)</pc></pc> or implement (non-generic) <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IList</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">INotifyCollectionChanged</pc></pc>.</source>
          <target xml:space="preserve">Extend <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ObservableCollection(Of T)</pc></pc> or implement (non-generic) <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IList</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">INotifyCollectionChanged</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="202">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Additionally, implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ISupportIncrementalLoading</pc></pc>.</source>
          <target xml:space="preserve">Additionally, implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ISupportIncrementalLoading</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="203">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh701979)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/Hh701974)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBindableVector</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IBindableObservableVector</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ISupportIncrementalLoading</pc></pc>.</source>
          <target xml:space="preserve">Implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IBindableVector</pc></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IBindableObservableVector</pc></pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ISupportIncrementalLoading</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source xml:space="preserve">You can bind list controls to arbitrarily large data sources, and still achieve high performance, by using incremental loading.</source>
          <target xml:space="preserve">You can bind list controls to arbitrarily large data sources, and still achieve high performance, by using incremental loading.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source xml:space="preserve">For example, you can bind list controls to Bing image query results without having to load all the results at once.</source>
          <target xml:space="preserve">For example, you can bind list controls to Bing image query results without having to load all the results at once.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source xml:space="preserve">Instead, you load only some results immediately, and load additional results as needed.</source>
          <target xml:space="preserve">Instead, you load only some results immediately, and load additional results as needed.</target>
        </segment>
      </unit>
      <unit id="207">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh701916)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To support incremental loading, you must implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ISupportIncrementalLoading</pc></pc> on a data source that supports collection change notification.</source>
          <target xml:space="preserve">To support incremental loading, you must implement <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ISupportIncrementalLoading</pc></pc> on a data source that supports collection change notification.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source xml:space="preserve">When the data binding engine requests more data, your data source must make the appropriate requests, integrate the results, and then send the appropriate notifications in order to update the UI.</source>
          <target xml:space="preserve">When the data binding engine requests more data, your data source must make the appropriate requests, integrate the results, and then send the appropriate notifications in order to update the UI.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source xml:space="preserve">Binding target</source>
          <target xml:space="preserve">Binding target</target>
        </segment>
      </unit>
      <unit id="210">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the two examples below, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button.Content</pc> property is the binding target, and its value is set to a markup extension which declares the binding object.</source>
          <target xml:space="preserve">In the two examples below, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button.Content</pc> property is the binding target, and its value is set to a markup extension which declares the binding object.</target>
        </segment>
      </unit>
      <unit id="211">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Mt204783)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">First <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> is shown, and then <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc>.</source>
          <target xml:space="preserve">First <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{x:Bind}</pc> is shown, and then <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{Binding}</pc>.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source xml:space="preserve">Declaring bindings in markup is the common case (it's convenient, readable, and toolable).</source>
          <target xml:space="preserve">Declaring bindings in markup is the common case (it's convenient, readable, and toolable).</target>
        </segment>
      </unit>
      <unit id="213">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209820)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">But you can avoid markup and imperatively (programmatically) create an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> class instead if you need to.</source>
          <target xml:space="preserve">But you can avoid markup and imperatively (programmatically) create an instance of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> class instead if you need to.</target>
        </segment>
      </unit>
      <unit id="214">
        <originalData>
          <data id="id1">
``` xml
&lt;Button Content="{x:Bind ...}" ... /&gt;</data>
          <data id="id2">
```

``` xml
&lt;Button Content="{Binding ...}" ... /&gt;</data>
          <data id="id3">
```

Binding object declared using {x:Bind}
--------------------------------------

There's one step we need to do before we author our [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) markup. We need to expose our binding source class from the class that represents our page of markup. We do that by adding a property (of type **HostViewModel** in this case) to our **HostView** page class.

``` csharp
namespace QuizGame.View
{
    public sealed partial class HostView : Page
    {
        public HostView()
        {
            this.InitializeComponent();
            this.ViewModel = new HostViewModel();
        }
    
        public HostViewModel ViewModel { get; set; }
    }
}
```</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" />
						<ph dataRef="id3" id="ph3" />

That done, we can now take a closer look at the markup that declares the binding object.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" />
						<ph dataRef="id3" id="ph3" />

That done, we can now take a closer look at the markup that declares the binding object.</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The example below uses the same <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button.Content</pc> binding target we used in the "Binding target" section earlier, and shows it being bound to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HostViewModel.NextButtonText</pc> property.</source>
          <target xml:space="preserve">The example below uses the same <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button.Content</pc> binding target we used in the "Binding target" section earlier, and shows it being bound to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HostViewModel.NextButtonText</pc> property.</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">``` xml
</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="218">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">If your data loads asynchronously</pc>

Code to support <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc> is generated at compile-time in the partial classes for your pages.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">If your data loads asynchronously</pc>

Code to support <pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc> is generated at compile-time in the partial classes for your pages.</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">`obj`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">These files can be found in your <ph dataRef="id1" id="ph1" /> folder, with names like (for C#) `</source>
          <target xml:space="preserve">These files can be found in your <ph dataRef="id1" id="ph1" /> folder, with names like (for C#) `</target>
        </segment>
      </unit>
      <unit id="220">
        <originalData>
          <data id="id1">`. The generated code includes a handler for your page's [**Loading**](https://msdn.microsoft.com/library/windows/apps/BR208706-loading) event, and that handler calls the **Initialize** method on a generated class that represent's your page's bindings. **Initialize** in turn calls **Update** to begin moving data between the binding source and the target. **Loading** is raised just before the first measure pass of the page or user control. So if your data is loaded asynchronously it may not be ready by the time **Initialize** is called. So, after you've loaded data, you can force one-time bindings to be initialized by calling `</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">.g.cs<ph dataRef="id1" id="ph1" />this-&gt;Bindings-&gt;Update();`.</source>
          <target xml:space="preserve">.g.cs<ph dataRef="id1" id="ph1" />this-&gt;Bindings-&gt;Update();`.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source xml:space="preserve">If you only need one-time bindings for asynchronously-loaded data then it’s much cheaper to initialize them this way than it is to have one-way bindings and to listen for changes.</source>
          <target xml:space="preserve">If you only need one-time bindings for asynchronously-loaded data then it’s much cheaper to initialize them this way than it is to have one-way bindings and to listen for changes.</target>
        </segment>
      </unit>
      <unit id="222">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update</pc>.</source>
          <target xml:space="preserve">If your data does not undergo fine-grained changes, and if it's likely to be updated as part of a specific action, then you can make your bindings one-time, and force a manual update at any time with a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Update</pc>.</target>
        </segment>
      </unit>
      <unit id="223">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">

**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Limitations</pc>
						<pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc> is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names ("if it walks, swims, and quacks like a duck then it's a duck").</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Limitations</pc>
						<pc dataRefEnd="id4" dataRefStart="id3" id="p2">{x:Bind}</pc> is not suited to late-bound scenarios, such as navigating the dictionary structure of a JSON object, nor duck typing which is a weak form of typing based on lexical matches on property names ("if it walks, swims, and quacks like a duck then it's a duck").</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source xml:space="preserve">With duck typing, a binding to the Age property would be equally satisfied with a Person or a Wine object.</source>
          <target xml:space="preserve">With duck typing, a binding to the Age property would be equally satisfied with a Person or a Wine object.</target>
        </segment>
      </unit>
      <unit id="225">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For these scenarios, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>.</source>
          <target xml:space="preserve">For these scenarios, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">{Binding}</pc>.</target>
        </segment>
      </unit>
      <unit id="226">
        <originalData>
          <data id="id1">---------------------------------------

[</data>
          <data id="id2">{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR208713)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Binding object declared using {Binding}
<pc dataRefEnd="id2" dataRefStart="id1" id="p1"></pc> assumes, by default, that you're binding to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc></pc> of your markup page.</source>
          <target xml:space="preserve">Binding object declared using {Binding}
<pc dataRefEnd="id2" dataRefStart="id1" id="p1"></pc> assumes, by default, that you're binding to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataContext</pc></pc> of your markup page.</target>
        </segment>
      </unit>
      <unit id="227">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">So we'll set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DataContext</pc> of our page to be an instance of our binding source class (of type <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HostViewModel</pc> in this case).</source>
          <target xml:space="preserve">So we'll set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DataContext</pc> of our page to be an instance of our binding source class (of type <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HostViewModel</pc> in this case).</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source xml:space="preserve">The example below shows the markup that declares the binding object.</source>
          <target xml:space="preserve">The example below shows the markup that declares the binding object.</target>
        </segment>
      </unit>
      <unit id="229">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">We use the same <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button.Content</pc> binding target we used in the "Binding target" section earlier, and we bind to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HostViewModel.NextButtonText</pc> property.</source>
          <target xml:space="preserve">We use the same <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Button.Content</pc> binding target we used in the "Binding target" section earlier, and we bind to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">HostViewModel.NextButtonText</pc> property.</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">``` xml
</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="231">
        <originalData>
          <data id="id1">
```

**Note**  By default, changes to [**TextBox.Text**](https://msdn.microsoft.com/library/windows/apps/BR209683-text) are sent to a two-way bound source when the [**TextBox**](https://msdn.microsoft.com/library/windows/apps/BR209683) loses focus. To cause changes to be sent after every user keystroke, set **UpdateSourceTrigger** to **PropertyChanged** on the binding in markup. You can also completely take control of when changes are sent to the source by setting **UpdateSourceTrigger** to **Explicit**. You then handle events on the text box (typically [**TextBox.TextChanged**](https://msdn.microsoft.com/library/windows/apps/BR209683-textchanged)), call [**GetBindingExpression**](https://msdn.microsoft.com/library/windows/apps/BR208706-getbindingexpression) on the target to get a [**BindingExpression**](https://msdn.microsoft.com/library/windows/apps/BR209820expression) object, and finally call [**BindingExpression.UpdateSource**](https://msdn.microsoft.com/library/windows/apps/BR209820expression-updatesource) to programmatically update the data source.

The [**Path**](https://msdn.microsoft.com/library/windows/apps/BR209820-path) property supports a variety of syntax options for binding to nested properties, attached properties, and integer and string indexers. For more info, see [Property-path syntax](https://msdn.microsoft.com/library/windows/apps/Mt185586). Binding to string indexers gives you the effect of binding to dynamic properties without having to implement [**ICustomPropertyProvider**](https://msdn.microsoft.com/library/windows/apps/BR209878). The [**ElementName**](https://msdn.microsoft.com/library/windows/apps/BR209820-elementname) property is useful for element-to-element binding. The [**RelativeSource**](https://msdn.microsoft.com/library/windows/apps/BR209820-relativesource) property has several uses, one of which is as a more powerful alternative to template binding inside a [**ControlTemplate**](https://msdn.microsoft.com/library/windows/apps/BR209391). For other settings, see [{Binding} markup extension](https://msdn.microsoft.com/library/windows/apps/Mt204782) and the [**Binding**](https://msdn.microsoft.com/library/windows/apps/BR209820) class.

What if the source and the target are not the same type?
--------------------------------------------------------

If you want to control the visibility of a UI element based on the value of a boolean property, or if you want to render a UI element with a color that's a function of a numeric value's range or trend, or if you want to display a date and/or time value in a UI element property that expects a string, then you'll need to convert values from one type to another. There will be cases where the right solution is to expose another property of the right type from your binding source class, and keep the conversion logic encapsulated and testable there. But that isn't flexible nor scalable when you have large numbers, or large combinations, of source and target properties. In that case you'll want to use something known as a value converter. This section describes how to implement and consume a value converter.

Here's a value converter, suitable for a one-time or a one-way binding, that converts a [**DateTime**](T:System.DateTime) value to a string value containing the month. The class implements [**IValueConverter**](https://msdn.microsoft.com/library/windows/apps/BR209903).

``` csharp
public class DateToStringConverter : IValueConverter
{
    // Define the Convert method to convert a DateTime value to 
    // a month string.
    public object Convert(object value, Type targetType, 
        object parameter, string language)
    {
        // value is the data from the source object.
        DateTime thisdate = (DateTime)value;
        int monthnum = thisdate.Month;
        string month;
        switch (monthnum)
        {
            case 1:
                month = "January";
                break;
            case 2:
                month = "February";
                break;
            default:
                month = "Month not found";
                break;
        }
        // Return the value to pass to the target.
        return month;
    }

    // ConvertBack is not implemented for a OneWay binding.
    public object ConvertBack(object value, Type targetType, 
        object parameter, string language)
    {
        throw new NotImplementedException();
    }
}
```

``` vbnet
Public Class DateToStringConverter
    Implements IValueConverter

    ' Define the Convert method to change a DateTime object to
    ' a month string.
    Public Function Convert(ByVal value As Object, -
        ByVal targetType As Type, ByVal parameter As Object, -
        ByVal language As String) As Object -
        Implements IValueConverter.Convert

        ' value is the data from the source object.
        Dim thisdate As DateTime = CType(value, DateTime)
        Dim monthnum As Integer = thisdate.Month
        Dim month As String
        Select Case (monthnum)
            Case 1
                month = "January"
            Case 2
                month = "February"
            Case Else
                month = "Month not found"
        End Select
        ' Return the value to pass to the target.
        Return month

    End Function

    ' ConvertBack is not implemented for a OneWay binding.
    Public Function ConvertBack(ByVal value As Object, -
        ByVal targetType As Type, ByVal parameter As Object, -
        ByVal language As String) As Object -
        Implements IValueConverter.ConvertBack

        Throw New NotImplementedException

    End Function
End Class
```</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />

And here's how you consume that value converter in your binding object markup.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />

And here's how you consume that value converter in your binding object markup.</target>
        </segment>
      </unit>
      <unit id="232">
        <originalData>
          <data id="id1">``` xml
</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="234">
        <originalData>
          <data id="id1">
```

TemplatesResourceDictionary.xaml.cs

``` csharp
using Windows.UI.Xaml.Data;
 
namespace ExampleNamespace
{
    public partial class TemplatesResourceDictionary
    {
        public TemplatesResourceDictionary()
        {
            InitializeComponent();
        }
    }
}
```</data>
          <data id="id2">``` xml
</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />

MainPage.xaml

<ph dataRef="id2" id="ph2" /></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />

MainPage.xaml

<ph dataRef="id2" id="ph2" /></target>
        </segment>
      </unit>
      <unit id="235">
        <originalData>
          <data id="id1">
```

Event binding and ICommand
--------------------------

[{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) supports a feature called event binding. With this feature, you can specify the handler for an event using a binding, which is an additional option on top of handling events with a method on the code-behind file. Let's say you have a **RootFrame** property on your **MainPage** class.

``` csharp
    public sealed partial class MainPage : Page
    {
        ....    
        public Frame RootFrame { get { return Window.Current.Content as Frame; } }
    }
```</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />

You can then bind a button's <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Click</pc> event to a method on the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Frame</pc> object returned by the <pc dataRefEnd="id7" dataRefStart="id6" id="p3">RootFrame</pc> property like this.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />

You can then bind a button's <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Click</pc> event to a method on the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Frame</pc> object returned by the <pc dataRefEnd="id7" dataRefStart="id6" id="p3">RootFrame</pc> property like this.</target>
        </segment>
      </unit>
      <unit id="236">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note that we also bind the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsEnabled</pc> property to another member of the same <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc>.</source>
          <target xml:space="preserve">Note that we also bind the button's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IsEnabled</pc> property to another member of the same <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Frame</pc>.</target>
        </segment>
      </unit>
      <unit id="237">
        <originalData>
          <data id="id1">``` xml
    </data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="238">
        <originalData>
          <data id="id1">
```

Overloaded methods cannot be used to handle an event with this technique. Also, if the method that handles the event has parameters then they must all be assignable from the types of all of the event's parameters, respectively. In this case, [**Frame.GoForward**](https://msdn.microsoft.com/library/windows/apps/BR242693) is not overloaded and it has no parameters (but it would still be valid even if it took two **object** parameters). [**Frame.GoBack**](https://msdn.microsoft.com/library/windows/apps/Dn996568) is overloaded, though, so we can't use that method with this technique.

The event binding technique is similar to implementing and consuming commands (a command is a property that returns an object that implements the [**ICommand**](T:System.Windows.Input.ICommand) interface). Both [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) and [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) work with commands. So that you don't have to implement the command pattern multiple times, you can use the **DelegateCommand** helper class that you'll find in the [QuizGame](https://github.com/Microsoft/Windows-appsample-quizgame) sample (in the "Common" folder).

## Binding to a collection of folders or files

You can use the APIs in the [**Windows.Storage**](https://msdn.microsoft.com/library/windows/apps/BR227346) namespace to retrieve folder and file data. However, the various **GetFilesAsync**, **GetFoldersAsync**, and **GetItemsAsync** methods do not return values that are suitable for binding to list controls. Instead, you must bind to the return values of the [**GetVirtualizedFilesVector**](https://msdn.microsoft.com/library/windows/apps/Hh701422), [**GetVirtualizedFoldersVector**](https://msdn.microsoft.com/library/windows/apps/Hh701428), and [**GetVirtualizedItemsVector**](https://msdn.microsoft.com/library/windows/apps/Hh701430) methods of the [**FileInformationFactory**](https://msdn.microsoft.com/library/windows/apps/BR207501) class. The following code example from the [StorageDataSource and GetVirtualizedFilesVector sample](http://go.microsoft.com/fwlink/p/?linkid=228621) shows the typical usage pattern. Remember to declare the **picturesLibrary** capability in your app package manifest, and confirm that there are pictures in your Pictures library folder.

``` csharp
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            var library = Windows.Storage.KnownFolders.PicturesLibrary;
            var queryOptions = new Windows.Storage.Search.QueryOptions();
            queryOptions.FolderDepth = Windows.Storage.Search.FolderDepth.Deep;
            queryOptions.IndexerOption = Windows.Storage.Search.IndexerOption.UseIndexerWhenAvailable;

            var fileQuery = library.CreateFileQueryWithOptions(queryOptions);

            var fif = new Windows.Storage.BulkAccess.FileInformationFactory(
                fileQuery,
                Windows.Storage.FileProperties.ThumbnailMode.PicturesView,
                190,
                Windows.Storage.FileProperties.ThumbnailOptions.UseCurrentScale,
                false
                );

            var dataSource = fif.GetVirtualizedFilesVector();
            this.PicturesListView.ItemsSource = dataSource;
        }
```</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />

You will typically use this approach to create a read-only view of file and folder info.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />

You will typically use this approach to create a read-only view of file and folder info.</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source xml:space="preserve">You can create two-way bindings to the file and folder properties, for example to let users rate a song in a music view.</source>
          <target xml:space="preserve">You can create two-way bindings to the file and folder properties, for example to let users rate a song in a music view.</target>
        </segment>
      </unit>
      <unit id="240">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR207760)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">However, any changes are not persisted until you call the appropriate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SavePropertiesAsync</pc> method (for example, <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MusicProperties.SavePropertiesAsync</pc></pc>).</source>
          <target xml:space="preserve">However, any changes are not persisted until you call the appropriate <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SavePropertiesAsync</pc> method (for example, <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">MusicProperties.SavePropertiesAsync</pc></pc>).</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source xml:space="preserve">You should commit changes when the item loses focus because this triggers a selection reset.</source>
          <target xml:space="preserve">You should commit changes when the item loses focus because this triggers a selection reset.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source xml:space="preserve">Note that two-way binding using this technique works only with indexed locations, such as Music.</source>
          <target xml:space="preserve">Note that two-way binding using this technique works only with indexed locations, such as Music.</target>
        </segment>
      </unit>
      <unit id="243">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR207627)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can determine whether a location is indexed by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FolderInformation.GetIndexedStateAsync</pc></pc> method.</source>
          <target xml:space="preserve">You can determine whether a location is indexed by calling the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">FolderInformation.GetIndexedStateAsync</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="244">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note also that a virtualized vector can return <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc> for some items before it populates their value.</source>
          <target xml:space="preserve">Note also that a virtualized vector can return <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc> for some items before it populates their value.</target>
        </segment>
      </unit>
      <unit id="245">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR209770)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](https://msdn.microsoft.com/library/windows/apps/BR209768)</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For example, you should check for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc> before you use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SelectedItem</pc></pc> value of a list control bound to a virtualized vector, or use <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">SelectedIndex</pc></pc> instead.</source>
          <target xml:space="preserve">For example, you should check for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">null</pc> before you use the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">SelectedItem</pc></pc> value of a list control bound to a virtualized vector, or use <pc dataRefEnd="id8" dataRefStart="id7" id="p4"><pc dataRefEnd="id10" dataRefStart="id9" id="p5">SelectedIndex</pc></pc> instead.</target>
        </segment>
      </unit>
      <unit id="246">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Binding to data grouped by a key
--------------------------------

If you take a flat collection of items—books, for example, represented by a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BookSku</pc> class—and you group the items by using a common property as a key—the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BookSku.AuthorName</pc> property, for example—then the result is called grouped data.</source>
          <target xml:space="preserve">Binding to data grouped by a key
--------------------------------

If you take a flat collection of items—books, for example, represented by a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BookSku</pc> class—and you group the items by using a common property as a key—the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BookSku.AuthorName</pc> property, for example—then the result is called grouped data.</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source xml:space="preserve">When you group data, it is no longer a flat collection.</source>
          <target xml:space="preserve">When you group data, it is no longer a flat collection.</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source xml:space="preserve">Grouped data is a collection of group objects, where each group object has a) a key and b) a collection of items whose property matches that key.</source>
          <target xml:space="preserve">Grouped data is a collection of group objects, where each group object has a) a key and b) a collection of items whose property matches that key.</target>
        </segment>
      </unit>
      <unit id="249">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BookSku</pc>s whose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AuthorName</pc> property matches the group's key.</source>
          <target xml:space="preserve">To take the books example again, the result of grouping the books by author name results in a collection of author name groups where each group has a) a key, which is an author name, and b) a collection of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BookSku</pc>s whose <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AuthorName</pc> property matches the group's key.</target>
        </segment>
      </unit>
      <unit id="250">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242828)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR242878)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR242705)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In general, to display a collection, you bind the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsSource</pc></pc> of an items control (such as <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListView</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">GridView</pc></pc>) directly to a property that returns a collection.</source>
          <target xml:space="preserve">In general, to display a collection, you bind the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsSource</pc></pc> of an items control (such as <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ListView</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">GridView</pc></pc>) directly to a property that returns a collection.</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source xml:space="preserve">If that's a flat collection of items then you don't need to do anything special.</source>
          <target xml:space="preserve">If that's a flat collection of items then you don't need to do anything special.</target>
        </segment>
      </unit>
      <unit id="252">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> which sits between the items control and the binding source.</source>
          <target xml:space="preserve">But if it's a collection of group objects (as it is when binding to grouped data) then you need the services of an intermediary object called a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> which sits between the items control and the binding source.</target>
        </segment>
      </unit>
      <unit id="253">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You bind the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> to the property that returns grouped data, and you bind the items control to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc>.</source>
          <target xml:space="preserve">You bind the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> to the property that returns grouped data, and you bind the items control to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc>.</target>
        </segment>
      </unit>
      <unit id="254">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">An extra value-add of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc>.</source>
          <target xml:space="preserve">An extra value-add of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CollectionViewSource</pc> is that it keeps track of the current item, so you can keep more than one items control in sync by binding them all to the same <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc>.</target>
        </segment>
      </unit>
      <unit id="255">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209857)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209833-view)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You can also access the current item programmatically through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ICollectionView.CurrentItem</pc></pc> property of the object returned by the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource.View</pc></pc> property.</source>
          <target xml:space="preserve">You can also access the current item programmatically through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ICollectionView.CurrentItem</pc></pc> property of the object returned by the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CollectionViewSource.View</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="256">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR209833-issourcegrouped)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To activate the grouping facility of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>, set <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IsSourceGrouped</pc></pc> to <pc dataRefEnd="id10" dataRefStart="id9" id="p5">true</pc>.</source>
          <target xml:space="preserve">To activate the grouping facility of a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc>, set <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">IsSourceGrouped</pc></pc> to <pc dataRefEnd="id10" dataRefStart="id9" id="p5">true</pc>.</target>
        </segment>
      </unit>
      <unit id="257">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833-itemspath)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Whether you also need to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsPath</pc></pc> property depends on exactly how you author your group objects.</source>
          <target xml:space="preserve">Whether you also need to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ItemsPath</pc></pc> property depends on exactly how you author your group objects.</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source xml:space="preserve">There are two ways to author a group object: the "is-a-group" pattern, and the "has-a-group" pattern.</source>
          <target xml:space="preserve">There are two ways to author a group object: the "is-a-group" pattern, and the "has-a-group" pattern.</target>
        </segment>
      </unit>
      <unit id="259">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the "is-a-group" pattern, the group object derives from a collection type (for example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">List&amp;lt;T&amp;gt;</pc>), so the group object actually is itself the group of items.</source>
          <target xml:space="preserve">In the "is-a-group" pattern, the group object derives from a collection type (for example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">List&amp;lt;T&amp;gt;</pc>), so the group object actually is itself the group of items.</target>
        </segment>
      </unit>
      <unit id="260">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">With this pattern you do not need to set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsPath</pc>.</source>
          <target xml:space="preserve">With this pattern you do not need to set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsPath</pc>.</target>
        </segment>
      </unit>
      <unit id="261">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In the "has-a-group" pattern, the group object has one or more properties of a collection type (such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">List&amp;lt;T&amp;gt;</pc>), so the group "has a" group of items in the form of a property (or several groups of items in the form of several properties).</source>
          <target xml:space="preserve">In the "has-a-group" pattern, the group object has one or more properties of a collection type (such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">List&amp;lt;T&amp;gt;</pc>), so the group "has a" group of items in the form of a property (or several groups of items in the form of several properties).</target>
        </segment>
      </unit>
      <unit id="262">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">With this pattern you need to set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsPath</pc> to the name of the property that contains the group of items.</source>
          <target xml:space="preserve">With this pattern you need to set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ItemsPath</pc> to the name of the property that contains the group of items.</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source xml:space="preserve">The example below illustrates the "has-a-group" pattern.</source>
          <target xml:space="preserve">The example below illustrates the "has-a-group" pattern.</target>
        </segment>
      </unit>
      <unit id="264">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR208713)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The page class has a property named <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ViewModel</pc></pc>, which returns an instance of our view model.</source>
          <target xml:space="preserve">The page class has a property named <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ViewModel</pc></pc>, which returns an instance of our view model.</target>
        </segment>
      </unit>
      <unit id="265">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209833)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> binds to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Authors</pc> property of the view model (<pc dataRefEnd="id8" dataRefStart="id7" id="p4">Authors</pc> is the collection of group objects) and also specifies that it's the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Author.BookSkus</pc> property that contains the grouped items.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CollectionViewSource</pc></pc> binds to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Authors</pc> property of the view model (<pc dataRefEnd="id8" dataRefStart="id7" id="p4">Authors</pc> is the collection of group objects) and also specifies that it's the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">Author.BookSkus</pc> property that contains the grouped items.</target>
        </segment>
      </unit>
      <unit id="266">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242705)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Finally, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GridView</pc></pc> is bound to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CollectionViewSource</pc>, and has its group style defined so that it can render the items in groups.</source>
          <target xml:space="preserve">Finally, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GridView</pc></pc> is bound to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CollectionViewSource</pc>, and has its group style defined so that it can render the items in groups.</target>
        </segment>
      </unit>
      <unit id="267">
        <originalData>
          <data id="id1">``` csharp
    </data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="269">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">LINQ](http://msdn.microsoft.com/library/bb397926.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The second way is to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"></pc> expression to dynamically create group objects (and a group class) from like property values of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BookSku</pc> items.</source>
          <target xml:space="preserve">The second way is to use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"></pc> expression to dynamically create group objects (and a group class) from like property values of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">BookSku</pc> items.</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source xml:space="preserve">This approach—maintaining only a flat list of items and grouping them together on the fly—is typical of an app that accesses data from a cloud service.</source>
          <target xml:space="preserve">This approach—maintaining only a flat list of items and grouping them together on the fly—is typical of an app that accesses data from a cloud service.</target>
        </segment>
      </unit>
      <unit id="271">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">You get the flexibility to group books by author or by genre (for example) without needing special group classes such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Author</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Genre</pc>.</source>
          <target xml:space="preserve">You get the flexibility to group books by author or by genre (for example) without needing special group classes such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Author</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Genre</pc>.</target>
        </segment>
      </unit>
      <unit id="272">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">LINQ](http://msdn.microsoft.com/library/bb397926.aspx)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The example below illustrates the "is-a-group" pattern using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"></pc>.</source>
          <target xml:space="preserve">The example below illustrates the "is-a-group" pattern using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"></pc>.</target>
        </segment>
      </unit>
      <unit id="273">
        <segment state="initial">
          <source xml:space="preserve">This time we group books by genre, displayed with the genre name in the group headers.</source>
          <target xml:space="preserve">This time we group books by genre, displayed with the genre name in the group headers.</target>
        </segment>
      </unit>
      <unit id="274">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](P:System.Linq.IGrouping%602.Key)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This is indicated by the "Key" property path in reference to the group <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Key</pc></pc> value.</source>
          <target xml:space="preserve">This is indicated by the "Key" property path in reference to the group <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Key</pc></pc> value.</target>
        </segment>
      </unit>
      <unit id="275">
        <originalData>
          <data id="id1">``` csharp
    using System.Linq;

    ...

    private IOrderedEnumerable</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="276">
        <originalData>
          <data id="id1">&gt;</data>
          <data id="id2">public IOrderedEnumerable</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> genres;

    <ph dataRef="id2" id="ph2" /></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> genres;

    <ph dataRef="id2" id="ph2" /></target>
        </segment>
      </unit>
      <unit id="277">
        <originalData>
          <data id="id1">&gt;</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> Genres</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" /> Genres</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="279">
        <segment state="initial">
          <source xml:space="preserve">get</source>
          <target xml:space="preserve">get</target>
        </segment>
      </unit>
      <unit id="280">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source xml:space="preserve">if (this.genres == null)</source>
          <target xml:space="preserve">if (this.genres == null)</target>
        </segment>
      </unit>
      <unit id="282">
        <segment state="initial">
          <source xml:space="preserve">{</source>
          <target xml:space="preserve">{</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source xml:space="preserve">this.genres = from book in this.bookSkus</source>
          <target xml:space="preserve">this.genres = from book in this.bookSkus</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source xml:space="preserve">group book by book.genre into grp</source>
          <target xml:space="preserve">group book by book.genre into grp</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source xml:space="preserve">orderby grp.Key select grp;</source>
          <target xml:space="preserve">orderby grp.Key select grp;</target>
        </segment>
      </unit>
      <unit id="286">
        <segment state="initial">
          <source xml:space="preserve">}</source>
          <target xml:space="preserve">}</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source xml:space="preserve">return this.genres;</source>
          <target xml:space="preserve">return this.genres;</target>
        </segment>
      </unit>
      <unit id="288">
        <segment state="initial">
          <source xml:space="preserve">}</source>
          <target xml:space="preserve">}</target>
        </segment>
      </unit>
      <unit id="289">
        <originalData>
          <data id="id1">```

Remember that when using [{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783) with data templates we need to indicate the type being bound to by setting an **x:DataType** value. If the type is generic then we can't express that in markup so we need to use [{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782) instead in the group style header template.

``` xml
    </data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">}
<ph dataRef="id1" id="ph1" /></source>
          <target xml:space="preserve">}
<ph dataRef="id1" id="ph1" /></target>
        </segment>
      </unit>
      <unit id="290">
        <segment state="initial">
          <source xml:space="preserve">.g.cs`).</source>
          <target xml:space="preserve">.g.cs`).</target>
        </segment>
      </unit>
      <unit id="291">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you have a problem with a binding then turn on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Break On Unhandled Exceptions</pc> in the Microsoft Visual Studio debugger.</source>
          <target xml:space="preserve">If you have a problem with a binding then turn on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Break On Unhandled Exceptions</pc> in the Microsoft Visual Studio debugger.</target>
        </segment>
      </unit>
      <unit id="292">
        <segment state="initial">
          <source xml:space="preserve">The debugger will break execution at that point, and you can then debug what has gone wrong.</source>
          <target xml:space="preserve">The debugger will break execution at that point, and you can then debug what has gone wrong.</target>
        </segment>
      </unit>
      <unit id="293">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Call Stack</pc> window to help determine the sequence of calls that led up to the problem.</source>
          <target xml:space="preserve">The code generated by {x:Bind} follows the same pattern for each part of the graph of binding source nodes, and you can use the info in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Call Stack</pc> window to help determine the sequence of calls that led up to the problem.</target>
        </segment>
      </unit>
      <unit id="294">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1"></pc> does not have type information for the binding source.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1"></pc> does not have type information for the binding source.</target>
        </segment>
      </unit>
      <unit id="295">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">But when you run your app with the debugger attached, any binding errors appear in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Output</pc> window in Visual Studio.</source>
          <target xml:space="preserve">But when you run your app with the debugger attached, any binding errors appear in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Output</pc> window in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="296">
        <originalData>
          <data id="id1">-------------------------

**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">{Binding}](https://msdn.microsoft.com/library/windows/apps/Mt204782)</data>
          <data id="id5">[</data>
          <data id="id6">{x:Bind}](https://msdn.microsoft.com/library/windows/apps/Mt204783)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Creating bindings in code
<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This section only applies to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"></pc>, because you can't create <pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> bindings in code.</source>
          <target xml:space="preserve">Creating bindings in code
<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This section only applies to <pc dataRefEnd="id4" dataRefStart="id3" id="p2"></pc>, because you can't create <pc dataRefEnd="id6" dataRefStart="id5" id="p3"></pc> bindings in code.</target>
        </segment>
      </unit>
      <unit id="297">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR242356-registerpropertychangedcallback)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">However, some of the same benefits of {x:Bind} can be achieved with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyProperty.RegisterPropertyChangedCallback</pc></pc>, which enables you to register for change notifications on any dependency property.</source>
          <target xml:space="preserve">However, some of the same benefits of {x:Bind} can be achieved with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DependencyProperty.RegisterPropertyChangedCallback</pc></pc>, which enables you to register for change notifications on any dependency property.</target>
        </segment>
      </unit>
      <unit id="298">
        <segment state="initial">
          <source xml:space="preserve">You can also connect UI elements to data using procedural code instead of XAML.</source>
          <target xml:space="preserve">You can also connect UI elements to data using procedural code instead of XAML.</target>
        </segment>
      </unit>
      <unit id="299">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR209820)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/BR208706-setbinding)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/apps/BR209820operations-setbinding)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To do this, create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> object, set the appropriate properties, then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FrameworkElement.SetBinding</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">BindingOperations.SetBinding</pc></pc>.</source>
          <target xml:space="preserve">To do this, create a new <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Binding</pc></pc> object, set the appropriate properties, then call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">FrameworkElement.SetBinding</pc></pc> or <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">BindingOperations.SetBinding</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="300">
        <segment state="initial">
          <source xml:space="preserve">Creating bindings programmatically is useful when you want to choose the binding property values at run-time or share a single binding among multiple controls.</source>
          <target xml:space="preserve">Creating bindings programmatically is useful when you want to choose the binding property values at run-time or share a single binding among multiple controls.</target>
        </segment>
      </unit>
      <unit id="301">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Note, however, that you cannot change the binding property values after you call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetBinding</pc>.</source>
          <target xml:space="preserve">Note, however, that you cannot change the binding property values after you call <pc dataRefEnd="id2" dataRefStart="id1" id="p1">SetBinding</pc>.</target>
        </segment>
      </unit>
      <unit id="302">
        <segment state="initial">
          <source xml:space="preserve">The following example shows how to implement a binding in code.</source>
          <target xml:space="preserve">The following example shows how to implement a binding in code.</target>
        </segment>
      </unit>
      <unit id="303">
        <originalData>
          <data id="id1">``` xml
</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
					</target>
        </segment>
      </unit>
      <unit id="304">
        <originalData>
          <data id="id1">
```

```csharp
// Create an instance of the MyColors class 
// that implements INotifyPropertyChanged.
MyColors textcolor = new MyColors();

// Brush1 is set to be a SolidColorBrush with the value Red.
textcolor.Brush1 = new SolidColorBrush(Colors.Red);

// Set the DataContext of the TextBox MyTextBox.
MyTextBox.DataContext = textcolor;

// Create the binding and associate it with the text box.
Binding binding = new Binding() { Path = new PropertyPath("Brush1") };
MyTextBox.SetBinding(TextBox.ForegroundProperty, binding);
```

``` vbnet
' Create an instance of the MyColors class 
' that implements INotifyPropertyChanged. 
Dim textcolor As New MyColors()

' Brush1 is set to be a SolidColorBrush with the value Red. 
textcolor.Brush1 = New SolidColorBrush(Colors.Red)

' Set the DataContext of the TextBox MyTextBox. 
MyTextBox.DataContext = textcolor

' Create the binding and associate it with the text box.
Dim binding As New Binding() With {.Path = New PropertyPath("Brush1")}
MyTextBox.SetBinding(TextBox.ForegroundProperty, binding)
```</data>
          <data id="id2">| `{x:Bind a.b.c}`</data>
          <data id="id3"> | `{Binding a.b.c}`</data>
          <data id="id4"> | | 
|</data>
          <data id="id5">| `{x:Bind Path=a.b.c}`</data>
          <data id="id6"> | `{Binding Path=a.b.c}`</data>
          <data id="id7"> |</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />

{x:Bind} and {Binding} feature comparison
------------------------------------------

| Feature | {x:Bind} | {Binding} | Notes |
|---------|----------|-----------|-------|
| Path is the default property <ph dataRef="id2" id="ph2" /><ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" /> Path property <ph dataRef="id5" id="ph5" /><ph dataRef="id6" id="ph6" /><ph dataRef="id7" id="ph7" /> In x:Bind, Path is rooted at the Page by default, not the DataContext.</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />

{x:Bind} and {Binding} feature comparison
------------------------------------------

| Feature | {x:Bind} | {Binding} | Notes |
|---------|----------|-----------|-------|
| Path is the default property <ph dataRef="id2" id="ph2" /><ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" /> Path property <ph dataRef="id5" id="ph5" /><ph dataRef="id6" id="ph6" /><ph dataRef="id7" id="ph7" /> In x:Bind, Path is rooted at the Page by default, not the DataContext.</target>
        </segment>
      </unit>
      <unit id="305">
        <originalData>
          <data id="id1">| `{x:Bind Groups[2].Title}`</data>
          <data id="id2"> | `{Binding Groups[2].Title}`</data>
          <data id="id3"> |</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">| 
| Indexer <ph dataRef="id1" id="ph1" /><ph dataRef="id2" id="ph2" /><ph dataRef="id3" id="ph3" /> Binds to the specified item in the collection.</source>
          <target xml:space="preserve">| 
| Indexer <ph dataRef="id1" id="ph1" /><ph dataRef="id2" id="ph2" /><ph dataRef="id3" id="ph3" /> Binds to the specified item in the collection.</target>
        </segment>
      </unit>
      <unit id="306">
        <segment state="initial">
          <source xml:space="preserve">Only integer-based indexes are supported.</source>
          <target xml:space="preserve">Only integer-based indexes are supported.</target>
        </segment>
      </unit>
      <unit id="307">
        <originalData>
          <data id="id1">| `{x:Bind Button22.(Grid.Row)}`</data>
          <data id="id2"> | `{Binding Button22.(Grid.Row)}`</data>
          <data id="id3"> |</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">| 
| Attached properties <ph dataRef="id1" id="ph1" /><ph dataRef="id2" id="ph2" /><ph dataRef="id3" id="ph3" /> Attached properties are specified using parentheses.</source>
          <target xml:space="preserve">| 
| Attached properties <ph dataRef="id1" id="ph1" /><ph dataRef="id2" id="ph2" /><ph dataRef="id3" id="ph3" /> Attached properties are specified using parentheses.</target>
        </segment>
      </unit>
      <unit id="308">
        <segment state="initial">
          <source xml:space="preserve">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</source>
          <target xml:space="preserve">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</target>
        </segment>
      </unit>
      <unit id="309">
        <originalData>
          <data id="id1">| `{x:Bind groups[0].(data:SampleDataGroup.Title)}`</data>
          <data id="id2"> |</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">| 
| Casting <ph dataRef="id1" id="ph1" /><ph dataRef="id2" id="ph2" /> Not needed&lt; | Casts are specified using parentheses.</source>
          <target xml:space="preserve">| 
| Casting <ph dataRef="id1" id="ph1" /><ph dataRef="id2" id="ph2" /> Not needed&lt; | Casts are specified using parentheses.</target>
        </segment>
      </unit>
      <unit id="310">
        <segment state="initial">
          <source xml:space="preserve">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</source>
          <target xml:space="preserve">If the property is not declared in a XAML namespace, then prefix it with an xml namespace, which should be mapped to a code namespace at the head of the document.</target>
        </segment>
      </unit>
      <unit id="312">
        <originalData>
          <data id="id1">`{x:Bind IsShown, Converter={StaticResource BoolToVisibility}}`</data>
          <data id="id2">`{Binding IsShown, Converter={StaticResource BoolToVisibility}}`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">| Converter | <ph dataRef="id1" id="ph1" /> | <ph dataRef="id2" id="ph2" /> | Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</source>
          <target xml:space="preserve">| Converter | <ph dataRef="id1" id="ph1" /> | <ph dataRef="id2" id="ph2" /> | Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</target>
        </segment>
      </unit>
      <unit id="314">
        <originalData>
          <data id="id1">`{x:Bind IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}`</data>
          <data id="id2">`{Binding IsShown, Converter={StaticResource BoolToVisibility}, ConverterParameter=One, ConverterLanguage=fr-fr}`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">| ConverterParameter, ConverterLanguage | <ph dataRef="id1" id="ph1" /> | <ph dataRef="id2" id="ph2" /> | Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</source>
          <target xml:space="preserve">| ConverterParameter, ConverterLanguage | <ph dataRef="id1" id="ph1" /> | <ph dataRef="id2" id="ph2" /> | Converters must be declared at the root of the Page/ResourceDictionary, or in App.xaml.</target>
        </segment>
      </unit>
      <unit id="316">
        <originalData>
          <data id="id1">`{x:Bind Name, TargetNullValue=0}`</data>
          <data id="id2">`{Binding Name, TargetNullValue=0}`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">| TargetNullValue | <ph dataRef="id1" id="ph1" /> | <ph dataRef="id2" id="ph2" /> | Used when the leaf of the binding expression is null.</source>
          <target xml:space="preserve">| TargetNullValue | <ph dataRef="id1" id="ph1" /> | <ph dataRef="id2" id="ph2" /> | Used when the leaf of the binding expression is null.</target>
        </segment>
      </unit>
      <unit id="317">
        <segment state="initial">
          <source xml:space="preserve">Use single quotes for a string value.</source>
          <target xml:space="preserve">Use single quotes for a string value.</target>
        </segment>
      </unit>
      <unit id="319">
        <originalData>
          <data id="id1">`{x:Bind Name, FallbackValue='empty'}`</data>
          <data id="id2">`{Binding Name, FallbackValue='empty'}`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">| FallbackValue | <ph dataRef="id1" id="ph1" /> | <ph dataRef="id2" id="ph2" /> | Used when any part of the path for the binding (except for the leaf) is null.</source>
          <target xml:space="preserve">| FallbackValue | <ph dataRef="id1" id="ph1" /> | <ph dataRef="id2" id="ph2" /> | Used when any part of the path for the binding (except for the leaf) is null.</target>
        </segment>
      </unit>
      <unit id="321">
        <originalData>
          <data id="id1">`{x:Bind slider1.Value}`</data>
          <data id="id2">` | With {x:Bind} you're binding to a field; Path is rooted at the Page by default, so any named element can be accessed via its field. | 
| RelativeSource: Self | `</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">| ElementName | <ph dataRef="id1" id="ph1" /> | {Binding Value, ElementName=slider1}<ph dataRef="id2" id="ph2" /></source>
          <target xml:space="preserve">| ElementName | <ph dataRef="id1" id="ph1" /> | {Binding Value, ElementName=slider1}<ph dataRef="id2" id="ph2" /></target>
        </segment>
      </unit>
      <unit id="322">
        <originalData>
          <data id="id1">` | With {x:Bind}, name the element and use its name in Path. | 
| RelativeSource: TemplatedParent | Not supported | `</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />{Binding</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />{Binding</target>
        </segment>
      </unit>
      <unit id="323">
        <segment state="initial">
          <source xml:space="preserve">, RelativeSource={RelativeSource TemplatedParent}}` | Regular template binding can be used in control templates for most uses.</source>
          <target xml:space="preserve">, RelativeSource={RelativeSource TemplatedParent}}` | Regular template binding can be used in control templates for most uses.</target>
        </segment>
      </unit>
      <unit id="324">
        <segment state="initial">
          <source xml:space="preserve">But use TemplatedParent where you need to use a converter, or a two-way binding.&lt; |</source>
          <target xml:space="preserve">But use TemplatedParent where you need to use a converter, or a two-way binding.&lt; |</target>
        </segment>
      </unit>
      <unit id="325">
        <segment state="initial">
          <source xml:space="preserve">| Source | Not supported | `</source>
          <target xml:space="preserve">| Source | Not supported | `</target>
        </segment>
      </unit>
      <unit id="326">
        <originalData>
          <data id="id1">` | For {x:Bind} use a property or a static path instead. | 
| Mode | `</data>
          <data id="id2">` | `</data>
          <data id="id3">` | Mode can be OneTime, OneWay, or TwoWay. {x:Bind} defaults to OneTime; {Binding} defaults to OneWay. | 
| UpdateSourceTrigger | Not supported | '`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />{x:Bind Name, Mode=OneWay}<ph dataRef="id2" id="ph2" />{Binding Name, Mode=TwoWay}<ph dataRef="id3" id="ph3" /></source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />{x:Bind Name, Mode=OneWay}<ph dataRef="id2" id="ph2" />{Binding Name, Mode=TwoWay}<ph dataRef="id3" id="ph3" /></target>
        </segment>
      </unit>
      <unit id="327">
        <segment state="initial">
          <source xml:space="preserve">' | {x:Bind} uses PropertyChanged behavior for all cases except TextBox.Text where it waits for lost focus to update the source.</source>
          <target xml:space="preserve">' | {x:Bind} uses PropertyChanged behavior for all cases except TextBox.Text where it waits for lost focus to update the source.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>