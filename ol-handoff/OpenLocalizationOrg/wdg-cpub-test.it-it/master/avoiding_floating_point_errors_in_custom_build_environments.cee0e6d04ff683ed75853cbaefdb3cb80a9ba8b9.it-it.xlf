<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">16ae34742832f17eebb3d8dfbaa08ab57ce9bfb8</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">Avoiding Floating Point Errors in Custom Build Environments</source>
          <target xml:space="preserve">Avoiding Floating Point Errors in Custom Build Environments</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">This information is intended for developers and build engineers who compile kernel-mode drivers for Windows.</source>
          <target xml:space="preserve">This information is intended for developers and build engineers who compile kernel-mode drivers for Windows.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">In Microsoft Visual Studio Professional 2012, the default architecture for the Visual C++ (VC++) compiler changed from IA32 to the Streaming SIMD Extensions 2 (SSE2) instruction set.</source>
          <target xml:space="preserve">In Microsoft Visual Studio Professional 2012, the default architecture for the Visual C++ (VC++) compiler changed from IA32 to the Streaming SIMD Extensions 2 (SSE2) instruction set.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">As a result of this change, SSE2 floating point (FP) instructions injected into the binary at compile time can generate floating-point errors if not accounted for.</source>
          <target xml:space="preserve">As a result of this change, SSE2 floating point (FP) instructions injected into the binary at compile time can generate floating-point errors if not accounted for.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">The issue can be encountered by those who use the Microsoft VC++ compiler, or a custom build environment to develop Windows drivers.</source>
          <target xml:space="preserve">The issue can be encountered by those who use the Microsoft VC++ compiler, or a custom build environment to develop Windows drivers.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">However, the issue does not affect developers who use the Microsoft Visual Studio development environment, or who use the MSbuild utility to build drivers with an unmodified toolset.</source>
          <target xml:space="preserve">However, the issue does not affect developers who use the Microsoft Visual Studio development environment, or who use the MSbuild utility to build drivers with an unmodified toolset.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">&lt;span id="Floating_point_errors_can_cause_data_corruption_or_computer_crashes_"&gt;</data>
          <data id="id2">&lt;/span&gt;</data>
          <data id="id3">&lt;span id="floating_point_errors_can_cause_data_corruption_or_computer_crashes_"&gt;</data>
          <data id="id4">&lt;/span&gt;</data>
          <data id="id5">&lt;span id="FLOATING_POINT_ERRORS_CAN_CAUSE_DATA_CORRUPTION_OR_COMPUTER_CRASHES_"&gt;</data>
          <data id="id6">&lt;/span&gt;</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" />
						<ph dataRef="id3" id="ph3" />
						<ph dataRef="id4" id="ph4" />
						<ph dataRef="id5" id="ph5" />
						<ph dataRef="id6" id="ph6" />Floating point errors can cause data corruption or computer crashes</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" />
						<ph dataRef="id3" id="ph3" />
						<ph dataRef="id4" id="ph4" />
						<ph dataRef="id5" id="ph5" />
						<ph dataRef="id6" id="ph6" />Floating point errors can cause data corruption or computer crashes</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">If you compile a driver <pc dataRefEnd="id2" dataRefStart="id1" id="p1">without</pc> using the WDK, Visual Studio, and the recommended platform toolset for Windows drivers (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">WindowsKernelModeDriver8.0</pc>), the driver might not manage floating point operations correctly, even if the driver compiles without errors.</source>
          <target xml:space="preserve">If you compile a driver <pc dataRefEnd="id2" dataRefStart="id1" id="p1">without</pc> using the WDK, Visual Studio, and the recommended platform toolset for Windows drivers (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">WindowsKernelModeDriver8.0</pc>), the driver might not manage floating point operations correctly, even if the driver compiles without errors.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The Visual Studio Professional 2012 VC++ compiler emits code that uses the SSE2 instruction set by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/arch:sse2</pc> compiler option.</source>
          <target xml:space="preserve">The Visual Studio Professional 2012 VC++ compiler emits code that uses the SSE2 instruction set by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/arch:sse2</pc> compiler option.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">Starting with Visual Studio Professional 2012, this is the default option for x86 VC++ compiler code generation.</source>
          <target xml:space="preserve">Starting with Visual Studio Professional 2012, this is the default option for x86 VC++ compiler code generation.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Specifically, the default value changes from <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/arch:ia32</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/arch:sse2</pc>.</source>
          <target xml:space="preserve">Specifically, the default value changes from <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/arch:ia32</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/arch:sse2</pc>.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">For applications this change generates code that performs better and uses less processor time during execution.</source>
          <target xml:space="preserve">For applications this change generates code that performs better and uses less processor time during execution.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">However, for kernel-mode drivers this change will not manage the floating point (FP) state properly.</source>
          <target xml:space="preserve">However, for kernel-mode drivers this change will not manage the floating point (FP) state properly.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">This is due to the VC++ compiler introducing FP instruction sequences in places where the context has not been saved.</source>
          <target xml:space="preserve">This is due to the VC++ compiler introducing FP instruction sequences in places where the context has not been saved.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">Any binary floating-point system can represent only a finite number of floating-point values in exact form, with the rest being approximations.</source>
          <target xml:space="preserve">Any binary floating-point system can represent only a finite number of floating-point values in exact form, with the rest being approximations.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source xml:space="preserve">The floating-point control state, such as, rounding mode or precision, is what keeps FP operations in sync with each other.</source>
          <target xml:space="preserve">The floating-point control state, such as, rounding mode or precision, is what keeps FP operations in sync with each other.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">When the state is undefined, this leads to FP calculation errors.</source>
          <target xml:space="preserve">When the state is undefined, this leads to FP calculation errors.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source xml:space="preserve">These calculation errors are hard to detect because in most cases application state corruption is the only sign of this issue.</source>
          <target xml:space="preserve">These calculation errors are hard to detect because in most cases application state corruption is the only sign of this issue.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">This corruption can manifest itself in many ways, ranging from random crashes to data corruption.</source>
          <target xml:space="preserve">This corruption can manifest itself in many ways, ranging from random crashes to data corruption.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">&lt;span id="Solution"&gt;</data>
          <data id="id2">&lt;/span&gt;</data>
          <data id="id3">&lt;span id="solution"&gt;</data>
          <data id="id4">&lt;/span&gt;</data>
          <data id="id5">&lt;span id="SOLUTION"&gt;</data>
          <data id="id6">&lt;/span&gt;</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" />
						<ph dataRef="id3" id="ph3" />
						<ph dataRef="id4" id="ph4" />
						<ph dataRef="id5" id="ph5" />
						<ph dataRef="id6" id="ph6" />Solution</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" />
						<ph dataRef="id3" id="ph3" />
						<ph dataRef="id4" id="ph4" />
						<ph dataRef="id5" id="ph5" />
						<ph dataRef="id6" id="ph6" />Solution</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To avoid these problem with floating-point calculations, add the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/kernel</pc> flag to the C++ compiler and linker command lines to prevent generating SSE2 instructions.</source>
          <target xml:space="preserve">To avoid these problem with floating-point calculations, add the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/kernel</pc> flag to the C++ compiler and linker command lines to prevent generating SSE2 instructions.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/kernel</pc> flag changes the default <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/arch:sse2</pc> value back to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">/arch:ia32</pc>.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/kernel</pc> flag changes the default <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/arch:sse2</pc> value back to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">/arch:ia32</pc>.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">In addition, if you build a driver using the WDK and the Visual Studio Professional 2012 development environment, or use MSBuild, in a Visual Studio Command prompt window, the Microsoft provided platform toolset (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WindowsKernelModeDriver8.0</pc>) sets the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/kernel</pc> flag.</source>
          <target xml:space="preserve">In addition, if you build a driver using the WDK and the Visual Studio Professional 2012 development environment, or use MSBuild, in a Visual Studio Command prompt window, the Microsoft provided platform toolset (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">WindowsKernelModeDriver8.0</pc>) sets the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/kernel</pc> flag.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source xml:space="preserve">As a result, floating-point generation errors are avoided.</source>
          <target xml:space="preserve">As a result, floating-point generation errors are avoided.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">&lt;span id="Recommendations"&gt;</data>
          <data id="id2">&lt;/span&gt;</data>
          <data id="id3">&lt;span id="recommendations"&gt;</data>
          <data id="id4">&lt;/span&gt;</data>
          <data id="id5">&lt;span id="RECOMMENDATIONS"&gt;</data>
          <data id="id6">&lt;/span&gt;</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" />
						<ph dataRef="id3" id="ph3" />
						<ph dataRef="id4" id="ph4" />
						<ph dataRef="id5" id="ph5" />
						<ph dataRef="id6" id="ph6" />Recommendations</source>
          <target xml:space="preserve">
						<ph dataRef="id1" id="ph1" />
						<ph dataRef="id2" id="ph2" />
						<ph dataRef="id3" id="ph3" />
						<ph dataRef="id4" id="ph4" />
						<ph dataRef="id5" id="ph5" />
						<ph dataRef="id6" id="ph6" />Recommendations</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Here are the recommended solutions based on the type of development environment you use:</source>
          <target xml:space="preserve">Here are the recommended solutions based on the type of development environment you use:</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft tool set (MSBuild)</pc> - No work required.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft tool set (MSBuild)</pc> - No work required.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WindowsKernelModeDriver8.0</pc> as the platform toolset the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/kernel</pc> is automatically added where appropriate.</source>
          <target xml:space="preserve">Use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WindowsKernelModeDriver8.0</pc> as the platform toolset the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/kernel</pc> is automatically added where appropriate.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft VC++ Compiler</pc> - Add the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/kernel</pc> flag to prevent compiler from emitting SSE2.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft VC++ Compiler</pc> - Add the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/kernel</pc> flag to prevent compiler from emitting SSE2.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom Tooling/Non-Microsoft Compiler</pc> - You must manually account for the assembly instructions used in the resulting binary.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Custom Tooling/Non-Microsoft Compiler</pc> - You must manually account for the assembly instructions used in the resulting binary.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]</data>
          <data id="id3">(mailto:wsddocfb@microsoft.com?subject=Documentation%20feedback%20[VsDriver\vsdriver]:%20Avoiding%20Floating%20Point%20Errors%20in%20Custom%20Build%20Environments%20%20RELEASE:%20%289/30/2015%29&amp;body=%0A%0APRIVACY%20STATEMENT%0A%0AWe%20use%20your%20feedback%20to%20improve%20the%20documentation.%20We%20don't%20use%20your%20email%20address%20for%20any%20other%20purpose,%20and%20we'll%20remove%20your%20email%20address%20from%20our%20system%20after%20the%20issue%20that%20you're%20reporting%20is%20fixed.%20While%20we're%20working%20to%20fix%20this%20issue,%20we%20might%20send%20you%20an%20email%20message%20to%20ask%20for%20more%20info.%20Later,%20we%20might%20also%20send%20you%20an%20email%20message%20to%20let%20you%20know%20that%20we've%20addressed%20your%20feedback.%0A%0AFor%20more%20info%20about%20Microsoft's%20privacy%20policy,%20see%20http://privacy.microsoft.com/en-us/default. "</data>
          <data id="id4">")</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Send comments about this topic to Microsoft</pc>
						<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Send comments about this topic to Microsoft</pc>
					</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Send comments about this topic to Microsoft</pc>
						<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Send comments about this topic to Microsoft</pc>
					</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>