<?xml version="1.0" encoding="utf-8"?>
<xliff srcLang="en-US" trgLang="it-it" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0" xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">fb2d2fcd4b5697c6ebf3f3c7b2123c85104c2939</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source xml:space="preserve">description: Provides a value for any XAML attribute by evaluating a reference to a resource that comes from a custom resource-lookup implementation.</source>
          <target xml:space="preserve">description: Provides a value for any XAML attribute by evaluating a reference to a resource that comes from a custom resource-lookup implementation.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source xml:space="preserve">Resource lookup is performed by a CustomXamlResourceLoader class implementation.</source>
          <target xml:space="preserve">Resource lookup is performed by a CustomXamlResourceLoader class implementation.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source xml:space="preserve">title: {CustomResource} markup extension'</source>
          <target xml:space="preserve">title: {CustomResource} markup extension'</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source xml:space="preserve">ms.assetid: 3A59A8DE-E805-4F04-B9D9-A91E053F3642</source>
          <target xml:space="preserve">ms.assetid: 3A59A8DE-E805-4F04-B9D9-A91E053F3642</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source xml:space="preserve">{CustomResource} markup extension</source>
          <target xml:space="preserve">{CustomResource} markup extension</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source xml:space="preserve">\[ Updated for UWP apps on Windows 10.</source>
          <target xml:space="preserve">\[ Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</source>
          <target xml:space="preserve">For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc> \]</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source xml:space="preserve">Provides a value for any XAML attribute by evaluating a reference to a resource that comes from a custom resource-lookup implementation.</source>
          <target xml:space="preserve">Provides a value for any XAML attribute by evaluating a reference to a resource that comes from a custom resource-lookup implementation.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243327)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Resource lookup is performed by a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> class implementation.</source>
          <target xml:space="preserve">Resource lookup is performed by a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> class implementation.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source xml:space="preserve">XAML attribute usage</source>
          <target xml:space="preserve">XAML attribute usage</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source xml:space="preserve">XAML values</source>
          <target xml:space="preserve">XAML values</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source xml:space="preserve">Term</source>
          <target xml:space="preserve">Term</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source xml:space="preserve">Description</source>
          <target xml:space="preserve">Description</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source xml:space="preserve">key</source>
          <target xml:space="preserve">key</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source xml:space="preserve">The key for the requested resource.</source>
          <target xml:space="preserve">The key for the requested resource.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243327)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">How the key is initially assigned is specific to the implementation of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> class that is currently registered for use.</source>
          <target xml:space="preserve">How the key is initially assigned is specific to the implementation of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> class that is currently registered for use.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source xml:space="preserve">Remarks</source>
          <target xml:space="preserve">Remarks</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> is a technique for obtaining values that are defined elsewhere in a custom resource repository.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> is a technique for obtaining values that are defined elsewhere in a custom resource repository.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source xml:space="preserve">This technique is relatively advanced and isn't used by most Windows Runtime app scenarios.</source>
          <target xml:space="preserve">This technique is relatively advanced and isn't used by most Windows Runtime app scenarios.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br243327)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">How a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> resolves to a resource dictionary is not described in this topic, because that can vary widely depending on how <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CustomXamlResourceLoader</pc></pc> is implemented.</source>
          <target xml:space="preserve">How a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> resolves to a resource dictionary is not described in this topic, because that can vary widely depending on how <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CustomXamlResourceLoader</pc></pc> is implemented.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243340)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br243327)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">`{CustomResource}`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetResource</pc></pc> method of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CustomXamlResourceLoader</pc></pc> implementation is called by the Windows Runtime XAML parser whenever it encounters a <ph dataRef="id9" id="ph1" /> usage in markup.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetResource</pc></pc> method of the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CustomXamlResourceLoader</pc></pc> implementation is called by the Windows Runtime XAML parser whenever it encounters a <ph dataRef="id9" id="ph1" /> usage in markup.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">resourceId</pc> that is passed to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetResource</pc> comes from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">key</pc> argument, and the other input parameters come from context, such as which property the usage is applied to.</source>
          <target xml:space="preserve">The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">resourceId</pc> that is passed to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetResource</pc> comes from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">key</pc> argument, and the other input parameters come from context, such as which property the usage is applied to.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">`{CustomResource}`</data>
          <data id="id2">[</data>
          <data id="id3">](https://msdn.microsoft.com/library/windows/apps/br243340)</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">A <ph dataRef="id1" id="ph1" /> usage doesn't work by default (the base implementation of <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">GetResource</pc></pc> is incomplete).</source>
          <target xml:space="preserve">A <ph dataRef="id1" id="ph1" /> usage doesn't work by default (the base implementation of <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><pc dataRefEnd="id5" dataRefStart="id4" id="p2">GetResource</pc></pc> is incomplete).</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">`{CustomResource}`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">To make a valid <ph dataRef="id1" id="ph1" /> reference, you must perform each of these steps:</source>
          <target xml:space="preserve">To make a valid <ph dataRef="id1" id="ph1" /> reference, you must perform each of these steps:</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243327)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br243340)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Derive a custom class from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> and override <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">GetResource</pc></pc> method.</source>
          <target xml:space="preserve">Derive a custom class from <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader</pc></pc> and override <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">GetResource</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source xml:space="preserve">Do not call base in the implementation.</source>
          <target xml:space="preserve">Do not call base in the implementation.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br243328)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader.Current</pc></pc> to reference your class in initialization logic.</source>
          <target xml:space="preserve">Set <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CustomXamlResourceLoader.Current</pc></pc> to reference your class in initialization logic.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">`{CustomResource}`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">This must happen before any page-level XAML that includes the <ph dataRef="id1" id="ph1" /> extension usage is loaded.</source>
          <target xml:space="preserve">This must happen before any page-level XAML that includes the <ph dataRef="id1" id="ph1" /> extension usage is loaded.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/br242324)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">One place to set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomXamlResourceLoader.Current</pc> is in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Application</pc></pc> subclass constructor that's generated for you in the App.xaml code-behind templates.</source>
          <target xml:space="preserve">One place to set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomXamlResourceLoader.Current</pc> is in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Application</pc></pc> subclass constructor that's generated for you in the App.xaml code-behind templates.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">`{CustomResource}`</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">Now you can use <ph dataRef="id1" id="ph1" /> extensions in the XAML that your app loads as pages, or from within XAML resource dictionaries.</source>
          <target xml:space="preserve">Now you can use <ph dataRef="id1" id="ph1" /> extensions in the XAML that your app loads as pages, or from within XAML resource dictionaries.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> is a markup extension.</source>
          <target xml:space="preserve">
						<pc dataRefEnd="id2" dataRefStart="id1" id="p1">CustomResource</pc> is a markup extension.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source xml:space="preserve">Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</source>
          <target xml:space="preserve">Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source xml:space="preserve">All markup extensions in XAML use the "\{" and "\}" characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute.</source>
          <target xml:space="preserve">All markup extensions in XAML use the "\{" and "\}" characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the attribute.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source xml:space="preserve">Related topics</source>
          <target xml:space="preserve">Related topics</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source xml:space="preserve">ResourceDictionary and XAML resource references</source>
          <target xml:space="preserve">ResourceDictionary and XAML resource references</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source xml:space="preserve">CustomXamlResourceLoader</source>
          <target xml:space="preserve">CustomXamlResourceLoader</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source xml:space="preserve">GetResource</source>
          <target xml:space="preserve">GetResource</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>