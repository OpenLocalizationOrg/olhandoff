<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="ja-jp">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acomdc_nonhi</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3ec42dd91b8e5ac27b57c5477b89d53f111989a</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1457980" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure AD Connect Multiple Domains</source>
          <target state="new">Azure AD Connect Multiple Domains</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This document describes setting up and configuring multiple top level domains with O365 and Azure AD.</source>
          <target state="new">This document describes setting up and configuring multiple top level domains with O365 and Azure AD.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Multiple Domain Support</source>
          <target state="new">Multiple Domain Support</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Many of you have asked how you can configure multiple top level Office 365 or Azure AD domains and sub-domains with federation.</source>
          <target state="new">Many of you have asked how you can configure multiple top level Office 365 or Azure AD domains and sub-domains with federation.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>While most of it can be done in a fairly straightforward way, because of some things we do behind the scenes, there are a couple of tips and tricks you should know about to avoid the following issues</source>
          <target state="new">While most of it can be done in a fairly straightforward way, because of some things we do behind the scenes, there are a couple of tips and tricks you should know about to avoid the following issues</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Error messages while trying to configure additional domains for federation</source>
          <target state="new">Error messages while trying to configure additional domains for federation</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Users in subdomains are unable to login after multiple top level domains have been configured for federation</source>
          <target state="new">Users in subdomains are unable to login after multiple top level domains have been configured for federation</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Multiple top level domains</source>
          <target state="new">Multiple top level domains</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>I’ll take you through setup of an example organization contoso.com who wants an additional domain named fabrikam.com.</source>
          <target state="new">I’ll take you through setup of an example organization contoso.com who wants an additional domain named fabrikam.com.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Let’s say that in my on premises system, I have AD FS configured with federation service name fs.jenfield.com.</source>
          <target state="new">Let’s say that in my on premises system, I have AD FS configured with federation service name fs.jenfield.com.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When I first sign up for Office 365 or Azure AD, I choose to configure contoso.com as my first sign-on domain.</source>
          <target state="new">When I first sign up for Office 365 or Azure AD, I choose to configure contoso.com as my first sign-on domain.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>I can do this via Azure AD Connect or Azure AD Powershell using New-MsolFederatedDomain.</source>
          <target state="new">I can do this via Azure AD Connect or Azure AD Powershell using New-MsolFederatedDomain.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Once this is done, let’s look at the default values for two of the new Azure AD domain’s new configuration properties (These can be queried using Get-MsolDomainFederationSettings):</source>
          <target state="new">Once this is done, let’s look at the default values for two of the new Azure AD domain’s new configuration properties (These can be queried using Get-MsolDomainFederationSettings):</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Property Name</source>
          <target state="new">Property Name</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="new">Value</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>IssuerURI</source>
          <target state="new">IssuerURI</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>http://fs.jenfield.com/adfs/services/trust</source>
          <target state="new">http://fs.jenfield.com/adfs/services/trust</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>While it looks like a URL, this property is really just a name for the on premises authentication system, and so the path does not need to resolve to anything.</source>
          <target state="new">While it looks like a URL, this property is really just a name for the on premises authentication system, and so the path does not need to resolve to anything.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By default, Azure AD sets this to the value of the federation service identifier in my on premises AD FS configuration.</source>
          <target state="new">By default, Azure AD sets this to the value of the federation service identifier in my on premises AD FS configuration.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>PassiveClientSignInUrl</source>
          <target state="new">PassiveClientSignInUrl</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>https://fs.jenfield.com/adfs/ls/</source>
          <target state="new">https://fs.jenfield.com/adfs/ls/</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This is the location to which passive signin requests will be sent, and it resolves to my actual AD FS system.</source>
          <target state="new">This is the location to which passive signin requests will be sent, and it resolves to my actual AD FS system.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Actually there are several “*Url” properties, but we just need to look at one example to illustrate the difference between this property and a URI such as the IssuerURI.</source>
          <target state="new">Actually there are several “*Url” properties, but we just need to look at one example to illustrate the difference between this property and a URI such as the IssuerURI.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Now, imagine I add my second domain fabrikam.com.</source>
          <target state="new">Now, imagine I add my second domain fabrikam.com.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Again I can do this by running the Azure AD Connect wizard a second time or via PowerShell.</source>
          <target state="new">Again I can do this by running the Azure AD Connect wizard a second time or via PowerShell.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If I try to add the second domain as federated using Azure AD PowerShell, I will get an error.</source>
          <target state="new">If I try to add the second domain as federated using Azure AD PowerShell, I will get an error.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The reason for this is a constraint in Azure AD where the IssuerURI cannot have the same value for more than one domain.</source>
          <target state="new">The reason for this is a constraint in Azure AD where the IssuerURI cannot have the same value for more than one domain.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To overcome this limitation, you must use a different IssuerURI for the new domain.</source>
          <target state="new">To overcome this limitation, you must use a different IssuerURI for the new domain.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is effectively what the SupportMultipleDomain parameter does.</source>
          <target state="new">This is effectively what the SupportMultipleDomain parameter does.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When used with the cmdlets for configuring federation (New-, Convert-, and Update-MsolFederatedDomain), this parameter will cause Azure AD to configure the IssuerURI based on the name of the domain which must be unique across tenants in Azure AD thus it should be unique.</source>
          <target state="new">When used with the cmdlets for configuring federation (New-, Convert-, and Update-MsolFederatedDomain), this parameter will cause Azure AD to configure the IssuerURI based on the name of the domain which must be unique across tenants in Azure AD thus it should be unique.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>There is also a change to the claim rules but I’ll talk about that in a bit.</source>
          <target state="new">There is also a change to the claim rules but I’ll talk about that in a bit.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>So, in Powershell, if I add fabrikam.com using the SupportMultipleDomain parameter,</source>
          <target state="new">So, in Powershell, if I add fabrikam.com using the SupportMultipleDomain parameter,</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>I will get the following configuration in Azure AD:</source>
          <target state="new">I will get the following configuration in Azure AD:</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>DomainName: fabrikam.com</source>
          <target state="new">DomainName: fabrikam.com</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>IssuerURI: http://fabrikam.com/adfs/services/trust</source>
          <target state="new">IssuerURI: http://fabrikam.com/adfs/services/trust</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>PassiveClientSignInUrl: https://fs.jenfield.com/adfs/ls/</source>
          <target state="new">PassiveClientSignInUrl: https://fs.jenfield.com/adfs/ls/</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Note that while the IssuerURI has been set to a value based on my domain, and therefore unique, the endpoint url values are still configured to point to my federation service on fs.jenfield.com, just like they are for the original contoso.com domain.</source>
          <target state="new">Note that while the IssuerURI has been set to a value based on my domain, and therefore unique, the endpoint url values are still configured to point to my federation service on fs.jenfield.com, just like they are for the original contoso.com domain.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>So all the domains will still point to the same AD FS system.</source>
          <target state="new">So all the domains will still point to the same AD FS system.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The other thing SupportMultipleDomain does is ensure the AD FS system will include the proper Issuer value in tokens issued for Azure AD.</source>
          <target state="new">The other thing SupportMultipleDomain does is ensure the AD FS system will include the proper Issuer value in tokens issued for Azure AD.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It does this by taking the domain portion of the users upn and setting this as the domain in the issuerURI, i.e. https://{upn suffix}/adfs/services/trust.</source>
          <target state="new">It does this by taking the domain portion of the users upn and setting this as the domain in the issuerURI, i.e. https://{upn suffix}/adfs/services/trust.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Thus during authentication to Azure AD or Office 365, the Issuer element in the user’s token is used to locate the domain in Azure AD.</source>
          <target state="new">Thus during authentication to Azure AD or Office 365, the Issuer element in the user’s token is used to locate the domain in Azure AD.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If a match can’t be found the authentication will fail.</source>
          <target state="new">If a match can’t be found the authentication will fail.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, if a user’s UPN is johndoe@fabrikam.com, the Issuer element in the token AD FS issues will be set to http://fabrikam.com/adfs/services/trust.</source>
          <target state="new">For example, if a user’s UPN is johndoe@fabrikam.com, the Issuer element in the token AD FS issues will be set to http://fabrikam.com/adfs/services/trust.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This will match the Azure AD configuration, and authentication will succeed.</source>
          <target state="new">This will match the Azure AD configuration, and authentication will succeed.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Below is the customized claim rule that implements this logic:</source>
          <target state="new">Below is the customized claim rule that implements this logic:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Now in my setup, I had registered contoso.com first without the supportMultipleDomains switch and with the default IssuerURI value.</source>
          <target state="new">Now in my setup, I had registered contoso.com first without the supportMultipleDomains switch and with the default IssuerURI value.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When I add fabrikam.com, I actually need to make sure that contoso.com is also configured to use the SupportMultiple Domains switch as the claim rule update will no longer ever send the default IssuerURI and authentication will fail due to IssuerURI miss match.</source>
          <target state="new">When I add fabrikam.com, I actually need to make sure that contoso.com is also configured to use the SupportMultiple Domains switch as the claim rule update will no longer ever send the default IssuerURI and authentication will fail due to IssuerURI miss match.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Don’t worry we will warn you about this before we allow you to use the supportMultipleDomain switch on a different domain.</source>
          <target state="new">Don’t worry we will warn you about this before we allow you to use the supportMultipleDomain switch on a different domain.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To remediate this, we need to update the configuration for domain contoso.com as well.</source>
          <target state="new">To remediate this, we need to update the configuration for domain contoso.com as well.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The Azure AD Connect wizard is pretty good about figuring out when the above needs to be done and doing the right thing when you are adding a second domain.</source>
          <target state="new">The Azure AD Connect wizard is pretty good about figuring out when the above needs to be done and doing the right thing when you are adding a second domain.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>On first pass, if you are already in SupportMultipleDomain configuration, we will not overwrite you.</source>
          <target state="new">On first pass, if you are already in SupportMultipleDomain configuration, we will not overwrite you.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In PowerShell, you need to provide the SupportMultipleDomain switch manually.</source>
          <target state="new">In PowerShell, you need to provide the SupportMultipleDomain switch manually.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See below for all of the detailed steps to transition from single domain to multiple domains.</source>
          <target state="new">See below for all of the detailed steps to transition from single domain to multiple domains.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Once we’ve done this, we will then have configuration for two domains in Azure AD:</source>
          <target state="new">Once we’ve done this, we will then have configuration for two domains in Azure AD:</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>DomainName: contoso.com</source>
          <target state="new">DomainName: contoso.com</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>IssuerURI: http://contoso.com/adfs/services/trust</source>
          <target state="new">IssuerURI: http://contoso.com/adfs/services/trust</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>PassiveClientSignInUrl: https://fs.jenfield.com/adfs/ls/</source>
          <target state="new">PassiveClientSignInUrl: https://fs.jenfield.com/adfs/ls/</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>DomainName: fabrikam.com</source>
          <target state="new">DomainName: fabrikam.com</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>IssuerURI: http://fabrikam.com/adfs/services/trust</source>
          <target state="new">IssuerURI: http://fabrikam.com/adfs/services/trust</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>PassiveClientSignInUrl: https://fs.jenfield.com/adfs/ls/</source>
          <target state="new">PassiveClientSignInUrl: https://fs.jenfield.com/adfs/ls/</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Federated sign on for users from the contoso.com and the fabrikam.com domains will now be working.</source>
          <target state="new">Federated sign on for users from the contoso.com and the fabrikam.com domains will now be working.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>There is only one remaining problem: sign on for users in sub domains.</source>
          <target state="new">There is only one remaining problem: sign on for users in sub domains.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Sub domains</source>
          <target state="new">Sub domains</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Let’s say I add my sub domain sub.contoso.com to Azure AD.</source>
          <target state="new">Let’s say I add my sub domain sub.contoso.com to Azure AD.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Because of the way Azure AD manages domains, the sub domain will inherit the settings of the parent domain, in this case contoso.com.</source>
          <target state="new">Because of the way Azure AD manages domains, the sub domain will inherit the settings of the parent domain, in this case contoso.com.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This means the IssuerURI for user@sub.contoso.com will need to be http://contoso.com/adfs/services/trust.</source>
          <target state="new">This means the IssuerURI for user@sub.contoso.com will need to be http://contoso.com/adfs/services/trust.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However the standard rule implemented above for</source>
          <target state="new">However the standard rule implemented above for</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Azure AD, will generate a token with an issuer as http://sub.contoso.com/adfs/services/trust, which will not match the domain’s required value and authentication will fail.</source>
          <target state="new">Azure AD, will generate a token with an issuer as http://sub.contoso.com/adfs/services/trust, which will not match the domain’s required value and authentication will fail.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Luckily, we have a workaround for this as well, but it is not as well built in to our tools.</source>
          <target state="new">Luckily, we have a workaround for this as well, but it is not as well built in to our tools.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You have to update your AD FS relying party trust for Microsoft Online manually.</source>
          <target state="new">You have to update your AD FS relying party trust for Microsoft Online manually.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You have to configure the custom claim rule so that it strips off any subdomains from the user’s UPN suffix when constructing the custom Issuer value.</source>
          <target state="new">You have to configure the custom claim rule so that it strips off any subdomains from the user’s UPN suffix when constructing the custom Issuer value.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can find the exact steps to do this in the steps below.</source>
          <target state="new">You can find the exact steps to do this in the steps below.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>So in summary, you can have multiple domains with disparate names, as well as sub domains, all federated to the same AD FS server, it just takes a few extra steps to ensure the Issuer values are set correctly for all users.</source>
          <target state="new">So in summary, you can have multiple domains with disparate names, as well as sub domains, all federated to the same AD FS server, it just takes a few extra steps to ensure the Issuer values are set correctly for all users.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>