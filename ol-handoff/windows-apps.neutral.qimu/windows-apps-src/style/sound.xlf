<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\style\sound.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">06eb73607f80a7eacef23cd75a3982ab352c5379</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Sound helps complete an application's user experience, and gives them that extra audio edge they need to match the feel of Windows across all platforms.</source>
          <target>Sound helps complete an application's user experience, and gives them that extra audio edge they need to match the feel of Windows across all platforms.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Sound</source>
          <target>Sound</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>[Some information relates to pre-released product which may be substantially modified before it's commercially released.</source>
          <target>[Some information relates to pre-released product which may be substantially modified before it's commercially released.</target>
        </segment>
      </unit>
      <unit id="104">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Microsoft makes no warranties, express or implied, with respect to the information provided here.]<pc dataRefEnd="id2" dataRefStart="id1" id="p1">This article provides a preview of features that aren't yet available.</pc></source>
          <target>Microsoft makes no warranties, express or implied, with respect to the information provided here.]<pc dataRefEnd="id2" dataRefStart="id1" id="p1">This article provides a preview of features that aren't yet available.</pc></target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Sound in UWP apps</source>
          <target>Sound in UWP apps</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Sound helps complete an application's user experience, and gives them that extra audio edge they need to match the feel of Windows across all platforms.</source>
          <target>Sound helps complete an application's user experience, and gives them that extra audio edge they need to match the feel of Windows across all platforms.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Sound Global API</source>
          <target>Sound Global API</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>UWP provides an easily accessible sound system that allows you to simply "flip a switch" and get an immersive audio experience across your entire app.</source>
          <target>UWP provides an easily accessible sound system that allows you to simply "flip a switch" and get an immersive audio experience across your entire app.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundPlayer</pc> is an integrated sound system within XAML, and when turned on all default controls will play sounds automatically.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundPlayer</pc> is an integrated sound system within XAML, and when turned on all default controls will play sounds automatically.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundPlayer</pc> has three different states: <pc dataRefEnd="id4" dataRefStart="id3" id="p2">On</pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Off</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Auto</pc>.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundPlayer</pc> has three different states: <pc dataRefEnd="id4" dataRefStart="id3" id="p2">On</pc><pc dataRefEnd="id6" dataRefStart="id5" id="p3">Off</pc> and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Auto</pc>.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Off</pc>, no matter where your app is run, sound will never play.</source>
          <target>If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Off</pc>, no matter where your app is run, sound will never play.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">On</pc> sounds for your app will play on every platform.</source>
          <target>If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">On</pc> sounds for your app will play on every platform.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Sound for TV and Xbox</source>
          <target>Sound for TV and Xbox</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Sound is a key part of the 10-foot experience, and by default, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundPlayer</pc>'s state is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Auto</pc>, meaning that you will only get sound when your app is running on Xbox.</source>
          <target>Sound is a key part of the 10-foot experience, and by default, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundPlayer</pc>'s state is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Auto</pc>, meaning that you will only get sound when your app is running on Xbox.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?LinkId=760736)</data>
        </originalData>
        <segment state="initial">
          <source>To understand more about designing for Xbox and TV, please see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Designing for Xbox and TV</pc>.</source>
          <target>To understand more about designing for Xbox and TV, please see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Designing for Xbox and TV</pc>.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Sound Volume Override</source>
          <target>Sound Volume Override</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>All sounds within the app can be dimmed with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Volume</pc> control.</source>
          <target>All sounds within the app can be dimmed with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Volume</pc> control.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>However, sounds within the app cannot get <pc dataRefEnd="id2" dataRefStart="id1" id="p1">louder than the system volume</pc>.</source>
          <target>However, sounds within the app cannot get <pc dataRefEnd="id2" dataRefStart="id1" id="p1">louder than the system volume</pc>.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>To set the app volume level, call:</source>
          <target>To set the app volume level, call:</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Where maximum volume (relative to system volume) is 1.0, and minimum is 0.0 (essentially silent).</source>
          <target>Where maximum volume (relative to system volume) is 1.0, and minimum is 0.0 (essentially silent).</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Control Level State</source>
          <target>Control Level State</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>If a control's default sound is not desired, it can be disabled.</source>
          <target>If a control's default sound is not desired, it can be disabled.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This is done through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundMode</pc> on the control.</source>
          <target>This is done through the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundMode</pc> on the control.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundMode</pc> has two states: <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Off</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Default</pc>.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundMode</pc> has two states: <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Off</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Default</pc>.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When not set, it is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Default</pc>.</source>
          <target>When not set, it is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Default</pc>.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Off</pc>, every sound that control plays will be muted <pc dataRefEnd="id4" dataRefStart="id3" id="p2">except for focus</pc>.</source>
          <target>If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Off</pc>, every sound that control plays will be muted <pc dataRefEnd="id4" dataRefStart="id3" id="p2">except for focus</pc>.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Is This The Right Sound?</source>
          <target>Is This The Right Sound?</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>When creating a custom control, or changing an existing control's sound, it is important to understand the usages of all the sounds the system provides.</source>
          <target>When creating a custom control, or changing an existing control's sound, it is important to understand the usages of all the sounds the system provides.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Each sound relates to a certain basic user interaction, and although sounds can be customized to play on any interaction, this section serves to illustrate the scenarios where sounds should be used to maintain a consistent experience across all UWP apps.</source>
          <target>Each sound relates to a certain basic user interaction, and although sounds can be customized to play on any interaction, this section serves to illustrate the scenarios where sounds should be used to maintain a consistent experience across all UWP apps.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Invoking an Element</source>
          <target>Invoking an Element</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The most common control-triggered sound in our system today is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Invoke</pc> sound.</source>
          <target>The most common control-triggered sound in our system today is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Invoke</pc> sound.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>This sound plays when a user invokes a control through a tap/click/enter/space or press of the 'A' button on a gamepad.</source>
          <target>This sound plays when a user invokes a control through a tap/click/enter/space or press of the 'A' button on a gamepad.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](/input-and-devices/guidelines-for-interactions/)</data>
        </originalData>
        <segment state="initial">
          <source>Typically, this sound is only played when a user explicitly targets a simple control or control part through an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">input device</pc>.</source>
          <target>Typically, this sound is only played when a user explicitly targets a simple control or control part through an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">input device</pc>.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>&lt;SelectButtonClick.mp3 sound clip here&gt;</source>
          <target>&lt;SelectButtonClick.mp3 sound clip here&gt;</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>To play this sound from any control event, simply call the Play method from <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundPlayer</pc> and pass in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElementSound.Invoke</pc>:</source>
          <target>To play this sound from any control event, simply call the Play method from <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSoundPlayer</pc> and pass in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ElementSound.Invoke</pc>:</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Showing &amp; Hiding Content</source>
          <target>Showing &amp; Hiding Content</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>There are many flyouts, dialogs and dismissible UIs in XAML, and any action that triggers one of these overlays should call a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Show</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Hide</pc> sound.</source>
          <target>There are many flyouts, dialogs and dismissible UIs in XAML, and any action that triggers one of these overlays should call a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Show</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Hide</pc> sound.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When an overlay content window is brought into view, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Show</pc> sound should be called:</source>
          <target>When an overlay content window is brought into view, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Show</pc> sound should be called:</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>&lt;OverlayIn.mp3 sound clip here&gt;</source>
          <target>&lt;OverlayIn.mp3 sound clip here&gt;</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Conversely when an overlay content window is closed (or is light dismissed), the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hide</pc> sound should be called:</source>
          <target>Conversely when an overlay content window is closed (or is light dismissed), the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hide</pc> sound should be called:</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>&lt;OverlayOut.mp3 sound clip here&gt;</source>
          <target>&lt;OverlayOut.mp3 sound clip here&gt;</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Navigation Within a Page</source>
          <target>Navigation Within a Page</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](/controls-and-patterns/hub/)</data>
          <data id="id3">[</data>
          <data id="id4">](/controls-and-patterns/tabs-pivot/)</data>
        </originalData>
        <segment state="initial">
          <source>When navigating between panels or views within an app's page (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hub</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Tabs and Pivots</pc>), there is typically bidirectional movement.</source>
          <target>When navigating between panels or views within an app's page (see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hub</pc> or <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Tabs and Pivots</pc>), there is typically bidirectional movement.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Meaning you can move to the next view/panel or the previous one, without leaving the current app page you're on.</source>
          <target>Meaning you can move to the next view/panel or the previous one, without leaving the current app page you're on.</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>The audio experience around this navigation concept is encompassed by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MovePrevious</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MoveNext</pc> sounds.</source>
          <target>The audio experience around this navigation concept is encompassed by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MovePrevious</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MoveNext</pc> sounds.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>When moving to a view/panel that is considered the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">next item</pc> in a list, call:</source>
          <target>When moving to a view/panel that is considered the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">next item</pc> in a list, call:</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>&lt;PageTransitionRight.mp3 sound clip here&gt;</source>
          <target>&lt;PageTransitionRight.mp3 sound clip here&gt;</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>And when moving to a previous view/panel in a list considered the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">previous item</pc>, call:</source>
          <target>And when moving to a previous view/panel in a list considered the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">previous item</pc>, call:</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>&lt;PageTransitionLeft.mp3 sound clip here&gt;</source>
          <target>&lt;PageTransitionLeft.mp3 sound clip here&gt;</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Back Navigation</source>
          <target>Back Navigation</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When navigating from the current page to the previous page within an app the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GoBack</pc> sound should be called:</source>
          <target>When navigating from the current page to the previous page within an app the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GoBack</pc> sound should be called:</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>&lt;BackButtonClick.mp3 sound clip here&gt;</source>
          <target>&lt;BackButtonClick.mp3 sound clip here&gt;</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>Focusing on an Element</source>
          <target>Focusing on an Element</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus</pc> sound is the only implicit sound in our system.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus</pc> sound is the only implicit sound in our system.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>Meaning a user isn't directly interacting with anything, but is still hearing a sound.</source>
          <target>Meaning a user isn't directly interacting with anything, but is still hearing a sound.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Focusing happens when a user navigates through an app, this can be with the gamepad/keyboard/remote or kinect.</source>
          <target>Focusing happens when a user navigates through an app, this can be with the gamepad/keyboard/remote or kinect.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Typically the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus</pc> sound <pc dataRefEnd="id4" dataRefStart="id3" id="p2">does not play on PointerEntered or mouse hover events</pc>.</source>
          <target>Typically the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus</pc> sound <pc dataRefEnd="id4" dataRefStart="id3" id="p2">does not play on PointerEntered or mouse hover events</pc>.</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>To set up a control to play the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus</pc> sound when your control receives focus, call:</source>
          <target>To set up a control to play the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus</pc> sound when your control receives focus, call:</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>&lt;ElementFocus1.mp3 sound clip here&gt;</source>
          <target>&lt;ElementFocus1.mp3 sound clip here&gt;</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Cycling Focus Sounds</source>
          <target>Cycling Focus Sounds</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>As an added feature to calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSound.Focus</pc>, the sound system will, by default, cycle through 4 different sounds on each navigation trigger.</source>
          <target>As an added feature to calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ElementSound.Focus</pc>, the sound system will, by default, cycle through 4 different sounds on each navigation trigger.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Meaning that no two exact focus sounds will play right after the other.</source>
          <target>Meaning that no two exact focus sounds will play right after the other.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>The purpose behind this cycling feature is to keep the focus sounds from becoming monotonous and from being noticeable by the user; focus sounds will be played most often and therefore should be the most subtle.</source>
          <target>The purpose behind this cycling feature is to keep the focus sounds from becoming monotonous and from being noticeable by the user; focus sounds will be played most often and therefore should be the most subtle.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>Related articles</source>
          <target>Related articles</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>Designing for Xbox and TV</source>
          <target>Designing for Xbox and TV</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>