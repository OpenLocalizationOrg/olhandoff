<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\style\typography.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">02d5149f945bb631e385e45a295fdfe08bd98fb0</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>As the visual representation of language, typography’s main task is to be clear.</source>
          <target>As the visual representation of language, typography’s main task is to be clear.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Its style should never get in the way of that goal.</source>
          <target>Its style should never get in the way of that goal.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>But typography also has an important role as a layout component—with a powerful effect on the density and complexity of the design—and on the user’s experience of that design.</source>
          <target>But typography also has an important role as a layout component—with a powerful effect on the density and complexity of the design—and on the user’s experience of that design.</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Typography</source>
          <target>Typography</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Typography for UWP apps</source>
          <target>Typography for UWP apps</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>As the visual representation of language, typography’s main task is to be clear.</source>
          <target>As the visual representation of language, typography’s main task is to be clear.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Its style should never get in the way of that goal.</source>
          <target>Its style should never get in the way of that goal.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>But typography also has an important role as a layout component—with a powerful effect on the density and complexity of the design—and on the user’s experience of that design.</source>
          <target>But typography also has an important role as a layout component—with a powerful effect on the density and complexity of the design—and on the user’s experience of that design.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Typeface</source>
          <target>Typeface</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>We’ve selected Segoe UI for use on all Microsoft digital designs.</source>
          <target>We’ve selected Segoe UI for use on all Microsoft digital designs.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Segoe UI provides a wide range of characters and is designed to maintain optimal legibility across sizes and pixel densities.</source>
          <target>Segoe UI provides a wide range of characters and is designed to maintain optimal legibility across sizes and pixel densities.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>It offers a clean, light, and open aesthetic that complements the content of the system.</source>
          <target>It offers a clean, light, and open aesthetic that complements the content of the system.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Sample text of Segoe UI font</source>
          <target>Sample text of Segoe UI font</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Weights</source>
          <target>Weights</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>We approach typography with an eye to simplicity and efficiency.</source>
          <target>We approach typography with an eye to simplicity and efficiency.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>We choose to use one typeface, a minimum of weights and sizes, and a clear hierarchy.</source>
          <target>We choose to use one typeface, a minimum of weights and sizes, and a clear hierarchy.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Positioning and alignment follow the default style for the given language.</source>
          <target>Positioning and alignment follow the default style for the given language.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>In English the sequence runs left to right, top to bottom.</source>
          <target>In English the sequence runs left to right, top to bottom.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Relationships between text and images are clear and straightforward.</source>
          <target>Relationships between text and images are clear and straightforward.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Shows supported font weights.</source>
          <target>Shows supported font weights.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Light, semilight, regular, semibold, and bold</source>
          <target>Light, semilight, regular, semibold, and bold</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Line spacing</source>
          <target>Line spacing</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Example of line spacing at 125%</source>
          <target>Example of line spacing at 125%</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Line spacing should be calculated at 125% of the font size, rounding to the closest multiple of four when necessary.</source>
          <target>Line spacing should be calculated at 125% of the font size, rounding to the closest multiple of four when necessary.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>For example with 15px Segoe UI, 125% of 15px is 18.75px.</source>
          <target>For example with 15px Segoe UI, 125% of 15px is 18.75px.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>We recommend rounding up and setting line height to 20px to stay on the 4px grid.</source>
          <target>We recommend rounding up and setting line height to 20px to stay on the 4px grid.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>This ensures a good reading experience and adequate space for diacritical marks.</source>
          <target>This ensures a good reading experience and adequate space for diacritical marks.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>See the Type ramp section below for specific examples.</source>
          <target>See the Type ramp section below for specific examples.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>When stacking larger type on top of smaller type, the distance from the last baseline of the larger type to the first baseline of the smaller type should be equal to the larger type's line height.</source>
          <target>When stacking larger type on top of smaller type, the distance from the last baseline of the larger type to the first baseline of the smaller type should be equal to the larger type's line height.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Shows how large type stacks on small type</source>
          <target>Shows how large type stacks on small type</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>In XAML, this is accomplished by stacking two <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlocks</pc> and setting the appropriate margin.</source>
          <target>In XAML, this is accomplished by stacking two <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlocks</pc> and setting the appropriate margin.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Kerning and tracking</source>
          <target>Kerning and tracking</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Segoe is a humanist typeface, with a soft, friendly appearance, it has organic, open forms based on handwritten text.</source>
          <target>Segoe is a humanist typeface, with a soft, friendly appearance, it has organic, open forms based on handwritten text.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>To ensure optimum legibility and maintain it’s humanist integrity, the kerning and tracking settings must have specific values.</source>
          <target>To ensure optimum legibility and maintain it’s humanist integrity, the kerning and tracking settings must have specific values.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Kerning should be set to “metrics” and tracking should be set to “0”.</source>
          <target>Kerning should be set to “metrics” and tracking should be set to “0”.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Word and letter spacing</source>
          <target>Word and letter spacing</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Similar to kerning and tracking, word spacing and letter spacing use specific settings to ensure optimum legibility and humanist integrity.</source>
          <target>Similar to kerning and tracking, word spacing and letter spacing use specific settings to ensure optimum legibility and humanist integrity.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Word spacing by default is always 100% and letter spacing should be set to “0”.</source>
          <target>Word spacing by default is always 100% and letter spacing should be set to “0”.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.documents.typography.kerning.aspx)</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.control.fontstretch.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>In a XAML text control use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Typogrphy.Kerning</pc> to control kerning and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">FontStretch</pc> to control tracking.</source>
          <target>In a XAML text control use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Typogrphy.Kerning</pc> to control kerning and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">FontStretch</pc> to control tracking.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>By default Typography.Kerning is set to “true” and FontStretch is set to “Normal”, which are the recommended values.</source>
          <target>By default Typography.Kerning is set to “true” and FontStretch is set to “Normal”, which are the recommended values.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Alignment</source>
          <target>Alignment</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Generally, we recommend that visual elements and columns of type be left-aligned.</source>
          <target>Generally, we recommend that visual elements and columns of type be left-aligned.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>In most instances, this flush-left and ragged-right approach provides consistent anchoring of the content and a uniform layout.</source>
          <target>In most instances, this flush-left and ragged-right approach provides consistent anchoring of the content and a uniform layout.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Line endings</source>
          <target>Line endings</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>When typography is not positioned as flush left and ragged right, try to ensure even line endings and avoid hyphenation.</source>
          <target>When typography is not positioned as flush left and ragged right, try to ensure even line endings and avoid hyphenation.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Paragraphs</source>
          <target>Paragraphs</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>To provide aligned column edges, paragraphs should be indicated by skipping a line without indentation.</source>
          <target>To provide aligned column edges, paragraphs should be indicated by skipping a line without indentation.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Shows a full line of space between paragraphs</source>
          <target>Shows a full line of space between paragraphs</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Character count</source>
          <target>Character count</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>If a line is too short, the eye will have to travel left and right too often, breaking the reader’s rhythm.</source>
          <target>If a line is too short, the eye will have to travel left and right too often, breaking the reader’s rhythm.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>If possible, 50–60 letters per line is best for ease of reading.</source>
          <target>If possible, 50–60 letters per line is best for ease of reading.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Segoe provides a wide range of characters and is designed to maintain optimal legibility in both small and large sizes as well as low and high pixel densities.</source>
          <target>Segoe provides a wide range of characters and is designed to maintain optimal legibility in both small and large sizes as well as low and high pixel densities.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>Using the optimal number of letters in a text column line ensures good legibility in an application.</source>
          <target>Using the optimal number of letters in a text column line ensures good legibility in an application.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>Lines that are too long will strain the eye and may disorient the user.</source>
          <target>Lines that are too long will strain the eye and may disorient the user.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>Lines that are too short force the reader’s eye to travel too much and can cause fatigue.</source>
          <target>Lines that are too short force the reader’s eye to travel too much and can cause fatigue.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Shows 3 paragraphs with different line lengths</source>
          <target>Shows 3 paragraphs with different line lengths</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Hanging text alignment</source>
          <target>Hanging text alignment</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>The horizontal alignment of icons with text can be handled in a number of ways depending on the size of the icon and the amount of text.</source>
          <target>The horizontal alignment of icons with text can be handled in a number of ways depending on the size of the icon and the amount of text.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>When the text, either single or multiple lines, fits within the height of the icon, the text should be vertically centered.</source>
          <target>When the text, either single or multiple lines, fits within the height of the icon, the text should be vertically centered.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Once the height of the text extends beyond the height of the icon, the first line of text should align vertically and the additional text should flow on naturally below.</source>
          <target>Once the height of the text extends beyond the height of the icon, the first line of text should align vertically and the additional text should flow on naturally below.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>When using characters with larger cap, ascender and descender heights, care should be taken to observe the same alignment guidance.</source>
          <target>When using characters with larger cap, ascender and descender heights, care should be taken to observe the same alignment guidance.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Shows several icon and text pairings</source>
          <target>Shows several icon and text pairings</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.textblock.textlinebounds.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>XAML's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock.TextLineBounds</pc> property provides access to the cap height and baseline font metrics.</source>
          <target>XAML's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TextBlock.TextLineBounds</pc> property provides access to the cap height and baseline font metrics.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>It can be used to visually vertically center or top-align type.</source>
          <target>It can be used to visually vertically center or top-align type.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>Clipping and ellipses</source>
          <target>Clipping and ellipses</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>Clip by default—assume that text will wrap unless the redline specifies otherwise.</source>
          <target>Clip by default—assume that text will wrap unless the redline specifies otherwise.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>When using non-wrapping text, we recommend clipping rather than using ellipses.</source>
          <target>When using non-wrapping text, we recommend clipping rather than using ellipses.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>Clipping can occur at the edge of the container, at the edge of the device, at the edge of a scrollbar, etc.</source>
          <target>Clipping can occur at the edge of the container, at the edge of the device, at the edge of a scrollbar, etc.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>Exceptions—for containers which are not well-defined (e.g. no differentiating background color), then non-wrapping text can be redlined to use the ellipse ”…”.</source>
          <target>Exceptions—for containers which are not well-defined (e.g. no differentiating background color), then non-wrapping text can be redlined to use the ellipse ”…”.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>Shows a device frame with some text clipping</source>
          <target>Shows a device frame with some text clipping</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>Type ramp</source>
          <target>Type ramp</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>Different sizes of Segoe UI should be used to create hierarchy in a type ramp.</source>
          <target>Different sizes of Segoe UI should be used to create hierarchy in a type ramp.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>This hierarchy builds a structure which enables users to easily navigate through written communication.</source>
          <target>This hierarchy builds a structure which enables users to easily navigate through written communication.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>All sizes are in effective pixels.</source>
          <target>All sizes are in effective pixels.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>For more details, see the TODO: link</source>
          <target>For more details, see the TODO: link</target>
        </segment>
      </unit>
      <unit id="176">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/Mt187274.aspx#the_xaml_type_ramp)</data>
          <data id="id3">`*TextBlockStyle`</data>
          <data id="id4">`HeaderTextBlockStyle`</data>
        </originalData>
        <segment state="initial">
          <source>Most levels of the ramp are available as XAML <pc dataRefEnd="id2" dataRefStart="id1" id="p1">static resources</pc> that follow the <ph dataRef="id3" id="ph1" /> naming convention (ex: <ph dataRef="id4" id="ph2" />).</source>
          <target>Most levels of the ramp are available as XAML <pc dataRefEnd="id2" dataRefStart="id1" id="p1">static resources</pc> that follow the <ph dataRef="id3" id="ph1" /> naming convention (ex: <ph dataRef="id4" id="ph2" />).</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>Primary and secondary text</source>
          <target>Primary and secondary text</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>To create additional hierarchy beyond the type ramp, set secondary text to 60% opacity.</source>
          <target>To create additional hierarchy beyond the type ramp, set secondary text to 60% opacity.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](color.md#color-themes)</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">theming color palette</pc>, you would use BaseMedium.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">theming color palette</pc>, you would use BaseMedium.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>Primary text should always be at 100% opacity, or BaseHigh.</source>
          <target>Primary text should always be at 100% opacity, or BaseHigh.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>All caps titles</source>
          <target>All caps titles</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>Certain page titles should be in ALL CAPS to add yet another dimension of hierarchy.</source>
          <target>Certain page titles should be in ALL CAPS to add yet another dimension of hierarchy.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>These titles should use BaseAlt with the character spacing set to 75 thousandths of an em.</source>
          <target>These titles should use BaseAlt with the character spacing set to 75 thousandths of an em.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>This treatment may also be used to help with app navigation.</source>
          <target>This treatment may also be used to help with app navigation.</target>
        </segment>
      </unit>
      <unit id="185">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>However, proper names change their meaning when capitalized in certain languages, so any page titles based on names or user input should <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> be converted to all caps.</source>
          <target>However, proper names change their meaning when capitalized in certain languages, so any page titles based on names or user input should <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> be converted to all caps.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>Do's and don'ts</source>
          <target>Do's and don'ts</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>Use Body for most text</source>
          <target>Use Body for most text</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>Use Base for titles when space is constrained</source>
          <target>Use Base for titles when space is constrained</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>Incorporate SubtitleAlt to create contrast and hierarchy by emphasizing top level content</source>
          <target>Incorporate SubtitleAlt to create contrast and hierarchy by emphasizing top level content</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>Don't use Caption for long strings or any primary action</source>
          <target>Don't use Caption for long strings or any primary action</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>Don't use Header or Subheader if text needs to wrap</source>
          <target>Don't use Header or Subheader if text needs to wrap</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>Don't combine Subtitle and SubtitleAlt on the same page</source>
          <target>Don't combine Subtitle and SubtitleAlt on the same page</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>Related articles</source>
          <target>Related articles</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>Text controls</source>
          <target>Text controls</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>