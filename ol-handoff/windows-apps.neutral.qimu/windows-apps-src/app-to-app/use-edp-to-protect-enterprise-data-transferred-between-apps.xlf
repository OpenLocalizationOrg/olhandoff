<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\app-to-app\use-edp-to-protect-enterprise-data-transferred-between-apps.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">77533d4aca3cc84e0a021a0faac57f5afbbefdd7</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>This topic shows examples of the coding tasks needed to achieve some of the most common data-transfer-related enterprise data protection (EDP) scenarios.</source>
          <target>This topic shows examples of the coding tasks needed to achieve some of the most common data-transfer-related enterprise data protection (EDP) scenarios.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Use EDP to protect enterprise data transferred between apps</source>
          <target>Use EDP to protect enterprise data transferred between apps</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Use EDP to protect enterprise data transferred between apps</source>
          <target>Use EDP to protect enterprise data transferred between apps</target>
        </segment>
      </unit>
      <unit id="104">
        <originalData>
          <data id="id1">__</data>
          <data id="id2">__</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> Enterprise data protection (EDP) policy cannot be applied on Windows 10, Version 1511 (build 10586) or earlier.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc> Enterprise data protection (EDP) policy cannot be applied on Windows 10, Version 1511 (build 10586) or earlier.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>This topic shows examples of the coding tasks needed to achieve some of the most common data-transfer-related enterprise data protection (EDP) scenarios.</source>
          <target>This topic shows examples of the coding tasks needed to achieve some of the most common data-transfer-related enterprise data protection (EDP) scenarios.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../enterprise/edp-hub.md)</data>
        </originalData>
        <segment state="initial">
          <source>For the full developer picture of how EDP relates to files, streams, the clipboard, networking, background tasks, and data protection under lock, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">enterprise data protection (EDP)</pc>.</source>
          <target>For the full developer picture of how EDP relates to files, streams, the clipboard, networking, background tasks, and data protection under lock, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">enterprise data protection (EDP)</pc>.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](http://go.microsoft.com/fwlink/p/?LinkId=620031&amp;clcid=0x409)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The <pc dataRefEnd="id4" dataRefStart="id3" id="p2">enterprise data protection (EDP) sample</pc> covers many of the same scenarios demonstrated in this topic.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  The <pc dataRefEnd="id4" dataRefStart="id3" id="p2">enterprise data protection (EDP) sample</pc> covers many of the same scenarios demonstrated in this topic.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Prerequisites</source>
          <target>Prerequisites</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Get set up for EDP</source>
          <target>Get set up for EDP</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../enterprise/edp-hub.md#set-up-your-computer-for-EDP)</data>
        </originalData>
        <segment state="initial">
          <source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set up your computer for EDP</pc>.</source>
          <target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set up your computer for EDP</pc>.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Commit to building an enterprise-enlightened app</source>
          <target>Commit to building an enterprise-enlightened app</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>An app that autonomously ensures that enterprise data stays under the managing enterprise’s control is known as an enterprise-enlightened app.</source>
          <target>An app that autonomously ensures that enterprise data stays under the managing enterprise’s control is known as an enterprise-enlightened app.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>An enlightened app is more powerful, smart, flexible, and trusted than an unenlightened one.</source>
          <target>An enlightened app is more powerful, smart, flexible, and trusted than an unenlightened one.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Your app announces to the system that it is enlightened by declaring the restricted <pc dataRefEnd="id2" dataRefStart="id1" id="p1">enterpriseDataPolicy</pc> capability.</source>
          <target>Your app announces to the system that it is enlightened by declaring the restricted <pc dataRefEnd="id2" dataRefStart="id1" id="p1">enterpriseDataPolicy</pc> capability.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>There's more to being enlightened than setting a capability, though.</source>
          <target>There's more to being enlightened than setting a capability, though.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](../enterprise/edp-hub.md#enterprise-enlightened-apps)</data>
        </originalData>
        <segment state="initial">
          <source>To learn more, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enterprise-enlightened apps</pc>.</source>
          <target>To learn more, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enterprise-enlightened apps</pc>.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Understand async programming for Universal Windows Platform (UWP) apps</source>
          <target>Understand async programming for Universal Windows Platform (UWP) apps</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">\#</data>
          <data id="id2">[</data>
          <data id="id3">](https://msdn.microsoft.com/library/windows/apps/mt187337)</data>
          <data id="id4">\#</data>
        </originalData>
        <segment state="initial">
          <source>To learn about how to write asynchronous apps in C<ph dataRef="id1" id="ph1" /> or Visual Basic, see <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Call asynchronous APIs in C<ph dataRef="id4" id="ph2" /> or Visual Basic</pc>.</source>
          <target>To learn about how to write asynchronous apps in C<ph dataRef="id1" id="ph1" /> or Visual Basic, see <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Call asynchronous APIs in C<ph dataRef="id4" id="ph2" /> or Visual Basic</pc>.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/mt187334)</data>
        </originalData>
        <segment state="initial">
          <source>To learn about how to write asynchronous apps in C++, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Asynchronous programming in C++</pc>.</source>
          <target>To learn about how to write asynchronous apps in C++, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Asynchronous programming in C++</pc>.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Simple clipboard source</source>
          <target>Simple clipboard source</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>In this scenario, your app is a notepad-type app that handles both personal and enterprise files.</source>
          <target>In this scenario, your app is a notepad-type app that handles both personal and enterprise files.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn705791)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Here, your app needn’t change its copy-paste logic at all; it just has to call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtectionPolicyManager.TryApplyProcessUIPolicy</pc></pc> whenever the user opens and displays content from an enterprise document.</source>
          <target>Here, your app needn’t change its copy-paste logic at all; it just has to call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtectionPolicyManager.TryApplyProcessUIPolicy</pc></pc> whenever the user opens and displays content from an enterprise document.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Once the content is displayed in your app's UI, the user might then copy it to paste into a different app, which is why setting UI policy is important.</source>
          <target>Once the content is displayed in your app's UI, the user might then copy it to paste into a different app, which is why setting UI policy is important.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>That way, the operating system can apply the currently-set policy to a paste operation involving protected data.</source>
          <target>That way, the operating system can apply the currently-set policy to a paste operation involving protected data.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Similarly, it's important to clear UI policy as soon as it's no longer needed so that the user is once again free to copy-paste personal data.</source>
          <target>Similarly, it's important to clear UI policy as soon as it's no longer needed so that the user is once again free to copy-paste personal data.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TryApplyProcessUIPolicy</pc> returns false if its identity argument is not being managed by an enterprise policy.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TryApplyProcessUIPolicy</pc> returns false if its identity argument is not being managed by an enterprise policy.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Simple clipboard target</source>
          <target>Simple clipboard target</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>In this scenario, your app is an email app that handles both personal and corporate accounts.</source>
          <target>In this scenario, your app is an email app that handles both personal and corporate accounts.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>The user tries to paste data into an email reply using their personal account.</source>
          <target>The user tries to paste data into an email reply using their personal account.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn706636)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In this case, before your app retrieves the contents, it has to just make a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage.RequestAccessAsync</pc></pc>.</source>
          <target>In this case, before your app retrieves the contents, it has to just make a call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage.RequestAccessAsync</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>If we already have access, then that method returns at once.</source>
          <target>If we already have access, then that method returns at once.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>But, if we don't have access, then the method causes a dialog to be shown which request consent from the user and "unlocks" the data package if consent is granted.</source>
          <target>But, if we don't have access, then the method causes a dialog to be shown which request consent from the user and "unlocks" the data package if consent is granted.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>This is to give the user the chance to cancel a paste operation made by mistake.</source>
          <target>This is to give the user the chance to cancel a paste operation made by mistake.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Clipboard target is a neutral, empty document</source>
          <target>Clipboard target is a neutral, empty document</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>In this scenario, your app is a word-processing app.</source>
          <target>In this scenario, your app is a word-processing app.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>After creating a new document, as long as the document remains empty, your app treats the document as neutral—neither enterprise nor personal.</source>
          <target>After creating a new document, as long as the document remains empty, your app treats the document as neutral—neither enterprise nor personal.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Your user then pastes enterprise data into this neutral-context document.</source>
          <target>Your user then pastes enterprise data into this neutral-context document.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn706636)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Since the document is in a neutral context, we could actually just switch the document into an enterprise context and avoid calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage.RequestAccessAsync</pc></pc> altogether (since showing the dialog isn't necessary in that case).</source>
          <target>Since the document is in a neutral context, we could actually just switch the document into an enterprise context and avoid calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage.RequestAccessAsync</pc></pc> altogether (since showing the dialog isn't necessary in that case).</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>So, if the data is protected, then we just switch to an enterprise context and paste the data.</source>
          <target>So, if the data is protected, then we just switch to an enterprise context and paste the data.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Clipboard source with explicit enterprise identity</source>
          <target>Clipboard source with explicit enterprise identity</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>In this scenario, your app is a word-processing app.</source>
          <target>In this scenario, your app is a word-processing app.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>It uses a background thread to commit copy operations by the user.</source>
          <target>It uses a background thread to commit copy operations by the user.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>The user copies some data from an enterprise file, and immediately switches to a personal file, at which point the app's global context becomes personal.</source>
          <target>The user copies some data from an enterprise file, and immediately switches to a personal file, at which point the app's global context becomes personal.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>At this point—because the global state has changed and should not be used—the app’s background thread must explicitly tell the clipboard that the incoming data is enterprise.</source>
          <target>At this point—because the global state has changed and should not be used—the app’s background thread must explicitly tell the clipboard that the incoming data is enterprise.</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn913861)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>This is done by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackagePropertySet.EnterpriseId</pc></pc> property.</source>
          <target>This is done by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackagePropertySet.EnterpriseId</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Tag specific window with enterprise identity</source>
          <target>Tag specific window with enterprise identity</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>In this scenario, your app is a word-processing app that handles multiple documents in different windows, some of which are enterprise and others that are personal.</source>
          <target>In this scenario, your app is a word-processing app that handles multiple documents in different windows, some of which are enterprise and others that are personal.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>The app wants to ensure that any data being pasted into a personal document’s window is correctly vetted (that is, denied or consented if it’s enterprise data) and that any outgoing data from an enterprise document’s window is correctly marked.</source>
          <target>The app wants to ensure that any data being pasted into a personal document’s window is correctly vetted (that is, denied or consented if it’s enterprise data) and that any outgoing data from an enterprise document’s window is correctly marked.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn705785)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You do this by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtectionPolicyManager.Identity</pc></pc> property.</source>
          <target>You do this by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtectionPolicyManager.Identity</pc></pc> property.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Tag outgoing drag object with enterprise identity</source>
          <target>Tag outgoing drag object with enterprise identity</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Your app has a personal window open with some draggable enterprise content.</source>
          <target>Your app has a personal window open with some draggable enterprise content.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>The user begins to drag some of this content, and your app needs to ensure that the content is marked as enterprise.</source>
          <target>The user begins to drag some of this content, and your app needs to ensure that the content is marked as enterprise.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>This scenario doesn’t involve any new APIs.</source>
          <target>This scenario doesn’t involve any new APIs.</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn913861)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](#clipboard_source_explicit_id)</data>
        </originalData>
        <segment state="initial">
          <source>For this scenario, your app will set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackagePropertySet.EnterpriseId</pc></pc> property (see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Clipboard source with explicit enterprise identity scenario</pc> above).</source>
          <target>For this scenario, your app will set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackagePropertySet.EnterpriseId</pc></pc> property (see <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Clipboard source with explicit enterprise identity scenario</pc> above).</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>Queries received drag object for its enterprise identity</source>
          <target>Queries received drag object for its enterprise identity</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Your app has a new and empty document open, which is assumed to be neutral as long as it's empty, and the user drag-drops some content into the document.</source>
          <target>Your app has a new and empty document open, which is assumed to be neutral as long as it's empty, and the user drag-drops some content into the document.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>The app must now determine the enterprise identity of the object in order to change the state of the document accordingly.</source>
          <target>The app must now determine the enterprise identity of the object in order to change the state of the document accordingly.</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/dn913861)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">[</data>
          <data id="id8">](#clipboard_source_explicit_id)</data>
        </originalData>
        <segment state="initial">
          <source>For this scenario, your app will get the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnterpriseId</pc> property from the data package by reading <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataPackagePropertySet.EnterpriseId</pc></pc> (see <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Clipboard source with explicit enterprise identity scenario</pc> above).</source>
          <target>For this scenario, your app will get the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnterpriseId</pc> property from the data package by reading <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">DataPackagePropertySet.EnterpriseId</pc></pc> (see <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Clipboard source with explicit enterprise identity scenario</pc> above).</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>Your app as a Share contract source</source>
          <target>Your app as a Share contract source</target>
        </segment>
      </unit>
      <unit id="160">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br205873)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>When you support the Share contract in your app, to set up a share source, set the enterprise identity context in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc> as shown in this code example.</source>
          <target>When you support the Share contract in your app, to set up a share source, set the enterprise identity context in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DataPackage</pc></pc> as shown in this code example.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#tag_window_with_id)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn705785)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This code example depends on you having already set the identity on the protection policy manager object for your current view (see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Tag specific window with enterprise identity</pc>); otherwise, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ProtectionPolicyManager.Identity</pc></pc> property will contain the empty string.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This code example depends on you having already set the identity on the protection policy manager object for your current view (see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Tag specific window with enterprise identity</pc>); otherwise, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ProtectionPolicyManager.Identity</pc></pc> property will contain the empty string.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Your app as a Share contract target</source>
          <target>Your app as a Share contract target</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>This code example continues our policy that as long as the file we're working with is empty.</source>
          <target>This code example continues our policy that as long as the file we're working with is empty.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>Then, we're free to switch contexts as appropriate for incoming data, and avoid popping consent UI where possible.</source>
          <target>Then, we're free to switch contexts as appropriate for incoming data, and avoid popping consent UI where possible.</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn705791)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn706636)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>So, when your app receives data as a Share contract target, it should call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtectionPolicyManager.TryApplyProcessUIPolicy</pc></pc> if there is no existing content; otherwise, it should call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DataPackage.RequestAccessAsync</pc></pc>.</source>
          <target>So, when your app receives data as a Share contract target, it should call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtectionPolicyManager.TryApplyProcessUIPolicy</pc></pc> if there is no existing content; otherwise, it should call <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">DataPackage.RequestAccessAsync</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>The code example shows how.</source>
          <target>The code example shows how.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>Query copy-paste policy passively</source>
          <target>Query copy-paste policy passively</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>In this scenario, your app enables paste UI only when data is on the clipboard.</source>
          <target>In this scenario, your app enables paste UI only when data is on the clipboard.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/dn705783)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>For this feature, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtectionPolicyManager.CheckAccess</pc></pc> method, which allows a passive check of policy.</source>
          <target>For this feature, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ProtectionPolicyManager.CheckAccess</pc></pc> method, which allows a passive check of policy.</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#tag_window_with_id)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn705785)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This code example depends on you having already set the identity on the protection policy manager object for your current view (see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Tag specific window with enterprise identity</pc>); otherwise, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ProtectionPolicyManager.Identity</pc></pc> property will contain the empty string.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This code example depends on you having already set the identity on the protection policy manager object for your current view (see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Tag specific window with enterprise identity</pc>); otherwise, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ProtectionPolicyManager.Identity</pc></pc> property will contain the empty string.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>Request access for copy-paste operation</source>
          <target>Request access for copy-paste operation</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>This scenario shows how to check access for a paste operation.</source>
          <target>This scenario shows how to check access for a paste operation.</target>
        </segment>
      </unit>
      <unit id="173">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#tag_window_with_id)</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/dn705785)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This code example depends on you having already set the identity on the protection policy manager object for your current view (see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Tag specific window with enterprise identity</pc>); otherwise, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ProtectionPolicyManager.Identity</pc></pc> property will contain the empty string.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This code example depends on you having already set the identity on the protection policy manager object for your current view (see <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Tag specific window with enterprise identity</pc>); otherwise, the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ProtectionPolicyManager.Identity</pc></pc> property will contain the empty string.</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  This article is for Windows 10 developers writing Universal Windows Platform (UWP) apps.</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</source>
          <target>If you’re developing for Windows 8.x or Windows Phone 8.x, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archived documentation</pc>.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>enterprise data protection (EDP) sample</source>
          <target>enterprise data protection (EDP) sample</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Windows.Security.EnterpriseData namespace</source>
          <target>Windows.Security.EnterpriseData namespace</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>