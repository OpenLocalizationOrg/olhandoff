<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\threading-async\use-a-timer-to-submit-a-work-item.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">033669a781aa85cc2c90fa11816e385ffefa997d</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Use a timer to submit a work item</source>
          <target>Use a timer to submit a work item</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Learn how to create a work item that runs after a timer elapses.</source>
          <target>Learn how to create a work item that runs after a timer elapses.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Use a timer to submit a work item</source>
          <target>Use a timer to submit a work item</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Important APIs</source>
          <target>Important APIs</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Windows.UI.Core namespace</source>
          <target>Windows.UI.Core namespace</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Windows.System.Threading namespace</source>
          <target>Windows.System.Threading namespace</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Learn how to create a work item that runs after a timer elapses.</source>
          <target>Learn how to create a work item that runs after a timer elapses.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Create a single-shot timer</source>
          <target>Create a single-shot timer</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh967921)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateTimer</pc></pc> method to create a timer for the work item.</source>
          <target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateTimer</pc></pc> method to create a timer for the work item.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Supply a lambda that accomplishes the work, and use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">delay</pc> parameter to specify how long the thread pool waits before it can assign the work item to an available thread.</source>
          <target>Supply a lambda that accomplishes the work, and use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">delay</pc> parameter to specify how long the thread pool waits before it can assign the work item to an available thread.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR225996)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>The delay is specified using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimeSpan</pc></pc> structure.</source>
          <target>The delay is specified using a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimeSpan</pc></pc> structure.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  You can use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreDispatcher.RunAsync</pc></pc> to access the UI and show progress from the work item.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  You can use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreDispatcher.RunAsync</pc></pc> to access the UI and show progress from the work item.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>The following example creates a work item that runs in three minutes:</source>
          <target>The following example creates a work item that runs in three minutes:</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Provide a completion handler</source>
          <target>Provide a completion handler</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh967926)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If needed, handle cancellation and completion of the work item with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimerDestroyedHandler</pc></pc>.</source>
          <target>If needed, handle cancellation and completion of the work item with a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">TimerDestroyedHandler</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh967921)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateTimer</pc></pc> overload to supply an additional lambda.</source>
          <target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CreateTimer</pc></pc> overload to supply an additional lambda.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>This runs when the timer is cancelled or when the work item completes.</source>
          <target>This runs when the timer is cancelled or when the work item completes.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>The following example creates a timer that submits the work item, and calls a method when the work item finishes or the timer is cancelled:</source>
          <target>The following example creates a timer that submits the work item, and calls a method when the work item finishes or the timer is cancelled:</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Cancel the timer</source>
          <target>Cancel the timer</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR230588)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If the timer is still counting down, but the work item is no longer needed, call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Cancel</pc></pc>.</source>
          <target>If the timer is still counting down, but the work item is no longer needed, call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">Cancel</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>The timer is cancelled and the work item won't be submitted to the thread pool.</source>
          <target>The timer is cancelled and the work item won't be submitted to the thread pool.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Remarks</source>
          <target>Remarks</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Universal Windows Platform (UWP) apps can't use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Thread.Sleep</pc> because it can block the UI thread.</source>
          <target>Universal Windows Platform (UWP) apps can't use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Thread.Sleep</pc> because it can block the UI thread.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR230587)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThreadPoolTimer</pc></pc> to create a work item instead, and this will delay the task accomplished by the work item without blocking the UI thread.</source>
          <target>You can use a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ThreadPoolTimer</pc></pc> to create a work item instead, and this will delay the task accomplished by the work item without blocking the UI thread.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=255387)</data>
        </originalData>
        <segment state="initial">
          <source>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">thread pool sample</pc> for a complete code sample that demonstrates work items, timer work items, and periodic work items.</source>
          <target>See the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">thread pool sample</pc> for a complete code sample that demonstrates work items, timer work items, and periodic work items.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>The code sample was originally written for Windows 8.1 but the code can be re-used in Windows 10.</source>
          <target>The code sample was originally written for Windows 8.1 but the code can be re-used in Windows 10.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](create-a-periodic-work-item.md)</data>
        </originalData>
        <segment state="initial">
          <source>For information about repeating timers, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a periodic work item</pc>.</source>
          <target>For information about repeating timers, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a periodic work item</pc>.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Submit a work item to the thread pool</source>
          <target>Submit a work item to the thread pool</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Best practices for using the thread pool</source>
          <target>Best practices for using the thread pool</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Use a timer to submit a work item</source>
          <target>Use a timer to submit a work item</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>