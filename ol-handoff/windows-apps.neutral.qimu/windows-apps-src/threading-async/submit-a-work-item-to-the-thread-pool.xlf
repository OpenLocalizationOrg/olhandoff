<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\threading-async\submit-a-work-item-to-the-thread-pool.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">afb6d8b1b1ee5eeb99ba68e8b842436bd58619d0</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Submit a work item to the thread pool</source>
          <target>Submit a work item to the thread pool</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Learn how to do work in a separate thread by submitting a work item to the thread pool.</source>
          <target>Learn how to do work in a separate thread by submitting a work item to the thread pool.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Submit a work item to the thread pool</source>
          <target>Submit a work item to the thread pool</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Important APIs</source>
          <target>Important APIs</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>RunAsync</source>
          <target>RunAsync</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>IAsyncAction</source>
          <target>IAsyncAction</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Learn how to do work in a separate thread by submitting a work item to the thread pool.</source>
          <target>Learn how to do work in a separate thread by submitting a work item to the thread pool.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Use this to maintain a responsive UI while still completing work that takes a noticeable amount of time, and use it to complete multiple tasks in parallel.</source>
          <target>Use this to maintain a responsive UI while still completing work that takes a noticeable amount of time, and use it to complete multiple tasks in parallel.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Create and submit the work item</source>
          <target>Create and submit the work item</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR230593)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Create a work item by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RunAsync</pc></pc>.</source>
          <target>Create a work item by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RunAsync</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Supply a delegate to do the work (you can use a lambda, or a delegate function).</source>
          <target>Supply a delegate to do the work (you can use a lambda, or a delegate function).</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/BR206580)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>Note that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunAsync</pc> returns an <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">IAsyncAction</pc></pc> object; store this object for use in the next step.</source>
          <target>Note that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RunAsync</pc> returns an <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">IAsyncAction</pc></pc> object; store this object for use in the next step.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR230593)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Three versions of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RunAsync</pc></pc> are available so that you can optionally specify the priority of the work item, and control whether it runs concurrently with other work items.</source>
          <target>Three versions of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RunAsync</pc></pc> are available so that you can optionally specify the priority of the work item, and control whether it runs concurrently with other work items.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreDispatcher.RunAsync</pc></pc> to access the UI thread and show progress from the work item.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  Use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">CoreDispatcher.RunAsync</pc></pc> to access the UI thread and show progress from the work item.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>The following example creates a work item and supplies a lambda to do the work:</source>
          <target>The following example creates a work item and supplies a lambda to do the work:</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR230593)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Following the call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RunAsync</pc></pc>, the work item is queued by the thread pool and runs when a thread becomes available.</source>
          <target>Following the call to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">RunAsync</pc></pc>, the work item is queued by the thread pool and runs when a thread becomes available.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Thread pool work items run asynchronously and they can run in any order, so make sure your work items function independently.</source>
          <target>Thread pool work items run asynchronously and they can run in any order, so make sure your work items function independently.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/BR206593)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Note that the work item checks the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IAsyncInfo.Status</pc></pc> property, and exits if the work item is cancelled.</source>
          <target>Note that the work item checks the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IAsyncInfo.Status</pc></pc> property, and exits if the work item is cancelled.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Handle work item completion</source>
          <target>Handle work item completion</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.foundation.iasyncaction.completed.aspx)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Provide a completion handler by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IAsyncAction.Completed</pc></pc> property of the work item.</source>
          <target>Provide a completion handler by setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">IAsyncAction.Completed</pc></pc> property of the work item.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Supply a delegate (you can use a lambda or a delegate function) to handle work item completion.</source>
          <target>Supply a delegate (you can use a lambda or a delegate function) to handle work item completion.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>For example, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> to access the UI thread and show the result.</source>
          <target>For example, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CoreDispatcher.RunAsync</pc></pc> to access the UI thread and show the result.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>The following example updates the UI with the result of the work item submitted in step 1:</source>
          <target>The following example updates the UI with the result of the work item submitted in step 1:</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target>[!div class="tabbedCodeSnippets"]</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Note that the completion handler checks whether the work item was cancelled before dispatching a UI update.</source>
          <target>Note that the completion handler checks whether the work item was cancelled before dispatching a UI update.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Summary and next steps</source>
          <target>Summary and next steps</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkID=328569)</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>You can learn more by downloading the code from this quickstart in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating a ThreadPool work item sample</pc> written for Windows 8.1, and re-using the source code in a win<ph dataRef="id3" id="ph1" />unap Windows 10 app.</source>
          <target>You can learn more by downloading the code from this quickstart in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Creating a ThreadPool work item sample</pc> written for Windows 8.1, and re-using the source code in a win<ph dataRef="id3" id="ph1" />unap Windows 10 app.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Submit a work item to the thread pool</source>
          <target>Submit a work item to the thread pool</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Best practices for using the thread pool</source>
          <target>Best practices for using the thread pool</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Use a timer to submit a work item</source>
          <target>Use a timer to submit a work item</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>