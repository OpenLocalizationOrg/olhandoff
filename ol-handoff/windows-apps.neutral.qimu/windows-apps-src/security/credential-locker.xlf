<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\security\credential-locker.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">ba3f4fc8584108fefe25de146ae7fc84ee7c9e2c</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Credential locker</source>
          <target>Credential locker</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>This article describes how Universal Windows Platform (UWP) apps can use the Credential Locker to securely store and retrieve user credentials, and roam them between devices with the user's Microsoft account.</source>
          <target>This article describes how Universal Windows Platform (UWP) apps can use the Credential Locker to securely store and retrieve user credentials, and roam them between devices with the user's Microsoft account.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Credential locker</source>
          <target>Credential locker</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>This article describes how Universal Windows Platform (UWP) apps can use the Credential Locker to securely store and retrieve user credentials, and roam them between devices with the user's Microsoft account.</source>
          <target>This article describes how Universal Windows Platform (UWP) apps can use the Credential Locker to securely store and retrieve user credentials, and roam them between devices with the user's Microsoft account.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>For example, you have an app that connects to a service to access protected resources such as media files, or social networking.</source>
          <target>For example, you have an app that connects to a service to access protected resources such as media files, or social networking.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Your service requires login information for each user.</source>
          <target>Your service requires login information for each user.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>You’ve built UI into your app that gets the username and password for the user, which is then used to log the user into the service.</source>
          <target>You’ve built UI into your app that gets the username and password for the user, which is then used to log the user into the service.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Using the Credential Locker API, you can store the username and password for your user and easily retrieve them and log the user in automatically the next time they open your app, regardless of what device they're on.</source>
          <target>Using the Credential Locker API, you can store the username and password for your user and easily retrieve them and log the user in automatically the next time they open your app, regardless of what device they're on.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Credential locker works a little differently for domain accounts.</source>
          <target>Credential locker works a little differently for domain accounts.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>If there are credentials stored with your Microsoft account, and you associate that account with a domain account (such as the account that you use at work), your credentials will roam to that domain account.</source>
          <target>If there are credentials stored with your Microsoft account, and you associate that account with a domain account (such as the account that you use at work), your credentials will roam to that domain account.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>However, any new credentials added when signed on with the domain account won’t roam.</source>
          <target>However, any new credentials added when signed on with the domain account won’t roam.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>This ensures that private credentials for the domain aren’t exposed outside of the domain.</source>
          <target>This ensures that private credentials for the domain aren’t exposed outside of the domain.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Storing user credentials</source>
          <target>Storing user credentials</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227081)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227089)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>Obtain a reference to the Credential Locker using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault</pc></pc> object from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows.Security.Credentials</pc></pc> namespace.</source>
          <target>Obtain a reference to the Credential Locker using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault</pc></pc> object from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows.Security.Credentials</pc></pc> namespace.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227061)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/hh701231)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordCredential</pc></pc> object that contains an identifier for your app, the username and the password, and pass that to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PasswordVault.Add</pc></pc> method to add the credential to the locker.</source>
          <target>Create a <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordCredential</pc></pc> object that contains an identifier for your app, the username and the password, and pass that to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">PasswordVault.Add</pc></pc> method to add the credential to the locker.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Retrieving user credentials</source>
          <target>Retrieving user credentials</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227081)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You have several options for retrieving user credentials from the Credential Locker after you have a reference to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault</pc></pc> object.</source>
          <target>You have several options for retrieving user credentials from the Credential Locker after you have a reference to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault</pc></pc> object.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227088)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can retrieve all the credentials the user has supplied for your app in the locker with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault.RetrieveAll</pc></pc> method.</source>
          <target>You can retrieve all the credentials the user has supplied for your app in the locker with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault.RetrieveAll</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227084)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If you know the username for the stored credentials, you can retrieve all the credentials for that username with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault.FindAllByUserName</pc></pc> method.</source>
          <target>If you know the username for the stored credentials, you can retrieve all the credentials for that username with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault.FindAllByUserName</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227083)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If you know the resource name for the stored credentials, you can retrieve all the credentials for that resource name with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault.FindAllByResource</pc></pc> method.</source>
          <target>If you know the resource name for the stored credentials, you can retrieve all the credentials for that resource name with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault.FindAllByResource</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227087)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Finally, if you know both the username and the resource name for a credential, you can retrieve just that credential with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault.Retrieve</pc></pc> method.</source>
          <target>Finally, if you know both the username and the resource name for a credential, you can retrieve just that credential with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault.Retrieve</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Let’s look at an example where we have stored the resource name globally in an app and we log the user on automatically if we find a credential for them.</source>
          <target>Let’s look at an example where we have stored the resource name globally in an app and we log the user on automatically if we find a credential for them.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>If we find multiple credentials for the same user, we ask the user to select a default credential to use when logging on.</source>
          <target>If we find multiple credentials for the same user, we ask the user to select a default credential to use when logging on.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Deleting user credentials</source>
          <target>Deleting user credentials</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Deleting user credentials in the Credential Locker is also a quick, two-step process.</source>
          <target>Deleting user credentials in the Credential Locker is also a quick, two-step process.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/br227081)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/apps/br227089)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>Obtain a reference to the Credential Locker using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault</pc></pc> object from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows.Security.Credentials</pc></pc> namespace.</source>
          <target>Obtain a reference to the Credential Locker using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault</pc></pc> object from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">Windows.Security.Credentials</pc></pc> namespace.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/apps/hh701242)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Pass the credential you want to delete to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault.Remove</pc></pc> method.</source>
          <target>Pass the credential you want to delete to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">PasswordVault.Remove</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Best practices</source>
          <target>Best practices</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Only use the credential locker for passwords and not for larger data blobs.</source>
          <target>Only use the credential locker for passwords and not for larger data blobs.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Save passwords in the credential locker only if the following criteria are met:</source>
          <target>Save passwords in the credential locker only if the following criteria are met:</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>The user has successfully signed in.</source>
          <target>The user has successfully signed in.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>The user has opted to save passwords.</source>
          <target>The user has opted to save passwords.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Never store credentials in plain-text using app data or roaming settings.</source>
          <target>Never store credentials in plain-text using app data or roaming settings.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>