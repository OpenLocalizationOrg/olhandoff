<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\gaming\target-a-range-of-hardware.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">0cdc31f07560e7f1747806d1436bccbc1e50f8b9</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Support shadow maps on a range of hardware</source>
          <target>Support shadow maps on a range of hardware</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Render higher-fidelity shadows on faster devices and faster shadows on less powerful devices.</source>
          <target>Render higher-fidelity shadows on faster devices and faster shadows on less powerful devices.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Support shadow maps on a range of hardware</source>
          <target>Support shadow maps on a range of hardware</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Render higher-fidelity shadows on faster devices and faster shadows on less powerful devices.</source>
          <target>Render higher-fidelity shadows on faster devices and faster shadows on less powerful devices.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](implementing-depth-buffers-for-shadow-mapping.md)</data>
        </originalData>
        <segment state="initial">
          <source>Part 4 of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Walkthrough: Implement shadow volumes using depth buffers in Direct3D 11</pc>.</source>
          <target>Part 4 of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Walkthrough: Implement shadow volumes using depth buffers in Direct3D 11</pc>.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Comparison filter types</source>
          <target>Comparison filter types</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Only use linear filtering if the device can afford the performance penalty.</source>
          <target>Only use linear filtering if the device can afford the performance penalty.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>Generally, Direct3D feature level 9<ph dataRef="id1" id="ph1" />1 devices don't have enough power to spare for linear filtering on shadows.</source>
          <target>Generally, Direct3D feature level 9<ph dataRef="id1" id="ph1" />1 devices don't have enough power to spare for linear filtering on shadows.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Use point filtering instead on these devices.</source>
          <target>Use point filtering instead on these devices.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>When you use linear filtering, adjust the pixel shader so that it blends the shadow edges.</source>
          <target>When you use linear filtering, adjust the pixel shader so that it blends the shadow edges.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Create the comparison sampler for point filtering:</source>
          <target>Create the comparison sampler for point filtering:</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Then create a sampler for linear filtering:</source>
          <target>Then create a sampler for linear filtering:</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Choose a sampler:</source>
          <target>Choose a sampler:</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Blend shadow edges with linear filtering:</source>
          <target>Blend shadow edges with linear filtering:</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Shadow buffer size</source>
          <target>Shadow buffer size</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Larger shadow maps won't look as blocky but they take up more space in graphics memory.</source>
          <target>Larger shadow maps won't look as blocky but they take up more space in graphics memory.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Experiment with different shadow map sizes in your game and observe the results in different types of devices and different display sizes.</source>
          <target>Experiment with different shadow map sizes in your game and observe the results in different types of devices and different display sizes.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Consider an optimization like cascaded shadow maps to get better results with less graphics memory.</source>
          <target>Consider an optimization like cascaded shadow maps to get better results with less graphics memory.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ee416324)</data>
        </originalData>
        <segment state="initial">
          <source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Common Techniques to Improve Shadow Depth Maps</pc>.</source>
          <target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Common Techniques to Improve Shadow Depth Maps</pc>.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Shadow buffer depth</source>
          <target>Shadow buffer depth</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Greater precision in the shadow buffer will give more accurate depth test results, which helps avoid issues like z-buffer fighting.</source>
          <target>Greater precision in the shadow buffer will give more accurate depth test results, which helps avoid issues like z-buffer fighting.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>But like larger shadow maps, greater precision takes up more memory.</source>
          <target>But like larger shadow maps, greater precision takes up more memory.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>Experiment with different depth precision types in your game - DXGI<ph dataRef="id1" id="ph1" />FORMAT<ph dataRef="id2" id="ph2" />R24G8<ph dataRef="id3" id="ph3" />TYPELESS versus DXGI<ph dataRef="id4" id="ph4" />FORMAT<ph dataRef="id5" id="ph5" />R16<ph dataRef="id6" id="ph6" />TYPELESS - and observe the speed and quality on different feature levels.</source>
          <target>Experiment with different depth precision types in your game - DXGI<ph dataRef="id1" id="ph1" />FORMAT<ph dataRef="id2" id="ph2" />R24G8<ph dataRef="id3" id="ph3" />TYPELESS versus DXGI<ph dataRef="id4" id="ph4" />FORMAT<ph dataRef="id5" id="ph5" />R16<ph dataRef="id6" id="ph6" />TYPELESS - and observe the speed and quality on different feature levels.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Optimizing precompiled shaders</source>
          <target>Optimizing precompiled shaders</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Universal Windows Platform (UWP) apps can use dynamic shader compilation, but it's faster to use dynamic shader linking.</source>
          <target>Universal Windows Platform (UWP) apps can use dynamic shader compilation, but it's faster to use dynamic shader linking.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">`#ifdef`</data>
        </originalData>
        <segment state="initial">
          <source>You can also use compiler directives and <ph dataRef="id1" id="ph1" /> blocks to create different versions of shaders.</source>
          <target>You can also use compiler directives and <ph dataRef="id1" id="ph1" /> blocks to create different versions of shaders.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">`&lt;FxcCompiler&gt;`</data>
        </originalData>
        <segment state="initial">
          <source>This is done by opening the Visual Studio project file in a text editor and adding multiple <ph dataRef="id1" id="ph1" /> entries for the HLSL (each with the appropriate preprocessor definitions).</source>
          <target>This is done by opening the Visual Studio project file in a text editor and adding multiple <ph dataRef="id1" id="ph1" /> entries for the HLSL (each with the appropriate preprocessor definitions).</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>Note that this necessitates different filenames; in this case, Visual Studio appends <ph dataRef="id1" id="ph1" />point and <ph dataRef="id2" id="ph2" />linear to the different versions of the shader.</source>
          <target>Note that this necessitates different filenames; in this case, Visual Studio appends <ph dataRef="id1" id="ph1" />point and <ph dataRef="id2" id="ph2" />linear to the different versions of the shader.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>The project file entry for the linear filtered version of the shader defines LINEAR:</source>
          <target>The project file entry for the linear filtered version of the shader defines LINEAR:</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>The project file entry for the linear filtered version of the shader does not include preprocessor definitions:</source>
          <target>The project file entry for the linear filtered version of the shader does not include preprocessor definitions:</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>