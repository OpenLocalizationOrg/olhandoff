<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\gaming\create-depth-buffer-resource--view--and-sampler-state.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">f0aedb99832ecd10da547cf73a074070008a4344</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Create depth buffer device resources</source>
          <target>Create depth buffer device resources</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Learn how to create the Direct3D device resources necessary to support depth testing for shadow volumes.</source>
          <target>Learn how to create the Direct3D device resources necessary to support depth testing for shadow volumes.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Create depth buffer device resources</source>
          <target>Create depth buffer device resources</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Learn how to create the Direct3D device resources necessary to support depth testing for shadow volumes.</source>
          <target>Learn how to create the Direct3D device resources necessary to support depth testing for shadow volumes.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](implementing-depth-buffers-for-shadow-mapping.md)</data>
        </originalData>
        <segment state="initial">
          <source>Part 1 of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Walkthrough: Implement shadow volumes using depth buffers in Direct3D 11</pc>.</source>
          <target>Part 1 of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Walkthrough: Implement shadow volumes using depth buffers in Direct3D 11</pc>.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Resources you'll need</source>
          <target>Resources you'll need</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Rendering a depth map for shadow volumes requires the following Direct3D device-dependent resources:</source>
          <target>Rendering a depth map for shadow volumes requires the following Direct3D device-dependent resources:</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>A resource (buffer) for the depth map</source>
          <target>A resource (buffer) for the depth map</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>A depth stencil view and shader resource view for the resource</source>
          <target>A depth stencil view and shader resource view for the resource</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>A comparison sampler state object</source>
          <target>A comparison sampler state object</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Constant buffers for light POV matrices</source>
          <target>Constant buffers for light POV matrices</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>A viewport for rendering the shadow map (typically a square viewport)</source>
          <target>A viewport for rendering the shadow map (typically a square viewport)</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>A rendering state object to enable front face culling</source>
          <target>A rendering state object to enable front face culling</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>You will also need a rendering state object to switch back to back face culling, if you don't already use one.</source>
          <target>You will also need a rendering state object to switch back to back face culling, if you don't already use one.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Note that creation of these resources needs to be included in a device-dependent resource creation routine, that way your renderer can recreate them if (for example) a new device driver is installed, or the user moves your app to a monitor attached to a different graphics adapter.</source>
          <target>Note that creation of these resources needs to be included in a device-dependent resource creation routine, that way your renderer can recreate them if (for example) a new device driver is installed, or the user moves your app to a monitor attached to a different graphics adapter.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Check feature support</source>
          <target>Check feature support</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476497)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">\_</data>
          <data id="id8">\_</data>
          <data id="id9">\_</data>
          <data id="id10">\_</data>
          <data id="id11">[</data>
          <data id="id12">](https://msdn.microsoft.com/library/windows/desktop/jj247569)</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
          <data id="id15">\_</data>
          <data id="id16">\_</data>
          <data id="id17">\_</data>
          <data id="id18">\_</data>
          <data id="id19">\_</data>
        </originalData>
        <segment state="initial">
          <source>Before creating the depth map, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CheckFeatureSupport</pc></pc> method on the Direct3D device, request <pc dataRefEnd="id6" dataRefStart="id5" id="p3">D3D11<ph dataRef="id7" id="ph1" />FEATURE<ph dataRef="id8" id="ph2" />D3D9<ph dataRef="id9" id="ph3" />SHADOW<ph dataRef="id10" id="ph4" />SUPPORT</pc>, and provide a <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><pc dataRefEnd="id14" dataRefStart="id13" id="p5">D3D11<ph dataRef="id15" id="ph5" />FEATURE<ph dataRef="id16" id="ph6" />DATA<ph dataRef="id17" id="ph7" />D3D9<ph dataRef="id18" id="ph8" />SHADOW<ph dataRef="id19" id="ph9" />SUPPORT</pc></pc> structure.</source>
          <target>Before creating the depth map, call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">CheckFeatureSupport</pc></pc> method on the Direct3D device, request <pc dataRefEnd="id6" dataRefStart="id5" id="p3">D3D11<ph dataRef="id7" id="ph1" />FEATURE<ph dataRef="id8" id="ph2" />D3D9<ph dataRef="id9" id="ph3" />SHADOW<ph dataRef="id10" id="ph4" />SUPPORT</pc>, and provide a <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><pc dataRefEnd="id14" dataRefStart="id13" id="p5">D3D11<ph dataRef="id15" id="ph5" />FEATURE<ph dataRef="id16" id="ph6" />DATA<ph dataRef="id17" id="ph7" />D3D9<ph dataRef="id18" id="ph8" />SHADOW<ph dataRef="id19" id="ph9" />SUPPORT</pc></pc> structure.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>If this feature is not supported, do not try to load shaders compiled for shader model 4 level 9<ph dataRef="id1" id="ph1" />x that call sample comparison functions.</source>
          <target>If this feature is not supported, do not try to load shaders compiled for shader model 4 level 9<ph dataRef="id1" id="ph1" />x that call sample comparison functions.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>In many cases, lack of support for this feature means that the GPU is a legacy device with a driver that isn't updated to support at least WDDM 1.2.</source>
          <target>In many cases, lack of support for this feature means that the GPU is a legacy device with a driver that isn't updated to support at least WDDM 1.2.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>If the device supports at least feature level 10<ph dataRef="id1" id="ph1" />0 then you can load a sample comparison shader compiled for shader model 4<ph dataRef="id2" id="ph2" />0 instead.</source>
          <target>If the device supports at least feature level 10<ph dataRef="id1" id="ph1" />0 then you can load a sample comparison shader compiled for shader model 4<ph dataRef="id2" id="ph2" />0 instead.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Create depth buffer</source>
          <target>Create depth buffer</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>First, try creating the depth map with a higher-precision depth format.</source>
          <target>First, try creating the depth map with a higher-precision depth format.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Set up matching shader resource view properties first.</source>
          <target>Set up matching shader resource view properties first.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>If the resource creation fails, for example due to low device memory or a format that the hardware doesn't support, try a lower-precision format and change properties to match.</source>
          <target>If the resource creation fails, for example due to low device memory or a format that the hardware doesn't support, try a lower-precision format and change properties to match.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>This step is optional if you only need a low-precision depth format, for example when rendering on medium-resolution Direct3D feature level 9<ph dataRef="id1" id="ph1" />1 devices.</source>
          <target>This step is optional if you only need a low-precision depth format, for example when rendering on medium-resolution Direct3D feature level 9<ph dataRef="id1" id="ph1" />1 devices.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Then create the resource views.</source>
          <target>Then create the resource views.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Set the mip slice to zero on the depth stencil view and set mip levels to 1 on the shader resource view.</source>
          <target>Set the mip slice to zero on the depth stencil view and set mip levels to 1 on the shader resource view.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb173059)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>Both have a texture dimension of TEXTURE2D, and both need to use a matching <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DXGI<ph dataRef="id5" id="ph1" />FORMAT</pc></pc>.</source>
          <target>Both have a texture dimension of TEXTURE2D, and both need to use a matching <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">DXGI<ph dataRef="id5" id="ph1" />FORMAT</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Create comparison state</source>
          <target>Create comparison state</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Now create the comparison sampler state object.</source>
          <target>Now create the comparison sampler state object.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>Feature level 9<ph dataRef="id1" id="ph1" />1 only supports D3D11<ph dataRef="id2" id="ph2" />COMPARISON<ph dataRef="id3" id="ph3" />LESS<ph dataRef="id4" id="ph4" />EQUAL.</source>
          <target>Feature level 9<ph dataRef="id1" id="ph1" />1 only supports D3D11<ph dataRef="id2" id="ph2" />COMPARISON<ph dataRef="id3" id="ph3" />LESS<ph dataRef="id4" id="ph4" />EQUAL.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](target-a-range-of-hardware.md)</data>
        </originalData>
        <segment state="initial">
          <source>Filtering choices are explained more in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supporting shadow maps on a range of hardware</pc> - or you can just pick point filtering for faster shadow maps.</source>
          <target>Filtering choices are explained more in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Supporting shadow maps on a range of hardware</pc> - or you can just pick point filtering for faster shadow maps.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>Note that you can specify the D3D11<ph dataRef="id1" id="ph1" />TEXTURE<ph dataRef="id2" id="ph2" />ADDRESS<ph dataRef="id3" id="ph3" />BORDER address mode and it will work on feature level 9<ph dataRef="id4" id="ph4" />1 devices.</source>
          <target>Note that you can specify the D3D11<ph dataRef="id1" id="ph1" />TEXTURE<ph dataRef="id2" id="ph2" />ADDRESS<ph dataRef="id3" id="ph3" />BORDER address mode and it will work on feature level 9<ph dataRef="id4" id="ph4" />1 devices.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>This applies to pixel shaders that don't test whether the pixel is in the light's view frustum before doing the depth test.</source>
          <target>This applies to pixel shaders that don't test whether the pixel is in the light's view frustum before doing the depth test.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>By specifying 0 or 1 for each border, you can control whether pixels outside the light's view frustum pass or fail the depth test, and therefore whether they are lit or in shadow.</source>
          <target>By specifying 0 or 1 for each border, you can control whether pixels outside the light's view frustum pass or fail the depth test, and therefore whether they are lit or in shadow.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">\_</data>
          <data id="id9">\_</data>
          <data id="id10">**</data>
          <data id="id11">**</data>
        </originalData>
        <segment state="initial">
          <source>On feature level 9<ph dataRef="id1" id="ph1" />1, the following required values must be set: <pc dataRefEnd="id3" dataRefStart="id2" id="p1">MinLOD</pc> is set to zero, <pc dataRefEnd="id5" dataRefStart="id4" id="p2">MaxLOD</pc> is set to <pc dataRefEnd="id7" dataRefStart="id6" id="p3">D3D11<ph dataRef="id8" id="ph2" />FLOAT32<ph dataRef="id9" id="ph3" />MAX</pc>, and <pc dataRefEnd="id11" dataRefStart="id10" id="p4">MaxAnisotropy</pc> is set to zero.</source>
          <target>On feature level 9<ph dataRef="id1" id="ph1" />1, the following required values must be set: <pc dataRefEnd="id3" dataRefStart="id2" id="p1">MinLOD</pc> is set to zero, <pc dataRefEnd="id5" dataRefStart="id4" id="p2">MaxLOD</pc> is set to <pc dataRefEnd="id7" dataRefStart="id6" id="p3">D3D11<ph dataRef="id8" id="ph2" />FLOAT32<ph dataRef="id9" id="ph3" />MAX</pc>, and <pc dataRefEnd="id11" dataRefStart="id10" id="p4">MaxAnisotropy</pc> is set to zero.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Create render states</source>
          <target>Create render states</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Now create a render state you can use to enable front face culling.</source>
          <target>Now create a render state you can use to enable front face culling.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>Note that feature level 9<ph dataRef="id1" id="ph1" />1 devices require <pc dataRefEnd="id3" dataRefStart="id2" id="p1">DepthClipEnable</pc> set to <pc dataRefEnd="id5" dataRefStart="id4" id="p2">true</pc>.</source>
          <target>Note that feature level 9<ph dataRef="id1" id="ph1" />1 devices require <pc dataRefEnd="id3" dataRefStart="id2" id="p1">DepthClipEnable</pc> set to <pc dataRefEnd="id5" dataRefStart="id4" id="p2">true</pc>.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Create a render state you can use to enable back face culling.</source>
          <target>Create a render state you can use to enable back face culling.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>If your rendering code already turns on back face culling, then you can skip this step.</source>
          <target>If your rendering code already turns on back face culling, then you can skip this step.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Create constant buffers</source>
          <target>Create constant buffers</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Don't forget to create a constant buffer for rendering from the light's point of view.</source>
          <target>Don't forget to create a constant buffer for rendering from the light's point of view.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>You can also use this constant buffer to specify the light position to the shader.</source>
          <target>You can also use this constant buffer to specify the light position to the shader.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>Use a perspective matrix for point lights, and use an orthogonal matrix for directional lights (such as sunlight).</source>
          <target>Use a perspective matrix for point lights, and use an orthogonal matrix for directional lights (such as sunlight).</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Fill the constant buffer data.</source>
          <target>Fill the constant buffer data.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Update the constant buffers once during initialization, and again if the light values have changed since the previous frame.</source>
          <target>Update the constant buffers once during initialization, and again if the light values have changed since the previous frame.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Create a viewport</source>
          <target>Create a viewport</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>You need a separate viewport to render to the shadow map.</source>
          <target>You need a separate viewport to render to the shadow map.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>The viewport isn't a device-based resource; you're free to create it elsewhere in your code.</source>
          <target>The viewport isn't a device-based resource; you're free to create it elsewhere in your code.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>Creating the viewport along with the shadow map can help make it more convenient to keep the dimension of the viewport congruent with the shadow map dimension.</source>
          <target>Creating the viewport along with the shadow map can help make it more convenient to keep the dimension of the viewport congruent with the shadow map dimension.</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](render-the-shadow-map-to-the-depth-buffer.md)</data>
        </originalData>
        <segment state="initial">
          <source>In the next part of this walkthrough, learn how to create the shadow map by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">rendering to the depth buffer</pc>.</source>
          <target>In the next part of this walkthrough, learn how to create the shadow map by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">rendering to the depth buffer</pc>.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>