<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\in-app-help\in-app-help.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">57aeaf5962bbd95f3462f3a2736f66e733834b81</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Design effective help to be displayed reactively inside your app.</source>
          <target>Design effective help to be displayed reactively inside your app.</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Guidelines for designing in-app help.</source>
          <target>Guidelines for designing in-app help.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>In-app help pages</source>
          <target>In-app help pages</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Most of the time, it's best for help to be displayed within the app, and to be displayed when the user chooses to view it.</source>
          <target>Most of the time, it's best for help to be displayed within the app, and to be displayed when the user chooses to view it.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Consider the following guidelines when creating in-app help.</source>
          <target>Consider the following guidelines when creating in-app help.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>When to use in-app help pages</source>
          <target>When to use in-app help pages</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>In-app help should be the default method of displaying help for the user.</source>
          <target>In-app help should be the default method of displaying help for the user.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>It should be used for any help that is simple, straightforward, and does not introduce new content to the user.</source>
          <target>It should be used for any help that is simple, straightforward, and does not introduce new content to the user.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Instructions, advice, and tips and tricks are all suitable for in-app help.</source>
          <target>Instructions, advice, and tips and tricks are all suitable for in-app help.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Complex instructions or tutorials are not easy to reference quickly, and they take up large amounts of space, so these materials should be hosted externally, and not incorporated into the app itself.</source>
          <target>Complex instructions or tutorials are not easy to reference quickly, and they take up large amounts of space, so these materials should be hosted externally, and not incorporated into the app itself.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Users should not have to seek out help for basic instructions or to discover new features.</source>
          <target>Users should not have to seek out help for basic instructions or to discover new features.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>If you need to have help that educates users, use instructional UI.</source>
          <target>If you need to have help that educates users, use instructional UI.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Types of in-app help</source>
          <target>Types of in-app help</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>In-app help can come in several forms, though they all follow the same general principles of design and usability.</source>
          <target>In-app help can come in several forms, though they all follow the same general principles of design and usability.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Help pages</source>
          <target>Help pages</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Having a separate page or pages of help within your app is a quick and easy way of displaying useful instructions:</source>
          <target>Having a separate page or pages of help within your app is a quick and easy way of displaying useful instructions:</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Be concise:</pc> A large library of help topics is unwieldy and unsuited for in-app help.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Be concise:</pc> A large library of help topics is unwieldy and unsuited for in-app help.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Be consistent:</pc> Make sure that users can reach your help pages the same way from any part of your app.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Be consistent:</pc> Make sure that users can reach your help pages the same way from any part of your app.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>They should never have to search for it.</source>
          <target>They should never have to search for it.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Be aware that users scan, not read:</pc> Because the help a user is looking for might be on the same page as other help topics, make sure they can easily tell which one they need to focus on.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Be aware that users scan, not read:</pc> Because the help a user is looking for might be on the same page as other help topics, make sure they can easily tell which one they need to focus on.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Popups</source>
          <target>Popups</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Popups allow for highly contexual help, displaying instructions and advice that is relevant to the specific task that the user is attempting:</source>
          <target>Popups allow for highly contexual help, displaying instructions and advice that is relevant to the specific task that the user is attempting:</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus on one issue:</pc> Space is even more restricted in a popup than a help page.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Focus on one issue:</pc> Space is even more restricted in a popup than a help page.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Help popups need to refer specifically to a single task to be effective.</source>
          <target>Help popups need to refer specifically to a single task to be effective.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visibility is important:</pc> Because help popups can only be viewed from one location, make sure that they're clearly visible to the user without being obstructive.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Visibility is important:</pc> Because help popups can only be viewed from one location, make sure that they're clearly visible to the user without being obstructive.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>If the user misses it, they might move away from the popup in search of a help page.</source>
          <target>If the user misses it, they might move away from the popup in search of a help page.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Don't use too many resources:</pc> Help shouldn't lag or be slow-loading.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Don't use too many resources:</pc> Help shouldn't lag or be slow-loading.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Using videos or audio files or high resolution images in popups is more likely to frustrate the user than it is to help them.</source>
          <target>Using videos or audio files or high resolution images in popups is more likely to frustrate the user than it is to help them.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Descriptions</source>
          <target>Descriptions</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Sometimes, it can be useful to provide more information about a feature when a user inspects it.</source>
          <target>Sometimes, it can be useful to provide more information about a feature when a user inspects it.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Descriptions are similar to instructive UI, but the key difference is that instructional UI attempts to teach and educate the user about features that they don't know about, whereas detailed descriptions enhance a user's understanding of app features that they're already interested in:</source>
          <target>Descriptions are similar to instructive UI, but the key difference is that instructional UI attempts to teach and educate the user about features that they don't know about, whereas detailed descriptions enhance a user's understanding of app features that they're already interested in:</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Don't teach the basics:</pc> Assume that the user already knows the fundamentals of how to use the item being described.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Don't teach the basics:</pc> Assume that the user already knows the fundamentals of how to use the item being described.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Clarifying or offering further information is useful.</source>
          <target>Clarifying or offering further information is useful.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Telling them what they already know is not.</source>
          <target>Telling them what they already know is not.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Describe interesting interactions:</pc> One of the best uses for descriptions is to educate the user on how a features that they already know about can interact.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Describe interesting interactions:</pc> One of the best uses for descriptions is to educate the user on how a features that they already know about can interact.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>This helps users learn more about things they already like to use.</source>
          <target>This helps users learn more about things they already like to use.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stay out of the way:</pc> Much like instructional UI, descriptions need to avoid interfering with a user's enjoyment of the app.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stay out of the way:</pc> Much like instructional UI, descriptions need to avoid interfering with a user's enjoyment of the app.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Related articles</source>
          <target>Related articles</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Guidelines for app help</source>
          <target>Guidelines for app help</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>