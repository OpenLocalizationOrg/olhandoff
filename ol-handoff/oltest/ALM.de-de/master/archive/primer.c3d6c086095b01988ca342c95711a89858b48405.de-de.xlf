<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="de-de" original="foo.file" tool-id="0927b8c7-107a-445b-b063-792acefc2a47" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="0927b8c7-107a-445b-b063-792acefc2a47" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
      <olfilehash xmlns="">0049b616342431b715c0792b20266e99d53ba686</olfilehash>
    </header>
    <body>
      <group id="96099630-99a0-45e4-9d5f-1c349be486dd">
        <trans-unit id="25d9c3a8-c1d6-4e87-abed-ccc55f45792d" xml:space="preserve">
          <source>.NET Primer</source>
          <target state="new">.NET Primer</target>
        </trans-unit>
        <trans-unit id="f5860a25-7b47-4284-a57b-6344e772d5ca" xml:space="preserve">
          <source>By Rich Lander, Zlatko Knezevic</source>
          <target state="new">By Rich Lander, Zlatko Knezevic</target>
        </trans-unit>
        <trans-unit id="62acdcec-95f0-4f1c-87cf-a5b59997cb56" xml:space="preserve">
          <source>.NET is a general purpose development platform.</source>
          <target state="new">.NET is a general purpose development platform.</target>
        </trans-unit>
        <trans-unit id="0eb09e67-f961-41e5-996b-5d92a42ff75f" xml:space="preserve">
          <source>It can be used for any
kind of app type or workload where general purpose solutions are used.</source>
          <target state="new">It can be used for any
kind of app type or workload where general purpose solutions are used.</target>
        </trans-unit>
        <trans-unit id="d71dcd3d-cd1e-479f-bee8-0ee40ba90075" xml:space="preserve">
          <source>It has several key features that are attractive to many developers,
including automatic memory management and modern programming languages,
that make it easier to efficiently build high-quality apps.</source>
          <target state="new">It has several key features that are attractive to many developers,
including automatic memory management and modern programming languages,
that make it easier to efficiently build high-quality apps.</target>
        </trans-unit>
        <trans-unit id="e04407e6-4a43-4282-93aa-3a00bf2d1252" xml:space="preserve">
          <source>.NET enables
a high-level programming environment with many convenience features,
while providing low-level access to native memory and APIs.</source>
          <target state="new">.NET enables
a high-level programming environment with many convenience features,
while providing low-level access to native memory and APIs.</target>
        </trans-unit>
        <trans-unit id="65b40462-1f3d-490b-971c-ab8d1fc5c5d9" xml:space="preserve">
          <source>Multiple implementations of .NET are available, based on open <bpt id="6612718b-7a5b-4bca-8e20-ed05d4eff72bCapsExtId1">&lt;linkText&gt;</bpt>.NET
Standards<ept id="6612718b-7a5b-4bca-8e20-ed05d4eff72bCapsExtId1">&lt;/linkText&gt;</ept><bpt id="6612718b-7a5b-4bca-8e20-ed05d4eff72bCapsExtId2">&lt;title&gt;</bpt><ept id="6612718b-7a5b-4bca-8e20-ed05d4eff72bCapsExtId2">&lt;/title&gt;</ept>
that specify the fundamentals of the platform.</source>
          <target state="new">Multiple implementations of .NET are available, based on open <bpt id="6612718b-7a5b-4bca-8e20-ed05d4eff72bCapsExtId1">&lt;linkText&gt;</bpt>.NET
Standards<ept id="6612718b-7a5b-4bca-8e20-ed05d4eff72bCapsExtId1">&lt;/linkText&gt;</ept><bpt id="6612718b-7a5b-4bca-8e20-ed05d4eff72bCapsExtId2">&lt;title&gt;</bpt><ept id="6612718b-7a5b-4bca-8e20-ed05d4eff72bCapsExtId2">&lt;/title&gt;</ept>
that specify the fundamentals of the platform.</target>
        </trans-unit>
        <trans-unit id="0afbb859-25a9-47a6-8931-e1fe5767cbc6" xml:space="preserve">
          <source>They are separately
optimized for different app types (e.g. desktop, mobile, gaming, cloud)
and support many chips (e.g. x86/x64, ARM) and operating systems (e.g.
Windows, Linux, iOS, Android, OS X).</source>
          <target state="new">They are separately
optimized for different app types (e.g. desktop, mobile, gaming, cloud)
and support many chips (e.g. x86/x64, ARM) and operating systems (e.g.
Windows, Linux, iOS, Android, OS X).</target>
        </trans-unit>
        <trans-unit id="2a1c9f4e-d656-480c-a2ac-795dd2a8b45c" xml:space="preserve">
          <source>Open source is also an important
part of the .NET ecosystem, with multiple .NET implementations and many
libraries available under OSI-approved licenses.</source>
          <target state="new">Open source is also an important
part of the .NET ecosystem, with multiple .NET implementations and many
libraries available under OSI-approved licenses.</target>
        </trans-unit>
        <trans-unit id="e8e2ab09-d03f-431e-a993-f96f31f56f20" xml:space="preserve">
          <source>You can take a look at the ../getting-started/overview document to
figure out all of the different editions of .NET Framework that are
available, both Microsoft's and others.</source>
          <target state="new">You can take a look at the ../getting-started/overview document to
figure out all of the different editions of .NET Framework that are
available, both Microsoft's and others.</target>
        </trans-unit>
        <trans-unit id="920b9c12-d308-4766-b8a3-ecc64543f710" xml:space="preserve">
          <source>Key .NET Concepts</source>
          <target state="new">Key .NET Concepts</target>
        </trans-unit>
        <trans-unit id="d45205ae-a038-4c14-9ab7-131682931ff4" xml:space="preserve">
          <source>There is a certain number of concepts that are very important to
understand if you are new to the .NET Platform.</source>
          <target state="new">There is a certain number of concepts that are very important to
understand if you are new to the .NET Platform.</target>
        </trans-unit>
        <trans-unit id="9709c8af-783a-479e-a62e-8e922ddccaec" xml:space="preserve">
          <source>These concepts are the
cornerstone of the entire platform, and understanding them at the outset
is important for general understanding of how .NET works.</source>
          <target state="new">These concepts are the
cornerstone of the entire platform, and understanding them at the outset
is important for general understanding of how .NET works.</target>
        </trans-unit>
        <trans-unit id="d377384c-b1f3-4abe-bf58-d99fd5b6eee7" xml:space="preserve">
          <source><bpt id="4da27a9f-3e9d-414b-a246-e0834cc2f863CapsExtId1">&lt;linkText&gt;</bpt>Managed Code<ept id="4da27a9f-3e9d-414b-a246-e0834cc2f863CapsExtId1">&lt;/linkText&gt;</ept><bpt id="4da27a9f-3e9d-414b-a246-e0834cc2f863CapsExtId2">&lt;title&gt;</bpt><ept id="4da27a9f-3e9d-414b-a246-e0834cc2f863CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="4da27a9f-3e9d-414b-a246-e0834cc2f863CapsExtId1">&lt;linkText&gt;</bpt>Managed Code<ept id="4da27a9f-3e9d-414b-a246-e0834cc2f863CapsExtId1">&lt;/linkText&gt;</ept><bpt id="4da27a9f-3e9d-414b-a246-e0834cc2f863CapsExtId2">&lt;title&gt;</bpt><ept id="4da27a9f-3e9d-414b-a246-e0834cc2f863CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="2a252d5a-5fc1-4bf1-b21b-920511b6ac75" xml:space="preserve">
          <source><bpt id="4adec62c-535d-4de3-92a3-d20605d38fcdCapsExtId1">&lt;linkText&gt;</bpt>Common Type System<ept id="4adec62c-535d-4de3-92a3-d20605d38fcdCapsExtId1">&lt;/linkText&gt;</ept><bpt id="4adec62c-535d-4de3-92a3-d20605d38fcdCapsExtId2">&lt;title&gt;</bpt><ept id="4adec62c-535d-4de3-92a3-d20605d38fcdCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="4adec62c-535d-4de3-92a3-d20605d38fcdCapsExtId1">&lt;linkText&gt;</bpt>Common Type System<ept id="4adec62c-535d-4de3-92a3-d20605d38fcdCapsExtId1">&lt;/linkText&gt;</ept><bpt id="4adec62c-535d-4de3-92a3-d20605d38fcdCapsExtId2">&lt;title&gt;</bpt><ept id="4adec62c-535d-4de3-92a3-d20605d38fcdCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="87d80f2a-f8ac-449b-aee7-427c14b18cdb" xml:space="preserve">
          <source><bpt id="a8a71c03-b1ab-497e-9378-8ea0ea67a5d9CapsExtId1">&lt;linkText&gt;</bpt>The runtime<ept id="a8a71c03-b1ab-497e-9378-8ea0ea67a5d9CapsExtId1">&lt;/linkText&gt;</ept><bpt id="a8a71c03-b1ab-497e-9378-8ea0ea67a5d9CapsExtId2">&lt;title&gt;</bpt><ept id="a8a71c03-b1ab-497e-9378-8ea0ea67a5d9CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="a8a71c03-b1ab-497e-9378-8ea0ea67a5d9CapsExtId1">&lt;linkText&gt;</bpt>The runtime<ept id="a8a71c03-b1ab-497e-9378-8ea0ea67a5d9CapsExtId1">&lt;/linkText&gt;</ept><bpt id="a8a71c03-b1ab-497e-9378-8ea0ea67a5d9CapsExtId2">&lt;title&gt;</bpt><ept id="a8a71c03-b1ab-497e-9378-8ea0ea67a5d9CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="d86bcb05-da2b-4d24-b6df-1c0e301cdf32" xml:space="preserve">
          <source><bpt id="6bcc46f9-bd3c-4048-ab42-7300019a325aCapsExtId1">&lt;linkText&gt;</bpt>Base Class Library<ept id="6bcc46f9-bd3c-4048-ab42-7300019a325aCapsExtId1">&lt;/linkText&gt;</ept><bpt id="6bcc46f9-bd3c-4048-ab42-7300019a325aCapsExtId2">&lt;title&gt;</bpt><ept id="6bcc46f9-bd3c-4048-ab42-7300019a325aCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="6bcc46f9-bd3c-4048-ab42-7300019a325aCapsExtId1">&lt;linkText&gt;</bpt>Base Class Library<ept id="6bcc46f9-bd3c-4048-ab42-7300019a325aCapsExtId1">&lt;/linkText&gt;</ept><bpt id="6bcc46f9-bd3c-4048-ab42-7300019a325aCapsExtId2">&lt;title&gt;</bpt><ept id="6bcc46f9-bd3c-4048-ab42-7300019a325aCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="101f4222-9711-4570-a2db-44da2c283c80" xml:space="preserve">
          <source>A stroll through .NET</source>
          <target state="new">A stroll through .NET</target>
        </trans-unit>
        <trans-unit id="8a67fb27-08af-4a5e-8768-fac171e1d947" xml:space="preserve">
          <source>As any mature and advanced application development framework, .NET has
many powerful features that make the developer's job easier and aim to
make writing code more powerful and expressive.</source>
          <target state="new">As any mature and advanced application development framework, .NET has
many powerful features that make the developer's job easier and aim to
make writing code more powerful and expressive.</target>
        </trans-unit>
        <trans-unit id="306a89b5-d98b-40ce-ad89-25f080c59d65" xml:space="preserve">
          <source>This section will
outline the basics of the most salient features and provide pointers to
more detailed discussions where needed.</source>
          <target state="new">This section will
outline the basics of the most salient features and provide pointers to
more detailed discussions where needed.</target>
        </trans-unit>
        <trans-unit id="94daea17-c462-48fa-9427-bf2445500fd6" xml:space="preserve">
          <source>After finishing this stroll, you
should have enough information to be able to read the samples on our
GitHub repos as well as other code and understand what is going on.</source>
          <target state="new">After finishing this stroll, you
should have enough information to be able to read the samples on our
GitHub repos as well as other code and understand what is going on.</target>
        </trans-unit>
        <trans-unit id="06d8e22d-59b1-4065-abdb-638620715794" xml:space="preserve">
          <source>Automatic memory management</source>
          <target state="new">Automatic memory management</target>
        </trans-unit>
        <trans-unit id="06b2a24b-9e73-42a8-b8cf-efcc8563f411" xml:space="preserve">
          <source>Type safety</source>
          <target state="new">Type safety</target>
        </trans-unit>
        <trans-unit id="03a56e59-04b1-48c3-930d-3ba65e6e44a5" xml:space="preserve">
          <source>The managed compiler</source>
          <target state="new">The managed compiler</target>
        </trans-unit>
        <trans-unit id="5be0fd41-70dd-406e-a5bf-44d1e4ca9a30" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="new">Delegates and lambdas</target>
        </trans-unit>
        <trans-unit id="d38b7f47-481f-438f-9044-01078d4aba09" xml:space="preserve">
          <source>Generic Types (Generics)</source>
          <target state="new">Generic Types (Generics)</target>
        </trans-unit>
        <trans-unit id="aeba0746-c9ca-4d54-97cf-41470edda58a" xml:space="preserve">
          <source>LINQ</source>
          <target state="new">LINQ</target>
        </trans-unit>
        <trans-unit id="5b754017-73d7-4fdb-b37a-f144cc5022b3" xml:space="preserve">
          <source>Asynchronous support</source>
          <target state="new">Asynchronous support</target>
        </trans-unit>
        <trans-unit id="38285c85-7b8d-41c0-b869-db9fab584ced" xml:space="preserve">
          <source>Dynamic language features</source>
          <target state="new">Dynamic language features</target>
        </trans-unit>
        <trans-unit id="e4a9736f-8276-492e-a718-bf7260eff386" xml:space="preserve">
          <source>Code contracts</source>
          <target state="new">Code contracts</target>
        </trans-unit>
        <trans-unit id="f8518020-f338-4bc7-b720-515ab068f618" xml:space="preserve">
          <source>Native interoperability</source>
          <target state="new">Native interoperability</target>
        </trans-unit>
        <trans-unit id="7d137d86-648a-4fbb-8712-4dd79262a69b" xml:space="preserve">
          <source>Automatic memory management</source>
          <target state="new">Automatic memory management</target>
        </trans-unit>
        <trans-unit id="c945f241-1197-42c4-97c3-27c47bde59ea" xml:space="preserve">
          <source>Garbage collection is the most well-known of .NET features.</source>
          <target state="new">Garbage collection is the most well-known of .NET features.</target>
        </trans-unit>
        <trans-unit id="102a0123-9574-4014-b25c-810101017f87" xml:space="preserve">
          <source>Developers
do not need to actively manage memory, although there are affordances to
provide more information to the garbage collector (GC).</source>
          <target state="new">Developers
do not need to actively manage memory, although there are affordances to
provide more information to the garbage collector (GC).</target>
        </trans-unit>
        <trans-unit id="7e94a29f-72ff-4fd6-9a04-d310cb2a5e7d" xml:space="preserve">
          <source>C\# includes the
<bpt id="7e46727c-4c0b-4e45-8944-06ff37c46678">&lt;code&gt;</bpt>new<ept id="7e46727c-4c0b-4e45-8944-06ff37c46678">&lt;/code&gt;</ept> keyword to allocate memory in terms of a particular type, and the
<bpt id="3d4dce36-7acc-4f74-9ef7-059c8cbc5fb7">&lt;code&gt;</bpt>using<ept id="3d4dce36-7acc-4f74-9ef7-059c8cbc5fb7">&lt;/code&gt;</ept> keyword to provide scope for the usage of the object.</source>
          <target state="new">C\# includes the
<bpt id="7e46727c-4c0b-4e45-8944-06ff37c46678">&lt;code&gt;</bpt>new<ept id="7e46727c-4c0b-4e45-8944-06ff37c46678">&lt;/code&gt;</ept> keyword to allocate memory in terms of a particular type, and the
<bpt id="3d4dce36-7acc-4f74-9ef7-059c8cbc5fb7">&lt;code&gt;</bpt>using<ept id="3d4dce36-7acc-4f74-9ef7-059c8cbc5fb7">&lt;/code&gt;</ept> keyword to provide scope for the usage of the object.</target>
        </trans-unit>
        <trans-unit id="aaafc758-1977-410a-9df4-6195122891bb" xml:space="preserve">
          <source>The GC
operates on a lazy approach to memory management, preferring application
throughput to the immediate collection of memory.</source>
          <target state="new">The GC
operates on a lazy approach to memory management, preferring application
throughput to the immediate collection of memory.</target>
        </trans-unit>
        <trans-unit id="eb8bef43-13b3-4a01-b81e-52043704a5b4" xml:space="preserve">
          <source>The following two lines both allocate memory:</source>
          <target state="new">The following two lines both allocate memory:</target>
        </trans-unit>
        <trans-unit id="494605e2-d28e-450b-ba45-0b6fdf1298d4" xml:space="preserve">
          <source>There is no analogous keyword to de-allocate memory, as de-allocation
happens automatically when the garbage collector reclaims the memory
through its scheduled running.</source>
          <target state="new">There is no analogous keyword to de-allocate memory, as de-allocation
happens automatically when the garbage collector reclaims the memory
through its scheduled running.</target>
        </trans-unit>
        <trans-unit id="53c7b2e9-ef58-4b07-8707-9b64e56ff00d" xml:space="preserve">
          <source>Method variables normally go out of scope once a method completes, at
which point they can be collected.</source>
          <target state="new">Method variables normally go out of scope once a method completes, at
which point they can be collected.</target>
        </trans-unit>
        <trans-unit id="080af8f6-e534-4e4c-a26f-e48fd2bbd728" xml:space="preserve">
          <source>However, you can indicate to the GC
that a particular object is out of scope sooner than method exit using
the <bpt id="7f1bda8f-7fb7-4d71-9f35-6e5de2af9bc1">&lt;code&gt;</bpt>using<ept id="7f1bda8f-7fb7-4d71-9f35-6e5de2af9bc1">&lt;/code&gt;</ept> statement.</source>
          <target state="new">However, you can indicate to the GC
that a particular object is out of scope sooner than method exit using
the <bpt id="7f1bda8f-7fb7-4d71-9f35-6e5de2af9bc1">&lt;code&gt;</bpt>using<ept id="7f1bda8f-7fb7-4d71-9f35-6e5de2af9bc1">&lt;/code&gt;</ept> statement.</target>
        </trans-unit>
        <trans-unit id="2094277e-105b-4a36-9420-01027cec817b" xml:space="preserve">
          <source>Once the <bpt id="2159e9a4-c3d9-429d-a43d-70d299af19ae">&lt;code&gt;</bpt>using<ept id="2159e9a4-c3d9-429d-a43d-70d299af19ae">&lt;/code&gt;</ept> block completes, the GC will know that the <bpt id="ff428608-303a-41cd-83a4-97b6a29a2d64">&lt;code&gt;</bpt>stream<ept id="ff428608-303a-41cd-83a4-97b6a29a2d64">&lt;/code&gt;</ept>
object in the example above is free to be collected and its memory
reclaimed.</source>
          <target state="new">Once the <bpt id="2159e9a4-c3d9-429d-a43d-70d299af19ae">&lt;code&gt;</bpt>using<ept id="2159e9a4-c3d9-429d-a43d-70d299af19ae">&lt;/code&gt;</ept> block completes, the GC will know that the <bpt id="ff428608-303a-41cd-83a4-97b6a29a2d64">&lt;code&gt;</bpt>stream<ept id="ff428608-303a-41cd-83a4-97b6a29a2d64">&lt;/code&gt;</ept>
object in the example above is free to be collected and its memory
reclaimed.</target>
        </trans-unit>
        <trans-unit id="7c490ccd-46c9-4e5d-aca4-96f1e2c0a2ad" xml:space="preserve">
          <source>One of the less obvious but quite far-reaching features that a garbage
collector enables is memory safety.</source>
          <target state="new">One of the less obvious but quite far-reaching features that a garbage
collector enables is memory safety.</target>
        </trans-unit>
        <trans-unit id="1859284d-980f-429a-a3ac-b75aa2cfb414" xml:space="preserve">
          <source>The invariant of memory safety is
very simple: a program is memory safe if it accesses only memory that
has been allocated (and not freed).</source>
          <target state="new">The invariant of memory safety is
very simple: a program is memory safe if it accesses only memory that
has been allocated (and not freed).</target>
        </trans-unit>
        <trans-unit id="f88d82ac-2be6-43f9-99aa-69a675e661e6" xml:space="preserve">
          <source>Dangling pointers are always bugs,
and tracking them down is often quite difficult.</source>
          <target state="new">Dangling pointers are always bugs,
and tracking them down is often quite difficult.</target>
        </trans-unit>
        <trans-unit id="72e5836c-5c59-40a5-9b8c-2d84566196a7" xml:space="preserve">
          <source>The .NET runtime provides additional services, to complete the promise
of memory safety, not naturally offered by a GC.</source>
          <target state="new">The .NET runtime provides additional services, to complete the promise
of memory safety, not naturally offered by a GC.</target>
        </trans-unit>
        <trans-unit id="5191f834-f2e2-4120-a1b9-938070c77b47" xml:space="preserve">
          <source>It ensures that
programs do not index off the end of an array or accessing a phantom
field off the end of an object.</source>
          <target state="new">It ensures that
programs do not index off the end of an array or accessing a phantom
field off the end of an object.</target>
        </trans-unit>
        <trans-unit id="5e567775-4847-4f93-86e6-4f02952cdb1c" xml:space="preserve">
          <source>The following example will throw as a result of memory safety.</source>
          <target state="new">The following example will throw as a result of memory safety.</target>
        </trans-unit>
        <trans-unit id="baaa7825-ef02-4af0-9840-cb2220c60cec" xml:space="preserve">
          <source>Type Safety</source>
          <target state="new">Type Safety</target>
        </trans-unit>
        <trans-unit id="231358dd-e8cd-4a2f-ad73-cbc96e34ac4d" xml:space="preserve">
          <source>Objects are allocated in terms of types.</source>
          <target state="new">Objects are allocated in terms of types.</target>
        </trans-unit>
        <trans-unit id="a6669134-8239-4792-9353-57ca337e8ec1" xml:space="preserve">
          <source>The only operations allowed for
a given object, and the memory it consumes, are those of its type.</source>
          <target state="new">The only operations allowed for
a given object, and the memory it consumes, are those of its type.</target>
        </trans-unit>
        <trans-unit id="a72063d5-d85b-41e3-9e6b-989ee6518b86" xml:space="preserve">
          <source>A
<bpt id="e4ee4f3e-7381-413f-b9b1-6880b54e7b7d">&lt;code&gt;</bpt>Dog<ept id="e4ee4f3e-7381-413f-b9b1-6880b54e7b7d">&lt;/code&gt;</ept> type may have <bpt id="1bd0d88e-5a65-49a0-ac1b-3fc809ef4c87">&lt;code&gt;</bpt>Jump<ept id="1bd0d88e-5a65-49a0-ac1b-3fc809ef4c87">&lt;/code&gt;</ept> and <bpt id="d48091fb-3183-48a6-a648-cb47fa0912df">&lt;code&gt;</bpt>WagTail<ept id="d48091fb-3183-48a6-a648-cb47fa0912df">&lt;/code&gt;</ept> methods, but not likely a
<bpt id="da65c315-3eb9-459f-8d4c-664d37659687">&lt;code&gt;</bpt>SumTotal<ept id="da65c315-3eb9-459f-8d4c-664d37659687">&lt;/code&gt;</ept> method.</source>
          <target state="new">A
<bpt id="e4ee4f3e-7381-413f-b9b1-6880b54e7b7d">&lt;code&gt;</bpt>Dog<ept id="e4ee4f3e-7381-413f-b9b1-6880b54e7b7d">&lt;/code&gt;</ept> type may have <bpt id="1bd0d88e-5a65-49a0-ac1b-3fc809ef4c87">&lt;code&gt;</bpt>Jump<ept id="1bd0d88e-5a65-49a0-ac1b-3fc809ef4c87">&lt;/code&gt;</ept> and <bpt id="d48091fb-3183-48a6-a648-cb47fa0912df">&lt;code&gt;</bpt>WagTail<ept id="d48091fb-3183-48a6-a648-cb47fa0912df">&lt;/code&gt;</ept> methods, but not likely a
<bpt id="da65c315-3eb9-459f-8d4c-664d37659687">&lt;code&gt;</bpt>SumTotal<ept id="da65c315-3eb9-459f-8d4c-664d37659687">&lt;/code&gt;</ept> method.</target>
        </trans-unit>
        <trans-unit id="83b13f12-133a-4759-9559-5dd178915660" xml:space="preserve">
          <source>A program can only call the declared methods of a
given type.</source>
          <target state="new">A program can only call the declared methods of a
given type.</target>
        </trans-unit>
        <trans-unit id="a1242574-ff18-4ac0-97bb-ec8eaa6b4d3f" xml:space="preserve">
          <source>All other calls will result either in a compile-time error
or a run-time exception (in case of using dynamic features or <bpt id="7b37a2f6-2549-44f3-80b8-c2699a888d78">&lt;code&gt;</bpt>object<ept id="7b37a2f6-2549-44f3-80b8-c2699a888d78">&lt;/code&gt;</ept>).</source>
          <target state="new">All other calls will result either in a compile-time error
or a run-time exception (in case of using dynamic features or <bpt id="7b37a2f6-2549-44f3-80b8-c2699a888d78">&lt;code&gt;</bpt>object<ept id="7b37a2f6-2549-44f3-80b8-c2699a888d78">&lt;/code&gt;</ept>).</target>
        </trans-unit>
        <trans-unit id="adc4e274-c8b4-4d83-98b3-b59bfe394914" xml:space="preserve">
          <source>.NET languages can be object-oriented, with hierarchies of base and
derived classes.</source>
          <target state="new">.NET languages can be object-oriented, with hierarchies of base and
derived classes.</target>
        </trans-unit>
        <trans-unit id="981c495b-46f0-411a-8c75-f4914bd12c30" xml:space="preserve">
          <source>The .NET runtime will only allow object casts and calls
that align with the object hierarchy.</source>
          <target state="new">The .NET runtime will only allow object casts and calls
that align with the object hierarchy.</target>
        </trans-unit>
        <trans-unit id="959a28c5-8d18-44a6-9593-09852c725bc9" xml:space="preserve">
          <source>Remember that every type defined
in any .NET language derives from the core <bpt id="bc4b7217-024a-4e16-9a25-e68179bbb9d4">&lt;code&gt;</bpt>object<ept id="bc4b7217-024a-4e16-9a25-e68179bbb9d4">&lt;/code&gt;</ept> type.</source>
          <target state="new">Remember that every type defined
in any .NET language derives from the core <bpt id="bc4b7217-024a-4e16-9a25-e68179bbb9d4">&lt;code&gt;</bpt>object<ept id="bc4b7217-024a-4e16-9a25-e68179bbb9d4">&lt;/code&gt;</ept> type.</target>
        </trans-unit>
        <trans-unit id="8ab84272-99f2-4493-a008-8d44e21b07bc" xml:space="preserve">
          <source>Type safety is also used to help enforce encapsulation by guaranteeing
the fidelity of the accessor keywords.</source>
          <target state="new">Type safety is also used to help enforce encapsulation by guaranteeing
the fidelity of the accessor keywords.</target>
        </trans-unit>
        <trans-unit id="575ded31-34bb-46a8-a058-394058bf00dd" xml:space="preserve">
          <source>Accessor keywords are artifacts
which control access to members of a given type by other code.</source>
          <target state="new">Accessor keywords are artifacts
which control access to members of a given type by other code.</target>
        </trans-unit>
        <trans-unit id="440692ef-2387-407b-b4de-2bca46d6c644" xml:space="preserve">
          <source>These are
usually used for various kinds of data within a type that are used to
manage its behavior.</source>
          <target state="new">These are
usually used for various kinds of data within a type that are used to
manage its behavior.</target>
        </trans-unit>
        <trans-unit id="37ab0bb1-1011-4084-a73b-3d89739480ae" xml:space="preserve">
          <source>Some .NET languages support <bpt id="7fe0ce47-9cde-43ef-99f0-5040ca7f994c">&lt;strong&gt;</bpt>type inference<ept id="7fe0ce47-9cde-43ef-99f0-5040ca7f994c">&lt;/strong&gt;</ept>.</source>
          <target state="new">Some .NET languages support <bpt id="7fe0ce47-9cde-43ef-99f0-5040ca7f994c">&lt;strong&gt;</bpt>type inference<ept id="7fe0ce47-9cde-43ef-99f0-5040ca7f994c">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="05498eb5-4776-4e57-aa79-6236b9b48f4b" xml:space="preserve">
          <source>Type inference means
that the compiler will deduce the type of the expression on the
left-hand side from the expression on the right-hand side.</source>
          <target state="new">Type inference means
that the compiler will deduce the type of the expression on the
left-hand side from the expression on the right-hand side.</target>
        </trans-unit>
        <trans-unit id="a3226a54-8a76-464f-8723-593bb495af69" xml:space="preserve">
          <source>This doesn't
mean that the type safety is broken or avoided.</source>
          <target state="new">This doesn't
mean that the type safety is broken or avoided.</target>
        </trans-unit>
        <trans-unit id="bc6b40cd-3b5b-4597-9ac4-cf7067552d11" xml:space="preserve">
          <source>The resulting type
<bpt id="7bdb0f4f-b592-44dd-991c-2a22b68004a4">&lt;strong&gt;</bpt>has<ept id="7bdb0f4f-b592-44dd-991c-2a22b68004a4">&lt;/strong&gt;</ept> a strong type with everything that implies.</source>
          <target state="new">The resulting type
<bpt id="7bdb0f4f-b592-44dd-991c-2a22b68004a4">&lt;strong&gt;</bpt>has<ept id="7bdb0f4f-b592-44dd-991c-2a22b68004a4">&lt;/strong&gt;</ept> a strong type with everything that implies.</target>
        </trans-unit>
        <trans-unit id="74a9d05d-5381-45e6-8df0-3217efa3f0f6" xml:space="preserve">
          <source>Let's rewrite the
first two lines of the previous example to introduce type inference.</source>
          <target state="new">Let's rewrite the
first two lines of the previous example to introduce type inference.</target>
        </trans-unit>
        <trans-unit id="5c029242-26ef-4d4d-989d-550af83b8266" xml:space="preserve">
          <source>You
will note that the rest of the example is completely the same.</source>
          <target state="new">You
will note that the rest of the example is completely the same.</target>
        </trans-unit>
        <trans-unit id="50a9a3b5-443e-465f-8f34-4d3d170a0d26" xml:space="preserve">
          <source>Delegates and Lambdas</source>
          <target state="new">Delegates and Lambdas</target>
        </trans-unit>
        <trans-unit id="0d33d523-1788-434f-bb7d-035b2c5148c7" xml:space="preserve">
          <source>Delegates are like C++ function pointers, with a big difference that
they are type safe.</source>
          <target state="new">Delegates are like C++ function pointers, with a big difference that
they are type safe.</target>
        </trans-unit>
        <trans-unit id="6d6dbe8d-ee17-4314-a91e-36e329cd2711" xml:space="preserve">
          <source>They are a kind of disconnected method within the
CLR type system.</source>
          <target state="new">They are a kind of disconnected method within the
CLR type system.</target>
        </trans-unit>
        <trans-unit id="eb949e95-55b0-4d15-b173-e257c732d789" xml:space="preserve">
          <source>Regular methods are attached to a class and only
directly callable through static or instance calling conventions.</source>
          <target state="new">Regular methods are attached to a class and only
directly callable through static or instance calling conventions.</target>
        </trans-unit>
        <trans-unit id="c451ac72-a140-4bf6-8f5c-93e725a1382c" xml:space="preserve">
          <source>Delegates are used in various APIs and places in the .NET world,
especially through lambda expressions, which are a cornerstone of Linq.</source>
          <target state="new">Delegates are used in various APIs and places in the .NET world,
especially through lambda expressions, which are a cornerstone of Linq.</target>
        </trans-unit>
        <trans-unit id="7087b663-28fc-4c69-b3ea-004f3c49e96b" xml:space="preserve">
          <source>Read more about it in the delegates-lambdas document.</source>
          <target state="new">Read more about it in the delegates-lambdas document.</target>
        </trans-unit>
        <trans-unit id="a1fbdfc2-cc95-4e3c-89c4-b400f3514727" xml:space="preserve">
          <source>Generic Types (Generics)</source>
          <target state="new">Generic Types (Generics)</target>
        </trans-unit>
        <trans-unit id="8349a4e0-4b83-44cf-8b63-da8f96601324" xml:space="preserve">
          <source>Generic types, a.k.a "generics" are a feature that was added in .NET
Framework 2.0.</source>
          <target state="new">Generic types, a.k.a "generics" are a feature that was added in .NET
Framework 2.0.</target>
        </trans-unit>
        <trans-unit id="470c7a14-dc53-4eab-be8a-cee6f11819ce" xml:space="preserve">
          <source>In short, generics allow the programmer to introduce a
"type parameter" when designing their classes, that will allow the
client code (i.e. the users of the type) to specify the exact type to
use in place of the type parameter.</source>
          <target state="new">In short, generics allow the programmer to introduce a
"type parameter" when designing their classes, that will allow the
client code (i.e. the users of the type) to specify the exact type to
use in place of the type parameter.</target>
        </trans-unit>
        <trans-unit id="36c8a566-dfea-4bc6-8014-51f67294bc66" xml:space="preserve">
          <source>Generics were added in order to help programmers implement generic data
structures.</source>
          <target state="new">Generics were added in order to help programmers implement generic data
structures.</target>
        </trans-unit>
        <trans-unit id="12aa6832-ffcb-4412-b54d-240ebe297557" xml:space="preserve">
          <source>Before their arrival, in order for a, say, List type to be
generic, it would have to work with elements that were of type object.</source>
          <target state="new">Before their arrival, in order for a, say, List type to be
generic, it would have to work with elements that were of type object.</target>
        </trans-unit>
        <trans-unit id="a1d4e803-24be-44e2-97bb-e6dadb98a5ab" xml:space="preserve">
          <source>This would have various performance as well as semantic problems, not to
mention possible subtle runtime errors.</source>
          <target state="new">This would have various performance as well as semantic problems, not to
mention possible subtle runtime errors.</target>
        </trans-unit>
        <trans-unit id="9bb310fb-cbf7-4b80-b982-fe632ad83f39" xml:space="preserve">
          <source>The most notorious of the latter
is when a data structure contains, for instance, both integers and
strings, and an InvalidCastException is thrown on working with the
list's members.</source>
          <target state="new">The most notorious of the latter
is when a data structure contains, for instance, both integers and
strings, and an InvalidCastException is thrown on working with the
list's members.</target>
        </trans-unit>
        <trans-unit id="8dbb8727-d711-4de0-886f-5b44c5f6e8b5" xml:space="preserve">
          <source>The below sample shows a basic program running using an instance of
List&amp;lt;T&amp;gt; types.</source>
          <target state="new">The below sample shows a basic program running using an instance of
List&amp;lt;T&amp;gt; types.</target>
        </trans-unit>
        <trans-unit id="0f3f3093-e980-4092-a284-5a3800b25704" xml:space="preserve">
          <source>Read more about it in the generics document.</source>
          <target state="new">Read more about it in the generics document.</target>
        </trans-unit>
        <trans-unit id="5d964478-d61b-4bc7-81ec-76b20955517c" xml:space="preserve">
          <source>Async Programming</source>
          <target state="new">Async Programming</target>
        </trans-unit>
        <trans-unit id="b3c798a9-2c74-4d2d-b469-70b2d7743f49" xml:space="preserve">
          <source>Async is a first-class concept within .NET, with async support in the
runtime, the framework libraries and various .NET languages.</source>
          <target state="new">Async is a first-class concept within .NET, with async support in the
runtime, the framework libraries and various .NET languages.</target>
        </trans-unit>
        <trans-unit id="b9133087-2baa-4aa9-ac77-45d6dafb48de" xml:space="preserve">
          <source>Async is
based off of the <bpt id="223d40fc-8384-4bfb-9b67-18516bed72e8">&lt;code&gt;</bpt>Task<ept id="223d40fc-8384-4bfb-9b67-18516bed72e8">&lt;/code&gt;</ept> concept, which encapsulates a set of operations
to be completed.</source>
          <target state="new">Async is
based off of the <bpt id="223d40fc-8384-4bfb-9b67-18516bed72e8">&lt;code&gt;</bpt>Task<ept id="223d40fc-8384-4bfb-9b67-18516bed72e8">&lt;/code&gt;</ept> concept, which encapsulates a set of operations
to be completed.</target>
        </trans-unit>
        <trans-unit id="8740f035-95cc-4729-978f-aa5c6b78082a" xml:space="preserve">
          <source>Tasks are distinct from threads and may not rely on
threads or require CPU time much at all, particularly for I/O-bound
tasks.</source>
          <target state="new">Tasks are distinct from threads and may not rely on
threads or require CPU time much at all, particularly for I/O-bound
tasks.</target>
        </trans-unit>
        <trans-unit id="b0a1baab-2b63-453a-8fea-90a2aca9c447" xml:space="preserve">
          <source>TODO: Elaborate on Task concept.</source>
          <target state="new">TODO: Elaborate on Task concept.</target>
        </trans-unit>
        <trans-unit id="d2b83764-486f-4f9a-9c6c-b0fd1861127a" xml:space="preserve">
          <source>C\# includes special treatment for async, including the special keyword
<bpt id="0c4a44de-f6be-4900-bf82-282dc40753ae">&lt;code&gt;</bpt>await<ept id="0c4a44de-f6be-4900-bf82-282dc40753ae">&lt;/code&gt;</ept> for managing tasks.</source>
          <target state="new">C\# includes special treatment for async, including the special keyword
<bpt id="0c4a44de-f6be-4900-bf82-282dc40753ae">&lt;code&gt;</bpt>await<ept id="0c4a44de-f6be-4900-bf82-282dc40753ae">&lt;/code&gt;</ept> for managing tasks.</target>
        </trans-unit>
        <trans-unit id="40b9bb61-4cf1-4b0c-a7d7-0477469f90ff" xml:space="preserve">
          <source>The following example demonstrates calling a
web endpoint as an async operation.</source>
          <target state="new">The following example demonstrates calling a
web endpoint as an async operation.</target>
        </trans-unit>
        <trans-unit id="c1dd6b12-59de-4974-a430-57ceb5734af8" xml:space="preserve">
          <source>The call to <bpt id="f791cf69-083a-4138-af62-1ffb27159b08">&lt;code&gt;</bpt>client.GetStringAsync(url)<ept id="f791cf69-083a-4138-af62-1ffb27159b08">&lt;/code&gt;</ept> does not block, but instead
immediately yields by returning a <bpt id="ee30d0e7-06b9-44eb-b67f-559a3d13a8f5">&lt;code&gt;</bpt>Task<ept id="ee30d0e7-06b9-44eb-b67f-559a3d13a8f5">&lt;/code&gt;</ept>.</source>
          <target state="new">The call to <bpt id="f791cf69-083a-4138-af62-1ffb27159b08">&lt;code&gt;</bpt>client.GetStringAsync(url)<ept id="f791cf69-083a-4138-af62-1ffb27159b08">&lt;/code&gt;</ept> does not block, but instead
immediately yields by returning a <bpt id="ee30d0e7-06b9-44eb-b67f-559a3d13a8f5">&lt;code&gt;</bpt>Task<ept id="ee30d0e7-06b9-44eb-b67f-559a3d13a8f5">&lt;/code&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="3705721d-5af3-4a36-9e03-ec01eb565a4c" xml:space="preserve">
          <source>Computation resumes and the
call returns the requested string when the network activity has
completed.</source>
          <target state="new">Computation resumes and the
call returns the requested string when the network activity has
completed.</target>
        </trans-unit>
        <trans-unit id="799cb06d-9ce1-4f38-b098-f892b9a05176" xml:space="preserve">
          <source>Language Integrated Query (LINQ)</source>
          <target state="new">Language Integrated Query (LINQ)</target>
        </trans-unit>
        <trans-unit id="3d84fef7-7cc6-44c2-861e-fcd0dfa9cde0" xml:space="preserve">
          <source>.NET programs typically operate on some form of data.</source>
          <target state="new">.NET programs typically operate on some form of data.</target>
        </trans-unit>
        <trans-unit id="fa0794f0-a82e-4e50-b2ae-05c2d876e0ea" xml:space="preserve">
          <source>The data can be
database-resident or in the form of objects (sometimes called POCOs for
"Plain Old CLR Objects").</source>
          <target state="new">The data can be
database-resident or in the form of objects (sometimes called POCOs for
"Plain Old CLR Objects").</target>
        </trans-unit>
        <trans-unit id="affd5d99-fe71-4547-95c1-0e60db4b7068" xml:space="preserve">
          <source>LINQ provides a language-integrated uniform
query model over data, independent of the source.</source>
          <target state="new">LINQ provides a language-integrated uniform
query model over data, independent of the source.</target>
        </trans-unit>
        <trans-unit id="d0c05a0a-d40f-4825-b2bb-55ac64e602c9" xml:space="preserve">
          <source>Linq providers bridge
the gap between the uniform query model and the form of the data, such
as SQL Server tables, XML documents, standard collections like List and
more.</source>
          <target state="new">Linq providers bridge
the gap between the uniform query model and the form of the data, such
as SQL Server tables, XML documents, standard collections like List and
more.</target>
        </trans-unit>
        <trans-unit id="761f811a-ee21-480d-b582-d052864e47d2" xml:space="preserve">
          <source>The follow examples demonstrate various uses of LINQ to query different
forms of data.</source>
          <target state="new">The follow examples demonstrate various uses of LINQ to query different
forms of data.</target>
        </trans-unit>
        <trans-unit id="c82f1aa3-5c07-4dbe-a3bb-8c4235c06d67" xml:space="preserve">
          <source>TODO: finish the section, link to a more detailed document.</source>
          <target state="new">TODO: finish the section, link to a more detailed document.</target>
        </trans-unit>
        <trans-unit id="3bf0720b-4e28-45bb-82d7-a7d60152e171" xml:space="preserve">
          <source>Dynamic language features</source>
          <target state="new">Dynamic language features</target>
        </trans-unit>
        <trans-unit id="1f06d60c-08dc-4d89-9f05-b82c17224fc8" xml:space="preserve">
          <source>TODO: finish section</source>
          <target state="new">TODO: finish section</target>
        </trans-unit>
        <trans-unit id="02300b72-eaea-4dba-b99f-d2d6a05db459" xml:space="preserve">
          <source>Code contracts</source>
          <target state="new">Code contracts</target>
        </trans-unit>
        <trans-unit id="ec2d0c07-864a-41ae-ab46-843c18f05577" xml:space="preserve">
          <source>TODO: finish section</source>
          <target state="new">TODO: finish section</target>
        </trans-unit>
        <trans-unit id="0d278189-3bfd-41d5-96d5-7c085d94c735" xml:space="preserve">
          <source>Native Interoperability</source>
          <target state="new">Native Interoperability</target>
        </trans-unit>
        <trans-unit id="d224c436-3a75-405e-b260-1fd95318b65a" xml:space="preserve">
          <source>.NET provides low-level access to native APIs via the platform invoke or
P/Invoke facility.</source>
          <target state="new">.NET provides low-level access to native APIs via the platform invoke or
P/Invoke facility.</target>
        </trans-unit>
        <trans-unit id="db7bae0f-d34a-480e-9a75-a0b8839c4903" xml:space="preserve">
          <source>It enables a mapping of .NET types to native types,
which the .NET runtime marshalls before calling the native API.</source>
          <target state="new">It enables a mapping of .NET types to native types,
which the .NET runtime marshalls before calling the native API.</target>
        </trans-unit>
        <trans-unit id="0ce68ab9-87d0-4aa2-839c-973f85c2f54a" xml:space="preserve">
          <source>TODO: Examples.</source>
          <target state="new">TODO: Examples.</target>
        </trans-unit>
        <trans-unit id="35b40960-2317-4440-bc84-f08f8a35b01d" xml:space="preserve">
          <source>Higher-level native interop can be established with P/Invoke.</source>
          <target state="new">Higher-level native interop can be established with P/Invoke.</target>
        </trans-unit>
        <trans-unit id="e71dbed5-d348-481d-99a2-fff25326f0f5" xml:space="preserve">
          <source>The COM
and WinRT interop systems in the CLR are both built on top of P/Invoke.</source>
          <target state="new">The COM
and WinRT interop systems in the CLR are both built on top of P/Invoke.</target>
        </trans-unit>
        <trans-unit id="40d554a9-115f-4a49-849b-d1e80c1d0d31" xml:space="preserve">
          <source>The Java and Objective-C interop systems provided by Xamarin on top of
Mono are fundamentally the same.</source>
          <target state="new">The Java and Objective-C interop systems provided by Xamarin on top of
Mono are fundamentally the same.</target>
        </trans-unit>
        <trans-unit id="0a0e277e-b0da-4c60-ac9c-d42f48a5885d" xml:space="preserve">
          <source>Unsafe Code</source>
          <target state="new">Unsafe Code</target>
        </trans-unit>
        <trans-unit id="805e23e9-7442-498d-b648-ca45ae600a8c" xml:space="preserve">
          <source>The CLR enables the ability to acccess native memory and do pointer
arithmetic.</source>
          <target state="new">The CLR enables the ability to acccess native memory and do pointer
arithmetic.</target>
        </trans-unit>
        <trans-unit id="e5e4d6af-1e02-473e-aa4a-d96092e73692" xml:space="preserve">
          <source>These operations are needed for some algortithms and for
calling some native APIs.</source>
          <target state="new">These operations are needed for some algortithms and for
calling some native APIs.</target>
        </trans-unit>
        <trans-unit id="888361f0-e3f4-45c7-8fde-ca8b38290d35" xml:space="preserve">
          <source>The use of these capabilities is discouraged,
since you no longer get the benefit of verifiability, nor will your code
be allowed to run in all environments.</source>
          <target state="new">The use of these capabilities is discouraged,
since you no longer get the benefit of verifiability, nor will your code
be allowed to run in all environments.</target>
        </trans-unit>
        <trans-unit id="899d08d6-4d3c-4519-9171-29b4a470b054" xml:space="preserve">
          <source>The best practice is to confine
unsafe code as much as possible and that the vast majority of code is
type-safe.</source>
          <target state="new">The best practice is to confine
unsafe code as much as possible and that the vast majority of code is
type-safe.</target>
        </trans-unit>
        <trans-unit id="f70810f3-a25a-44c4-9afb-f1d25104fe73" xml:space="preserve">
          <source>TODO: Examples.</source>
          <target state="new">TODO: Examples.</target>
        </trans-unit>
        <trans-unit id="2ee5f363-5d68-4f09-b627-2cdb018f682c" xml:space="preserve">
          <source>Notes</source>
          <target state="new">Notes</target>
        </trans-unit>
        <trans-unit id="c771e004-25c7-442e-ba3e-da9efe02bcf9" xml:space="preserve">
          <source>The term ".NET runtime" is used throughout the document to accomodate
for the multiple implementations of .NET, such as CLR, Mono, IL2CPP and
others.</source>
          <target state="new">The term ".NET runtime" is used throughout the document to accomodate
for the multiple implementations of .NET, such as CLR, Mono, IL2CPP and
others.</target>
        </trans-unit>
        <trans-unit id="e1428437-1138-4944-af74-c864e60e03c5" xml:space="preserve">
          <source>The more specific names are only used if needed.</source>
          <target state="new">The more specific names are only used if needed.</target>
        </trans-unit>
        <trans-unit id="bf40571c-e3e4-469c-bc45-d2e336699b73" xml:space="preserve">
          <source>This document is not intended to be historical in nature, but describe
the .NET platform as it is now.</source>
          <target state="new">This document is not intended to be historical in nature, but describe
the .NET platform as it is now.</target>
        </trans-unit>
        <trans-unit id="7698303a-614e-43af-8321-68efaa6c0c69" xml:space="preserve">
          <source>It isn't important whether a .NET
feature has always been available or was only recently introduced, only
that it is important enough to highlight and discuss.</source>
          <target state="new">It isn't important whether a .NET
feature has always been available or was only recently introduced, only
that it is important enough to highlight and discuss.</target>
        </trans-unit>
        <trans-unit id="5304013b-399d-41bc-9bf9-f94516b1c66f" xml:space="preserve">
          <source>Just test</source>
          <target state="new">Just test</target>
        </trans-unit>
        <trans-unit id="6b5a1490-df6a-4192-99f5-5be3a6aeb3cd" xml:space="preserve">
          <source>Comments</source>
          <target state="new">Comments</target>
        </trans-unit>
        <trans-unit id="f5fd1395-8a36-418b-a264-2f77de4fbc9b" xml:space="preserve">
          <source>
  // CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE
  var disqus<bpt id="04e95b6b-b436-4aaf-9f0d-a770e512662b">&lt;em&gt;</bpt>shortname = 'devdivcn'; // required: replace example with your forum shortname
  // DON'T EDIT BELOW THIS LINE
  (function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus<ept id="04e95b6b-b436-4aaf-9f0d-a770e512662b">&lt;/em&gt;</ept>shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
  </source>
          <target state="new">
  // CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE
  var disqus<bpt id="04e95b6b-b436-4aaf-9f0d-a770e512662b">&lt;em&gt;</bpt>shortname = 'devdivcn'; // required: replace example with your forum shortname
  // DON'T EDIT BELOW THIS LINE
  (function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus<ept id="04e95b6b-b436-4aaf-9f0d-a770e512662b">&lt;/em&gt;</ept>shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
  })();
  </target>
        </trans-unit>
        <trans-unit id="ae800c9d-2d3f-4929-af9c-6c8c9ae714c3" xml:space="preserve">
          <source>Please enable JavaScript to view the </source>
          <target state="new">Please enable JavaScript to view the </target>
        </trans-unit>
        <trans-unit id="313c6b91-2090-487a-857e-dc27ef1f6d07" xml:space="preserve">
          <source>comments powered by Disqus.</source>
          <target state="new">comments powered by Disqus.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>