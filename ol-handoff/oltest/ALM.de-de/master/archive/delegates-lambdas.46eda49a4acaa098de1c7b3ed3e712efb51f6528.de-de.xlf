<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="de-de" original="foo.file" tool-id="b329f790-7e63-48ed-bf3f-b2e08876c379" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="b329f790-7e63-48ed-bf3f-b2e08876c379" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
      <olfilehash xmlns="">aa72de4c3ff6dea4282143dff932772bf5076204</olfilehash>
    </header>
    <body>
      <group id="9745cf0d-1d82-4baf-a4d9-86cb47dd4c4f">
        <trans-unit id="5f521dd5-a3d2-4106-926a-24ba79684403" xml:space="preserve">
          <source>Delegates and lambdas</source>
          <target state="new">Delegates and lambdas</target>
        </trans-unit>
        <trans-unit id="645a5df0-dfa1-44c9-9139-0674f39a7044" xml:space="preserve">
          <source>Delegates define a type, which specify a particular method signature.</source>
          <target state="new">Delegates define a type, which specify a particular method signature.</target>
        </trans-unit>
        <trans-unit id="eaa9be93-d546-410f-b74a-5107438d59e2" xml:space="preserve">
          <source>A method (static or instance) that satisfies this signature can be assigned to a variable of that type, then called directly (with the appropriate arguments) or passed as an argument itself to another method and then called.</source>
          <target state="new">A method (static or instance) that satisfies this signature can be assigned to a variable of that type, then called directly (with the appropriate arguments) or passed as an argument itself to another method and then called.</target>
        </trans-unit>
        <trans-unit id="3f2b08c8-27b2-4785-aa21-a345ba7eb423" xml:space="preserve">
          <source>The following example demonstrates delegate use.</source>
          <target state="new">The following example demonstrates delegate use.</target>
        </trans-unit>
        <trans-unit id="7a60917a-ff9c-4861-b0f0-ff3ab3775fae" xml:space="preserve">
          <source>On line 4 we create a delegate type of a certain signature, in this case a method that takes a string parameter and then returns a string parameter.</source>
          <target state="new">On line 4 we create a delegate type of a certain signature, in this case a method that takes a string parameter and then returns a string parameter.</target>
        </trans-unit>
        <trans-unit id="9de89e36-756f-44ff-8720-36201b80cc2e" xml:space="preserve">
          <source>On line 6, we define the implementation of the delegate by providing a method that has the exact same signature.</source>
          <target state="new">On line 6, we define the implementation of the delegate by providing a method that has the exact same signature.</target>
        </trans-unit>
        <trans-unit id="ba01cd30-932b-4b97-9e25-e23b14ac76be" xml:space="preserve">
          <source>On line 13, the method is assigned to a type that conforms to the <bpt id="a633bd78-e21c-4086-9b72-a357dc2c6e30">&lt;code&gt;</bpt>Reverse<ept id="a633bd78-e21c-4086-9b72-a357dc2c6e30">&lt;/code&gt;</ept> delegate.</source>
          <target state="new">On line 13, the method is assigned to a type that conforms to the <bpt id="a633bd78-e21c-4086-9b72-a357dc2c6e30">&lt;code&gt;</bpt>Reverse<ept id="a633bd78-e21c-4086-9b72-a357dc2c6e30">&lt;/code&gt;</ept> delegate.</target>
        </trans-unit>
        <trans-unit id="015cade2-f28f-4648-8932-69026383c5b3" xml:space="preserve">
          <source>Finally, on line 15 we invoke the delegate passing a string to be reversed.</source>
          <target state="new">Finally, on line 15 we invoke the delegate passing a string to be reversed.</target>
        </trans-unit>
        <trans-unit id="35da9057-4712-4c48-969c-fcd8925b85d6" xml:space="preserve">
          <source>In order to streamline the development process, .NET includes a set of delegate types that programmers can reuse and not have to create new types.
These are <bpt id="92ad06a9-fb31-4847-b65c-8b643778796f">&lt;code&gt;</bpt>Func&lt;&gt;<ept id="92ad06a9-fb31-4847-b65c-8b643778796f">&lt;/code&gt;</ept>, <bpt id="dd426dcc-20c5-47e1-95ef-b6a6fe925268">&lt;code&gt;</bpt>Action&lt;&gt;<ept id="dd426dcc-20c5-47e1-95ef-b6a6fe925268">&lt;/code&gt;</ept> and <bpt id="e98f47a6-4d2d-460a-a973-6acc029eda83">&lt;code&gt;</bpt>Predicate&lt;&gt;<ept id="e98f47a6-4d2d-460a-a973-6acc029eda83">&lt;/code&gt;</ept>, and they can be used in various places throughout the .NET APIs without the need to define new delegate types.
Of course, there are some differences between the three as you will see in their signatures which mostly have to do with the way they were meant to be used:</source>
          <target state="new">In order to streamline the development process, .NET includes a set of delegate types that programmers can reuse and not have to create new types.
These are <bpt id="92ad06a9-fb31-4847-b65c-8b643778796f">&lt;code&gt;</bpt>Func&lt;&gt;<ept id="92ad06a9-fb31-4847-b65c-8b643778796f">&lt;/code&gt;</ept>, <bpt id="dd426dcc-20c5-47e1-95ef-b6a6fe925268">&lt;code&gt;</bpt>Action&lt;&gt;<ept id="dd426dcc-20c5-47e1-95ef-b6a6fe925268">&lt;/code&gt;</ept> and <bpt id="e98f47a6-4d2d-460a-a973-6acc029eda83">&lt;code&gt;</bpt>Predicate&lt;&gt;<ept id="e98f47a6-4d2d-460a-a973-6acc029eda83">&lt;/code&gt;</ept>, and they can be used in various places throughout the .NET APIs without the need to define new delegate types.
Of course, there are some differences between the three as you will see in their signatures which mostly have to do with the way they were meant to be used:</target>
        </trans-unit>
        <trans-unit id="4dff0a13-c3b3-4909-80f3-c205132a55b1" xml:space="preserve">
          <source><bpt id="a1ada9fb-b878-4256-9c14-c9b9c7ce6e41">&lt;code&gt;</bpt>Action&lt;&gt;<ept id="a1ada9fb-b878-4256-9c14-c9b9c7ce6e41">&lt;/code&gt;</ept> is used when there is a need to perform an action using the arguments of the delegate.</source>
          <target state="new"><bpt id="a1ada9fb-b878-4256-9c14-c9b9c7ce6e41">&lt;code&gt;</bpt>Action&lt;&gt;<ept id="a1ada9fb-b878-4256-9c14-c9b9c7ce6e41">&lt;/code&gt;</ept> is used when there is a need to perform an action using the arguments of the delegate.</target>
        </trans-unit>
        <trans-unit id="2f60288e-9d0a-422a-995b-713c31f7281b" xml:space="preserve">
          <source><bpt id="fc1680be-eb3d-41ac-9f21-9af3a2fc8542">&lt;code&gt;</bpt>Func&lt;&gt;<ept id="fc1680be-eb3d-41ac-9f21-9af3a2fc8542">&lt;/code&gt;</ept> is used usually when you have a transformation on hand, that is, you need to transform the arguments of the delegate into a different result. Projections are a prime example of this.</source>
          <target state="new"><bpt id="fc1680be-eb3d-41ac-9f21-9af3a2fc8542">&lt;code&gt;</bpt>Func&lt;&gt;<ept id="fc1680be-eb3d-41ac-9f21-9af3a2fc8542">&lt;/code&gt;</ept> is used usually when you have a transformation on hand, that is, you need to transform the arguments of the delegate into a different result. Projections are a prime example of this.</target>
        </trans-unit>
        <trans-unit id="7125400a-1c51-4fc0-9c54-fe52349045dc" xml:space="preserve">
          <source><bpt id="3bcf734f-bb18-4b68-bf4f-3b300590f1a2">&lt;code&gt;</bpt>Predicate&lt;&gt;<ept id="3bcf734f-bb18-4b68-bf4f-3b300590f1a2">&lt;/code&gt;</ept> is used when you need to determine if the argument satisfies the condition of the delegate. It can also be written as a <bpt id="439332a3-cc03-4454-8253-80ea09d9b5d8">&lt;code&gt;</bpt>Func&lt;T, bool&gt;<ept id="439332a3-cc03-4454-8253-80ea09d9b5d8">&lt;/code&gt;</ept>.</source>
          <target state="new"><bpt id="3bcf734f-bb18-4b68-bf4f-3b300590f1a2">&lt;code&gt;</bpt>Predicate&lt;&gt;<ept id="3bcf734f-bb18-4b68-bf4f-3b300590f1a2">&lt;/code&gt;</ept> is used when you need to determine if the argument satisfies the condition of the delegate. It can also be written as a <bpt id="439332a3-cc03-4454-8253-80ea09d9b5d8">&lt;code&gt;</bpt>Func&lt;T, bool&gt;<ept id="439332a3-cc03-4454-8253-80ea09d9b5d8">&lt;/code&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="11787324-2275-48e6-b347-8b10453a5915" xml:space="preserve">
          <source>We can now take our example above and rewrite it using the <bpt id="4a22ea6d-15e4-4483-a6af-c11d0194c50a">&lt;code&gt;</bpt>Func&lt;&gt;<ept id="4a22ea6d-15e4-4483-a6af-c11d0194c50a">&lt;/code&gt;</ept> delegate instead of a custom type.
The program will continue running exactly the same.</source>
          <target state="new">We can now take our example above and rewrite it using the <bpt id="4a22ea6d-15e4-4483-a6af-c11d0194c50a">&lt;code&gt;</bpt>Func&lt;&gt;<ept id="4a22ea6d-15e4-4483-a6af-c11d0194c50a">&lt;/code&gt;</ept> delegate instead of a custom type.
The program will continue running exactly the same.</target>
        </trans-unit>
        <trans-unit id="d14954ee-04d7-4169-9220-1eb1d5c8cc2c" xml:space="preserve">
          <source>For this simple example, having a method defined outside of the Main() method seems a bit superfluous.</source>
          <target state="new">For this simple example, having a method defined outside of the Main() method seems a bit superfluous.</target>
        </trans-unit>
        <trans-unit id="19eb9688-efca-478c-bb06-f6275e2fc65e" xml:space="preserve">
          <source>It is because of this that .NET Framework 2.0 introduced the concept of <bpt id="58f25e7d-7e1e-4164-9777-65f8e2990c7e">&lt;strong&gt;</bpt>anonymous delegates<ept id="58f25e7d-7e1e-4164-9777-65f8e2990c7e">&lt;/strong&gt;</ept>.</source>
          <target state="new">It is because of this that .NET Framework 2.0 introduced the concept of <bpt id="58f25e7d-7e1e-4164-9777-65f8e2990c7e">&lt;strong&gt;</bpt>anonymous delegates<ept id="58f25e7d-7e1e-4164-9777-65f8e2990c7e">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="cff93262-7879-4b8f-840c-c7feb973a622" xml:space="preserve">
          <source>With their support you are able to create "inline" delegates without having to specify any additional type or method.</source>
          <target state="new">With their support you are able to create "inline" delegates without having to specify any additional type or method.</target>
        </trans-unit>
        <trans-unit id="ac1d4c5c-d0c9-4910-ba54-4d6ce138591d" xml:space="preserve">
          <source>You simply inline the definition of the delegate where you need it.</source>
          <target state="new">You simply inline the definition of the delegate where you need it.</target>
        </trans-unit>
        <trans-unit id="5b56ae32-3ea0-4280-9606-7f1f5367f025" xml:space="preserve">
          <source>For an example, we are going to switch it up and use our anonymous delegate to filter out a list of only even numbers and then print them to the console.</source>
          <target state="new">For an example, we are going to switch it up and use our anonymous delegate to filter out a list of only even numbers and then print them to the console.</target>
        </trans-unit>
        <trans-unit id="d9be78f2-ce41-4058-b16d-ec3897ed841f" xml:space="preserve">
          <source>Notice the highlighted lines.
As you can see, the body of the delegate is just a set of expressions, as any other delegate.
But instead of it being a separate definition, we've introduced it <bpt id="97aabfc2-ce34-46f9-ac7a-ff82bcdc85f7">&lt;em&gt;</bpt>ad hoc<ept id="97aabfc2-ce34-46f9-ac7a-ff82bcdc85f7">&lt;/em&gt;</ept> in our call to the <bpt id="4bbdfa8d-4c8c-4ad5-9cea-db5119a3ef6f">&lt;code&gt;</bpt>FindAll()<ept id="4bbdfa8d-4c8c-4ad5-9cea-db5119a3ef6f">&lt;/code&gt;</ept> method of the <bpt id="5e7d7fb0-e47b-4ec5-a061-34f4cbf6fe0a">&lt;code&gt;</bpt>List&lt;T&gt;<ept id="5e7d7fb0-e47b-4ec5-a061-34f4cbf6fe0a">&lt;/code&gt;</ept> type.</source>
          <target state="new">Notice the highlighted lines.
As you can see, the body of the delegate is just a set of expressions, as any other delegate.
But instead of it being a separate definition, we've introduced it <bpt id="97aabfc2-ce34-46f9-ac7a-ff82bcdc85f7">&lt;em&gt;</bpt>ad hoc<ept id="97aabfc2-ce34-46f9-ac7a-ff82bcdc85f7">&lt;/em&gt;</ept> in our call to the <bpt id="4bbdfa8d-4c8c-4ad5-9cea-db5119a3ef6f">&lt;code&gt;</bpt>FindAll()<ept id="4bbdfa8d-4c8c-4ad5-9cea-db5119a3ef6f">&lt;/code&gt;</ept> method of the <bpt id="5e7d7fb0-e47b-4ec5-a061-34f4cbf6fe0a">&lt;code&gt;</bpt>List&lt;T&gt;<ept id="5e7d7fb0-e47b-4ec5-a061-34f4cbf6fe0a">&lt;/code&gt;</ept> type.</target>
        </trans-unit>
        <trans-unit id="8e026d21-1f4b-4286-b673-85771e01384a" xml:space="preserve">
          <source>However, even with this approach, there is still much code that we can throw away.</source>
          <target state="new">However, even with this approach, there is still much code that we can throw away.</target>
        </trans-unit>
        <trans-unit id="7fd3d6d2-98ad-4ef8-9cce-ca9927a4b333" xml:space="preserve">
          <source>This is where <bpt id="101a2539-1e28-4215-a29d-1e6b6a537470">&lt;strong&gt;</bpt>lambda expressions<ept id="101a2539-1e28-4215-a29d-1e6b6a537470">&lt;/strong&gt;</ept> come into play.</source>
          <target state="new">This is where <bpt id="101a2539-1e28-4215-a29d-1e6b6a537470">&lt;strong&gt;</bpt>lambda expressions<ept id="101a2539-1e28-4215-a29d-1e6b6a537470">&lt;/strong&gt;</ept> come into play.</target>
        </trans-unit>
        <trans-unit id="5f0920a5-8847-41b1-9c73-466251d383aa" xml:space="preserve">
          <source>Lambda expressions, or just "lambdas" for short, were introduced first in C\# 3.0, as one of the core building blocks of Language Integrated Query (LINQ).</source>
          <target state="new">Lambda expressions, or just "lambdas" for short, were introduced first in C\# 3.0, as one of the core building blocks of Language Integrated Query (LINQ).</target>
        </trans-unit>
        <trans-unit id="b8d38049-9712-43fa-bd27-4f55c46ff9fa" xml:space="preserve">
          <source>They are just a more convenient syntax for using delegates.</source>
          <target state="new">They are just a more convenient syntax for using delegates.</target>
        </trans-unit>
        <trans-unit id="f4fb7e3d-6ed0-4819-aac2-e467fcd23a76" xml:space="preserve">
          <source>They declare a signature and a method body, but don't have an formal identity of their own, unless they are assigned to a delegate.</source>
          <target state="new">They declare a signature and a method body, but don't have an formal identity of their own, unless they are assigned to a delegate.</target>
        </trans-unit>
        <trans-unit id="df70c11b-56b5-4bac-b28c-734b3bbbb688" xml:space="preserve">
          <source>Unlike delegates, they can be directly assigned as the left-hand side of event registration or in various Linq clauses and methods.</source>
          <target state="new">Unlike delegates, they can be directly assigned as the left-hand side of event registration or in various Linq clauses and methods.</target>
        </trans-unit>
        <trans-unit id="a5971f79-bd6a-4e19-ba32-959ec3bf36cc" xml:space="preserve">
          <source>Since a lambda expression is just another way of specifying a delegate, we should be able to rewrite the above sample to use a lambda expression instead of an anonymous delegate.</source>
          <target state="new">Since a lambda expression is just another way of specifying a delegate, we should be able to rewrite the above sample to use a lambda expression instead of an anonymous delegate.</target>
        </trans-unit>
        <trans-unit id="26d79ef1-6bee-4697-a459-2c2c36f89c2a" xml:space="preserve">
          <source>If you take a look at the highlighted lines, you can see how a lambda expression looks like.</source>
          <target state="new">If you take a look at the highlighted lines, you can see how a lambda expression looks like.</target>
        </trans-unit>
        <trans-unit id="06fc5298-5c15-4175-9228-02c11c23addc" xml:space="preserve">
          <source>Again, it is just a <bpt id="9516b698-9355-4d41-86fe-08915d1132b0">&lt;strong&gt;</bpt>very<ept id="9516b698-9355-4d41-86fe-08915d1132b0">&lt;/strong&gt;</ept> convenient syntax for using delegates, so what happens under the covers is similar to what happens with the anonymous delegate.</source>
          <target state="new">Again, it is just a <bpt id="9516b698-9355-4d41-86fe-08915d1132b0">&lt;strong&gt;</bpt>very<ept id="9516b698-9355-4d41-86fe-08915d1132b0">&lt;/strong&gt;</ept> convenient syntax for using delegates, so what happens under the covers is similar to what happens with the anonymous delegate.</target>
        </trans-unit>
        <trans-unit id="641c7090-787e-4483-9851-4302d802b411" xml:space="preserve">
          <source>Again, lambdas are just delegates, which means that they can be used as an event handler without any problems, as the following code snippet illustrates.</source>
          <target state="new">Again, lambdas are just delegates, which means that they can be used as an event handler without any problems, as the following code snippet illustrates.</target>
        </trans-unit>
        <trans-unit id="51fa2eab-28a1-4b96-8a20-2b7ee6592f5a" xml:space="preserve">
          <source>Further reading and resources</source>
          <target state="new">Further reading and resources</target>
        </trans-unit>
        <trans-unit id="49ab8f02-c76b-40a8-8397-4f58ed51efb3" xml:space="preserve">
          <source><bpt id="6c7387b8-32c6-4642-a780-ca5aae5ce4eaCapsExtId1">&lt;linkText&gt;</bpt>Delegates<ept id="6c7387b8-32c6-4642-a780-ca5aae5ce4eaCapsExtId1">&lt;/linkText&gt;</ept><bpt id="6c7387b8-32c6-4642-a780-ca5aae5ce4eaCapsExtId2">&lt;title&gt;</bpt><ept id="6c7387b8-32c6-4642-a780-ca5aae5ce4eaCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="6c7387b8-32c6-4642-a780-ca5aae5ce4eaCapsExtId1">&lt;linkText&gt;</bpt>Delegates<ept id="6c7387b8-32c6-4642-a780-ca5aae5ce4eaCapsExtId1">&lt;/linkText&gt;</ept><bpt id="6c7387b8-32c6-4642-a780-ca5aae5ce4eaCapsExtId2">&lt;title&gt;</bpt><ept id="6c7387b8-32c6-4642-a780-ca5aae5ce4eaCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="65486d37-a73c-4bc6-8489-a91e4e5ddbf5" xml:space="preserve">
          <source><bpt id="40efa08e-00a1-456a-908e-cff9d992bc5eCapsExtId1">&lt;linkText&gt;</bpt>Anonymous Functions<ept id="40efa08e-00a1-456a-908e-cff9d992bc5eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="40efa08e-00a1-456a-908e-cff9d992bc5eCapsExtId2">&lt;title&gt;</bpt><ept id="40efa08e-00a1-456a-908e-cff9d992bc5eCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="40efa08e-00a1-456a-908e-cff9d992bc5eCapsExtId1">&lt;linkText&gt;</bpt>Anonymous Functions<ept id="40efa08e-00a1-456a-908e-cff9d992bc5eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="40efa08e-00a1-456a-908e-cff9d992bc5eCapsExtId2">&lt;title&gt;</bpt><ept id="40efa08e-00a1-456a-908e-cff9d992bc5eCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="9a80ccca-1867-4241-a8f4-8e2b8726c907" xml:space="preserve">
          <source><bpt id="89140312-2b72-45de-9857-b2b72dcbdd36CapsExtId1">&lt;linkText&gt;</bpt>Lambda expressions<ept id="89140312-2b72-45de-9857-b2b72dcbdd36CapsExtId1">&lt;/linkText&gt;</ept><bpt id="89140312-2b72-45de-9857-b2b72dcbdd36CapsExtId2">&lt;title&gt;</bpt><ept id="89140312-2b72-45de-9857-b2b72dcbdd36CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="89140312-2b72-45de-9857-b2b72dcbdd36CapsExtId1">&lt;linkText&gt;</bpt>Lambda expressions<ept id="89140312-2b72-45de-9857-b2b72dcbdd36CapsExtId1">&lt;/linkText&gt;</ept><bpt id="89140312-2b72-45de-9857-b2b72dcbdd36CapsExtId2">&lt;title&gt;</bpt><ept id="89140312-2b72-45de-9857-b2b72dcbdd36CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>