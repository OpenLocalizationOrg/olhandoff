<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="47f244a5-7c5f-4034-919c-bef1dc124b7d" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="47f244a5-7c5f-4034-919c-bef1dc124b7d" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
      <olfilehash xmlns="">611f2e66e732e53de7d75f5b8a5549484e22e19a</olfilehash>
    </header>
    <body>
      <group id="b1ebe5ea-5a7a-4001-b11e-840a0ad8ab42">
        <trans-unit id="e04f98ad-e825-4fca-95d9-4f08af5c70c9" xml:space="preserve">
          <source>Generic Types (Generics) Overview</source>
          <target state="new">Generic Types (Generics) Overview</target>
        </trans-unit>
        <trans-unit id="ff3f5450-01a1-47cc-adea-c052f094d544" xml:space="preserve">
          <source>By Kasey Uhlenhuth</source>
          <target state="new">By Kasey Uhlenhuth</target>
        </trans-unit>
        <trans-unit id="1c78425e-4f2a-40e6-8c13-091ce8ab985c" xml:space="preserve">
          <source>We use generics all the time in C\#, whether implicitly of explicitly.</source>
          <target state="new">We use generics all the time in C\#, whether implicitly of explicitly.</target>
        </trans-unit>
        <trans-unit id="404ccea3-b4b9-4652-aff5-c7de2fe58520" xml:space="preserve">
          <source>When you use LINQ in C\#, did you ever notice that you are working with
IEnumerable&amp;lt;T&amp;gt;?</source>
          <target state="new">When you use LINQ in C\#, did you ever notice that you are working with
IEnumerable&amp;lt;T&amp;gt;?</target>
        </trans-unit>
        <trans-unit id="60755514-0ccc-4e8d-ac74-2239de4ce59a" xml:space="preserve">
          <source>Or if you every saw an online sample of a "generic
repository" for talking to databases using Entity Framework, did you see
that most methods return IQueryable&amp;lt;T&amp;gt;?</source>
          <target state="new">Or if you every saw an online sample of a "generic
repository" for talking to databases using Entity Framework, did you see
that most methods return IQueryable&amp;lt;T&amp;gt;?</target>
        </trans-unit>
        <trans-unit id="7c282921-2686-4354-98d9-3b99e94b0f32" xml:space="preserve">
          <source>You may have wondered what
the <bpt id="fbc23e4d-8cd3-4fe8-9619-5e512c6f5d4b">&lt;strong&gt;</bpt>T<ept id="fbc23e4d-8cd3-4fe8-9619-5e512c6f5d4b">&lt;/strong&gt;</ept> is in these examples and why is it in there?</source>
          <target state="new">You may have wondered what
the <bpt id="fbc23e4d-8cd3-4fe8-9619-5e512c6f5d4b">&lt;strong&gt;</bpt>T<ept id="fbc23e4d-8cd3-4fe8-9619-5e512c6f5d4b">&lt;/strong&gt;</ept> is in these examples and why is it in there?</target>
        </trans-unit>
        <trans-unit id="091c09c2-8799-459a-8af1-913794d925b6" xml:space="preserve">
          <source>First introduced to the .NET Framework 2.0, generics involved changes to
both the C\# language and the Common Language Runtime (CLR).
<bpt id="746d1dde-dc67-400f-9a41-e53b45aa8ca5">&lt;strong&gt;</bpt>Generics<ept id="746d1dde-dc67-400f-9a41-e53b45aa8ca5">&lt;/strong&gt;</ept> are essentially a "code template" that allows developers to
define
<bpt id="4fc47d57-c577-46bf-ad43-6da1fc7daa30CapsExtId1">&lt;linkText&gt;</bpt>type-safe<ept id="4fc47d57-c577-46bf-ad43-6da1fc7daa30CapsExtId1">&lt;/linkText&gt;</ept><bpt id="4fc47d57-c577-46bf-ad43-6da1fc7daa30CapsExtId2">&lt;title&gt;</bpt><ept id="4fc47d57-c577-46bf-ad43-6da1fc7daa30CapsExtId2">&lt;/title&gt;</ept>
data structures without committing to an actual data type. For example,
<bpt id="d39369ab-fd3b-4af7-a226-3d653657ad01">&lt;code&gt;</bpt>List&lt;T&gt;<ept id="d39369ab-fd3b-4af7-a226-3d653657ad01">&lt;/code&gt;</ept> is a [Generic
Collection](https://msdn.microsoft.com/en-us/library/System.Collections.Generic(v=vs.110).aspx)
that can be declared and used with any type: <bpt id="711ab5e0-fa7e-4a22-8812-fe6c601ff611">&lt;code&gt;</bpt>List&lt;int&gt;<ept id="711ab5e0-fa7e-4a22-8812-fe6c601ff611">&lt;/code&gt;</ept>,
<bpt id="f443047f-afa9-4aaf-8aca-215c7c2fcb91">&lt;code&gt;</bpt>List&lt;string&gt;<ept id="f443047f-afa9-4aaf-8aca-215c7c2fcb91">&lt;/code&gt;</ept>, <bpt id="ea219a64-5bcf-4c05-b09c-4250be6905f8">&lt;code&gt;</bpt>List&lt;Person&gt;<ept id="ea219a64-5bcf-4c05-b09c-4250be6905f8">&lt;/code&gt;</ept>, etc.</source>
          <target state="new">First introduced to the .NET Framework 2.0, generics involved changes to
both the C\# language and the Common Language Runtime (CLR).
<bpt id="746d1dde-dc67-400f-9a41-e53b45aa8ca5">&lt;strong&gt;</bpt>Generics<ept id="746d1dde-dc67-400f-9a41-e53b45aa8ca5">&lt;/strong&gt;</ept> are essentially a "code template" that allows developers to
define
<bpt id="4fc47d57-c577-46bf-ad43-6da1fc7daa30CapsExtId1">&lt;linkText&gt;</bpt>type-safe<ept id="4fc47d57-c577-46bf-ad43-6da1fc7daa30CapsExtId1">&lt;/linkText&gt;</ept><bpt id="4fc47d57-c577-46bf-ad43-6da1fc7daa30CapsExtId2">&lt;title&gt;</bpt><ept id="4fc47d57-c577-46bf-ad43-6da1fc7daa30CapsExtId2">&lt;/title&gt;</ept>
data structures without committing to an actual data type. For example,
<bpt id="d39369ab-fd3b-4af7-a226-3d653657ad01">&lt;code&gt;</bpt>List&lt;T&gt;<ept id="d39369ab-fd3b-4af7-a226-3d653657ad01">&lt;/code&gt;</ept> is a [Generic
Collection](https://msdn.microsoft.com/en-us/library/System.Collections.Generic(v=vs.110).aspx)
that can be declared and used with any type: <bpt id="711ab5e0-fa7e-4a22-8812-fe6c601ff611">&lt;code&gt;</bpt>List&lt;int&gt;<ept id="711ab5e0-fa7e-4a22-8812-fe6c601ff611">&lt;/code&gt;</ept>,
<bpt id="f443047f-afa9-4aaf-8aca-215c7c2fcb91">&lt;code&gt;</bpt>List&lt;string&gt;<ept id="f443047f-afa9-4aaf-8aca-215c7c2fcb91">&lt;/code&gt;</ept>, <bpt id="ea219a64-5bcf-4c05-b09c-4250be6905f8">&lt;code&gt;</bpt>List&lt;Person&gt;<ept id="ea219a64-5bcf-4c05-b09c-4250be6905f8">&lt;/code&gt;</ept>, etc.</target>
        </trans-unit>
        <trans-unit id="8c9d5143-8a22-4612-8d87-c76f237e7ad4" xml:space="preserve">
          <source>So, what's the point? Why are generics useful? In order to understand
this, we need to take a look at a specific class before and after adding
generics. Let's look at the <bpt id="eea41b0f-5118-4581-a668-fe87a3e7e7d3">&lt;code&gt;</bpt>ArrayList<ept id="eea41b0f-5118-4581-a668-fe87a3e7e7d3">&lt;/code&gt;</ept>. In C\# 1.0, the <bpt id="82bf8d7b-c3e6-410e-a2ec-a11170fb8eda">&lt;code&gt;</bpt>ArrayList<ept id="82bf8d7b-c3e6-410e-a2ec-a11170fb8eda">&lt;/code&gt;</ept>
elements were of type <bpt id="abe8b290-584b-440d-9ef9-b6abad5fea22">&lt;code&gt;</bpt>object<ept id="abe8b290-584b-440d-9ef9-b6abad5fea22">&lt;/code&gt;</ept>. This meant that any element that was
added was silently converted into an <bpt id="8d870852-3b92-481d-b3ad-b40b056d8518">&lt;code&gt;</bpt>object<ept id="8d870852-3b92-481d-b3ad-b40b056d8518">&lt;/code&gt;</ept>; same thing happens on
reading the elements from the list (this process is known as
<bpt id="187f8326-bdd2-4d76-9dff-0cee8f6ce3bdCapsExtId1">&lt;linkText&gt;</bpt>boxing<ept id="187f8326-bdd2-4d76-9dff-0cee8f6ce3bdCapsExtId1">&lt;/linkText&gt;</ept><bpt id="187f8326-bdd2-4d76-9dff-0cee8f6ce3bdCapsExtId2">&lt;title&gt;</bpt><ept id="187f8326-bdd2-4d76-9dff-0cee8f6ce3bdCapsExtId2">&lt;/title&gt;</ept> and
unboxing respectively). Boxing and unboxing have an impact of
performance. More than that, however, there is no way to tell at compile
time what is the actual type of the data in the list. This makes for
some fragile code. Generics solve this problem by providing additional
information the type of data each instance of list will contain. Put
simply, you can only add integers to <bpt id="1450945e-108d-4109-b9cf-53efb12b988f">&lt;code&gt;</bpt>List&lt;int&gt;<ept id="1450945e-108d-4109-b9cf-53efb12b988f">&lt;/code&gt;</ept> and only add Persons to
<bpt id="966b3e4a-444a-46a5-abc1-7c21dcecad63">&lt;code&gt;</bpt>List&lt;Person&gt;<ept id="966b3e4a-444a-46a5-abc1-7c21dcecad63">&lt;/code&gt;</ept>, etc.</source>
          <target state="new">So, what's the point? Why are generics useful? In order to understand
this, we need to take a look at a specific class before and after adding
generics. Let's look at the <bpt id="eea41b0f-5118-4581-a668-fe87a3e7e7d3">&lt;code&gt;</bpt>ArrayList<ept id="eea41b0f-5118-4581-a668-fe87a3e7e7d3">&lt;/code&gt;</ept>. In C\# 1.0, the <bpt id="82bf8d7b-c3e6-410e-a2ec-a11170fb8eda">&lt;code&gt;</bpt>ArrayList<ept id="82bf8d7b-c3e6-410e-a2ec-a11170fb8eda">&lt;/code&gt;</ept>
elements were of type <bpt id="abe8b290-584b-440d-9ef9-b6abad5fea22">&lt;code&gt;</bpt>object<ept id="abe8b290-584b-440d-9ef9-b6abad5fea22">&lt;/code&gt;</ept>. This meant that any element that was
added was silently converted into an <bpt id="8d870852-3b92-481d-b3ad-b40b056d8518">&lt;code&gt;</bpt>object<ept id="8d870852-3b92-481d-b3ad-b40b056d8518">&lt;/code&gt;</ept>; same thing happens on
reading the elements from the list (this process is known as
<bpt id="187f8326-bdd2-4d76-9dff-0cee8f6ce3bdCapsExtId1">&lt;linkText&gt;</bpt>boxing<ept id="187f8326-bdd2-4d76-9dff-0cee8f6ce3bdCapsExtId1">&lt;/linkText&gt;</ept><bpt id="187f8326-bdd2-4d76-9dff-0cee8f6ce3bdCapsExtId2">&lt;title&gt;</bpt><ept id="187f8326-bdd2-4d76-9dff-0cee8f6ce3bdCapsExtId2">&lt;/title&gt;</ept> and
unboxing respectively). Boxing and unboxing have an impact of
performance. More than that, however, there is no way to tell at compile
time what is the actual type of the data in the list. This makes for
some fragile code. Generics solve this problem by providing additional
information the type of data each instance of list will contain. Put
simply, you can only add integers to <bpt id="1450945e-108d-4109-b9cf-53efb12b988f">&lt;code&gt;</bpt>List&lt;int&gt;<ept id="1450945e-108d-4109-b9cf-53efb12b988f">&lt;/code&gt;</ept> and only add Persons to
<bpt id="966b3e4a-444a-46a5-abc1-7c21dcecad63">&lt;code&gt;</bpt>List&lt;Person&gt;<ept id="966b3e4a-444a-46a5-abc1-7c21dcecad63">&lt;/code&gt;</ept>, etc.</target>
        </trans-unit>
        <trans-unit id="680454f6-0b52-496b-999c-aa741219f564" xml:space="preserve">
          <source>Generics are also available at runtime, or <bpt id="e22bf135-7527-46cd-a454-8ae5350ab250">&lt;strong&gt;</bpt>reified<ept id="e22bf135-7527-46cd-a454-8ae5350ab250">&lt;/strong&gt;</ept>.</source>
          <target state="new">Generics are also available at runtime, or <bpt id="e22bf135-7527-46cd-a454-8ae5350ab250">&lt;strong&gt;</bpt>reified<ept id="e22bf135-7527-46cd-a454-8ae5350ab250">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="6dfa334f-946a-49f0-a110-01a3e2a9c62f" xml:space="preserve">
          <source>This means the
runtime knows what type of data structure you are using and can store it
in memory more efficiently.</source>
          <target state="new">This means the
runtime knows what type of data structure you are using and can store it
in memory more efficiently.</target>
        </trans-unit>
        <trans-unit id="342e6862-8baf-40c8-b6ff-ff92ac6257f1" xml:space="preserve">
          <source>Here is a small program that illustrates the efficiency of knowing the
data structure type at runtime:</source>
          <target state="new">Here is a small program that illustrates the efficiency of knowing the
data structure type at runtime:</target>
        </trans-unit>
        <trans-unit id="132940ca-0b77-458e-b85b-393f6be3e74e" xml:space="preserve">
          <source>This program yields the following output:</source>
          <target state="new">This program yields the following output:</target>
        </trans-unit>
        <trans-unit id="a06c1ceb-0e82-4088-88b1-23b7f7ae086a" xml:space="preserve">
          <source>The first thing you notice here is that sorting the generic list is
significantly faster than for the non-generic list. You might also
notice that the type for the generic list is distinct (\[System.Int32\])
whereas the type for the non-generic list is generalized. Because the
runtime knows the generic <bpt id="706fb9ce-0af1-4139-8113-5da06a3fa995">&lt;code&gt;</bpt>List&lt;int&gt;<ept id="706fb9ce-0af1-4139-8113-5da06a3fa995">&lt;/code&gt;</ept> is of type int, it can store the
list elements in an underlying integer array in memory while the
non-generic <bpt id="e48c0ed0-691d-45f6-a03f-49699d0c49e6">&lt;code&gt;</bpt>ArrayList<ept id="e48c0ed0-691d-45f6-a03f-49699d0c49e6">&lt;/code&gt;</ept> has to cast each list element as an object as
stored in an object array in memory. As shown through this example, the
extra castings take up time and slow down the list sort.</source>
          <target state="new">The first thing you notice here is that sorting the generic list is
significantly faster than for the non-generic list. You might also
notice that the type for the generic list is distinct (\[System.Int32\])
whereas the type for the non-generic list is generalized. Because the
runtime knows the generic <bpt id="706fb9ce-0af1-4139-8113-5da06a3fa995">&lt;code&gt;</bpt>List&lt;int&gt;<ept id="706fb9ce-0af1-4139-8113-5da06a3fa995">&lt;/code&gt;</ept> is of type int, it can store the
list elements in an underlying integer array in memory while the
non-generic <bpt id="e48c0ed0-691d-45f6-a03f-49699d0c49e6">&lt;code&gt;</bpt>ArrayList<ept id="e48c0ed0-691d-45f6-a03f-49699d0c49e6">&lt;/code&gt;</ept> has to cast each list element as an object as
stored in an object array in memory. As shown through this example, the
extra castings take up time and slow down the list sort.</target>
        </trans-unit>
        <trans-unit id="31fe71b9-b370-43e1-b106-02054dd30ec3" xml:space="preserve">
          <source>The last useful thing about the runtime knowing the type of your generic
is a better debugging experience.</source>
          <target state="new">The last useful thing about the runtime knowing the type of your generic
is a better debugging experience.</target>
        </trans-unit>
        <trans-unit id="633172d0-1a07-4024-bebe-0bb53ba26882" xml:space="preserve">
          <source>When you are debugging a generic in
C\#, you know what type each element is in your data structure.</source>
          <target state="new">When you are debugging a generic in
C\#, you know what type each element is in your data structure.</target>
        </trans-unit>
        <trans-unit id="149c06aa-66d5-4cb3-a35f-63823b73deb3" xml:space="preserve">
          <source>Without
generics, you would have no idea what type each element was.</source>
          <target state="new">Without
generics, you would have no idea what type each element was.</target>
        </trans-unit>
        <trans-unit id="8d379b23-e1cf-4aca-a23b-24deb7de952a" xml:space="preserve">
          <source>Further reading and resources</source>
          <target state="new">Further reading and resources</target>
        </trans-unit>
        <trans-unit id="b2dc44dc-9a39-4886-8033-69ff36d12f79" xml:space="preserve">
          <source><bpt id="ca41077f-d692-468e-a46b-cb6353eb16c5CapsExtId1">&lt;linkText&gt;</bpt>An Introduction to C\# Generics<ept id="ca41077f-d692-468e-a46b-cb6353eb16c5CapsExtId1">&lt;/linkText&gt;</ept><bpt id="ca41077f-d692-468e-a46b-cb6353eb16c5CapsExtId2">&lt;title&gt;</bpt><ept id="ca41077f-d692-468e-a46b-cb6353eb16c5CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="ca41077f-d692-468e-a46b-cb6353eb16c5CapsExtId1">&lt;linkText&gt;</bpt>An Introduction to C\# Generics<ept id="ca41077f-d692-468e-a46b-cb6353eb16c5CapsExtId1">&lt;/linkText&gt;</ept><bpt id="ca41077f-d692-468e-a46b-cb6353eb16c5CapsExtId2">&lt;title&gt;</bpt><ept id="ca41077f-d692-468e-a46b-cb6353eb16c5CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="54291ec4-4b92-4668-b72f-b976c73f5871" xml:space="preserve">
          <source><bpt id="56eb5d67-2fe2-4abd-8868-698acb365d64CapsExtId1">&lt;linkText&gt;</bpt>C\# Programming Guide - Generics<ept id="56eb5d67-2fe2-4abd-8868-698acb365d64CapsExtId1">&lt;/linkText&gt;</ept><bpt id="56eb5d67-2fe2-4abd-8868-698acb365d64CapsExtId2">&lt;title&gt;</bpt><ept id="56eb5d67-2fe2-4abd-8868-698acb365d64CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="56eb5d67-2fe2-4abd-8868-698acb365d64CapsExtId1">&lt;linkText&gt;</bpt>C\# Programming Guide - Generics<ept id="56eb5d67-2fe2-4abd-8868-698acb365d64CapsExtId1">&lt;/linkText&gt;</ept><bpt id="56eb5d67-2fe2-4abd-8868-698acb365d64CapsExtId2">&lt;title&gt;</bpt><ept id="56eb5d67-2fe2-4abd-8868-698acb365d64CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>