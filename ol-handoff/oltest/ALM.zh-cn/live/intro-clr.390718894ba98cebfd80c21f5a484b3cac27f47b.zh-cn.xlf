<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en-us" target-language="zh-cn" original="foo.file" tool-id="b241ae6f-803c-4644-8c06-13929e66be06" product-name="foo" product-version="1.0" build-num="1">
    <header>
      <tool tool-id="b241ae6f-803c-4644-8c06-13929e66be06" tool-name="MarkdownToXliff" tool-version="1.0" tool-company="Microsoft" />
      <olfilehash xmlns="">cd8ba36caa1f918598f5e21d8bc319fcd46a3dbc</olfilehash>
    </header>
    <body>
      <group id="5516804a-ebd9-4fc7-ae6e-686004035eec">
        <trans-unit id="7562df6c-22b4-4df7-b67c-bf15c4ca7158" xml:space="preserve">
          <source>Introduction to the Common Language Runtime (CLR)</source>
          <target state="new">Introduction to the Common Language Runtime (CLR)</target>
        </trans-unit>
        <trans-unit id="dffdb54b-f93d-4921-ab94-74d60b60a44d" xml:space="preserve">
          <source>By Vance Morrison - 2007</source>
          <target state="new">By Vance Morrison - 2007</target>
        </trans-unit>
        <trans-unit id="a4105085-d512-4d91-a5e5-ecd55ecbd374" xml:space="preserve">
          <source>What is the Common Language Runtime (CLR)?</source>
          <target state="new">What is the Common Language Runtime (CLR)?</target>
        </trans-unit>
        <trans-unit id="f6bdf3f7-c2f5-443d-b67c-58e9a09c6ab1" xml:space="preserve">
          <source>To put it succinctly:</source>
          <target state="new">To put it succinctly:</target>
        </trans-unit>
        <trans-unit id="7a0d13f6-3ae2-423b-8397-fafe7299a26c" xml:space="preserve">
          <source>The Common Language Runtime (CLR) is a complete, high level virtual
machine designed to support a broad variety of programming languages
and interoperation among them.</source>
          <target state="new">The Common Language Runtime (CLR) is a complete, high level virtual
machine designed to support a broad variety of programming languages
and interoperation among them.</target>
        </trans-unit>
        <trans-unit id="b42c7bf0-5fc8-4610-964b-be86c8c9fb44" xml:space="preserve">
          <source>Phew, that was a mouthful.</source>
          <target state="new">Phew, that was a mouthful.</target>
        </trans-unit>
        <trans-unit id="670b38d9-ec8a-48b9-8bf6-9b6f90a6fc41" xml:space="preserve">
          <source>It also in and of itself is not very
illuminating.</source>
          <target state="new">It also in and of itself is not very
illuminating.</target>
        </trans-unit>
        <trans-unit id="cc8c8cc8-f088-4be1-8d1c-44e09833e1c9" xml:space="preserve">
          <source>The statement above <bpt id="8f3813e6-7832-47a6-92d3-4484a4a340e0">&lt;em&gt;</bpt>is<ept id="8f3813e6-7832-47a6-92d3-4484a4a340e0">&lt;/em&gt;</ept> useful however, because it is the
first step in taking the large and complicated piece of software known
as the <bpt id="4cd7e2da-3258-4c1a-bdcf-96feb5f68e45CapsExtId1">&lt;linkText&gt;</bpt>CLR<ept id="4cd7e2da-3258-4c1a-bdcf-96feb5f68e45CapsExtId1">&lt;/linkText&gt;</ept><bpt id="4cd7e2da-3258-4c1a-bdcf-96feb5f68e45CapsExtId2">&lt;title&gt;</bpt><ept id="4cd7e2da-3258-4c1a-bdcf-96feb5f68e45CapsExtId2">&lt;/title&gt;</ept> and
grouping its features in an understandable way.</source>
          <target state="new">The statement above <bpt id="8f3813e6-7832-47a6-92d3-4484a4a340e0">&lt;em&gt;</bpt>is<ept id="8f3813e6-7832-47a6-92d3-4484a4a340e0">&lt;/em&gt;</ept> useful however, because it is the
first step in taking the large and complicated piece of software known
as the <bpt id="4cd7e2da-3258-4c1a-bdcf-96feb5f68e45CapsExtId1">&lt;linkText&gt;</bpt>CLR<ept id="4cd7e2da-3258-4c1a-bdcf-96feb5f68e45CapsExtId1">&lt;/linkText&gt;</ept><bpt id="4cd7e2da-3258-4c1a-bdcf-96feb5f68e45CapsExtId2">&lt;title&gt;</bpt><ept id="4cd7e2da-3258-4c1a-bdcf-96feb5f68e45CapsExtId2">&lt;/title&gt;</ept> and
grouping its features in an understandable way.</target>
        </trans-unit>
        <trans-unit id="1b3576b0-a0ae-4334-83cb-d60ea7ddf7d0" xml:space="preserve">
          <source>It gives us a "10,000
foot" view of the runtime from which we can understand the broad goals
and purpose of the runtime.</source>
          <target state="new">It gives us a "10,000
foot" view of the runtime from which we can understand the broad goals
and purpose of the runtime.</target>
        </trans-unit>
        <trans-unit id="f5b75206-06d5-4596-8dd4-14f16d2671f4" xml:space="preserve">
          <source>After understanding the CLR at this high
level, it is easier to look more deeply into sub-components without as
much chance of getting lost in the details.</source>
          <target state="new">After understanding the CLR at this high
level, it is easier to look more deeply into sub-components without as
much chance of getting lost in the details.</target>
        </trans-unit>
        <trans-unit id="30d19a63-7dd7-4fd2-a6fc-e687e5451863" xml:space="preserve">
          <source>The CLR: A (very rare) Complete Programming Platform</source>
          <target state="new">The CLR: A (very rare) Complete Programming Platform</target>
        </trans-unit>
        <trans-unit id="3e7e0c18-69fe-4642-bb53-9fe574dc46b2" xml:space="preserve">
          <source>Every program has a surprising number of dependencies on its runtime
environment.</source>
          <target state="new">Every program has a surprising number of dependencies on its runtime
environment.</target>
        </trans-unit>
        <trans-unit id="76b6a5e7-24c0-4c98-8c19-731da4effb7d" xml:space="preserve">
          <source>Most obviously, the program is written in a particular
programming language, but that is only the first of many assumptions a
programmer weaves into the program.</source>
          <target state="new">Most obviously, the program is written in a particular
programming language, but that is only the first of many assumptions a
programmer weaves into the program.</target>
        </trans-unit>
        <trans-unit id="83cad3c1-ebb0-4ae8-94d7-caa7da91a80e" xml:space="preserve">
          <source>All interesting programs need some
<bpt id="fe9fda1e-19d2-4f17-9b33-0a2d14316db0">&lt;em&gt;</bpt>runtime library<ept id="fe9fda1e-19d2-4f17-9b33-0a2d14316db0">&lt;/em&gt;</ept> that allows them to interact with the other resources
of the machine (such as user input, disk files, network communications,
etc).</source>
          <target state="new">All interesting programs need some
<bpt id="fe9fda1e-19d2-4f17-9b33-0a2d14316db0">&lt;em&gt;</bpt>runtime library<ept id="fe9fda1e-19d2-4f17-9b33-0a2d14316db0">&lt;/em&gt;</ept> that allows them to interact with the other resources
of the machine (such as user input, disk files, network communications,
etc).</target>
        </trans-unit>
        <trans-unit id="a7f47439-7187-45cd-854e-bca2bc690e07" xml:space="preserve">
          <source>The program also needs to be converted in some way (either by
interpretation or compilation) to a form that the native hardware can
execute directly.</source>
          <target state="new">The program also needs to be converted in some way (either by
interpretation or compilation) to a form that the native hardware can
execute directly.</target>
        </trans-unit>
        <trans-unit id="66e38e15-5335-4161-bc78-85ee7414bc75" xml:space="preserve">
          <source>These dependencies of a program are so numerous,
interdependent and diverse that implementers of programming languages
almost always defer to other standards to specify them.</source>
          <target state="new">These dependencies of a program are so numerous,
interdependent and diverse that implementers of programming languages
almost always defer to other standards to specify them.</target>
        </trans-unit>
        <trans-unit id="b1160cc5-1b43-4a67-850d-534a57ba832e" xml:space="preserve">
          <source>For example, the
C++ language does not specify the format of a C++ executable.</source>
          <target state="new">For example, the
C++ language does not specify the format of a C++ executable.</target>
        </trans-unit>
        <trans-unit id="f6465cee-c906-45a8-8514-ceae40c5be4c" xml:space="preserve">
          <source>Instead,
each C++ compiler is bound to a particular hardware architecture (e.g.,
X86) and to an operating system environment (e.g., Windows, Linux, or
Mac OS), which describes the format of the executable file format and
specifies how it will be loaded.</source>
          <target state="new">Instead,
each C++ compiler is bound to a particular hardware architecture (e.g.,
X86) and to an operating system environment (e.g., Windows, Linux, or
Mac OS), which describes the format of the executable file format and
specifies how it will be loaded.</target>
        </trans-unit>
        <trans-unit id="d9a0494d-659d-471d-8cf6-6e8a792f073a" xml:space="preserve">
          <source>Thus, programmers don't make a "C++
executable," but rather a "Windows X86 executable" or a "Power PC Mac OS
executable."</source>
          <target state="new">Thus, programmers don't make a "C++
executable," but rather a "Windows X86 executable" or a "Power PC Mac OS
executable."</target>
        </trans-unit>
        <trans-unit id="55bf6ea2-d199-4290-b2f6-58c42d904192" xml:space="preserve">
          <source>While leveraging existing hardware and operating system standards is
usually a good thing, it has the disadvantage of tying the specification
to the level of abstraction of the existing standards.</source>
          <target state="new">While leveraging existing hardware and operating system standards is
usually a good thing, it has the disadvantage of tying the specification
to the level of abstraction of the existing standards.</target>
        </trans-unit>
        <trans-unit id="91edd454-6012-45e5-96c6-896b2cdcae61" xml:space="preserve">
          <source>For example, no
common operating system today has the concept of a garbage-collected
heap.</source>
          <target state="new">For example, no
common operating system today has the concept of a garbage-collected
heap.</target>
        </trans-unit>
        <trans-unit id="9f055b9f-9503-47bf-8c74-7fa9ba90ca69" xml:space="preserve">
          <source>Thus, there is no way to use existing standards to describe an
interface that takes advantage of garbage collection (e.g., passing
strings back and forth, without worrying about who is responsible for
deleting them).</source>
          <target state="new">Thus, there is no way to use existing standards to describe an
interface that takes advantage of garbage collection (e.g., passing
strings back and forth, without worrying about who is responsible for
deleting them).</target>
        </trans-unit>
        <trans-unit id="a29864a0-6962-4c02-b999-2bcfcc1f6ab7" xml:space="preserve">
          <source>Similarly, a typical executable file format provides
just enough information to run a program but not enough information for
a compiler to bind other binaries to the executable.</source>
          <target state="new">Similarly, a typical executable file format provides
just enough information to run a program but not enough information for
a compiler to bind other binaries to the executable.</target>
        </trans-unit>
        <trans-unit id="b8310497-bbe7-47b7-a54e-5ab8fe018868" xml:space="preserve">
          <source>For example, C++
programs typically use a standard library (on Windows, called
msvcrt.dll) which contains most of the common functionality (e.g.,
printf), but the existence of that library alone is not enough.</source>
          <target state="new">For example, C++
programs typically use a standard library (on Windows, called
msvcrt.dll) which contains most of the common functionality (e.g.,
printf), but the existence of that library alone is not enough.</target>
        </trans-unit>
        <trans-unit id="4e079824-4913-4dba-91ab-df7ccb21982a" xml:space="preserve">
          <source>Without
the matching header files that go along with it (e.g., stdio.h),
programmers can't use the library.</source>
          <target state="new">Without
the matching header files that go along with it (e.g., stdio.h),
programmers can't use the library.</target>
        </trans-unit>
        <trans-unit id="69fd6cd5-fd67-407e-bb38-cf90f0f5dd20" xml:space="preserve">
          <source>Thus, existing executable file format
standards cannot be used both to describe a file format that can be run
and to specify other information or binaries necessary to make the
program complete.</source>
          <target state="new">Thus, existing executable file format
standards cannot be used both to describe a file format that can be run
and to specify other information or binaries necessary to make the
program complete.</target>
        </trans-unit>
        <trans-unit id="b901fa50-47b9-4781-bee8-0dc0989f6a64" xml:space="preserve">
          <source>The CLR fixes problems like these by defining a <bpt id="fb324e44-84c0-41f0-b07a-748f5f2e068eCapsExtId1">&lt;linkText&gt;</bpt>very complete
specification<ept id="fb324e44-84c0-41f0-b07a-748f5f2e068eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="fb324e44-84c0-41f0-b07a-748f5f2e068eCapsExtId2">&lt;title&gt;</bpt><ept id="fb324e44-84c0-41f0-b07a-748f5f2e068eCapsExtId2">&lt;/title&gt;</ept> (standardized by ECMA) containing
the details you need for the COMPLETE lifecycle of a program, from
construction and binding through deployment and execution.</source>
          <target state="new">The CLR fixes problems like these by defining a <bpt id="fb324e44-84c0-41f0-b07a-748f5f2e068eCapsExtId1">&lt;linkText&gt;</bpt>very complete
specification<ept id="fb324e44-84c0-41f0-b07a-748f5f2e068eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="fb324e44-84c0-41f0-b07a-748f5f2e068eCapsExtId2">&lt;title&gt;</bpt><ept id="fb324e44-84c0-41f0-b07a-748f5f2e068eCapsExtId2">&lt;/title&gt;</ept> (standardized by ECMA) containing
the details you need for the COMPLETE lifecycle of a program, from
construction and binding through deployment and execution.</target>
        </trans-unit>
        <trans-unit id="86914eab-c9e1-4b0a-8688-e1ed39d317f8" xml:space="preserve">
          <source>Thus, among
other things, the CLR specifies:</source>
          <target state="new">Thus, among
other things, the CLR specifies:</target>
        </trans-unit>
        <trans-unit id="4beb19fb-f072-4c38-a7b7-c9795f583bb0" xml:space="preserve">
          <source>A GC-aware virtual machine with its own instruction set (called the
Common Intermediate Language (CIL)) used to specify the primitive
operations that programs perform.</source>
          <target state="new">A GC-aware virtual machine with its own instruction set (called the
Common Intermediate Language (CIL)) used to specify the primitive
operations that programs perform.</target>
        </trans-unit>
        <trans-unit id="bd013eff-f4ae-4f5d-8996-f823c91fb239" xml:space="preserve">
          <source>This means the CLR is not
dependent on a particular type of CPU.</source>
          <target state="new">This means the CLR is not
dependent on a particular type of CPU.</target>
        </trans-unit>
        <trans-unit id="a32ff49a-1864-4106-8cd1-c64629bc88d7" xml:space="preserve">
          <source>A rich meta data representation for program declarations (e.g.,
types, fields, methods, etc), so that compilers generating other
executables have the information they need to call functionality
from 'outside'.</source>
          <target state="new">A rich meta data representation for program declarations (e.g.,
types, fields, methods, etc), so that compilers generating other
executables have the information they need to call functionality
from 'outside'.</target>
        </trans-unit>
        <trans-unit id="fc28255a-bbfb-4b7f-b9fd-706b9f4ff93c" xml:space="preserve">
          <source>A file format that specifies exactly how to lay the bits down in a
file, so that you can properly speak of a CLR EXE that is not tied
to a particular operating system or computer hardware.</source>
          <target state="new">A file format that specifies exactly how to lay the bits down in a
file, so that you can properly speak of a CLR EXE that is not tied
to a particular operating system or computer hardware.</target>
        </trans-unit>
        <trans-unit id="f98f2c36-4e0d-4152-a7ea-75fa9222a6b7" xml:space="preserve">
          <source>The lifetime semantics of a loaded program, the mechanism by which
one CLR EXE file can refer to another CLR EXE and the rules on how
the runtime finds the referenced files at execution time.</source>
          <target state="new">The lifetime semantics of a loaded program, the mechanism by which
one CLR EXE file can refer to another CLR EXE and the rules on how
the runtime finds the referenced files at execution time.</target>
        </trans-unit>
        <trans-unit id="482a0aa0-95e7-45c8-aff5-bc6d6d282707" xml:space="preserve">
          <source>A class library that leverages the features that the CLR provides
(e.g., garbage collection, exceptions, or generic types) to give
access both to basic functionality (e.g., integers, strings, arrays,
lists, or dictionaries) as well as to operating system services
(e.g., files, network, or user interaction).</source>
          <target state="new">A class library that leverages the features that the CLR provides
(e.g., garbage collection, exceptions, or generic types) to give
access both to basic functionality (e.g., integers, strings, arrays,
lists, or dictionaries) as well as to operating system services
(e.g., files, network, or user interaction).</target>
        </trans-unit>
        <trans-unit id="04d0d376-17db-4136-a043-caa18c0248b5" xml:space="preserve">
          <source>Multi-language Support</source>
          <target state="new">Multi-language Support</target>
        </trans-unit>
        <trans-unit id="565086f1-15a2-4b82-9e02-a20e1627652a" xml:space="preserve">
          <source>Defining, specifying and implementing all of these details is a huge
undertaking, which is why complete abstractions like the CLR are very
rare.</source>
          <target state="new">Defining, specifying and implementing all of these details is a huge
undertaking, which is why complete abstractions like the CLR are very
rare.</target>
        </trans-unit>
        <trans-unit id="da74d5cc-be83-48e2-8d21-768d802a242b" xml:space="preserve">
          <source>In fact, the vast majority of such reasonably complete
abstractions were built for single languages.</source>
          <target state="new">In fact, the vast majority of such reasonably complete
abstractions were built for single languages.</target>
        </trans-unit>
        <trans-unit id="3416db56-33b8-4029-9281-3623ac4a05e8" xml:space="preserve">
          <source>For example, the Java
runtime, the Perl interpreter or the early version of the Visual Basic
runtime offer similarly complete abstraction boundaries.</source>
          <target state="new">For example, the Java
runtime, the Perl interpreter or the early version of the Visual Basic
runtime offer similarly complete abstraction boundaries.</target>
        </trans-unit>
        <trans-unit id="cab975e5-a099-4187-8d53-9c59d04bb6e9" xml:space="preserve">
          <source>What
distinguishes the CLR from these earlier efforts is its multi-language
nature.</source>
          <target state="new">What
distinguishes the CLR from these earlier efforts is its multi-language
nature.</target>
        </trans-unit>
        <trans-unit id="8eaa29bd-feb3-4f65-97c7-bd797534830a" xml:space="preserve">
          <source>With the possible exception of Visual Basic (because it
leverages the COM object model), the experience within the language is
often very good, but interoperating with programs written in other
languages is very difficult at best.</source>
          <target state="new">With the possible exception of Visual Basic (because it
leverages the COM object model), the experience within the language is
often very good, but interoperating with programs written in other
languages is very difficult at best.</target>
        </trans-unit>
        <trans-unit id="431e0786-e8ba-41da-ab82-8a8f1f4f60e2" xml:space="preserve">
          <source>Interoperation is difficult because
these languages can only communicate with "foreign" languages by using
the primitives provided by the operating system.</source>
          <target state="new">Interoperation is difficult because
these languages can only communicate with "foreign" languages by using
the primitives provided by the operating system.</target>
        </trans-unit>
        <trans-unit id="8353b696-db1c-4da0-9756-141a284aefe8" xml:space="preserve">
          <source>Because the OS
abstraction level is so low (e.g., the operating system has no concept
of a garbage-collected heap), needlessly complicated techniques are
necessary.</source>
          <target state="new">Because the OS
abstraction level is so low (e.g., the operating system has no concept
of a garbage-collected heap), needlessly complicated techniques are
necessary.</target>
        </trans-unit>
        <trans-unit id="ba24f1be-0eac-4c52-8578-b9fb92b870a4" xml:space="preserve">
          <source>By providing a COMMON LANGUAGE RUNTIME, the CLR allows
languages to communicate with each other with high-level constructs
(e.g., GC-collected structures), easing the interoperation burden
dramatically.</source>
          <target state="new">By providing a COMMON LANGUAGE RUNTIME, the CLR allows
languages to communicate with each other with high-level constructs
(e.g., GC-collected structures), easing the interoperation burden
dramatically.</target>
        </trans-unit>
        <trans-unit id="3a66d879-ccac-4df5-bf63-b0393fddc3cd" xml:space="preserve">
          <source>Because the runtime is shared among <bpt id="90cbd8b0-5b99-496e-8625-73e273538cb7">&lt;em&gt;</bpt>many<ept id="90cbd8b0-5b99-496e-8625-73e273538cb7">&lt;/em&gt;</ept> languages, it means that more
resources can be put into supporting it well.</source>
          <target state="new">Because the runtime is shared among <bpt id="90cbd8b0-5b99-496e-8625-73e273538cb7">&lt;em&gt;</bpt>many<ept id="90cbd8b0-5b99-496e-8625-73e273538cb7">&lt;/em&gt;</ept> languages, it means that more
resources can be put into supporting it well.</target>
        </trans-unit>
        <trans-unit id="d63dca21-f9c5-4b53-9a27-92ed14a03da3" xml:space="preserve">
          <source>Building good debuggers
and profilers for a language is a lot of work, and thus they exist in a
full-featured form only for the most important programming languages.</source>
          <target state="new">Building good debuggers
and profilers for a language is a lot of work, and thus they exist in a
full-featured form only for the most important programming languages.</target>
        </trans-unit>
        <trans-unit id="e6e96ee0-aa42-455a-aff7-77d69402565b" xml:space="preserve">
          <source>Nevertheless, because languages that are implemented on the CLR can
reuse this infrastructure, the burden on any particular language is
reduced substantially.</source>
          <target state="new">Nevertheless, because languages that are implemented on the CLR can
reuse this infrastructure, the burden on any particular language is
reduced substantially.</target>
        </trans-unit>
        <trans-unit id="617b2e30-486e-428b-8b92-8b4917bbd268" xml:space="preserve">
          <source>Perhaps even more important, any language built
on the CLR immediately has access to <bpt id="c2a0e40c-1f91-4b15-8758-45cc1c89d861">&lt;em&gt;</bpt>all<ept id="c2a0e40c-1f91-4b15-8758-45cc1c89d861">&lt;/em&gt;</ept> the class libraries built on
top of the CLR.</source>
          <target state="new">Perhaps even more important, any language built
on the CLR immediately has access to <bpt id="c2a0e40c-1f91-4b15-8758-45cc1c89d861">&lt;em&gt;</bpt>all<ept id="c2a0e40c-1f91-4b15-8758-45cc1c89d861">&lt;/em&gt;</ept> the class libraries built on
top of the CLR.</target>
        </trans-unit>
        <trans-unit id="92806904-f40b-4a8f-969c-b3855f7eda6b" xml:space="preserve">
          <source>This large (and growing) body of (debugged and
supported) functionality is a huge reason why the CLR has been so
successful.</source>
          <target state="new">This large (and growing) body of (debugged and
supported) functionality is a huge reason why the CLR has been so
successful.</target>
        </trans-unit>
        <trans-unit id="fc38ca60-a3dd-412e-96a4-e86acca109a9" xml:space="preserve">
          <source>In short, the runtime is a complete specification of the exact bits one
has to put in a file to create and run a program.</source>
          <target state="new">In short, the runtime is a complete specification of the exact bits one
has to put in a file to create and run a program.</target>
        </trans-unit>
        <trans-unit id="e9e73f05-4119-41b1-99aa-7890ebd5f565" xml:space="preserve">
          <source>The virtual machine
that runs these files is at a high level appropriate for implementing a
broad class of programming languages.</source>
          <target state="new">The virtual machine
that runs these files is at a high level appropriate for implementing a
broad class of programming languages.</target>
        </trans-unit>
        <trans-unit id="b5829b69-164f-4211-aa57-12bdd8628f92" xml:space="preserve">
          <source>This virtual machine, along with
an ever growing body of class libraries that run on that virtual
machine, is what we call the common language runtime (CLR).</source>
          <target state="new">This virtual machine, along with
an ever growing body of class libraries that run on that virtual
machine, is what we call the common language runtime (CLR).</target>
        </trans-unit>
        <trans-unit id="3b77857b-b06c-4e4f-a97b-f1f0a4743baa" xml:space="preserve">
          <source>The Primary Goal of the CLR</source>
          <target state="new">The Primary Goal of the CLR</target>
        </trans-unit>
        <trans-unit id="8c0adc79-a136-40e2-8ac7-544f0eef0cf7" xml:space="preserve">
          <source>Now that we have basic idea what the CLR is, it is useful to back up
just a bit and understand the problem the runtime was meant to solve.</source>
          <target state="new">Now that we have basic idea what the CLR is, it is useful to back up
just a bit and understand the problem the runtime was meant to solve.</target>
        </trans-unit>
        <trans-unit id="c00505ab-44f8-42d9-addb-8ddaff23feeb" xml:space="preserve">
          <source>At
a very high level, the runtime has only one goal:</source>
          <target state="new">At
a very high level, the runtime has only one goal:</target>
        </trans-unit>
        <trans-unit id="284a3860-76a1-48eb-8927-14a04310e9ea" xml:space="preserve">
          <source>The goal of the CLR is to make programming easy.</source>
          <target state="new">The goal of the CLR is to make programming easy.</target>
        </trans-unit>
        <trans-unit id="92f7d117-1596-4895-88f5-5d73925a63bc" xml:space="preserve">
          <source>This statement is useful for two reasons.</source>
          <target state="new">This statement is useful for two reasons.</target>
        </trans-unit>
        <trans-unit id="ffae6d1a-baea-4961-affe-0d66e2a85b20" xml:space="preserve">
          <source>First, it is a <bpt id="ac4034ad-fcd6-424a-b7ae-59133f4d9374">&lt;em&gt;</bpt>very<ept id="ac4034ad-fcd6-424a-b7ae-59133f4d9374">&lt;/em&gt;</ept> useful
guiding principle as the runtime evolves.</source>
          <target state="new">First, it is a <bpt id="ac4034ad-fcd6-424a-b7ae-59133f4d9374">&lt;em&gt;</bpt>very<ept id="ac4034ad-fcd6-424a-b7ae-59133f4d9374">&lt;/em&gt;</ept> useful
guiding principle as the runtime evolves.</target>
        </trans-unit>
        <trans-unit id="e936ecdb-8a36-419d-a3d4-5f0228490e00" xml:space="preserve">
          <source>For example, fundamentally
only simple things can be easy, so adding <bpt id="2a935d84-801f-4265-85bd-93facc1062ea">&lt;strong&gt;</bpt>user visible<ept id="2a935d84-801f-4265-85bd-93facc1062ea">&lt;/strong&gt;</ept> complexity to
the runtime should always be viewed with suspicion.</source>
          <target state="new">For example, fundamentally
only simple things can be easy, so adding <bpt id="2a935d84-801f-4265-85bd-93facc1062ea">&lt;strong&gt;</bpt>user visible<ept id="2a935d84-801f-4265-85bd-93facc1062ea">&lt;/strong&gt;</ept> complexity to
the runtime should always be viewed with suspicion.</target>
        </trans-unit>
        <trans-unit id="3c3088d9-bc16-440a-9ed8-3f0728fe0066" xml:space="preserve">
          <source>More important than
the cost/benefit ratio of a feature is its <bpt id="fda8e369-67a1-4459-a9fb-3ebc4e35b3e4">&lt;em&gt;</bpt>added exposed
complexity/weighted benefit over all scenarios<ept id="fda8e369-67a1-4459-a9fb-3ebc4e35b3e4">&lt;/em&gt;</ept> ratio.</source>
          <target state="new">More important than
the cost/benefit ratio of a feature is its <bpt id="fda8e369-67a1-4459-a9fb-3ebc4e35b3e4">&lt;em&gt;</bpt>added exposed
complexity/weighted benefit over all scenarios<ept id="fda8e369-67a1-4459-a9fb-3ebc4e35b3e4">&lt;/em&gt;</ept> ratio.</target>
        </trans-unit>
        <trans-unit id="f71e2507-07ef-4158-970a-44dcc921d24f" xml:space="preserve">
          <source>Ideally, this
ratio is negative (that is, the new feature reduces complexity by
removing restrictions or by generalizing existing special cases);
however, more typically it is kept low by minimizing the exposed
complexity and maximizing the number of scenarios to which the feature
adds value.</source>
          <target state="new">Ideally, this
ratio is negative (that is, the new feature reduces complexity by
removing restrictions or by generalizing existing special cases);
however, more typically it is kept low by minimizing the exposed
complexity and maximizing the number of scenarios to which the feature
adds value.</target>
        </trans-unit>
        <trans-unit id="ff840f60-8838-4078-9473-a78abc6ce441" xml:space="preserve">
          <source>The second reason this goal is so important is that <bpt id="caff3e1f-4f33-4a27-b8e8-099e43a573fa">&lt;strong&gt;</bpt>ease of use is the
fundamental reason for the CLR's success<ept id="caff3e1f-4f33-4a27-b8e8-099e43a573fa">&lt;/strong&gt;</ept>.</source>
          <target state="new">The second reason this goal is so important is that <bpt id="caff3e1f-4f33-4a27-b8e8-099e43a573fa">&lt;strong&gt;</bpt>ease of use is the
fundamental reason for the CLR's success<ept id="caff3e1f-4f33-4a27-b8e8-099e43a573fa">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="76cc6a76-33c5-4523-a2c2-bb52b5139e90" xml:space="preserve">
          <source>The CLR is not successful
because it is faster or smaller than writing native code (in fact,
well-written native code often wins).</source>
          <target state="new">The CLR is not successful
because it is faster or smaller than writing native code (in fact,
well-written native code often wins).</target>
        </trans-unit>
        <trans-unit id="242f30b4-4d28-48bf-b96c-4303545fa318" xml:space="preserve">
          <source>The CLR is not successful because
of any particular feature it supports (like garbage collection, platform
independence, object-oriented programming or versioning support).</source>
          <target state="new">The CLR is not successful because
of any particular feature it supports (like garbage collection, platform
independence, object-oriented programming or versioning support).</target>
        </trans-unit>
        <trans-unit id="392f071d-c183-4871-9b0c-dc90f284938b" xml:space="preserve">
          <source>The
CLR is successful because all of those features, as well as numerous
others, combine to make programming significantly easier than it would
be otherwise.</source>
          <target state="new">The
CLR is successful because all of those features, as well as numerous
others, combine to make programming significantly easier than it would
be otherwise.</target>
        </trans-unit>
        <trans-unit id="33597aa2-b310-4ede-81ad-501286a1d712" xml:space="preserve">
          <source>Some important but often overlooked ease of use features
include:</source>
          <target state="new">Some important but often overlooked ease of use features
include:</target>
        </trans-unit>
        <trans-unit id="02992baf-03f2-4208-bd43-532c835c8d51" xml:space="preserve">
          <source>Simplified languages (e.g., C\# and Visual Basic are significantly
simpler than C++)</source>
          <target state="new">Simplified languages (e.g., C\# and Visual Basic are significantly
simpler than C++)</target>
        </trans-unit>
        <trans-unit id="af25e769-039a-4d11-8148-7d0756441880" xml:space="preserve">
          <source>A dedication to simplicity in the class library (e.g., we only have
one string type, and it is immutable; this greatly simplifies any
API that uses strings)</source>
          <target state="new">A dedication to simplicity in the class library (e.g., we only have
one string type, and it is immutable; this greatly simplifies any
API that uses strings)</target>
        </trans-unit>
        <trans-unit id="0058f326-cf5f-4894-b1f8-26a708065aa7" xml:space="preserve">
          <source>Strong consistency in the naming in the class library (e.g.,
requiring APIs to use whole words and consistent naming conventions)</source>
          <target state="new">Strong consistency in the naming in the class library (e.g.,
requiring APIs to use whole words and consistent naming conventions)</target>
        </trans-unit>
        <trans-unit id="4ba5f30f-bdc4-4346-bf6d-9554900dac2f" xml:space="preserve">
          <source>Great support in the tool chain needed to create an application
(e.g., Visual Studio makes building CLR applications very simple,
and Intellisense makes finding the right types and methods to create
the application very easy).</source>
          <target state="new">Great support in the tool chain needed to create an application
(e.g., Visual Studio makes building CLR applications very simple,
and Intellisense makes finding the right types and methods to create
the application very easy).</target>
        </trans-unit>
        <trans-unit id="0b65fc05-9890-4b0b-a2fc-6499753abffa" xml:space="preserve">
          <source>It is this dedication to ease of use (which goes hand in hand with
simplicity of the user model) that stands out as the reason for the
success of the CLR.</source>
          <target state="new">It is this dedication to ease of use (which goes hand in hand with
simplicity of the user model) that stands out as the reason for the
success of the CLR.</target>
        </trans-unit>
        <trans-unit id="e3623317-a80a-48ae-a6b2-06b5e67e6958" xml:space="preserve">
          <source>Oddly, some of the most important ease-of-use
features are also the most "boring."</source>
          <target state="new">Oddly, some of the most important ease-of-use
features are also the most "boring."</target>
        </trans-unit>
        <trans-unit id="1f5721f7-054b-4e09-b698-d803b173f66f" xml:space="preserve">
          <source>For example, any programming
environment could apply consistent naming conventions, yet actually
doing so across a large class library is quite a lot of work.</source>
          <target state="new">For example, any programming
environment could apply consistent naming conventions, yet actually
doing so across a large class library is quite a lot of work.</target>
        </trans-unit>
        <trans-unit id="e007331e-ff06-42a3-9e02-03c947770e56" xml:space="preserve">
          <source>Often such
efforts conflict with other goals (such as retaining compatibility with
existing interfaces), or they run into significant logistical concerns
(such as the cost of renaming a method across a <bpt id="c47f6bbc-8742-4cef-827a-ffbd4671ef0d">&lt;em&gt;</bpt>very<ept id="c47f6bbc-8742-4cef-827a-ffbd4671ef0d">&lt;/em&gt;</ept> large code base).</source>
          <target state="new">Often such
efforts conflict with other goals (such as retaining compatibility with
existing interfaces), or they run into significant logistical concerns
(such as the cost of renaming a method across a <bpt id="c47f6bbc-8742-4cef-827a-ffbd4671ef0d">&lt;em&gt;</bpt>very<ept id="c47f6bbc-8742-4cef-827a-ffbd4671ef0d">&lt;/em&gt;</ept> large code base).</target>
        </trans-unit>
        <trans-unit id="be1e0c95-9f57-4d4d-8240-aaa62eaa91c3" xml:space="preserve">
          <source>It is at times like these that we have to remind ourselves about our
number-one overarching goal of the runtime and ensure that we are have
our priorities straight to reach that goal.</source>
          <target state="new">It is at times like these that we have to remind ourselves about our
number-one overarching goal of the runtime and ensure that we are have
our priorities straight to reach that goal.</target>
        </trans-unit>
        <trans-unit id="627469cd-f5b5-41af-9872-d8d07e3a5768" xml:space="preserve">
          <source>Fundamental Features of the CLR</source>
          <target state="new">Fundamental Features of the CLR</target>
        </trans-unit>
        <trans-unit id="2555733f-546b-4353-986d-5f3e71a2c37e" xml:space="preserve">
          <source>The runtime has many features, so it is useful to categorize them as
follows:</source>
          <target state="new">The runtime has many features, so it is useful to categorize them as
follows:</target>
        </trans-unit>
        <trans-unit id="6f4b05ed-c876-438a-9501-43674daf9c36" xml:space="preserve">
          <source>Fundamental features – Features that have broad impact on the design
of other features.</source>
          <target state="new">Fundamental features – Features that have broad impact on the design
of other features.</target>
        </trans-unit>
        <trans-unit id="083082fa-7628-4cfb-91f1-37408f88e51b" xml:space="preserve">
          <source>These include:</source>
          <target state="new">These include:</target>
        </trans-unit>
        <trans-unit id="f8dcf10c-186a-42df-98e9-c72e5bbb6c8f" xml:space="preserve">
          <source>a.</source>
          <target state="new">a.</target>
        </trans-unit>
        <trans-unit id="4011a715-461e-4879-bf87-acb2c40ed4b0" xml:space="preserve">
          <source>Garbage Collection
b.</source>
          <target state="new">Garbage Collection
b.</target>
        </trans-unit>
        <trans-unit id="2c6b4b3c-c772-4d71-84a0-999d73a45f97" xml:space="preserve">
          <source>Memory Safety and Type Safety
c.</source>
          <target state="new">Memory Safety and Type Safety
c.</target>
        </trans-unit>
        <trans-unit id="d96e48ce-96c0-45bf-9aa9-3e8150736d4a" xml:space="preserve">
          <source>High level support for programming languages.</source>
          <target state="new">High level support for programming languages.</target>
        </trans-unit>
        <trans-unit id="7d71dfc4-be81-4de7-92ae-3c68f8b22ccd" xml:space="preserve">
          <source>Secondary features – Features enabled by the fundamental features
that may not be required by many useful programs:</source>
          <target state="new">Secondary features – Features enabled by the fundamental features
that may not be required by many useful programs:</target>
        </trans-unit>
        <trans-unit id="fb3ff3d6-0dc7-4c23-afad-180b4ef2bd61" xml:space="preserve">
          <source>a.</source>
          <target state="new">a.</target>
        </trans-unit>
        <trans-unit id="cc2c7b61-c5d9-413c-b5f5-a0861c27e829" xml:space="preserve">
          <source>Program isolation with AppDomains
b.</source>
          <target state="new">Program isolation with AppDomains
b.</target>
        </trans-unit>
        <trans-unit id="dacc6ac2-58ee-40be-91ac-4f25a815c190" xml:space="preserve">
          <source>Program Security and sandboxing</source>
          <target state="new">Program Security and sandboxing</target>
        </trans-unit>
        <trans-unit id="33d30e79-1e77-4998-9b4c-b2779de31449" xml:space="preserve">
          <source>Other Features – Features that all runtime environments need but
that do not leverage the fundamental features of the CLR.</source>
          <target state="new">Other Features – Features that all runtime environments need but
that do not leverage the fundamental features of the CLR.</target>
        </trans-unit>
        <trans-unit id="c83c41b3-7c92-45be-b2ab-94e06b8acac4" xml:space="preserve">
          <source>Instead,
they are the result of the desire to create a complete
programming environment.</source>
          <target state="new">Instead,
they are the result of the desire to create a complete
programming environment.</target>
        </trans-unit>
        <trans-unit id="87fed662-3499-4c73-af2a-ec6ebd01ef41" xml:space="preserve">
          <source>Among them are:</source>
          <target state="new">Among them are:</target>
        </trans-unit>
        <trans-unit id="8eb875ee-93dd-4c2f-8568-b8b0c1f642c4" xml:space="preserve">
          <source>a.</source>
          <target state="new">a.</target>
        </trans-unit>
        <trans-unit id="5d5b7d05-178f-4960-ab66-e558481e12fb" xml:space="preserve">
          <source>Versioning
b.</source>
          <target state="new">Versioning
b.</target>
        </trans-unit>
        <trans-unit id="fd274923-242a-4660-bb69-950d42128cd1" xml:space="preserve">
          <source>Debugging/Profiling
c.</source>
          <target state="new">Debugging/Profiling
c.</target>
        </trans-unit>
        <trans-unit id="8e41ecd7-78eb-41ff-9e12-2e55efb5e03c" xml:space="preserve">
          <source>Interoperation</source>
          <target state="new">Interoperation</target>
        </trans-unit>
        <trans-unit id="d21c207e-1abc-4f43-aff4-bcd1dfca92dd" xml:space="preserve">
          <source>The CLR Garbage Collector (GC)</source>
          <target state="new">The CLR Garbage Collector (GC)</target>
        </trans-unit>
        <trans-unit id="105f669b-1a81-493b-9380-867fe64711b9" xml:space="preserve">
          <source>Of all the features that the CLR provides, the garbage collector
deserves special notice.</source>
          <target state="new">Of all the features that the CLR provides, the garbage collector
deserves special notice.</target>
        </trans-unit>
        <trans-unit id="7929d190-a29e-42d7-a1db-9e33bb1c19e4" xml:space="preserve">
          <source>Garbage collection (GC) is the common term for
automatic memory reclamation.</source>
          <target state="new">Garbage collection (GC) is the common term for
automatic memory reclamation.</target>
        </trans-unit>
        <trans-unit id="9a467e8b-d37f-4efb-b453-daa9f050ef6a" xml:space="preserve">
          <source>In a garbage-collected system, user
programs no longer need to invoke a special operator to delete memory.</source>
          <target state="new">In a garbage-collected system, user
programs no longer need to invoke a special operator to delete memory.</target>
        </trans-unit>
        <trans-unit id="656d6630-9823-4c86-874e-352f5f0c9d28" xml:space="preserve">
          <source>Instead the runtime automatically keeps track of all references to
memory in the garbage-collected heap, and from time-to-time, it will
traverse these references to find out which memory is still reachable by
the program.</source>
          <target state="new">Instead the runtime automatically keeps track of all references to
memory in the garbage-collected heap, and from time-to-time, it will
traverse these references to find out which memory is still reachable by
the program.</target>
        </trans-unit>
        <trans-unit id="63d5b806-7efe-4585-9cc1-6858ad1ecd11" xml:space="preserve">
          <source>All other memory is <bpt id="56b6c84c-3c6f-4836-84dc-b64af8fe80ee">&lt;em&gt;</bpt>garbage<ept id="56b6c84c-3c6f-4836-84dc-b64af8fe80ee">&lt;/em&gt;</ept> and can be reused for new
allocations.</source>
          <target state="new">All other memory is <bpt id="56b6c84c-3c6f-4836-84dc-b64af8fe80ee">&lt;em&gt;</bpt>garbage<ept id="56b6c84c-3c6f-4836-84dc-b64af8fe80ee">&lt;/em&gt;</ept> and can be reused for new
allocations.</target>
        </trans-unit>
        <trans-unit id="8753c760-f657-4431-ba97-28faed8a85ac" xml:space="preserve">
          <source>Garbage collection is a wonderful user feature because it simplifies
programming.</source>
          <target state="new">Garbage collection is a wonderful user feature because it simplifies
programming.</target>
        </trans-unit>
        <trans-unit id="56762b9b-58e1-4602-aa2d-d80250450ab8" xml:space="preserve">
          <source>The most obvious simplification is that most explicit
delete operations are no longer necessary.</source>
          <target state="new">The most obvious simplification is that most explicit
delete operations are no longer necessary.</target>
        </trans-unit>
        <trans-unit id="ef1066bd-83cd-4134-8c46-fa4f8358f3ea" xml:space="preserve">
          <source>While removing the delete
operations is important, the real value to the programmer is a bit more
subtle:</source>
          <target state="new">While removing the delete
operations is important, the real value to the programmer is a bit more
subtle:</target>
        </trans-unit>
        <trans-unit id="992e6b33-e481-412a-aab3-0c6a08fa4be0" xml:space="preserve">
          <source>Garbage collection simplifies interface design because you no longer
have to carefully specify which side of the interface is responsible
for deleting objects passed across the interface.</source>
          <target state="new">Garbage collection simplifies interface design because you no longer
have to carefully specify which side of the interface is responsible
for deleting objects passed across the interface.</target>
        </trans-unit>
        <trans-unit id="692e8a7f-bf79-4fcd-b852-b2abfbf441c3" xml:space="preserve">
          <source>For example, CLR
interfaces simply return strings; they don't take string buffers
and lengths.</source>
          <target state="new">For example, CLR
interfaces simply return strings; they don't take string buffers
and lengths.</target>
        </trans-unit>
        <trans-unit id="965701a8-ba46-46fd-a8af-e6acb8d0b033" xml:space="preserve">
          <source>This means they don't have to deal with the complexity
of what happens when the buffers are too small.</source>
          <target state="new">This means they don't have to deal with the complexity
of what happens when the buffers are too small.</target>
        </trans-unit>
        <trans-unit id="fd796aea-0041-4649-8202-b951e2bc2f96" xml:space="preserve">
          <source>Thus, garbage
collection allows ALL interfaces in the runtime to be simpler than
they otherwise would be.</source>
          <target state="new">Thus, garbage
collection allows ALL interfaces in the runtime to be simpler than
they otherwise would be.</target>
        </trans-unit>
        <trans-unit id="b232be65-3f3c-47fa-90ae-6abda7b9c5e5" xml:space="preserve">
          <source>Garbage collection eliminates a whole class of common user mistakes.</source>
          <target state="new">Garbage collection eliminates a whole class of common user mistakes.</target>
        </trans-unit>
        <trans-unit id="fc26aa86-080e-4f7a-bd73-cb1174563eff" xml:space="preserve">
          <source>It is frightfully easy to make mistakes concerning the lifetime of a
particular object, either deleting it too soon (leading to memory
corruption), or too late (unreachable memory leaks).</source>
          <target state="new">It is frightfully easy to make mistakes concerning the lifetime of a
particular object, either deleting it too soon (leading to memory
corruption), or too late (unreachable memory leaks).</target>
        </trans-unit>
        <trans-unit id="34c297e1-3bbc-4474-aa5d-56d837fe8e8a" xml:space="preserve">
          <source>Since a typical
program uses literally MILLIONS of objects, the probability for
error is quite high.</source>
          <target state="new">Since a typical
program uses literally MILLIONS of objects, the probability for
error is quite high.</target>
        </trans-unit>
        <trans-unit id="6536ad91-edc3-4f55-98ec-09336a31b4fd" xml:space="preserve">
          <source>In addition, tracking down lifetime bugs is
very difficult, especially if the object is referenced by many
other objects.</source>
          <target state="new">In addition, tracking down lifetime bugs is
very difficult, especially if the object is referenced by many
other objects.</target>
        </trans-unit>
        <trans-unit id="6c3700c3-537e-4271-93da-61008efa200d" xml:space="preserve">
          <source>Making this class of mistakes impossible avoids a lot
of grief.</source>
          <target state="new">Making this class of mistakes impossible avoids a lot
of grief.</target>
        </trans-unit>
        <trans-unit id="c314c2e6-cbb5-4f2d-bf56-4c033212f0ac" xml:space="preserve">
          <source>Still, it is not the usefulness of garbage collection that makes it
worthy of special note here.</source>
          <target state="new">Still, it is not the usefulness of garbage collection that makes it
worthy of special note here.</target>
        </trans-unit>
        <trans-unit id="506147d9-2d95-4802-bdcb-e4e19ab63235" xml:space="preserve">
          <source>More important is the simple requirement it
places on the runtime itself:</source>
          <target state="new">More important is the simple requirement it
places on the runtime itself:</target>
        </trans-unit>
        <trans-unit id="4ba4e9db-eb9c-410e-840b-8384456a1a28" xml:space="preserve">
          <source>Garbage collection requires ALL references to the GC heap to be
tracked.</source>
          <target state="new">Garbage collection requires ALL references to the GC heap to be
tracked.</target>
        </trans-unit>
        <trans-unit id="051070d7-4bb8-471b-b63d-63c42fdd7ed5" xml:space="preserve">
          <source>While this is a very simple requirement, it in fact has profound
ramifications for the runtime.</source>
          <target state="new">While this is a very simple requirement, it in fact has profound
ramifications for the runtime.</target>
        </trans-unit>
        <trans-unit id="40c1a6b7-713e-4678-832a-4de356473c10" xml:space="preserve">
          <source>As you can imagine, knowing where every
pointer to an object is at every moment of program execution can be
quite difficult.</source>
          <target state="new">As you can imagine, knowing where every
pointer to an object is at every moment of program execution can be
quite difficult.</target>
        </trans-unit>
        <trans-unit id="4e44405e-f3c8-497b-992b-eb578c925313" xml:space="preserve">
          <source>We have one mitigating factor, though.</source>
          <target state="new">We have one mitigating factor, though.</target>
        </trans-unit>
        <trans-unit id="9be1396e-e3db-4a6d-b6df-6d5c67234795" xml:space="preserve">
          <source>Technically,
this requirement only applies to when a GC actually needs to happen
(thus, in theory we don't need to know where all GC references are all
the time, but only at the time of a GC).</source>
          <target state="new">Technically,
this requirement only applies to when a GC actually needs to happen
(thus, in theory we don't need to know where all GC references are all
the time, but only at the time of a GC).</target>
        </trans-unit>
        <trans-unit id="d7e207b3-f1ef-4de1-8814-0e5cc7141b69" xml:space="preserve">
          <source>In practice, however, this
mitigation doesn't completely apply because of another feature of the
CLR:</source>
          <target state="new">In practice, however, this
mitigation doesn't completely apply because of another feature of the
CLR:</target>
        </trans-unit>
        <trans-unit id="5ea53a94-dc1a-4358-9e9d-0a31c963a090" xml:space="preserve">
          <source>The CLR supports multiple concurrent threads of execution with a
single process.</source>
          <target state="new">The CLR supports multiple concurrent threads of execution with a
single process.</target>
        </trans-unit>
        <trans-unit id="a4ddd93e-9134-4188-aeaf-ba85a7067780" xml:space="preserve">
          <source>At any time some other thread of execution might perform an allocation
that requires a garbage collection.</source>
          <target state="new">At any time some other thread of execution might perform an allocation
that requires a garbage collection.</target>
        </trans-unit>
        <trans-unit id="bd834dfb-ec16-47ac-8d55-c2fec9c0a698" xml:space="preserve">
          <source>The exact sequence of operations
across concurrently executing threads is non-deterministic.</source>
          <target state="new">The exact sequence of operations
across concurrently executing threads is non-deterministic.</target>
        </trans-unit>
        <trans-unit id="cd5ff6e7-3dce-4619-ad4b-00358f86a570" xml:space="preserve">
          <source>We can't
tell exactly what one thread will be doing when another thread requests
an allocation that will trigger a GC.</source>
          <target state="new">We can't
tell exactly what one thread will be doing when another thread requests
an allocation that will trigger a GC.</target>
        </trans-unit>
        <trans-unit id="39e46739-583a-4201-ad06-1e7818184e57" xml:space="preserve">
          <source>Thus, GCs can really happen any
time.</source>
          <target state="new">Thus, GCs can really happen any
time.</target>
        </trans-unit>
        <trans-unit id="27df7fce-d3ca-48a7-8232-0714a688121c" xml:space="preserve">
          <source>Now the CLR does NOT need to respond <bpt id="e141d018-afd8-4ec7-b6dc-3d66873bbe6a">&lt;em&gt;</bpt>immediately<ept id="e141d018-afd8-4ec7-b6dc-3d66873bbe6a">&lt;/em&gt;</ept> to another
thread's desire to do a GC, so the CLR has a little "wiggle room" and
doesn't need to track GC references at <bpt id="d71eec42-0c16-4c97-9636-ffb4ed22f4c3">&lt;em&gt;</bpt>all<ept id="d71eec42-0c16-4c97-9636-ffb4ed22f4c3">&lt;/em&gt;</ept> points of execution, but it
<bpt id="8e70a9a0-8cd4-41b1-b1b9-beb642f1ee4a">&lt;em&gt;</bpt>does<ept id="8e70a9a0-8cd4-41b1-b1b9-beb642f1ee4a">&lt;/em&gt;</ept> need to do so at enough places that it can guarantee "timely"
response to the need to do a GC caused by an allocation on another
thread.</source>
          <target state="new">Now the CLR does NOT need to respond <bpt id="e141d018-afd8-4ec7-b6dc-3d66873bbe6a">&lt;em&gt;</bpt>immediately<ept id="e141d018-afd8-4ec7-b6dc-3d66873bbe6a">&lt;/em&gt;</ept> to another
thread's desire to do a GC, so the CLR has a little "wiggle room" and
doesn't need to track GC references at <bpt id="d71eec42-0c16-4c97-9636-ffb4ed22f4c3">&lt;em&gt;</bpt>all<ept id="d71eec42-0c16-4c97-9636-ffb4ed22f4c3">&lt;/em&gt;</ept> points of execution, but it
<bpt id="8e70a9a0-8cd4-41b1-b1b9-beb642f1ee4a">&lt;em&gt;</bpt>does<ept id="8e70a9a0-8cd4-41b1-b1b9-beb642f1ee4a">&lt;/em&gt;</ept> need to do so at enough places that it can guarantee "timely"
response to the need to do a GC caused by an allocation on another
thread.</target>
        </trans-unit>
        <trans-unit id="0181f640-172a-46b3-ab5f-add6a98e2d22" xml:space="preserve">
          <source>What this means is that the CLR needs to track <bpt id="a22af42b-733f-4950-8457-775afee5ee84">&lt;em&gt;</bpt>all<ept id="a22af42b-733f-4950-8457-775afee5ee84">&lt;/em&gt;</ept> references to the
GC heap <bpt id="e8d24bdf-5966-45a3-85ed-ef4b84d0c749">&lt;em&gt;</bpt>almost<ept id="e8d24bdf-5966-45a3-85ed-ef4b84d0c749">&lt;/em&gt;</ept> all the time.</source>
          <target state="new">What this means is that the CLR needs to track <bpt id="a22af42b-733f-4950-8457-775afee5ee84">&lt;em&gt;</bpt>all<ept id="a22af42b-733f-4950-8457-775afee5ee84">&lt;/em&gt;</ept> references to the
GC heap <bpt id="e8d24bdf-5966-45a3-85ed-ef4b84d0c749">&lt;em&gt;</bpt>almost<ept id="e8d24bdf-5966-45a3-85ed-ef4b84d0c749">&lt;/em&gt;</ept> all the time.</target>
        </trans-unit>
        <trans-unit id="abc739e8-ea52-4f16-97cc-6e049b7a76a6" xml:space="preserve">
          <source>Since GC references may reside in machine
registers, in local variables, statics, or other fields, there is quite
a bit to track.</source>
          <target state="new">Since GC references may reside in machine
registers, in local variables, statics, or other fields, there is quite
a bit to track.</target>
        </trans-unit>
        <trans-unit id="e90c293e-0ffa-47ed-97fc-4d64c0e97abf" xml:space="preserve">
          <source>The most problematic of these locations are machine
registers and local variables because they are so intimately related to
the actual execution of user code.</source>
          <target state="new">The most problematic of these locations are machine
registers and local variables because they are so intimately related to
the actual execution of user code.</target>
        </trans-unit>
        <trans-unit id="ea4cf82d-eab3-4d11-9065-ab70ab05668c" xml:space="preserve">
          <source>Effectively, what this means is that
the <bpt id="93367487-8aaf-4039-b8a6-0ce647284070">&lt;em&gt;</bpt>machine code<ept id="93367487-8aaf-4039-b8a6-0ce647284070">&lt;/em&gt;</ept> that manipulates GC references has another
requirement: it must track all the GC references that it uses.</source>
          <target state="new">Effectively, what this means is that
the <bpt id="93367487-8aaf-4039-b8a6-0ce647284070">&lt;em&gt;</bpt>machine code<ept id="93367487-8aaf-4039-b8a6-0ce647284070">&lt;/em&gt;</ept> that manipulates GC references has another
requirement: it must track all the GC references that it uses.</target>
        </trans-unit>
        <trans-unit id="90311764-3e50-411f-a696-7b35eeb7338b" xml:space="preserve">
          <source>This
implies some extra work for the compiler to emit the instructions to
track the references.</source>
          <target state="new">This
implies some extra work for the compiler to emit the instructions to
track the references.</target>
        </trans-unit>
        <trans-unit id="c9bea8df-731f-4bf6-aaba-712f38126a09" xml:space="preserve">
          <source>To learn more, check out the <bpt id="bef77a27-a9cc-44f6-90b2-401a19ce7435CapsExtId1">&lt;linkText&gt;</bpt>Garbage Collector design
document<ept id="bef77a27-a9cc-44f6-90b2-401a19ce7435CapsExtId1">&lt;/linkText&gt;</ept><bpt id="bef77a27-a9cc-44f6-90b2-401a19ce7435CapsExtId2">&lt;title&gt;</bpt><ept id="bef77a27-a9cc-44f6-90b2-401a19ce7435CapsExtId2">&lt;/title&gt;</ept>.</source>
          <target state="new">To learn more, check out the <bpt id="bef77a27-a9cc-44f6-90b2-401a19ce7435CapsExtId1">&lt;linkText&gt;</bpt>Garbage Collector design
document<ept id="bef77a27-a9cc-44f6-90b2-401a19ce7435CapsExtId1">&lt;/linkText&gt;</ept><bpt id="bef77a27-a9cc-44f6-90b2-401a19ce7435CapsExtId2">&lt;title&gt;</bpt><ept id="bef77a27-a9cc-44f6-90b2-401a19ce7435CapsExtId2">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="3b12aad7-bd55-495b-8ddd-6a1ad138f4d0" xml:space="preserve">
          <source>The Concept of "Managed Code"</source>
          <target state="new">The Concept of "Managed Code"</target>
        </trans-unit>
        <trans-unit id="3f33f8ac-3e3d-444b-a55f-ed15c0f3f906" xml:space="preserve">
          <source>Code that does the extra bookkeeping so that it can report all of its
live GC references "almost all the time" is called <bpt id="61ecea72-b914-4ae7-acca-91b810aa570f">&lt;em&gt;</bpt>managed code<ept id="61ecea72-b914-4ae7-acca-91b810aa570f">&lt;/em&gt;</ept>
(because it is "managed" by the CLR).</source>
          <target state="new">Code that does the extra bookkeeping so that it can report all of its
live GC references "almost all the time" is called <bpt id="61ecea72-b914-4ae7-acca-91b810aa570f">&lt;em&gt;</bpt>managed code<ept id="61ecea72-b914-4ae7-acca-91b810aa570f">&lt;/em&gt;</ept>
(because it is "managed" by the CLR).</target>
        </trans-unit>
        <trans-unit id="aba4bf3c-713a-41e6-8cf7-5614aa0c711c" xml:space="preserve">
          <source>Code that does not do this is
called <bpt id="4edc7ca8-b1c7-4311-abf2-12f3c57fadab">&lt;em&gt;</bpt>unmanaged code<ept id="4edc7ca8-b1c7-4311-abf2-12f3c57fadab">&lt;/em&gt;</ept>.</source>
          <target state="new">Code that does not do this is
called <bpt id="4edc7ca8-b1c7-4311-abf2-12f3c57fadab">&lt;em&gt;</bpt>unmanaged code<ept id="4edc7ca8-b1c7-4311-abf2-12f3c57fadab">&lt;/em&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="411e7d46-f66a-41cd-bb9f-09f6bf83e4a5" xml:space="preserve">
          <source>Thus all code that existed before the CLR is
unmanaged code, and in particular, all operating system code is
unmanaged.</source>
          <target state="new">Thus all code that existed before the CLR is
unmanaged code, and in particular, all operating system code is
unmanaged.</target>
        </trans-unit>
        <trans-unit id="da677810-5595-4486-98cb-8eed17eb06a6" xml:space="preserve">
          <source>The stack unwinding problem</source>
          <target state="new">The stack unwinding problem</target>
        </trans-unit>
        <trans-unit id="35aa7a2a-f8e6-4661-9b9c-f00b9376b475" xml:space="preserve">
          <source>Clearly, because managed code needs the services of the operating
system, there will be times when managed code calls unmanaged code.</source>
          <target state="new">Clearly, because managed code needs the services of the operating
system, there will be times when managed code calls unmanaged code.</target>
        </trans-unit>
        <trans-unit id="b4403089-d81a-42a0-847b-206757284072" xml:space="preserve">
          <source>Similarly, because the operating system originally started the managed
code, there are also times when unmanaged code calls into managed code.</source>
          <target state="new">Similarly, because the operating system originally started the managed
code, there are also times when unmanaged code calls into managed code.</target>
        </trans-unit>
        <trans-unit id="41207bf3-d676-4fac-9f1b-b12b2f8fad98" xml:space="preserve">
          <source>Thus, in general, if you stop a managed program at an arbitrary
location, the call stack will have a mixture of frames created by
managed code and frames created by unmanaged code.</source>
          <target state="new">Thus, in general, if you stop a managed program at an arbitrary
location, the call stack will have a mixture of frames created by
managed code and frames created by unmanaged code.</target>
        </trans-unit>
        <trans-unit id="1aaaae9b-0fdf-4cbd-b588-c8d913c58759" xml:space="preserve">
          <source>The stack frames for unmanaged code have <bpt id="143bee85-717b-4166-bf29-2b624960829d">&lt;em&gt;</bpt>no<ept id="143bee85-717b-4166-bf29-2b624960829d">&lt;/em&gt;</ept> requirements on them over
and above running the program.</source>
          <target state="new">The stack frames for unmanaged code have <bpt id="143bee85-717b-4166-bf29-2b624960829d">&lt;em&gt;</bpt>no<ept id="143bee85-717b-4166-bf29-2b624960829d">&lt;/em&gt;</ept> requirements on them over
and above running the program.</target>
        </trans-unit>
        <trans-unit id="9f23678c-4e51-4444-b5c8-9b0e3ee53a59" xml:space="preserve">
          <source>In particular, there is no requirement
that they can be <bpt id="12c4919a-c29f-40ac-a16c-611f1f9e7404">&lt;em&gt;</bpt>unwound<ept id="12c4919a-c29f-40ac-a16c-611f1f9e7404">&lt;/em&gt;</ept> at runtime to find their caller.</source>
          <target state="new">In particular, there is no requirement
that they can be <bpt id="12c4919a-c29f-40ac-a16c-611f1f9e7404">&lt;em&gt;</bpt>unwound<ept id="12c4919a-c29f-40ac-a16c-611f1f9e7404">&lt;/em&gt;</ept> at runtime to find their caller.</target>
        </trans-unit>
        <trans-unit id="f24c462d-ee3f-4ca5-9110-1f26bb9887ce" xml:space="preserve">
          <source>What this
means is that if you stop a program at an arbitrary place, and it
happens to be in a unmanaged method, there is no way in general\[1\] to
find who the caller was.</source>
          <target state="new">What this
means is that if you stop a program at an arbitrary place, and it
happens to be in a unmanaged method, there is no way in general\[1\] to
find who the caller was.</target>
        </trans-unit>
        <trans-unit id="63242e1b-6af2-4707-b091-1660098f1c12" xml:space="preserve">
          <source>You can only do this in the debugger because of
extra information stored in the symbolic information (PDB file).</source>
          <target state="new">You can only do this in the debugger because of
extra information stored in the symbolic information (PDB file).</target>
        </trans-unit>
        <trans-unit id="b1e7fe6a-4b37-4f2e-bfa3-e635edbe9259" xml:space="preserve">
          <source>This
information is not guaranteed to be available (which is why you
sometimes don't get good stack traces in a debugger).</source>
          <target state="new">This
information is not guaranteed to be available (which is why you
sometimes don't get good stack traces in a debugger).</target>
        </trans-unit>
        <trans-unit id="cdaab1c5-fddb-469c-b010-5e0f12b77930" xml:space="preserve">
          <source>This is quite
problematic for managed code, because any stack that can't be unwound
might in fact contain managed code frames (which contain GC references
that need to be reported).</source>
          <target state="new">This is quite
problematic for managed code, because any stack that can't be unwound
might in fact contain managed code frames (which contain GC references
that need to be reported).</target>
        </trans-unit>
        <trans-unit id="14af00e2-0eda-429d-a773-98d0176f9099" xml:space="preserve">
          <source>Managed code has additional requirements on it: not only must it track
all the GC references it uses during its execution, but it must also be
able to unwind to its caller.</source>
          <target state="new">Managed code has additional requirements on it: not only must it track
all the GC references it uses during its execution, but it must also be
able to unwind to its caller.</target>
        </trans-unit>
        <trans-unit id="3e02f00e-d676-4625-b079-04e99b1c4afa" xml:space="preserve">
          <source>Additionally, whenever there is a
transition from managed code to unmanaged code (or the reverse), managed
code must also do additional bookkeeping to make up for the fact that
unmanaged code does not know how to unwind its stack frames.</source>
          <target state="new">Additionally, whenever there is a
transition from managed code to unmanaged code (or the reverse), managed
code must also do additional bookkeeping to make up for the fact that
unmanaged code does not know how to unwind its stack frames.</target>
        </trans-unit>
        <trans-unit id="16c2d6e2-ff43-4a81-bc39-19a23f887db6" xml:space="preserve">
          <source>Effectively, managed code links together the parts of the stack that
contain managed frames.</source>
          <target state="new">Effectively, managed code links together the parts of the stack that
contain managed frames.</target>
        </trans-unit>
        <trans-unit id="f44e56b9-d9ab-42d7-83e1-9b745ec35504" xml:space="preserve">
          <source>Thus, while it still may be impossible to unwind
the unmanaged stack frames without additional information, it will
always be possible to find the chunks of the stack that correspond to
managed code and to enumerate the managed frames in those chunks.</source>
          <target state="new">Thus, while it still may be impossible to unwind
the unmanaged stack frames without additional information, it will
always be possible to find the chunks of the stack that correspond to
managed code and to enumerate the managed frames in those chunks.</target>
        </trans-unit>
        <trans-unit id="25391495-fbc7-4a2b-8f0f-2fdc270ac83e" xml:space="preserve">
          <source>\[1\] More recent platform ABIs (application binary interfaces) define
conventions for encoding this information, however there is typically
not a strict requirement for all code to follow them.</source>
          <target state="new">\[1\] More recent platform ABIs (application binary interfaces) define
conventions for encoding this information, however there is typically
not a strict requirement for all code to follow them.</target>
        </trans-unit>
        <trans-unit id="93cc8b9a-a008-490d-bdbe-8ede1554eeee" xml:space="preserve">
          <source>The "World" of Managed Code</source>
          <target state="new">The "World" of Managed Code</target>
        </trans-unit>
        <trans-unit id="c5a80ee3-6f57-4c52-80fc-cf4b3d830c2a" xml:space="preserve">
          <source>The result is that special bookkeeping is needed at every transition to
and from managed code.</source>
          <target state="new">The result is that special bookkeeping is needed at every transition to
and from managed code.</target>
        </trans-unit>
        <trans-unit id="b3c05de3-c139-42bd-bb91-7560f49f8262" xml:space="preserve">
          <source>Managed code effectively lives in its own "world"
where execution can't enter or leave unless the CLR knows about it.</source>
          <target state="new">Managed code effectively lives in its own "world"
where execution can't enter or leave unless the CLR knows about it.</target>
        </trans-unit>
        <trans-unit id="aee8a2df-a396-4552-8a33-c927a6bceb55" xml:space="preserve">
          <source>The
two worlds are in a very real sense distinct from one another (at any
point in time the code is in the <bpt id="a54ef06e-9fe8-4d9c-998a-a669c2905452">&lt;em&gt;</bpt>managed world<ept id="a54ef06e-9fe8-4d9c-998a-a669c2905452">&lt;/em&gt;</ept> or the <bpt id="5a5f15a5-4b40-495b-8d88-5f2ffbbb7750">&lt;em&gt;</bpt>unmanaged
world<ept id="5a5f15a5-4b40-495b-8d88-5f2ffbbb7750">&lt;/em&gt;</ept>).</source>
          <target state="new">The
two worlds are in a very real sense distinct from one another (at any
point in time the code is in the <bpt id="a54ef06e-9fe8-4d9c-998a-a669c2905452">&lt;em&gt;</bpt>managed world<ept id="a54ef06e-9fe8-4d9c-998a-a669c2905452">&lt;/em&gt;</ept> or the <bpt id="5a5f15a5-4b40-495b-8d88-5f2ffbbb7750">&lt;em&gt;</bpt>unmanaged
world<ept id="5a5f15a5-4b40-495b-8d88-5f2ffbbb7750">&lt;/em&gt;</ept>).</target>
        </trans-unit>
        <trans-unit id="d14b0719-2e47-4971-9cde-4c8ae725d152" xml:space="preserve">
          <source>Moreover, because the execution of managed code is specified in
a CLR format (with its <bpt id="8deb819d-de6e-4006-9560-29d34c5bc747CapsExtId1">&lt;linkText&gt;</bpt>Common Intermediate
Language<ept id="8deb819d-de6e-4006-9560-29d34c5bc747CapsExtId1">&lt;/linkText&gt;</ept><bpt id="8deb819d-de6e-4006-9560-29d34c5bc747CapsExtId2">&lt;title&gt;</bpt><ept id="8deb819d-de6e-4006-9560-29d34c5bc747CapsExtId2">&lt;/title&gt;</ept>
(CIL)), and it is the CLR that converts it to run on the native
hardware, the CLR has <bpt id="717f7d47-74ec-424f-b294-315abab2162a">&lt;em&gt;</bpt>much<ept id="717f7d47-74ec-424f-b294-315abab2162a">&lt;/em&gt;</ept> more control over exactly what that
execution does.</source>
          <target state="new">Moreover, because the execution of managed code is specified in
a CLR format (with its <bpt id="8deb819d-de6e-4006-9560-29d34c5bc747CapsExtId1">&lt;linkText&gt;</bpt>Common Intermediate
Language<ept id="8deb819d-de6e-4006-9560-29d34c5bc747CapsExtId1">&lt;/linkText&gt;</ept><bpt id="8deb819d-de6e-4006-9560-29d34c5bc747CapsExtId2">&lt;title&gt;</bpt><ept id="8deb819d-de6e-4006-9560-29d34c5bc747CapsExtId2">&lt;/title&gt;</ept>
(CIL)), and it is the CLR that converts it to run on the native
hardware, the CLR has <bpt id="717f7d47-74ec-424f-b294-315abab2162a">&lt;em&gt;</bpt>much<ept id="717f7d47-74ec-424f-b294-315abab2162a">&lt;/em&gt;</ept> more control over exactly what that
execution does.</target>
        </trans-unit>
        <trans-unit id="7e339bd7-56d8-40aa-a399-255b3f10470a" xml:space="preserve">
          <source>For example, the CLR could change the meaning of what it
means to fetch a field from an object or call a function.</source>
          <target state="new">For example, the CLR could change the meaning of what it
means to fetch a field from an object or call a function.</target>
        </trans-unit>
        <trans-unit id="f50d28aa-7216-483f-954a-383490c0d36b" xml:space="preserve">
          <source>In fact, the
CLR does exactly this to support the ability to create
MarshalByReference objects.</source>
          <target state="new">In fact, the
CLR does exactly this to support the ability to create
MarshalByReference objects.</target>
        </trans-unit>
        <trans-unit id="7d2144bc-4366-414a-8f07-32995ee9b944" xml:space="preserve">
          <source>These appear to be ordinary local objects,
but in fact may exist on another machine.</source>
          <target state="new">These appear to be ordinary local objects,
but in fact may exist on another machine.</target>
        </trans-unit>
        <trans-unit id="52f961e9-dd3c-4aba-953b-6572166ea74f" xml:space="preserve">
          <source>In short, the managed world of
the CLR has a large number of <bpt id="569225f1-f2b5-4c73-a3cd-937607e90916">&lt;em&gt;</bpt>execution hooks<ept id="569225f1-f2b5-4c73-a3cd-937607e90916">&lt;/em&gt;</ept> that it can use to
support powerful features which will be explained in more detail in the
coming sections.</source>
          <target state="new">In short, the managed world of
the CLR has a large number of <bpt id="569225f1-f2b5-4c73-a3cd-937607e90916">&lt;em&gt;</bpt>execution hooks<ept id="569225f1-f2b5-4c73-a3cd-937607e90916">&lt;/em&gt;</ept> that it can use to
support powerful features which will be explained in more detail in the
coming sections.</target>
        </trans-unit>
        <trans-unit id="5363594e-a6dc-447f-bfb7-e079080745d8" xml:space="preserve">
          <source>In addition, there is another important ramification of managed code
that may not be so obvious.</source>
          <target state="new">In addition, there is another important ramification of managed code
that may not be so obvious.</target>
        </trans-unit>
        <trans-unit id="2cdfb130-5055-48be-aaf6-303321065d27" xml:space="preserve">
          <source>In the unmanaged world, GC pointers are not
allowed (since they can't be tracked), and there is a bookkeeping cost
associated with transitioning from managed to unmanaged code.</source>
          <target state="new">In the unmanaged world, GC pointers are not
allowed (since they can't be tracked), and there is a bookkeeping cost
associated with transitioning from managed to unmanaged code.</target>
        </trans-unit>
        <trans-unit id="3801ba73-1b8a-4e99-8774-5fa654318305" xml:space="preserve">
          <source>What this
means is that while you <bpt id="4c01f3dd-dfd4-47d6-9a45-a95286058824">&lt;em&gt;</bpt>can<ept id="4c01f3dd-dfd4-47d6-9a45-a95286058824">&lt;/em&gt;</ept> call arbitrary unmanaged functions from
managed code, it is often not pleasant to do so.</source>
          <target state="new">What this
means is that while you <bpt id="4c01f3dd-dfd4-47d6-9a45-a95286058824">&lt;em&gt;</bpt>can<ept id="4c01f3dd-dfd4-47d6-9a45-a95286058824">&lt;/em&gt;</ept> call arbitrary unmanaged functions from
managed code, it is often not pleasant to do so.</target>
        </trans-unit>
        <trans-unit id="c0d826d7-73d3-45b0-80e0-46a448ec1f82" xml:space="preserve">
          <source>Unmanaged methods don't
use GC objects in their arguments and return types, which means that any
"objects" or "object handles" that those unmanaged functions create and
use need to be explicitly deallocated.</source>
          <target state="new">Unmanaged methods don't
use GC objects in their arguments and return types, which means that any
"objects" or "object handles" that those unmanaged functions create and
use need to be explicitly deallocated.</target>
        </trans-unit>
        <trans-unit id="256e3faf-8079-4200-a1de-36ca647ea085" xml:space="preserve">
          <source>This is quite unfortunate.</source>
          <target state="new">This is quite unfortunate.</target>
        </trans-unit>
        <trans-unit id="ed9b18c7-d412-423f-b223-065ad931df81" xml:space="preserve">
          <source>Because these APIs can't take advantage of CLR functionality such as
exceptions or inheritance, they tend to have a "mismatched" user
experience compared to how the interfaces would have been designed in
managed code.</source>
          <target state="new">Because these APIs can't take advantage of CLR functionality such as
exceptions or inheritance, they tend to have a "mismatched" user
experience compared to how the interfaces would have been designed in
managed code.</target>
        </trans-unit>
        <trans-unit id="6b7802e4-c7a9-4e66-9929-634fefc68776" xml:space="preserve">
          <source>The result of this is that unmanaged interfaces are almost always
<bpt id="f1c8bd38-5fbb-421c-bb79-0e7927e56b03">&lt;em&gt;</bpt>wrapped<ept id="f1c8bd38-5fbb-421c-bb79-0e7927e56b03">&lt;/em&gt;</ept> before being exposed to managed code developers.</source>
          <target state="new">The result of this is that unmanaged interfaces are almost always
<bpt id="f1c8bd38-5fbb-421c-bb79-0e7927e56b03">&lt;em&gt;</bpt>wrapped<ept id="f1c8bd38-5fbb-421c-bb79-0e7927e56b03">&lt;/em&gt;</ept> before being exposed to managed code developers.</target>
        </trans-unit>
        <trans-unit id="62980dda-e90d-49ee-b1d7-e5d7874cb83a" xml:space="preserve">
          <source>For example,
when accessing files, you don't use the Win32 CreateFile functions
provided by the operating system, but rather the managed System.IO.File
class that wraps this functionality.</source>
          <target state="new">For example,
when accessing files, you don't use the Win32 CreateFile functions
provided by the operating system, but rather the managed System.IO.File
class that wraps this functionality.</target>
        </trans-unit>
        <trans-unit id="85dfb31e-f8cf-4e37-a16d-9876c970f70f" xml:space="preserve">
          <source>It is in fact extremely rare that
unmanaged functionality is exposed to users directly.</source>
          <target state="new">It is in fact extremely rare that
unmanaged functionality is exposed to users directly.</target>
        </trans-unit>
        <trans-unit id="882b55ec-98f1-45ca-9dc4-72c9b4762295" xml:space="preserve">
          <source>While this wrapping may seem to be "bad" in some way (more code that
does not seem do much), it is in fact good because it actually adds
quite a bit of value.</source>
          <target state="new">While this wrapping may seem to be "bad" in some way (more code that
does not seem do much), it is in fact good because it actually adds
quite a bit of value.</target>
        </trans-unit>
        <trans-unit id="4f5ead67-0d56-4630-a8d3-961202a232a4" xml:space="preserve">
          <source>Remember it was always <bpt id="ae3b97e7-619a-4048-b7d0-5299de1d047c">&lt;em&gt;</bpt>possible<ept id="ae3b97e7-619a-4048-b7d0-5299de1d047c">&lt;/em&gt;</ept> to expose the
unmanaged interfaces directly; we <bpt id="32791066-33fb-415c-8072-514bdabf9ca2">&lt;em&gt;</bpt>chose<ept id="32791066-33fb-415c-8072-514bdabf9ca2">&lt;/em&gt;</ept> to wrap the functionality.</source>
          <target state="new">Remember it was always <bpt id="ae3b97e7-619a-4048-b7d0-5299de1d047c">&lt;em&gt;</bpt>possible<ept id="ae3b97e7-619a-4048-b7d0-5299de1d047c">&lt;/em&gt;</ept> to expose the
unmanaged interfaces directly; we <bpt id="32791066-33fb-415c-8072-514bdabf9ca2">&lt;em&gt;</bpt>chose<ept id="32791066-33fb-415c-8072-514bdabf9ca2">&lt;/em&gt;</ept> to wrap the functionality.</target>
        </trans-unit>
        <trans-unit id="2042e904-a0c8-4d04-b1f2-c993eff366e3" xml:space="preserve">
          <source>Why?</source>
          <target state="new">Why?</target>
        </trans-unit>
        <trans-unit id="507a0867-76a4-4f37-ba7b-129c38040854" xml:space="preserve">
          <source>Because the overarching goal of the runtime is to <bpt id="0da4fe83-459d-40d9-9a5c-01dca55c566b">&lt;strong&gt;</bpt>make
programming easy<ept id="0da4fe83-459d-40d9-9a5c-01dca55c566b">&lt;/strong&gt;</ept>, and typically the unmanaged functions are not easy
enough.</source>
          <target state="new">Because the overarching goal of the runtime is to <bpt id="0da4fe83-459d-40d9-9a5c-01dca55c566b">&lt;strong&gt;</bpt>make
programming easy<ept id="0da4fe83-459d-40d9-9a5c-01dca55c566b">&lt;/strong&gt;</ept>, and typically the unmanaged functions are not easy
enough.</target>
        </trans-unit>
        <trans-unit id="cfe35add-954d-4de8-9200-05b5b8d3ec34" xml:space="preserve">
          <source>Most often, unmanaged interfaces are <bpt id="c1589034-1a1c-4fe3-b32c-c08d08583baf">&lt;em&gt;</bpt>not<ept id="c1589034-1a1c-4fe3-b32c-c08d08583baf">&lt;/em&gt;</ept> designed with ease of
use in mind, but rather are tuned for completeness.</source>
          <target state="new">Most often, unmanaged interfaces are <bpt id="c1589034-1a1c-4fe3-b32c-c08d08583baf">&lt;em&gt;</bpt>not<ept id="c1589034-1a1c-4fe3-b32c-c08d08583baf">&lt;/em&gt;</ept> designed with ease of
use in mind, but rather are tuned for completeness.</target>
        </trans-unit>
        <trans-unit id="474c1dde-aafe-4e04-a59d-25af0f6679fc" xml:space="preserve">
          <source>Anyone looking at
the arguments to CreateFile or CreateProcess would be hard pressed to
characterize them as "easy."</source>
          <target state="new">Anyone looking at
the arguments to CreateFile or CreateProcess would be hard pressed to
characterize them as "easy."</target>
        </trans-unit>
        <trans-unit id="0061252c-c130-47d7-94e1-eaefae8682be" xml:space="preserve">
          <source>Luckily, the functionality gets a
"facelift" when it enters the managed world, and while this makeover is
often very "low tech" (requiring nothing more complex than renaming,
simplification, and organizing the functionality), it is also profoundly
useful.</source>
          <target state="new">Luckily, the functionality gets a
"facelift" when it enters the managed world, and while this makeover is
often very "low tech" (requiring nothing more complex than renaming,
simplification, and organizing the functionality), it is also profoundly
useful.</target>
        </trans-unit>
        <trans-unit id="3532744e-2e03-4340-9d0f-0a1d2a7523b0" xml:space="preserve">
          <source>One of the very important documents created for the CLR is the
<bpt id="dcde87cf-09c5-4eb5-8f5c-f93c2d12965fCapsExtId1">&lt;linkText&gt;</bpt>Framework Design
Guidelines<ept id="dcde87cf-09c5-4eb5-8f5c-f93c2d12965fCapsExtId1">&lt;/linkText&gt;</ept><bpt id="dcde87cf-09c5-4eb5-8f5c-f93c2d12965fCapsExtId2">&lt;title&gt;</bpt><ept id="dcde87cf-09c5-4eb5-8f5c-f93c2d12965fCapsExtId2">&lt;/title&gt;</ept>.</source>
          <target state="new">One of the very important documents created for the CLR is the
<bpt id="dcde87cf-09c5-4eb5-8f5c-f93c2d12965fCapsExtId1">&lt;linkText&gt;</bpt>Framework Design
Guidelines<ept id="dcde87cf-09c5-4eb5-8f5c-f93c2d12965fCapsExtId1">&lt;/linkText&gt;</ept><bpt id="dcde87cf-09c5-4eb5-8f5c-f93c2d12965fCapsExtId2">&lt;title&gt;</bpt><ept id="dcde87cf-09c5-4eb5-8f5c-f93c2d12965fCapsExtId2">&lt;/title&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="8f36acd0-3857-4ee3-8ccf-470704ca838a" xml:space="preserve">
          <source>This
800+ page document details best practices in making new managed class
libraries.</source>
          <target state="new">This
800+ page document details best practices in making new managed class
libraries.</target>
        </trans-unit>
        <trans-unit id="78bf87c3-4579-4bcd-8259-3250ee6abd47" xml:space="preserve">
          <source>Thus, we have now seen that managed code (which is intimately involved
with the CLR) differs from unmanaged code in two important ways:</source>
          <target state="new">Thus, we have now seen that managed code (which is intimately involved
with the CLR) differs from unmanaged code in two important ways:</target>
        </trans-unit>
        <trans-unit id="d1887f30-85e8-48b2-83c1-d39a1d4dd660" xml:space="preserve">
          <source>High Tech: The code lives in a distinct world, where the CLR
controls most aspects of program execution at a very fine level
(potentially to individual instructions), and the CLR detects when
execution enters and exits managed code.</source>
          <target state="new">High Tech: The code lives in a distinct world, where the CLR
controls most aspects of program execution at a very fine level
(potentially to individual instructions), and the CLR detects when
execution enters and exits managed code.</target>
        </trans-unit>
        <trans-unit id="32ec5c7c-5b26-49f6-a354-3872adc7924b" xml:space="preserve">
          <source>This enables a wide variety
of useful features.</source>
          <target state="new">This enables a wide variety
of useful features.</target>
        </trans-unit>
        <trans-unit id="6c3a9f5b-900f-4041-8d3f-85266c911bd7" xml:space="preserve">
          <source>Low Tech: The fact that there is a transition cost when going from
managed to unmanaged code, as well as the fact that unmanaged code
cannot use GC objects encourages the practice of wrapping most
unmanaged code in a managed façade.</source>
          <target state="new">Low Tech: The fact that there is a transition cost when going from
managed to unmanaged code, as well as the fact that unmanaged code
cannot use GC objects encourages the practice of wrapping most
unmanaged code in a managed façade.</target>
        </trans-unit>
        <trans-unit id="01a72c3c-f782-400f-a872-dcca8f72e2f0" xml:space="preserve">
          <source>This means interfaces can get a
"facelift" to simplify them and to conform to a uniform set of
naming and design guidelines that produce a level of consistency and
discoverability that could have existed in the unmanaged world, but
does not.</source>
          <target state="new">This means interfaces can get a
"facelift" to simplify them and to conform to a uniform set of
naming and design guidelines that produce a level of consistency and
discoverability that could have existed in the unmanaged world, but
does not.</target>
        </trans-unit>
        <trans-unit id="0d4a8e93-e8ca-4aee-9b5f-0363bc7ad6e0" xml:space="preserve">
          <source><bpt id="7bc2bba8-845a-4ace-8797-79c2c6bcd93e">&lt;strong&gt;</bpt>Both<ept id="7bc2bba8-845a-4ace-8797-79c2c6bcd93e">&lt;/strong&gt;</ept> of these characteristics are very important to the success of
managed code.</source>
          <target state="new"><bpt id="7bc2bba8-845a-4ace-8797-79c2c6bcd93e">&lt;strong&gt;</bpt>Both<ept id="7bc2bba8-845a-4ace-8797-79c2c6bcd93e">&lt;/strong&gt;</ept> of these characteristics are very important to the success of
managed code.</target>
        </trans-unit>
        <trans-unit id="7881e293-62e6-4e3f-a038-14300e7144f6" xml:space="preserve">
          <source>Memory and Type Safety</source>
          <target state="new">Memory and Type Safety</target>
        </trans-unit>
        <trans-unit id="3c57bf96-a4d1-41b9-a17d-f1f2aefa26bf" xml:space="preserve">
          <source>One of the less obvious but quite far-reaching features that a garbage
collector enables is that of memory safety.</source>
          <target state="new">One of the less obvious but quite far-reaching features that a garbage
collector enables is that of memory safety.</target>
        </trans-unit>
        <trans-unit id="0fd6ca3d-b0b9-4cd6-91fd-3c2b0040bd17" xml:space="preserve">
          <source>The invariant of memory
safety is very simple: a program is memory safe if it accesses only
memory that has been allocated (and not freed).</source>
          <target state="new">The invariant of memory
safety is very simple: a program is memory safe if it accesses only
memory that has been allocated (and not freed).</target>
        </trans-unit>
        <trans-unit id="e04f5447-7c20-44ae-8914-a2160f20f2e2" xml:space="preserve">
          <source>This simply means that
you don't have "wild" (dangling) pointers that are pointing at random
locations (more precisely, at memory that was freed prematurely).</source>
          <target state="new">This simply means that
you don't have "wild" (dangling) pointers that are pointing at random
locations (more precisely, at memory that was freed prematurely).</target>
        </trans-unit>
        <trans-unit id="76b22fff-dab6-4eb1-b80e-9f3d657bab4a" xml:space="preserve">
          <source>Clearly, memory safety is a property we want all programs to have.</source>
          <target state="new">Clearly, memory safety is a property we want all programs to have.</target>
        </trans-unit>
        <trans-unit id="9b61f9e0-1037-4043-98e8-5fd00d9794aa" xml:space="preserve">
          <source>Dangling pointers are always bugs, and tracking them down is often quite
difficult.</source>
          <target state="new">Dangling pointers are always bugs, and tracking them down is often quite
difficult.</target>
        </trans-unit>
        <trans-unit id="7c43c0dc-2232-46de-bec4-cbc63622f6e0" xml:space="preserve">
          <source>A GC <bpt id="d037e17c-f4e6-417c-ab90-5d6f8431e8c3">&lt;em&gt;</bpt>is<ept id="d037e17c-f4e6-417c-ab90-5d6f8431e8c3">&lt;/em&gt;</ept> necessary to provide memory safety guarantees</source>
          <target state="new">A GC <bpt id="d037e17c-f4e6-417c-ab90-5d6f8431e8c3">&lt;em&gt;</bpt>is<ept id="d037e17c-f4e6-417c-ab90-5d6f8431e8c3">&lt;/em&gt;</ept> necessary to provide memory safety guarantees</target>
        </trans-unit>
        <trans-unit id="8c42c543-8332-4897-a0f0-617dfae738e8" xml:space="preserve">
          <source>One can quickly see how a garbage collector helps in ensuring memory
safety because it removes the possibility that users will prematurely
free memory (and thus access memory that was not properly allocated).</source>
          <target state="new">One can quickly see how a garbage collector helps in ensuring memory
safety because it removes the possibility that users will prematurely
free memory (and thus access memory that was not properly allocated).</target>
        </trans-unit>
        <trans-unit id="dc7c2bfb-c229-4736-936d-ec60f284fdef" xml:space="preserve">
          <source>What may not be so obvious is that if you want to guarantee memory
safety (that is make it <bpt id="7037c034-ede5-4793-9775-585a54697d0d">&lt;em&gt;</bpt>impossible<ept id="7037c034-ede5-4793-9775-585a54697d0d">&lt;/em&gt;</ept> for programmers to create
memory-unsafe programs), practically speaking you can't avoid having a
garbage collector.</source>
          <target state="new">What may not be so obvious is that if you want to guarantee memory
safety (that is make it <bpt id="7037c034-ede5-4793-9775-585a54697d0d">&lt;em&gt;</bpt>impossible<ept id="7037c034-ede5-4793-9775-585a54697d0d">&lt;/em&gt;</ept> for programmers to create
memory-unsafe programs), practically speaking you can't avoid having a
garbage collector.</target>
        </trans-unit>
        <trans-unit id="08600cab-b2c5-44bb-832f-26104ac0545a" xml:space="preserve">
          <source>The reason for this is that non-trivial programs need
<bpt id="236c7452-23e4-4969-90bc-44a2bc3905dd">&lt;em&gt;</bpt>heap style<ept id="236c7452-23e4-4969-90bc-44a2bc3905dd">&lt;/em&gt;</ept> (dynamic) memory allocations, where the lifetime of the
objects is essentially under arbitrary program control (unlike
stack-allocated, or statically-allocated memory, which has a highly
constrained allocation protocol).</source>
          <target state="new">The reason for this is that non-trivial programs need
<bpt id="236c7452-23e4-4969-90bc-44a2bc3905dd">&lt;em&gt;</bpt>heap style<ept id="236c7452-23e4-4969-90bc-44a2bc3905dd">&lt;/em&gt;</ept> (dynamic) memory allocations, where the lifetime of the
objects is essentially under arbitrary program control (unlike
stack-allocated, or statically-allocated memory, which has a highly
constrained allocation protocol).</target>
        </trans-unit>
        <trans-unit id="a1f2de01-a292-4cdf-b7f5-499844492ce3" xml:space="preserve">
          <source>In such an unconstrained environment,
the problem of determining whether a particular explicit delete
statement is correct becomes impossible to predict by program analysis.</source>
          <target state="new">In such an unconstrained environment,
the problem of determining whether a particular explicit delete
statement is correct becomes impossible to predict by program analysis.</target>
        </trans-unit>
        <trans-unit id="4107f0c9-a78c-44a0-bcf5-4d1b3158b1ac" xml:space="preserve">
          <source>Effectively, the only way you have to determine if a delete is correct
is to check it at runtime.</source>
          <target state="new">Effectively, the only way you have to determine if a delete is correct
is to check it at runtime.</target>
        </trans-unit>
        <trans-unit id="2f20d296-9b55-4e43-b588-f8750f279447" xml:space="preserve">
          <source>This is exactly what a GC does (checks to see
if memory is still live).</source>
          <target state="new">This is exactly what a GC does (checks to see
if memory is still live).</target>
        </trans-unit>
        <trans-unit id="d08173ca-2967-454d-a20c-5a87822ba43a" xml:space="preserve">
          <source>Thus, for any programs that need heap-style
memory allocations, if you want to guarantee memory safety, you <bpt id="f8601f7a-dc5b-4e5f-a350-5d8f7f025234">&lt;em&gt;</bpt>need<ept id="f8601f7a-dc5b-4e5f-a350-5d8f7f025234">&lt;/em&gt;</ept> a
GC.</source>
          <target state="new">Thus, for any programs that need heap-style
memory allocations, if you want to guarantee memory safety, you <bpt id="f8601f7a-dc5b-4e5f-a350-5d8f7f025234">&lt;em&gt;</bpt>need<ept id="f8601f7a-dc5b-4e5f-a350-5d8f7f025234">&lt;/em&gt;</ept> a
GC.</target>
        </trans-unit>
        <trans-unit id="66685862-1bc0-40ac-9149-44f0c9422f06" xml:space="preserve">
          <source>While a GC is necessary to ensure memory safety, it is not sufficient.</source>
          <target state="new">While a GC is necessary to ensure memory safety, it is not sufficient.</target>
        </trans-unit>
        <trans-unit id="f86bea2d-3a6e-4ea2-af09-d2ede2a3fe7f" xml:space="preserve">
          <source>The GC will not prevent the program from indexing off the end of an
array or accessing a field off the end of an object (possible if you
compute the field's address using a base and offset computation).</source>
          <target state="new">The GC will not prevent the program from indexing off the end of an
array or accessing a field off the end of an object (possible if you
compute the field's address using a base and offset computation).</target>
        </trans-unit>
        <trans-unit id="ec65a129-ff0f-4013-bb65-d00151de235a" xml:space="preserve">
          <source>However, if we do prevent these cases, then we can indeed make it
impossible for a programmer to create memory-unsafe programs.</source>
          <target state="new">However, if we do prevent these cases, then we can indeed make it
impossible for a programmer to create memory-unsafe programs.</target>
        </trans-unit>
        <trans-unit id="63394d50-5e7f-4cef-8841-16f8ace8f456" xml:space="preserve">
          <source>While the <bpt id="bba9f795-7cf5-4d0d-8fda-82fcd7fb11e7CapsExtId1">&lt;linkText&gt;</bpt>common intermediate
language<ept id="bba9f795-7cf5-4d0d-8fda-82fcd7fb11e7CapsExtId1">&lt;/linkText&gt;</ept><bpt id="bba9f795-7cf5-4d0d-8fda-82fcd7fb11e7CapsExtId2">&lt;title&gt;</bpt><ept id="bba9f795-7cf5-4d0d-8fda-82fcd7fb11e7CapsExtId2">&lt;/title&gt;</ept>
(CIL) <bpt id="1e7b6385-7873-49fe-8b6c-645b6b543c52">&lt;em&gt;</bpt>does<ept id="1e7b6385-7873-49fe-8b6c-645b6b543c52">&lt;/em&gt;</ept> have operators that can fetch and set arbitrary memory (and
thus violate memory safety), it also has the following memory-safe
operators and the CLR strongly encourages their use in most programming:</source>
          <target state="new">While the <bpt id="bba9f795-7cf5-4d0d-8fda-82fcd7fb11e7CapsExtId1">&lt;linkText&gt;</bpt>common intermediate
language<ept id="bba9f795-7cf5-4d0d-8fda-82fcd7fb11e7CapsExtId1">&lt;/linkText&gt;</ept><bpt id="bba9f795-7cf5-4d0d-8fda-82fcd7fb11e7CapsExtId2">&lt;title&gt;</bpt><ept id="bba9f795-7cf5-4d0d-8fda-82fcd7fb11e7CapsExtId2">&lt;/title&gt;</ept>
(CIL) <bpt id="1e7b6385-7873-49fe-8b6c-645b6b543c52">&lt;em&gt;</bpt>does<ept id="1e7b6385-7873-49fe-8b6c-645b6b543c52">&lt;/em&gt;</ept> have operators that can fetch and set arbitrary memory (and
thus violate memory safety), it also has the following memory-safe
operators and the CLR strongly encourages their use in most programming:</target>
        </trans-unit>
        <trans-unit id="b913f07e-520d-428c-9c9a-268f84c54cee" xml:space="preserve">
          <source>Field-fetch operators (LDFLD, STFLD, LDFLDA) that fetch (read), set
and take the address of a field by name.</source>
          <target state="new">Field-fetch operators (LDFLD, STFLD, LDFLDA) that fetch (read), set
and take the address of a field by name.</target>
        </trans-unit>
        <trans-unit id="b302234c-3440-4484-98b8-a240d7c82860" xml:space="preserve">
          <source>Array-fetch operators (LDELEM, STELEM, LDELEMA) that fetch, set and
take the address of an array element by index.</source>
          <target state="new">Array-fetch operators (LDELEM, STELEM, LDELEMA) that fetch, set and
take the address of an array element by index.</target>
        </trans-unit>
        <trans-unit id="2d536f7e-8acf-4749-bb3b-5c1ab5d5fdef" xml:space="preserve">
          <source>All arrays include a
tag specifying their length.</source>
          <target state="new">All arrays include a
tag specifying their length.</target>
        </trans-unit>
        <trans-unit id="6b4e1493-5b72-4b51-9436-5cf70d5fc24a" xml:space="preserve">
          <source>This facilitates an automatic bounds
check before each access.</source>
          <target state="new">This facilitates an automatic bounds
check before each access.</target>
        </trans-unit>
        <trans-unit id="2b0221ad-6fed-42a6-baee-60064ffa03fd" xml:space="preserve">
          <source>By using these operators instead of the lower-level (and unsafe)
<bpt id="db062d5e-d2df-408d-8675-ece495f7955e">&lt;em&gt;</bpt>memory-fetch<ept id="db062d5e-d2df-408d-8675-ece495f7955e">&lt;/em&gt;</ept> operators in user code, as well as avoiding other unsafe
<bpt id="42e21de8-c9c3-4ce6-a505-665f2fe2ba2cCapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="42e21de8-c9c3-4ce6-a505-665f2fe2ba2cCapsExtId1">&lt;/linkText&gt;</ept><bpt id="42e21de8-c9c3-4ce6-a505-665f2fe2ba2cCapsExtId2">&lt;title&gt;</bpt><ept id="42e21de8-c9c3-4ce6-a505-665f2fe2ba2cCapsExtId2">&lt;/title&gt;</ept>
operators (e.g., those that allow you to jump to arbitrary, and thus
possibly bad locations) one could imagine building a system that is
memory-safe but nothing more.</source>
          <target state="new">By using these operators instead of the lower-level (and unsafe)
<bpt id="db062d5e-d2df-408d-8675-ece495f7955e">&lt;em&gt;</bpt>memory-fetch<ept id="db062d5e-d2df-408d-8675-ece495f7955e">&lt;/em&gt;</ept> operators in user code, as well as avoiding other unsafe
<bpt id="42e21de8-c9c3-4ce6-a505-665f2fe2ba2cCapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="42e21de8-c9c3-4ce6-a505-665f2fe2ba2cCapsExtId1">&lt;/linkText&gt;</ept><bpt id="42e21de8-c9c3-4ce6-a505-665f2fe2ba2cCapsExtId2">&lt;title&gt;</bpt><ept id="42e21de8-c9c3-4ce6-a505-665f2fe2ba2cCapsExtId2">&lt;/title&gt;</ept>
operators (e.g., those that allow you to jump to arbitrary, and thus
possibly bad locations) one could imagine building a system that is
memory-safe but nothing more.</target>
        </trans-unit>
        <trans-unit id="1678605d-e8f2-4e7f-b988-61963df80b98" xml:space="preserve">
          <source>The CLR does not do this, however.</source>
          <target state="new">The CLR does not do this, however.</target>
        </trans-unit>
        <trans-unit id="11d3f5f6-c5a6-4052-8436-2924104ea8e6" xml:space="preserve">
          <source>Instead
the CLR enforces a stronger invariant: type safety.</source>
          <target state="new">Instead
the CLR enforces a stronger invariant: type safety.</target>
        </trans-unit>
        <trans-unit id="4fbb5cb6-81eb-4c83-a160-aff7d44c19e8" xml:space="preserve">
          <source>For type safety, conceptually each memory allocation is associated with
a type.</source>
          <target state="new">For type safety, conceptually each memory allocation is associated with
a type.</target>
        </trans-unit>
        <trans-unit id="62da88ce-8fab-4025-be86-d558e48e672d" xml:space="preserve">
          <source>All operators that act on memory locations are also conceptually
tagged with the type for which they are valid.</source>
          <target state="new">All operators that act on memory locations are also conceptually
tagged with the type for which they are valid.</target>
        </trans-unit>
        <trans-unit id="b6e36183-eba3-4f49-b927-226a7ebb2515" xml:space="preserve">
          <source>Type safety then requires
that memory tagged with a particular type can only undergo operations
allowed for that type.</source>
          <target state="new">Type safety then requires
that memory tagged with a particular type can only undergo operations
allowed for that type.</target>
        </trans-unit>
        <trans-unit id="58b84f3b-7c14-4e0c-ad64-e066f8e6c7b2" xml:space="preserve">
          <source>Not only does this ensure memory safety (no
dangling pointers), it also allows additional guarantees for each
individual type.</source>
          <target state="new">Not only does this ensure memory safety (no
dangling pointers), it also allows additional guarantees for each
individual type.</target>
        </trans-unit>
        <trans-unit id="973ca8ff-34df-4c03-86d8-605395e83a93" xml:space="preserve">
          <source>One the most important of these type-specific guarantees is that the
visibility attributes associated with a type (and in particular with
fields) are enforced.</source>
          <target state="new">One the most important of these type-specific guarantees is that the
visibility attributes associated with a type (and in particular with
fields) are enforced.</target>
        </trans-unit>
        <trans-unit id="58d5a273-f6c3-4494-a783-fca1c3982ab3" xml:space="preserve">
          <source>Thus, if a field is declared to be private
(accessible only by the methods of the type), then that privacy will
indeed be respected by all other type-safe code.</source>
          <target state="new">Thus, if a field is declared to be private
(accessible only by the methods of the type), then that privacy will
indeed be respected by all other type-safe code.</target>
        </trans-unit>
        <trans-unit id="d4abe759-150e-40eb-b676-5a0aa9f516ad" xml:space="preserve">
          <source>For example, a
particular type might declare a count field that represents the count of
items in a table.</source>
          <target state="new">For example, a
particular type might declare a count field that represents the count of
items in a table.</target>
        </trans-unit>
        <trans-unit id="f51d1451-7999-41a6-8970-1615a48ed466" xml:space="preserve">
          <source>Assuming the fields for the count and the table are
private, and assuming that the only code that updates them updates them
together, there is now a strong guarantee (across all type-safe code)
that the count and the number of items in the table are indeed in sync.</source>
          <target state="new">Assuming the fields for the count and the table are
private, and assuming that the only code that updates them updates them
together, there is now a strong guarantee (across all type-safe code)
that the count and the number of items in the table are indeed in sync.</target>
        </trans-unit>
        <trans-unit id="4ce37f25-0ae2-445e-a295-b38167498995" xml:space="preserve">
          <source>When reasoning about programs, programmers use the concept of type
safety all the time, whether they know it or not.</source>
          <target state="new">When reasoning about programs, programmers use the concept of type
safety all the time, whether they know it or not.</target>
        </trans-unit>
        <trans-unit id="6c3e9114-a1ed-4f6a-96e8-b64d6aa0cbeb" xml:space="preserve">
          <source>The CLR elevates
type-safety from being simply a programming language/compiler
convention, to something that can be strictly enforced at run time.</source>
          <target state="new">The CLR elevates
type-safety from being simply a programming language/compiler
convention, to something that can be strictly enforced at run time.</target>
        </trans-unit>
        <trans-unit id="b9e5e011-657e-4ab1-905a-105352dca9fc" xml:space="preserve">
          <source>Verifiable Code - Enforcing Memory and Type Safety</source>
          <target state="new">Verifiable Code - Enforcing Memory and Type Safety</target>
        </trans-unit>
        <trans-unit id="c264cd26-fb79-4c20-b241-984d0707af48" xml:space="preserve">
          <source>Conceptually, to enforce type safety, every operation that the program
performs has to be checked to ensure that it is operating on memory that
was typed in a way that is compatible with the operation.</source>
          <target state="new">Conceptually, to enforce type safety, every operation that the program
performs has to be checked to ensure that it is operating on memory that
was typed in a way that is compatible with the operation.</target>
        </trans-unit>
        <trans-unit id="c8450cb9-05c1-4d65-be0e-ce9f152522e5" xml:space="preserve">
          <source>While the
system could do this all at runtime, it would be very slow.</source>
          <target state="new">While the
system could do this all at runtime, it would be very slow.</target>
        </trans-unit>
        <trans-unit id="567c33dd-ed65-40a2-98db-87ace9e9f23d" xml:space="preserve">
          <source>Instead, the
CLR has the concept of
<bpt id="30675fe0-d23e-41a1-885b-7968bd0aee0fCapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="30675fe0-d23e-41a1-885b-7968bd0aee0fCapsExtId1">&lt;/linkText&gt;</ept><bpt id="30675fe0-d23e-41a1-885b-7968bd0aee0fCapsExtId2">&lt;title&gt;</bpt><ept id="30675fe0-d23e-41a1-885b-7968bd0aee0fCapsExtId2">&lt;/title&gt;</ept>
verification, where a static analysis is done on the
<bpt id="8146c3e2-c782-441b-aa4b-58186d94fb7eCapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="8146c3e2-c782-441b-aa4b-58186d94fb7eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="8146c3e2-c782-441b-aa4b-58186d94fb7eCapsExtId2">&lt;title&gt;</bpt><ept id="8146c3e2-c782-441b-aa4b-58186d94fb7eCapsExtId2">&lt;/title&gt;</ept>
(before the code is run) to confirm that most operations are indeed
type-safe.</source>
          <target state="new">Instead, the
CLR has the concept of
<bpt id="30675fe0-d23e-41a1-885b-7968bd0aee0fCapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="30675fe0-d23e-41a1-885b-7968bd0aee0fCapsExtId1">&lt;/linkText&gt;</ept><bpt id="30675fe0-d23e-41a1-885b-7968bd0aee0fCapsExtId2">&lt;title&gt;</bpt><ept id="30675fe0-d23e-41a1-885b-7968bd0aee0fCapsExtId2">&lt;/title&gt;</ept>
verification, where a static analysis is done on the
<bpt id="8146c3e2-c782-441b-aa4b-58186d94fb7eCapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="8146c3e2-c782-441b-aa4b-58186d94fb7eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="8146c3e2-c782-441b-aa4b-58186d94fb7eCapsExtId2">&lt;title&gt;</bpt><ept id="8146c3e2-c782-441b-aa4b-58186d94fb7eCapsExtId2">&lt;/title&gt;</ept>
(before the code is run) to confirm that most operations are indeed
type-safe.</target>
        </trans-unit>
        <trans-unit id="8aa74562-1f91-4bea-9a5b-dccca9b3219c" xml:space="preserve">
          <source>Only when this static analysis can't do a complete job are
runtime checks necessary.</source>
          <target state="new">Only when this static analysis can't do a complete job are
runtime checks necessary.</target>
        </trans-unit>
        <trans-unit id="aad138d0-bf8e-45fb-b356-f55017c86054" xml:space="preserve">
          <source>In practice, the number of run-time checks
needed is actually very small.</source>
          <target state="new">In practice, the number of run-time checks
needed is actually very small.</target>
        </trans-unit>
        <trans-unit id="8d09ae30-6f8a-4024-9871-5dcb471db010" xml:space="preserve">
          <source>They include the following operations:</source>
          <target state="new">They include the following operations:</target>
        </trans-unit>
        <trans-unit id="2c24c3d2-5735-4a7d-abf8-b4d6de8b6296" xml:space="preserve">
          <source>Casting a pointer to a base type to be a pointer to a derived type
(the opposite direction can be checked statically)</source>
          <target state="new">Casting a pointer to a base type to be a pointer to a derived type
(the opposite direction can be checked statically)</target>
        </trans-unit>
        <trans-unit id="40b0132e-6987-45f8-82f8-809d5ad86e71" xml:space="preserve">
          <source>Array bounds checks (just as we saw for memory safety)</source>
          <target state="new">Array bounds checks (just as we saw for memory safety)</target>
        </trans-unit>
        <trans-unit id="a1d17e5c-c2fb-4b46-a594-a9a11ab094c4" xml:space="preserve">
          <source>Assigning an element in an array of pointers to a new (pointer)
value.</source>
          <target state="new">Assigning an element in an array of pointers to a new (pointer)
value.</target>
        </trans-unit>
        <trans-unit id="44bdde28-4a30-4dec-bab3-b08cd5a265a2" xml:space="preserve">
          <source>This particular check is only required because CLR arrays
have liberal casting rules (more on that later...)</source>
          <target state="new">This particular check is only required because CLR arrays
have liberal casting rules (more on that later...)</target>
        </trans-unit>
        <trans-unit id="8a275a02-9241-4918-81a0-829a63d10442" xml:space="preserve">
          <source>Note that the need to do these checks places requirements on the
runtime.</source>
          <target state="new">Note that the need to do these checks places requirements on the
runtime.</target>
        </trans-unit>
        <trans-unit id="cab06467-d88d-4769-b95c-122bc9b3ebfe" xml:space="preserve">
          <source>In particular:</source>
          <target state="new">In particular:</target>
        </trans-unit>
        <trans-unit id="4b92e496-ffb7-469e-8daa-3956b3b6e843" xml:space="preserve">
          <source>All memory in the GC heap must be tagged with its type (so the
casting operator can be implemented).</source>
          <target state="new">All memory in the GC heap must be tagged with its type (so the
casting operator can be implemented).</target>
        </trans-unit>
        <trans-unit id="f1f5751c-7eaa-4260-ae86-e498cff5176a" xml:space="preserve">
          <source>This type information must be
available at runtime, and it must be rich enough to determine if
casts are valid (e.g., the runtime needs to know the
inheritance hierarchy).</source>
          <target state="new">This type information must be
available at runtime, and it must be rich enough to determine if
casts are valid (e.g., the runtime needs to know the
inheritance hierarchy).</target>
        </trans-unit>
        <trans-unit id="96d9a7fe-89f4-48dc-8a09-75127e77d0f3" xml:space="preserve">
          <source>In fact, the first field in every object on
the GC heap points to a runtime data structure that represents
its type.</source>
          <target state="new">In fact, the first field in every object on
the GC heap points to a runtime data structure that represents
its type.</target>
        </trans-unit>
        <trans-unit id="091b5f94-88fb-4c69-a9fb-2bab9f161542" xml:space="preserve">
          <source>All arrays must also have their size (for bounds checking).</source>
          <target state="new">All arrays must also have their size (for bounds checking).</target>
        </trans-unit>
        <trans-unit id="12324ced-d189-4f4d-be37-2e9c318a777b" xml:space="preserve">
          <source>Arrays must have complete type information about their element type.</source>
          <target state="new">Arrays must have complete type information about their element type.</target>
        </trans-unit>
        <trans-unit id="36b38548-fa98-489f-a1fa-321953e78209" xml:space="preserve">
          <source>Luckily, the most expensive requirement (tagging each heap item) was
something that was already necessary to support garbage collection (the
GC needs to know what fields in every object contain references that
need to be scanned), so the additional cost to provide type safety is
low.</source>
          <target state="new">Luckily, the most expensive requirement (tagging each heap item) was
something that was already necessary to support garbage collection (the
GC needs to know what fields in every object contain references that
need to be scanned), so the additional cost to provide type safety is
low.</target>
        </trans-unit>
        <trans-unit id="aebf3a86-e217-4f36-87a3-a6c5ae8b08db" xml:space="preserve">
          <source>Thus, by verifying the
<bpt id="0f834e66-82b2-476c-ba1d-7b635e408617CapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="0f834e66-82b2-476c-ba1d-7b635e408617CapsExtId1">&lt;/linkText&gt;</ept><bpt id="0f834e66-82b2-476c-ba1d-7b635e408617CapsExtId2">&lt;title&gt;</bpt><ept id="0f834e66-82b2-476c-ba1d-7b635e408617CapsExtId2">&lt;/title&gt;</ept>
of the code and by doing a few run-time checks, the CLR can ensure type
safety (and memory safety).</source>
          <target state="new">Thus, by verifying the
<bpt id="0f834e66-82b2-476c-ba1d-7b635e408617CapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="0f834e66-82b2-476c-ba1d-7b635e408617CapsExtId1">&lt;/linkText&gt;</ept><bpt id="0f834e66-82b2-476c-ba1d-7b635e408617CapsExtId2">&lt;title&gt;</bpt><ept id="0f834e66-82b2-476c-ba1d-7b635e408617CapsExtId2">&lt;/title&gt;</ept>
of the code and by doing a few run-time checks, the CLR can ensure type
safety (and memory safety).</target>
        </trans-unit>
        <trans-unit id="26c0845e-d0a1-4f34-aeba-f797d9f630cf" xml:space="preserve">
          <source>Nevertheless, this extra safety exacts a
price in programming flexibility.</source>
          <target state="new">Nevertheless, this extra safety exacts a
price in programming flexibility.</target>
        </trans-unit>
        <trans-unit id="66f5589b-fee9-4547-8e97-994ad8390951" xml:space="preserve">
          <source>While the CLR does have general memory
fetch operators, these operators can only be used in very constrained
ways for the code to be verifiable.</source>
          <target state="new">While the CLR does have general memory
fetch operators, these operators can only be used in very constrained
ways for the code to be verifiable.</target>
        </trans-unit>
        <trans-unit id="0f20e8ee-02f8-44cc-9866-cefb6f0ee0cf" xml:space="preserve">
          <source>In particular, all pointer
arithmetic will fail verification today.</source>
          <target state="new">In particular, all pointer
arithmetic will fail verification today.</target>
        </trans-unit>
        <trans-unit id="7b58275c-6ed5-4260-bb4f-38cf3d487d91" xml:space="preserve">
          <source>Thus many classic C or C++
conventions cannot be used in verifiable code; you must use arrays
instead.</source>
          <target state="new">Thus many classic C or C++
conventions cannot be used in verifiable code; you must use arrays
instead.</target>
        </trans-unit>
        <trans-unit id="d7db1c59-09ec-4b01-89fa-16e8e9aadd7e" xml:space="preserve">
          <source>While this constrains programming a bit, it really is not bad
(arrays are quite powerful), and the benefits (far fewer "nasty" bugs),
are quite real.</source>
          <target state="new">While this constrains programming a bit, it really is not bad
(arrays are quite powerful), and the benefits (far fewer "nasty" bugs),
are quite real.</target>
        </trans-unit>
        <trans-unit id="90c300c5-f7f2-411e-b866-b25f1dd6a57f" xml:space="preserve">
          <source>The CLR strongly encourages the use of verifiable, type-safe code.</source>
          <target state="new">The CLR strongly encourages the use of verifiable, type-safe code.</target>
        </trans-unit>
        <trans-unit id="2867e935-affb-442d-a4d6-e1ce622d8b24" xml:space="preserve">
          <source>Even
so, there are times (mostly when dealing with unmanaged code) that
unverifiable programming is needed.</source>
          <target state="new">Even
so, there are times (mostly when dealing with unmanaged code) that
unverifiable programming is needed.</target>
        </trans-unit>
        <trans-unit id="e79a4c93-3c0e-4528-9f37-d7d028dc3c0c" xml:space="preserve">
          <source>The CLR allows this, but the best
practice here is to try to confine this unsafe code as much as possible.</source>
          <target state="new">The CLR allows this, but the best
practice here is to try to confine this unsafe code as much as possible.</target>
        </trans-unit>
        <trans-unit id="865a74ac-74bc-4557-b368-b6a8fa357ad4" xml:space="preserve">
          <source>Typical programs have only a very small fraction of their code that
needs to be unsafe, and the rest can be type-safe.</source>
          <target state="new">Typical programs have only a very small fraction of their code that
needs to be unsafe, and the rest can be type-safe.</target>
        </trans-unit>
        <trans-unit id="a99a0659-ba1d-444d-b796-4c50d76ac82c" xml:space="preserve">
          <source>High Level Features</source>
          <target state="new">High Level Features</target>
        </trans-unit>
        <trans-unit id="987a31f8-ed15-484e-8d23-72ee849c1106" xml:space="preserve">
          <source>Supporting garbage collection had a profound effect on the runtime
because it requires that all code must support extra bookkeeping.</source>
          <target state="new">Supporting garbage collection had a profound effect on the runtime
because it requires that all code must support extra bookkeeping.</target>
        </trans-unit>
        <trans-unit id="1583f13b-cc23-4553-af66-411c2ccd20b6" xml:space="preserve">
          <source>The
desire for type-safety also had a profound effect, requiring that the
description of the program (the
<bpt id="8e554c8a-7332-4893-984e-fa46c526af4eCapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="8e554c8a-7332-4893-984e-fa46c526af4eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="8e554c8a-7332-4893-984e-fa46c526af4eCapsExtId2">&lt;title&gt;</bpt><ept id="8e554c8a-7332-4893-984e-fa46c526af4eCapsExtId2">&lt;/title&gt;</ept>)
be at a high level, where fields and methods have detailed type
information.</source>
          <target state="new">The
desire for type-safety also had a profound effect, requiring that the
description of the program (the
<bpt id="8e554c8a-7332-4893-984e-fa46c526af4eCapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="8e554c8a-7332-4893-984e-fa46c526af4eCapsExtId1">&lt;/linkText&gt;</ept><bpt id="8e554c8a-7332-4893-984e-fa46c526af4eCapsExtId2">&lt;title&gt;</bpt><ept id="8e554c8a-7332-4893-984e-fa46c526af4eCapsExtId2">&lt;/title&gt;</ept>)
be at a high level, where fields and methods have detailed type
information.</target>
        </trans-unit>
        <trans-unit id="79cc91be-0068-4f61-852a-d876fba54c34" xml:space="preserve">
          <source>The desire for type safety also forces the
<bpt id="f9d70e8e-b40f-4a0d-b4a6-bdf170f3dbc4CapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="f9d70e8e-b40f-4a0d-b4a6-bdf170f3dbc4CapsExtId1">&lt;/linkText&gt;</ept><bpt id="f9d70e8e-b40f-4a0d-b4a6-bdf170f3dbc4CapsExtId2">&lt;title&gt;</bpt><ept id="f9d70e8e-b40f-4a0d-b4a6-bdf170f3dbc4CapsExtId2">&lt;/title&gt;</ept>
to support other high-level programming constructs that are type-safe.</source>
          <target state="new">The desire for type safety also forces the
<bpt id="f9d70e8e-b40f-4a0d-b4a6-bdf170f3dbc4CapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="f9d70e8e-b40f-4a0d-b4a6-bdf170f3dbc4CapsExtId1">&lt;/linkText&gt;</ept><bpt id="f9d70e8e-b40f-4a0d-b4a6-bdf170f3dbc4CapsExtId2">&lt;title&gt;</bpt><ept id="f9d70e8e-b40f-4a0d-b4a6-bdf170f3dbc4CapsExtId2">&lt;/title&gt;</ept>
to support other high-level programming constructs that are type-safe.</target>
        </trans-unit>
        <trans-unit id="fa539497-5dfc-4e06-b7cb-ca7f24ddd371" xml:space="preserve">
          <source>Expressing these constructs in a type-safe manner also requires runtime
support.</source>
          <target state="new">Expressing these constructs in a type-safe manner also requires runtime
support.</target>
        </trans-unit>
        <trans-unit id="663fd5cb-4140-4107-990d-40e64f5b923b" xml:space="preserve">
          <source>The two most important of these high-level features are used to
support two essential elements of object oriented programming:
inheritance and virtual call dispatch.</source>
          <target state="new">The two most important of these high-level features are used to
support two essential elements of object oriented programming:
inheritance and virtual call dispatch.</target>
        </trans-unit>
        <trans-unit id="1a93a596-e56f-4104-afb5-1d0bcfee0ff2" xml:space="preserve">
          <source>Object Oriented Programming</source>
          <target state="new">Object Oriented Programming</target>
        </trans-unit>
        <trans-unit id="1c5d1cf0-64a1-47bf-8f32-f291f972dc36" xml:space="preserve">
          <source>Inheritance is relatively simple in a mechanical sense.</source>
          <target state="new">Inheritance is relatively simple in a mechanical sense.</target>
        </trans-unit>
        <trans-unit id="a7b5cf2c-28c8-4791-8124-f80ef37f067a" xml:space="preserve">
          <source>The basic idea
is that if the fields of type <bpt id="17113d6c-1f98-4c23-b8ec-d4b1efd55dae">&lt;code&gt;</bpt>derived<ept id="17113d6c-1f98-4c23-b8ec-d4b1efd55dae">&lt;/code&gt;</ept> are a superset of the fields of
type <bpt id="02fc4a3c-924c-463f-b646-bc416c856188">&lt;code&gt;</bpt>base<ept id="02fc4a3c-924c-463f-b646-bc416c856188">&lt;/code&gt;</ept>, and <bpt id="e68905a2-51c3-477e-a7ad-e3dff9c90bde">&lt;code&gt;</bpt>derived<ept id="e68905a2-51c3-477e-a7ad-e3dff9c90bde">&lt;/code&gt;</ept> lays out its fields so the fields of <bpt id="1fbe442c-29b0-424f-ad1b-e5d5f20245ba">&lt;code&gt;</bpt>base<ept id="1fbe442c-29b0-424f-ad1b-e5d5f20245ba">&lt;/code&gt;</ept>
come first, then any code that expects a pointer to an instance of
<bpt id="55095b89-4fdc-4c21-baf1-9bc8d67c373a">&lt;code&gt;</bpt>base<ept id="55095b89-4fdc-4c21-baf1-9bc8d67c373a">&lt;/code&gt;</ept> can be given a pointer to an instance of <bpt id="1c6e9378-33ce-4291-a8de-c01338d7c2c9">&lt;code&gt;</bpt>derived<ept id="1c6e9378-33ce-4291-a8de-c01338d7c2c9">&lt;/code&gt;</ept> and the code
will "just work".</source>
          <target state="new">The basic idea
is that if the fields of type <bpt id="17113d6c-1f98-4c23-b8ec-d4b1efd55dae">&lt;code&gt;</bpt>derived<ept id="17113d6c-1f98-4c23-b8ec-d4b1efd55dae">&lt;/code&gt;</ept> are a superset of the fields of
type <bpt id="02fc4a3c-924c-463f-b646-bc416c856188">&lt;code&gt;</bpt>base<ept id="02fc4a3c-924c-463f-b646-bc416c856188">&lt;/code&gt;</ept>, and <bpt id="e68905a2-51c3-477e-a7ad-e3dff9c90bde">&lt;code&gt;</bpt>derived<ept id="e68905a2-51c3-477e-a7ad-e3dff9c90bde">&lt;/code&gt;</ept> lays out its fields so the fields of <bpt id="1fbe442c-29b0-424f-ad1b-e5d5f20245ba">&lt;code&gt;</bpt>base<ept id="1fbe442c-29b0-424f-ad1b-e5d5f20245ba">&lt;/code&gt;</ept>
come first, then any code that expects a pointer to an instance of
<bpt id="55095b89-4fdc-4c21-baf1-9bc8d67c373a">&lt;code&gt;</bpt>base<ept id="55095b89-4fdc-4c21-baf1-9bc8d67c373a">&lt;/code&gt;</ept> can be given a pointer to an instance of <bpt id="1c6e9378-33ce-4291-a8de-c01338d7c2c9">&lt;code&gt;</bpt>derived<ept id="1c6e9378-33ce-4291-a8de-c01338d7c2c9">&lt;/code&gt;</ept> and the code
will "just work".</target>
        </trans-unit>
        <trans-unit id="b9eb6684-077c-448e-b7cf-9dcd818b4ef3" xml:space="preserve">
          <source>Thus, type <bpt id="23f6b696-4995-4dcf-b1d4-dac3760772e8">&lt;code&gt;</bpt>derived<ept id="23f6b696-4995-4dcf-b1d4-dac3760772e8">&lt;/code&gt;</ept> is said to inherit from <bpt id="91899875-e7cf-4e4a-b29f-6c6a70b1d4b8">&lt;code&gt;</bpt>base<ept id="91899875-e7cf-4e4a-b29f-6c6a70b1d4b8">&lt;/code&gt;</ept>,
meaning that it can be used anywhere <bpt id="37684879-bc58-4dbf-b944-553bf9f527be">&lt;code&gt;</bpt>base<ept id="37684879-bc58-4dbf-b944-553bf9f527be">&lt;/code&gt;</ept> can be used.</source>
          <target state="new">Thus, type <bpt id="23f6b696-4995-4dcf-b1d4-dac3760772e8">&lt;code&gt;</bpt>derived<ept id="23f6b696-4995-4dcf-b1d4-dac3760772e8">&lt;/code&gt;</ept> is said to inherit from <bpt id="91899875-e7cf-4e4a-b29f-6c6a70b1d4b8">&lt;code&gt;</bpt>base<ept id="91899875-e7cf-4e4a-b29f-6c6a70b1d4b8">&lt;/code&gt;</ept>,
meaning that it can be used anywhere <bpt id="37684879-bc58-4dbf-b944-553bf9f527be">&lt;code&gt;</bpt>base<ept id="37684879-bc58-4dbf-b944-553bf9f527be">&lt;/code&gt;</ept> can be used.</target>
        </trans-unit>
        <trans-unit id="cb74a5d5-ea8f-4c3a-a1fa-6e49ad22112d" xml:space="preserve">
          <source>Code becomes
<bpt id="96559bfa-224e-4894-b9b4-9bcd10f76dac">&lt;em&gt;</bpt>polymorphic<ept id="96559bfa-224e-4894-b9b4-9bcd10f76dac">&lt;/em&gt;</ept> because the same code can be used on many distinct types.</source>
          <target state="new">Code becomes
<bpt id="96559bfa-224e-4894-b9b4-9bcd10f76dac">&lt;em&gt;</bpt>polymorphic<ept id="96559bfa-224e-4894-b9b4-9bcd10f76dac">&lt;/em&gt;</ept> because the same code can be used on many distinct types.</target>
        </trans-unit>
        <trans-unit id="00768fd1-e8d8-4f61-b7dd-324b07a5deac" xml:space="preserve">
          <source>Because the runtime needs to know what type coercions are possible, the
runtime must formalize the way inheritance is specified so it can
validate type safety.</source>
          <target state="new">Because the runtime needs to know what type coercions are possible, the
runtime must formalize the way inheritance is specified so it can
validate type safety.</target>
        </trans-unit>
        <trans-unit id="7d525769-db7a-4c64-9a62-a385adca4ad3" xml:space="preserve">
          <source>Virtual call dispatch generalizes inheritance polymorphism.</source>
          <target state="new">Virtual call dispatch generalizes inheritance polymorphism.</target>
        </trans-unit>
        <trans-unit id="7867c22a-e585-4deb-910e-7c1fc1bc6e44" xml:space="preserve">
          <source>It allows
base types to declare methods that will be <bpt id="eb2c7bf1-6764-45ff-b71b-3bf7efd73e2e">&lt;em&gt;</bpt>overridden<ept id="eb2c7bf1-6764-45ff-b71b-3bf7efd73e2e">&lt;/em&gt;</ept> by derived
types.</source>
          <target state="new">It allows
base types to declare methods that will be <bpt id="eb2c7bf1-6764-45ff-b71b-3bf7efd73e2e">&lt;em&gt;</bpt>overridden<ept id="eb2c7bf1-6764-45ff-b71b-3bf7efd73e2e">&lt;/em&gt;</ept> by derived
types.</target>
        </trans-unit>
        <trans-unit id="dbe6c7d1-a617-4ca7-9e46-8a140ea06d1e" xml:space="preserve">
          <source>Code that uses variables of type <bpt id="b114e430-e17e-455a-ad7b-bab43157dc3c">&lt;code&gt;</bpt>base<ept id="b114e430-e17e-455a-ad7b-bab43157dc3c">&lt;/code&gt;</ept> can expect that calls to
virtual methods will be dispatched to the correct overridden method
based on the actual type of the object at run time.</source>
          <target state="new">Code that uses variables of type <bpt id="b114e430-e17e-455a-ad7b-bab43157dc3c">&lt;code&gt;</bpt>base<ept id="b114e430-e17e-455a-ad7b-bab43157dc3c">&lt;/code&gt;</ept> can expect that calls to
virtual methods will be dispatched to the correct overridden method
based on the actual type of the object at run time.</target>
        </trans-unit>
        <trans-unit id="1eec8c47-b7f1-4fb0-9aee-5f961c4b25a6" xml:space="preserve">
          <source>While such <bpt id="8c67b021-0afb-485f-8eba-c2ae2bf27034">&lt;em&gt;</bpt>run-time
dispatch logic<ept id="8c67b021-0afb-485f-8eba-c2ae2bf27034">&lt;/em&gt;</ept> could have been implemented using primitive
<bpt id="fbadc2b1-e7db-4cdc-934d-92f5e2480f56CapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="fbadc2b1-e7db-4cdc-934d-92f5e2480f56CapsExtId1">&lt;/linkText&gt;</ept><bpt id="fbadc2b1-e7db-4cdc-934d-92f5e2480f56CapsExtId2">&lt;title&gt;</bpt><ept id="fbadc2b1-e7db-4cdc-934d-92f5e2480f56CapsExtId2">&lt;/title&gt;</ept>
instructions without direct support in the runtime, it would have
suffered from two important disadvantages</source>
          <target state="new">While such <bpt id="8c67b021-0afb-485f-8eba-c2ae2bf27034">&lt;em&gt;</bpt>run-time
dispatch logic<ept id="8c67b021-0afb-485f-8eba-c2ae2bf27034">&lt;/em&gt;</ept> could have been implemented using primitive
<bpt id="fbadc2b1-e7db-4cdc-934d-92f5e2480f56CapsExtId1">&lt;linkText&gt;</bpt>CIL<ept id="fbadc2b1-e7db-4cdc-934d-92f5e2480f56CapsExtId1">&lt;/linkText&gt;</ept><bpt id="fbadc2b1-e7db-4cdc-934d-92f5e2480f56CapsExtId2">&lt;title&gt;</bpt><ept id="fbadc2b1-e7db-4cdc-934d-92f5e2480f56CapsExtId2">&lt;/title&gt;</ept>
instructions without direct support in the runtime, it would have
suffered from two important disadvantages</target>
        </trans-unit>
        <trans-unit id="b7304bc2-2376-4d22-915c-fad7b67bba74" xml:space="preserve">
          <source>It would not be type safe (mistakes in the dispatch table are
catastrophic errors)</source>
          <target state="new">It would not be type safe (mistakes in the dispatch table are
catastrophic errors)</target>
        </trans-unit>
        <trans-unit id="e25c05dd-36a7-4882-b163-1d5458f8ed90" xml:space="preserve">
          <source>Each object-oriented language would likely implement a slightly
different way of implementing its virtual dispatch logic.</source>
          <target state="new">Each object-oriented language would likely implement a slightly
different way of implementing its virtual dispatch logic.</target>
        </trans-unit>
        <trans-unit id="1f6366fd-698a-47b6-a6d8-4d58b084d2d0" xml:space="preserve">
          <source>As result,
interoperability among languages would suffer (one language could
not inherit from a base type implemented in another language).</source>
          <target state="new">As result,
interoperability among languages would suffer (one language could
not inherit from a base type implemented in another language).</target>
        </trans-unit>
        <trans-unit id="33a4baf8-e2fc-47b6-b3b4-11ba6bcdd2e1" xml:space="preserve">
          <source>For this reason, the CLR has direct support for basic object-oriented
features.</source>
          <target state="new">For this reason, the CLR has direct support for basic object-oriented
features.</target>
        </trans-unit>
        <trans-unit id="c450a521-16f5-44fc-a378-8da589d63e2e" xml:space="preserve">
          <source>To the degree possible, the CLR tried to make its model of
inheritance "language neutral," in the sense that different languages
might still share the same inheritance hierarchy.</source>
          <target state="new">To the degree possible, the CLR tried to make its model of
inheritance "language neutral," in the sense that different languages
might still share the same inheritance hierarchy.</target>
        </trans-unit>
        <trans-unit id="11c17415-b847-487a-88ec-420c8cc7bea9" xml:space="preserve">
          <source>Unfortunately, that
was not always possible.</source>
          <target state="new">Unfortunately, that
was not always possible.</target>
        </trans-unit>
        <trans-unit id="e10bc606-2094-4575-b62f-3bd69ef129ee" xml:space="preserve">
          <source>In particular, multiple inheritance can be
implemented in many different ways.</source>
          <target state="new">In particular, multiple inheritance can be
implemented in many different ways.</target>
        </trans-unit>
        <trans-unit id="5c907770-0870-4f4b-9090-fd6d56ebdeaa" xml:space="preserve">
          <source>The CLR chose not to support
multiple inheritance on types with fields, but does support multiple
inheritance from special types (called interfaces) that are constrained
not to have fields.</source>
          <target state="new">The CLR chose not to support
multiple inheritance on types with fields, but does support multiple
inheritance from special types (called interfaces) that are constrained
not to have fields.</target>
        </trans-unit>
        <trans-unit id="639845e5-6c75-41ba-ad13-6e8ab7376ef5" xml:space="preserve">
          <source>It is important to keep in mind that while the runtime supports these
object-oriented concepts, it does not require their use.</source>
          <target state="new">It is important to keep in mind that while the runtime supports these
object-oriented concepts, it does not require their use.</target>
        </trans-unit>
        <trans-unit id="aaaa996f-d739-4937-abdf-c5e69e33a023" xml:space="preserve">
          <source>Languages
without the concept of inheritance (e.g., functional languages) simply
don't use these facilities.</source>
          <target state="new">Languages
without the concept of inheritance (e.g., functional languages) simply
don't use these facilities.</target>
        </trans-unit>
        <trans-unit id="4c673137-c502-4729-8d00-313fb8823a1c" xml:space="preserve">
          <source>Value Types (and Boxing)</source>
          <target state="new">Value Types (and Boxing)</target>
        </trans-unit>
        <trans-unit id="b195bdc7-55f3-43fb-8718-48b77f5d8437" xml:space="preserve">
          <source>A profound, yet subtle aspect of object oriented programming is the
concept of object identity: the notion that objects (allocated by
separate allocation calls) can be distinguished, even if all their field
values are identical.</source>
          <target state="new">A profound, yet subtle aspect of object oriented programming is the
concept of object identity: the notion that objects (allocated by
separate allocation calls) can be distinguished, even if all their field
values are identical.</target>
        </trans-unit>
        <trans-unit id="1c0ac841-8ad7-42c3-9334-35ba9a7df8e0" xml:space="preserve">
          <source>Object identity is strongly related to the fact
that objects are accessed by reference (pointer) rather than by value.</source>
          <target state="new">Object identity is strongly related to the fact
that objects are accessed by reference (pointer) rather than by value.</target>
        </trans-unit>
        <trans-unit id="1231365a-dd34-4072-989d-bff7d83ee1d3" xml:space="preserve">
          <source>If two variables hold the same object (their pointers address the same
memory), then updates to one of the variables will affect the other
variable.</source>
          <target state="new">If two variables hold the same object (their pointers address the same
memory), then updates to one of the variables will affect the other
variable.</target>
        </trans-unit>
        <trans-unit id="bf22d3f5-1618-4660-b4d8-b0f8de74b180" xml:space="preserve">
          <source>Unfortunately, the concept of object identity is not a good semantic
match for all types.</source>
          <target state="new">Unfortunately, the concept of object identity is not a good semantic
match for all types.</target>
        </trans-unit>
        <trans-unit id="7a2c4111-d5f4-4bac-8dd0-810715bd3dec" xml:space="preserve">
          <source>In particular, programmers don't generally think of
integers as objects.</source>
          <target state="new">In particular, programmers don't generally think of
integers as objects.</target>
        </trans-unit>
        <trans-unit id="5f582e0a-355b-4e27-8060-d9e168e2368c" xml:space="preserve">
          <source>If the number '1' was allocated at two different
places, programmers generally want to consider those two items equal,
and certainly don't want updates to one of those instances affecting the
other.</source>
          <target state="new">If the number '1' was allocated at two different
places, programmers generally want to consider those two items equal,
and certainly don't want updates to one of those instances affecting the
other.</target>
        </trans-unit>
        <trans-unit id="76eb7134-0208-47c5-929c-696f9604de5b" xml:space="preserve">
          <source>In fact, a broad class of programming languages called
\`functional languages' avoid object identity and reference semantics
altogether.</source>
          <target state="new">In fact, a broad class of programming languages called
\`functional languages' avoid object identity and reference semantics
altogether.</target>
        </trans-unit>
        <trans-unit id="b6ee4b71-2f0f-47e5-a694-0a731f5bbee1" xml:space="preserve">
          <source>While it is possible to have a "pure" object oriented system, where
everything (including integers) is an object (Smalltalk-80 does this), a
certain amount of implementation "gymnastics" is necessary to undo this
uniformity to get an efficient implementation.</source>
          <target state="new">While it is possible to have a "pure" object oriented system, where
everything (including integers) is an object (Smalltalk-80 does this), a
certain amount of implementation "gymnastics" is necessary to undo this
uniformity to get an efficient implementation.</target>
        </trans-unit>
        <trans-unit id="a9f5a702-d532-4253-82a5-f0f49946297b" xml:space="preserve">
          <source>Other languages (Perl,
Java, JavaScript) take a pragmatic view and treat some types (like
integers) by value, and others by reference.</source>
          <target state="new">Other languages (Perl,
Java, JavaScript) take a pragmatic view and treat some types (like
integers) by value, and others by reference.</target>
        </trans-unit>
        <trans-unit id="f74957f1-598f-4757-9d9d-09f23174f54e" xml:space="preserve">
          <source>The CLR also chose a mixed
model, but unlike the others, allowed user-defined value types.</source>
          <target state="new">The CLR also chose a mixed
model, but unlike the others, allowed user-defined value types.</target>
        </trans-unit>
        <trans-unit id="445a5ad7-799f-409f-9c58-0fcffdd686f1" xml:space="preserve">
          <source>The key characteristics of value types are:</source>
          <target state="new">The key characteristics of value types are:</target>
        </trans-unit>
        <trans-unit id="83cf2ee4-9cd9-48b3-a09b-2afa307da3a9" xml:space="preserve">
          <source>Each local variable, field, or array element of a value type has a
distinct copy of the data in the value.</source>
          <target state="new">Each local variable, field, or array element of a value type has a
distinct copy of the data in the value.</target>
        </trans-unit>
        <trans-unit id="c0cfc86e-0322-4cea-8ef4-c98dcc02b913" xml:space="preserve">
          <source>When one variable, field or array element is assigned to another,
the value is copied.</source>
          <target state="new">When one variable, field or array element is assigned to another,
the value is copied.</target>
        </trans-unit>
        <trans-unit id="c889bd17-d7da-4178-994e-dafbbb7a30c9" xml:space="preserve">
          <source>Equality is always defined only in terms of the data in the variable
(not its location).</source>
          <target state="new">Equality is always defined only in terms of the data in the variable
(not its location).</target>
        </trans-unit>
        <trans-unit id="2d8c9c60-742f-45ff-b391-3426fbab4ebb" xml:space="preserve">
          <source>Each value type also has a corresponding reference type which has
only one implicit, unnamed field.</source>
          <target state="new">Each value type also has a corresponding reference type which has
only one implicit, unnamed field.</target>
        </trans-unit>
        <trans-unit id="1254728b-a0bd-44da-a158-ea8bb432bc65" xml:space="preserve">
          <source>This is called its boxed value.</source>
          <target state="new">This is called its boxed value.</target>
        </trans-unit>
        <trans-unit id="ae4c45d4-2393-4a5c-9a67-cbb90aee60f9" xml:space="preserve">
          <source>Boxed value types can participate in inheritance and have object
identity (although using the object identity of a boxed value type
is strongly discouraged).</source>
          <target state="new">Boxed value types can participate in inheritance and have object
identity (although using the object identity of a boxed value type
is strongly discouraged).</target>
        </trans-unit>
        <trans-unit id="4b25452e-b77c-48d1-ba11-50830451ade7" xml:space="preserve">
          <source>Value types very closely model the C (and C++) notion of a struct (or
C++ class).</source>
          <target state="new">Value types very closely model the C (and C++) notion of a struct (or
C++ class).</target>
        </trans-unit>
        <trans-unit id="1c20bf1f-f684-430f-a08e-439929e677f3" xml:space="preserve">
          <source>Like C you can have pointers to value types, but the
pointers are a type distinct from the type of the struct.</source>
          <target state="new">Like C you can have pointers to value types, but the
pointers are a type distinct from the type of the struct.</target>
        </trans-unit>
        <trans-unit id="e3c84d7a-0de0-40d0-8e90-e27a4c111525" xml:space="preserve">
          <source>Exceptions</source>
          <target state="new">Exceptions</target>
        </trans-unit>
        <trans-unit id="2f70e821-db18-4a28-b550-47c2f4445812" xml:space="preserve">
          <source>Another high-level programming construct that the CLR directly supports
is exceptions.</source>
          <target state="new">Another high-level programming construct that the CLR directly supports
is exceptions.</target>
        </trans-unit>
        <trans-unit id="70eb2b23-898a-4f67-a22e-7578dd8cf5f5" xml:space="preserve">
          <source>Exceptions are a language feature that allow programmers
to <bpt id="9f977623-d212-4afc-a15d-c03131be8044">&lt;em&gt;</bpt>throw<ept id="9f977623-d212-4afc-a15d-c03131be8044">&lt;/em&gt;</ept> an arbitrary object at the point that a failure occurs.</source>
          <target state="new">Exceptions are a language feature that allow programmers
to <bpt id="9f977623-d212-4afc-a15d-c03131be8044">&lt;em&gt;</bpt>throw<ept id="9f977623-d212-4afc-a15d-c03131be8044">&lt;/em&gt;</ept> an arbitrary object at the point that a failure occurs.</target>
        </trans-unit>
        <trans-unit id="c3a4dcc6-a9bb-4766-b797-0fef651ce697" xml:space="preserve">
          <source>When
an object is thrown, the runtime searches the call stack for a method
that declares that it can <bpt id="fc958e6d-cefa-4e39-a695-87f390d622b1">&lt;em&gt;</bpt>catch<ept id="fc958e6d-cefa-4e39-a695-87f390d622b1">&lt;/em&gt;</ept> the exception.</source>
          <target state="new">When
an object is thrown, the runtime searches the call stack for a method
that declares that it can <bpt id="fc958e6d-cefa-4e39-a695-87f390d622b1">&lt;em&gt;</bpt>catch<ept id="fc958e6d-cefa-4e39-a695-87f390d622b1">&lt;/em&gt;</ept> the exception.</target>
        </trans-unit>
        <trans-unit id="33d54c97-a1f9-434d-869b-a48127e17376" xml:space="preserve">
          <source>If such a catch
declaration is found, execution continues from that point.</source>
          <target state="new">If such a catch
declaration is found, execution continues from that point.</target>
        </trans-unit>
        <trans-unit id="ac55d1fa-3ac6-4d38-b2d0-ce5acc9ef368" xml:space="preserve">
          <source>The
usefulness of exceptions is that they avoid the very common mistake of
not checking if a called method fails.</source>
          <target state="new">The
usefulness of exceptions is that they avoid the very common mistake of
not checking if a called method fails.</target>
        </trans-unit>
        <trans-unit id="24327795-fec0-46f7-836d-443b35ac6c4b" xml:space="preserve">
          <source>Given that exceptions help avoid
programmer mistakes (thus making programming easier), it is not
surprising that the CLR supports them.</source>
          <target state="new">Given that exceptions help avoid
programmer mistakes (thus making programming easier), it is not
surprising that the CLR supports them.</target>
        </trans-unit>
        <trans-unit id="52a22f8f-a1a1-4440-a47c-b61b1849f45b" xml:space="preserve">
          <source>As an aside, while exceptions avoid one common error (not checking for
failure), they do not prevent another (restoring data structures to a
consistent state in the event of a failure).</source>
          <target state="new">As an aside, while exceptions avoid one common error (not checking for
failure), they do not prevent another (restoring data structures to a
consistent state in the event of a failure).</target>
        </trans-unit>
        <trans-unit id="734946ea-ad56-4b29-8d64-6e296e7a95c3" xml:space="preserve">
          <source>This means that after an
exception is caught, it is difficult in general to know if continuing
execution will cause additional errors (caused by the first failure).</source>
          <target state="new">This means that after an
exception is caught, it is difficult in general to know if continuing
execution will cause additional errors (caused by the first failure).</target>
        </trans-unit>
        <trans-unit id="773760ea-a77a-4e72-9569-9c03e88783c6" xml:space="preserve">
          <source>This is an area where the CLR is likely to add value in the future.</source>
          <target state="new">This is an area where the CLR is likely to add value in the future.</target>
        </trans-unit>
        <trans-unit id="68b82b62-98a2-4683-92ca-30caaa24aaa6" xml:space="preserve">
          <source>Even
as currently implemented, however, exceptions are a great step forward
(we just need to go further).</source>
          <target state="new">Even
as currently implemented, however, exceptions are a great step forward
(we just need to go further).</target>
        </trans-unit>
        <trans-unit id="610d078d-8658-416b-94e5-f83cf8e9a1a9" xml:space="preserve">
          <source>Parameterized Types (Generics)</source>
          <target state="new">Parameterized Types (Generics)</target>
        </trans-unit>
        <trans-unit id="4bf3fc96-88f5-4d9e-b47c-177b4a9ea11c" xml:space="preserve">
          <source>Previous to version 2.0 of the CLR, the only parameterized types were
arrays.</source>
          <target state="new">Previous to version 2.0 of the CLR, the only parameterized types were
arrays.</target>
        </trans-unit>
        <trans-unit id="32b594ce-149a-463f-9738-3bd90091daf0" xml:space="preserve">
          <source>All other containers (such as hash tables, lists, queues, etc.),
all operated on a generic Object type.</source>
          <target state="new">All other containers (such as hash tables, lists, queues, etc.),
all operated on a generic Object type.</target>
        </trans-unit>
        <trans-unit id="85a5733c-0cfb-4bf6-aa13-cbe3ae54639e" xml:space="preserve">
          <source>The inability to create List, or
Dictionary certainly had a negative performance effect because value
types needed to be boxed on entry to a collection, and explicit casting
was needed on element fetch.</source>
          <target state="new">The inability to create List, or
Dictionary certainly had a negative performance effect because value
types needed to be boxed on entry to a collection, and explicit casting
was needed on element fetch.</target>
        </trans-unit>
        <trans-unit id="5869787a-97b4-4764-881c-3911619155cd" xml:space="preserve">
          <source>Nevertheless, that is not the overriding
reason for adding parameterized types to the CLR.</source>
          <target state="new">Nevertheless, that is not the overriding
reason for adding parameterized types to the CLR.</target>
        </trans-unit>
        <trans-unit id="0dfb2896-e30e-4a4f-91a9-718d5cbaac24" xml:space="preserve">
          <source>The main reason is
that <bpt id="26e076d8-4eb7-4498-9a5d-1a284d18303a">&lt;strong&gt;</bpt>parameterized types make programming easier<ept id="26e076d8-4eb7-4498-9a5d-1a284d18303a">&lt;/strong&gt;</ept>.</source>
          <target state="new">The main reason is
that <bpt id="26e076d8-4eb7-4498-9a5d-1a284d18303a">&lt;strong&gt;</bpt>parameterized types make programming easier<ept id="26e076d8-4eb7-4498-9a5d-1a284d18303a">&lt;/strong&gt;</ept>.</target>
        </trans-unit>
        <trans-unit id="92c1a981-83c3-4f54-94ae-c632b9942a11" xml:space="preserve">
          <source>The reason for this is subtle.</source>
          <target state="new">The reason for this is subtle.</target>
        </trans-unit>
        <trans-unit id="619e0995-c2b2-4a3c-9ced-3aeb5b577a05" xml:space="preserve">
          <source>The easiest way to see the effect is to
imagine what a class library would look like if all types were replaced
with a generic Object type.</source>
          <target state="new">The easiest way to see the effect is to
imagine what a class library would look like if all types were replaced
with a generic Object type.</target>
        </trans-unit>
        <trans-unit id="b567207c-557c-4193-91dd-1906ff10fa15" xml:space="preserve">
          <source>This effect is not unlike what happens in
dynamically typed languages like JavaScript.</source>
          <target state="new">This effect is not unlike what happens in
dynamically typed languages like JavaScript.</target>
        </trans-unit>
        <trans-unit id="2d711dd6-daff-4875-853f-994f41d6db47" xml:space="preserve">
          <source>In such a world, there are
simply far more ways for a programmer to make incorrect (but type-safe)
programs.</source>
          <target state="new">In such a world, there are
simply far more ways for a programmer to make incorrect (but type-safe)
programs.</target>
        </trans-unit>
        <trans-unit id="511b8738-107c-438d-b638-461a0f6b4349" xml:space="preserve">
          <source>Is the parameter for that method supposed to be a list?</source>
          <target state="new">Is the parameter for that method supposed to be a list?</target>
        </trans-unit>
        <trans-unit id="032723f5-574d-4904-8d03-29fc26ea18a9" xml:space="preserve">
          <source>a
string?</source>
          <target state="new">a
string?</target>
        </trans-unit>
        <trans-unit id="4b060080-57e6-4d4c-8156-6d48001b4856" xml:space="preserve">
          <source>an integer?</source>
          <target state="new">an integer?</target>
        </trans-unit>
        <trans-unit id="b9e491b1-f979-4e38-89b0-59b283d85a82" xml:space="preserve">
          <source>any of the above?</source>
          <target state="new">any of the above?</target>
        </trans-unit>
        <trans-unit id="1db1a4bd-5ab5-4b66-b15f-ef8fa508da6b" xml:space="preserve">
          <source>It is no longer obvious from
looking at the method's signature.</source>
          <target state="new">It is no longer obvious from
looking at the method's signature.</target>
        </trans-unit>
        <trans-unit id="6725d8a0-8478-4e42-9818-94d1de9a59b5" xml:space="preserve">
          <source>Worse, when a method returns an
Object, what other methods can accept it as a parameter?</source>
          <target state="new">Worse, when a method returns an
Object, what other methods can accept it as a parameter?</target>
        </trans-unit>
        <trans-unit id="a5f70ae1-8369-4f41-960f-819272aff29e" xml:space="preserve">
          <source>Typical
frameworks have hundreds of methods; if they all take parameters of type
Object, it becomes very difficult to determine which Object instances
are valid for the operations the method will perform.</source>
          <target state="new">Typical
frameworks have hundreds of methods; if they all take parameters of type
Object, it becomes very difficult to determine which Object instances
are valid for the operations the method will perform.</target>
        </trans-unit>
        <trans-unit id="d9d7b0d8-e2ea-4b3e-8d1b-c0df3f4090c7" xml:space="preserve">
          <source>In short, strong
typing help a programmer express his intent more clearly, and allows
tools (e.g., the compiler) to enforce his intent.</source>
          <target state="new">In short, strong
typing help a programmer express his intent more clearly, and allows
tools (e.g., the compiler) to enforce his intent.</target>
        </trans-unit>
        <trans-unit id="d2d5c518-5713-44dc-9d81-0f1edf8836da" xml:space="preserve">
          <source>This results in big
productivity boost.</source>
          <target state="new">This results in big
productivity boost.</target>
        </trans-unit>
        <trans-unit id="c0b6bf6c-bff9-4b07-a01b-751c127a44a9" xml:space="preserve">
          <source>These benefits do not disappear just because the type gets put into a
List or a Dictionary, so clearly parameterized types have value.</source>
          <target state="new">These benefits do not disappear just because the type gets put into a
List or a Dictionary, so clearly parameterized types have value.</target>
        </trans-unit>
        <trans-unit id="438addd2-6204-44d2-99d8-94963d6a9e97" xml:space="preserve">
          <source>The
only real question is whether parameterized types are best thought of as
a language specific feature which is "compiled out" by the time CIL is
generated, or whether this feature should have first class support in
the runtime.</source>
          <target state="new">The
only real question is whether parameterized types are best thought of as
a language specific feature which is "compiled out" by the time CIL is
generated, or whether this feature should have first class support in
the runtime.</target>
        </trans-unit>
        <trans-unit id="2a32892f-8776-43af-b266-6ac10ab31fad" xml:space="preserve">
          <source>Either implementation is certainly possible.</source>
          <target state="new">Either implementation is certainly possible.</target>
        </trans-unit>
        <trans-unit id="0401bc73-0998-418b-a612-269ec590b094" xml:space="preserve">
          <source>The CLR team
chose first class support because without it, parameterized types would
be implemented different ways by different languages.</source>
          <target state="new">The CLR team
chose first class support because without it, parameterized types would
be implemented different ways by different languages.</target>
        </trans-unit>
        <trans-unit id="99258f26-d4dd-462b-9137-18a5f90bf642" xml:space="preserve">
          <source>This would imply
that interoperability would be cumbersome at best.</source>
          <target state="new">This would imply
that interoperability would be cumbersome at best.</target>
        </trans-unit>
        <trans-unit id="d10b4672-eccd-40a1-93f9-c4025b6499cb" xml:space="preserve">
          <source>In addition,
expressing programmer intent for parameterized types is most valuable
<bpt id="081553e2-b1c9-4406-a4cc-0dfc84cc2034">&lt;em&gt;</bpt>at the interface<ept id="081553e2-b1c9-4406-a4cc-0dfc84cc2034">&lt;/em&gt;</ept> of a class library.</source>
          <target state="new">In addition,
expressing programmer intent for parameterized types is most valuable
<bpt id="081553e2-b1c9-4406-a4cc-0dfc84cc2034">&lt;em&gt;</bpt>at the interface<ept id="081553e2-b1c9-4406-a4cc-0dfc84cc2034">&lt;/em&gt;</ept> of a class library.</target>
        </trans-unit>
        <trans-unit id="d4147cb5-77b6-40df-8e1c-101100ccbb8d" xml:space="preserve">
          <source>If the CLR did not officially
support parameterized types, then class libraries could not use them,
and an important usability feature would be lost.</source>
          <target state="new">If the CLR did not officially
support parameterized types, then class libraries could not use them,
and an important usability feature would be lost.</target>
        </trans-unit>
        <trans-unit id="0eb5b29e-58a5-46ff-a731-6b50d0b57b1a" xml:space="preserve">
          <source>Programs as Data (Reflection APIs)</source>
          <target state="new">Programs as Data (Reflection APIs)</target>
        </trans-unit>
        <trans-unit id="829abcb2-419c-4580-9f0b-66d2bdced4af" xml:space="preserve">
          <source>The fundamentals of the CLR are garbage collection, type safety, and
high-level language features.</source>
          <target state="new">The fundamentals of the CLR are garbage collection, type safety, and
high-level language features.</target>
        </trans-unit>
        <trans-unit id="0c6f04c3-c08b-40c7-99eb-2ce1b2cfe613" xml:space="preserve">
          <source>These basic characteristics forced the
specification of the program (the CIL) to be fairly high level.</source>
          <target state="new">These basic characteristics forced the
specification of the program (the CIL) to be fairly high level.</target>
        </trans-unit>
        <trans-unit id="2d50c65b-1761-4a21-8c84-a563b2673142" xml:space="preserve">
          <source>Once
this data existed at run time (something not true for C or C++
programs), it became obvious that it would also be valuable to expose
this rich data to end programmers.</source>
          <target state="new">Once
this data existed at run time (something not true for C or C++
programs), it became obvious that it would also be valuable to expose
this rich data to end programmers.</target>
        </trans-unit>
        <trans-unit id="7dc213a2-8280-4b4c-b866-b2d9549e1fdd" xml:space="preserve">
          <source>This idea resulted in the creation of
the System.Reflection interfaces (so-called because they allow the
program to look at (reflect upon) itself).</source>
          <target state="new">This idea resulted in the creation of
the System.Reflection interfaces (so-called because they allow the
program to look at (reflect upon) itself).</target>
        </trans-unit>
        <trans-unit id="d94d00b3-1c5f-48ba-929e-7881cb86f090" xml:space="preserve">
          <source>This interface allows you to
explore almost all aspects of a program (what types it has, the
inheritance relationship, and what methods and fields are present).</source>
          <target state="new">This interface allows you to
explore almost all aspects of a program (what types it has, the
inheritance relationship, and what methods and fields are present).</target>
        </trans-unit>
        <trans-unit id="bb85e2f6-2e54-4a62-8152-c079209be778" xml:space="preserve">
          <source>In
fact, so little information is lost that very good "decompilers" for
managed code are possible (e.g., <bpt id="4635ab8c-b788-4924-b94d-8ab05cce6559CapsExtId1">&lt;linkText&gt;</bpt>NET
Reflector<ept id="4635ab8c-b788-4924-b94d-8ab05cce6559CapsExtId1">&lt;/linkText&gt;</ept><bpt id="4635ab8c-b788-4924-b94d-8ab05cce6559CapsExtId2">&lt;title&gt;</bpt><ept id="4635ab8c-b788-4924-b94d-8ab05cce6559CapsExtId2">&lt;/title&gt;</ept>).</source>
          <target state="new">In
fact, so little information is lost that very good "decompilers" for
managed code are possible (e.g., <bpt id="4635ab8c-b788-4924-b94d-8ab05cce6559CapsExtId1">&lt;linkText&gt;</bpt>NET
Reflector<ept id="4635ab8c-b788-4924-b94d-8ab05cce6559CapsExtId1">&lt;/linkText&gt;</ept><bpt id="4635ab8c-b788-4924-b94d-8ab05cce6559CapsExtId2">&lt;title&gt;</bpt><ept id="4635ab8c-b788-4924-b94d-8ab05cce6559CapsExtId2">&lt;/title&gt;</ept>).</target>
        </trans-unit>
        <trans-unit id="d1023bcc-53ed-4b7f-947b-c32566fa36ef" xml:space="preserve">
          <source>While those
concerned with intellectual property protection are aghast at this
capability (which can be fixed by purposefully destroying information
through an operation called <bpt id="7887120f-afd2-4ec0-b798-c776840bcf9a">&lt;em&gt;</bpt>obfuscating<ept id="7887120f-afd2-4ec0-b798-c776840bcf9a">&lt;/em&gt;</ept> the program), the fact that it
is possible is a testament to the richness of the information available
at run time in managed code.</source>
          <target state="new">While those
concerned with intellectual property protection are aghast at this
capability (which can be fixed by purposefully destroying information
through an operation called <bpt id="7887120f-afd2-4ec0-b798-c776840bcf9a">&lt;em&gt;</bpt>obfuscating<ept id="7887120f-afd2-4ec0-b798-c776840bcf9a">&lt;/em&gt;</ept> the program), the fact that it
is possible is a testament to the richness of the information available
at run time in managed code.</target>
        </trans-unit>
        <trans-unit id="9ac59c8c-3f05-4050-8174-17f49c7d2139" xml:space="preserve">
          <source>In addition to simply inspecting programs at run time, it is also
possible to perform operations on them (e.g., invoke methods, set
fields, etc.), and perhaps most powerfully, to generate code from
scratch at run time (System.Reflection.Emit).</source>
          <target state="new">In addition to simply inspecting programs at run time, it is also
possible to perform operations on them (e.g., invoke methods, set
fields, etc.), and perhaps most powerfully, to generate code from
scratch at run time (System.Reflection.Emit).</target>
        </trans-unit>
        <trans-unit id="dee02ecf-1825-4376-8fd8-2c9e45c90d60" xml:space="preserve">
          <source>In fact, the runtime
libraries use this capability to create specialized code for matching
strings (System.Text.RegularExpressions), and to generate code for
"serializing" objects to store in a file or send across the network.</source>
          <target state="new">In fact, the runtime
libraries use this capability to create specialized code for matching
strings (System.Text.RegularExpressions), and to generate code for
"serializing" objects to store in a file or send across the network.</target>
        </trans-unit>
        <trans-unit id="d97f9074-8046-4c9a-9c01-81aa21e9cd05" xml:space="preserve">
          <source>Capabilities like this were simply infeasible before (you would have to
write a compiler!)</source>
          <target state="new">Capabilities like this were simply infeasible before (you would have to
write a compiler!)</target>
        </trans-unit>
        <trans-unit id="7e292c39-5b84-43a0-8f71-708db2bbd7f8" xml:space="preserve">
          <source>but thanks to the runtime, are well within reach of
many more programming problems.</source>
          <target state="new">but thanks to the runtime, are well within reach of
many more programming problems.</target>
        </trans-unit>
        <trans-unit id="cf60c5d0-59a3-42d5-82e1-b237d4bb90da" xml:space="preserve">
          <source>While reflection capabilities are indeed powerful, that power should be
used with care.</source>
          <target state="new">While reflection capabilities are indeed powerful, that power should be
used with care.</target>
        </trans-unit>
        <trans-unit id="40abb0d3-2971-4779-a517-4be84e627d11" xml:space="preserve">
          <source>Reflection is usually significantly slower than its
statically compiled counterparts.</source>
          <target state="new">Reflection is usually significantly slower than its
statically compiled counterparts.</target>
        </trans-unit>
        <trans-unit id="075c1a6e-6877-4fee-b69f-7da74b613943" xml:space="preserve">
          <source>More importantly, self-referential
systems are inherently harder to understand.</source>
          <target state="new">More importantly, self-referential
systems are inherently harder to understand.</target>
        </trans-unit>
        <trans-unit id="b733da4d-90d0-4512-98e9-603ca19a9e2a" xml:space="preserve">
          <source>This means that powerful
features such as Reflection or Reflection.Emit should only be used when
the value is clear and substantial.</source>
          <target state="new">This means that powerful
features such as Reflection or Reflection.Emit should only be used when
the value is clear and substantial.</target>
        </trans-unit>
        <trans-unit id="c96ea83f-1e57-46e0-bd36-8eec537ef079" xml:space="preserve">
          <source>Other Features</source>
          <target state="new">Other Features</target>
        </trans-unit>
        <trans-unit id="45a271b6-2949-46b8-b6b5-02cab8247257" xml:space="preserve">
          <source>The last grouping of runtime features are those that are not related to
the fundamental architecture of the CLR (GC, type safety, high-level
specification), but nevertheless fill important needs of any complete
runtime system.</source>
          <target state="new">The last grouping of runtime features are those that are not related to
the fundamental architecture of the CLR (GC, type safety, high-level
specification), but nevertheless fill important needs of any complete
runtime system.</target>
        </trans-unit>
        <trans-unit id="57696e45-4b65-400f-bdc1-2ed2922107ac" xml:space="preserve">
          <source>Interoperation with Unmanaged Code</source>
          <target state="new">Interoperation with Unmanaged Code</target>
        </trans-unit>
        <trans-unit id="005e3ea2-d182-47fc-b730-747f8b774a09" xml:space="preserve">
          <source>Managed code needs to be able to use functionality implemented in
unmanaged code.</source>
          <target state="new">Managed code needs to be able to use functionality implemented in
unmanaged code.</target>
        </trans-unit>
        <trans-unit id="ed9efb7a-9a23-49f4-8dcf-dbd452a07e4e" xml:space="preserve">
          <source>There are two main "flavors" of interoperation.</source>
          <target state="new">There are two main "flavors" of interoperation.</target>
        </trans-unit>
        <trans-unit id="78a6f4ba-4e95-48d5-98b0-3981bc05392f" xml:space="preserve">
          <source>First is
the ability simply to call unmanaged functions (this is called Platform
Invoke or PINVOKE).</source>
          <target state="new">First is
the ability simply to call unmanaged functions (this is called Platform
Invoke or PINVOKE).</target>
        </trans-unit>
        <trans-unit id="ec23b29f-789b-4f86-b02b-67ac3dc3dfc5" xml:space="preserve">
          <source>Unmanaged code also has an object-oriented model of
interoperation called COM (component object model) which has more
structure than ad hoc method calls.</source>
          <target state="new">Unmanaged code also has an object-oriented model of
interoperation called COM (component object model) which has more
structure than ad hoc method calls.</target>
        </trans-unit>
        <trans-unit id="9ddbdd8a-4b7e-488f-9a95-044f3e8003ab" xml:space="preserve">
          <source>Since both COM and the CLR have
models for objects and other conventions (how errors are handled,
lifetime of objects, etc.), the CLR can do a better job interoperating
with COM code if it has special support.</source>
          <target state="new">Since both COM and the CLR have
models for objects and other conventions (how errors are handled,
lifetime of objects, etc.), the CLR can do a better job interoperating
with COM code if it has special support.</target>
        </trans-unit>
        <trans-unit id="6f8e79d2-d22d-4d35-b4e4-bc9ca797fb44" xml:space="preserve">
          <source>Ahead of time Compilation</source>
          <target state="new">Ahead of time Compilation</target>
        </trans-unit>
        <trans-unit id="de14f588-3c46-435d-94d1-5a46714c5a89" xml:space="preserve">
          <source>In the CLR model, managed code is distributed as CIL, not native code.</source>
          <target state="new">In the CLR model, managed code is distributed as CIL, not native code.</target>
        </trans-unit>
        <trans-unit id="27647412-bc1b-40ed-a6e4-7fe5c41a0ee4" xml:space="preserve">
          <source>Translation to native code occurs at run time.</source>
          <target state="new">Translation to native code occurs at run time.</target>
        </trans-unit>
        <trans-unit id="f30f9350-5f85-4c47-98f8-d20cc1dd71ea" xml:space="preserve">
          <source>As an optimization, the
native code that is generated from the CIL can be saved in a file using
a tool called crossgen (similar to .NET Framework NGEN tool).</source>
          <target state="new">As an optimization, the
native code that is generated from the CIL can be saved in a file using
a tool called crossgen (similar to .NET Framework NGEN tool).</target>
        </trans-unit>
        <trans-unit id="d4a66207-7d14-42a1-894a-11334dcb9827" xml:space="preserve">
          <source>This
avoids large amounts of compilation time at run time and is very
important because the class library is so large.</source>
          <target state="new">This
avoids large amounts of compilation time at run time and is very
important because the class library is so large.</target>
        </trans-unit>
        <trans-unit id="6809868a-675b-4920-a8f3-84521fe4d189" xml:space="preserve">
          <source>Threading</source>
          <target state="new">Threading</target>
        </trans-unit>
        <trans-unit id="d99d0504-49e4-4154-88f0-249cb789fc15" xml:space="preserve">
          <source>The CLR fully anticipated the need to support multi-threaded programs in
managed code.</source>
          <target state="new">The CLR fully anticipated the need to support multi-threaded programs in
managed code.</target>
        </trans-unit>
        <trans-unit id="c4ee6954-d174-479b-98d3-348f681516cd" xml:space="preserve">
          <source>From the start, the CLR libraries contained the
System.Threading.Thread class which is a 1-to-1 wrapper over the
operating system notion of a thread of execution.</source>
          <target state="new">From the start, the CLR libraries contained the
System.Threading.Thread class which is a 1-to-1 wrapper over the
operating system notion of a thread of execution.</target>
        </trans-unit>
        <trans-unit id="e8a43db3-2981-4ac8-81a1-ca30160b7bc5" xml:space="preserve">
          <source>However, because it is
just a wrapper over the operating system thread, creating a
System.Threading.Thread is relatively expensive (it takes milliseconds
to start).</source>
          <target state="new">However, because it is
just a wrapper over the operating system thread, creating a
System.Threading.Thread is relatively expensive (it takes milliseconds
to start).</target>
        </trans-unit>
        <trans-unit id="f072ec1d-c611-424e-9299-cf415aa1aac9" xml:space="preserve">
          <source>While this is fine for many operations, one style of
programming creates very small work items (taking only tens of
milliseconds).</source>
          <target state="new">While this is fine for many operations, one style of
programming creates very small work items (taking only tens of
milliseconds).</target>
        </trans-unit>
        <trans-unit id="968a39e4-f839-47f9-bc03-2fef488a7074" xml:space="preserve">
          <source>This is very common in server code (e.g., each task is
serving just one web page) or in code that tries to take advantage of
multi-processors (e.g., a multi-core sort algorithm).</source>
          <target state="new">This is very common in server code (e.g., each task is
serving just one web page) or in code that tries to take advantage of
multi-processors (e.g., a multi-core sort algorithm).</target>
        </trans-unit>
        <trans-unit id="ed445d06-3acb-4eee-a3cb-eebb56579389" xml:space="preserve">
          <source>To support this,
the CLR has the notion of a ThreadPool which allows WorkItems to be
queued.</source>
          <target state="new">To support this,
the CLR has the notion of a ThreadPool which allows WorkItems to be
queued.</target>
        </trans-unit>
        <trans-unit id="14dc5f16-e1ee-43f0-a6fe-97a3fecaa43a" xml:space="preserve">
          <source>In this scheme, the CLR is responsible for creating the
necessary threads to do the work.</source>
          <target state="new">In this scheme, the CLR is responsible for creating the
necessary threads to do the work.</target>
        </trans-unit>
        <trans-unit id="a3360618-73e1-46df-b48f-bd7424696a24" xml:space="preserve">
          <source>While the CLR does expose the
ThreadPool directly as the System.Threading.Threadpool class, the
preferred mechanism is to use the [Task Parallel
Library](https://msdn.microsoft.com/en-us/library/dd460717(v=vs.110).aspx),
which adds additional support for very common forms of concurrency
control.</source>
          <target state="new">While the CLR does expose the
ThreadPool directly as the System.Threading.Threadpool class, the
preferred mechanism is to use the [Task Parallel
Library](https://msdn.microsoft.com/en-us/library/dd460717(v=vs.110).aspx),
which adds additional support for very common forms of concurrency
control.</target>
        </trans-unit>
        <trans-unit id="3c0e42ba-93cb-4514-9864-94f214a3126a" xml:space="preserve">
          <source>From an implementation perspective, the important innovation of the
ThreadPool is that it is responsible for ensuring that the optimal
number of threads are used to dispatch the work.</source>
          <target state="new">From an implementation perspective, the important innovation of the
ThreadPool is that it is responsible for ensuring that the optimal
number of threads are used to dispatch the work.</target>
        </trans-unit>
        <trans-unit id="0aab1fcd-123b-47b9-8d8b-a3e3664aa2a4" xml:space="preserve">
          <source>The CLR does this using
a feedback system where it monitors the throughput rate and the number
of threads and adjusts the number of threads to maximize the throughput.</source>
          <target state="new">The CLR does this using
a feedback system where it monitors the throughput rate and the number
of threads and adjusts the number of threads to maximize the throughput.</target>
        </trans-unit>
        <trans-unit id="be034e50-8fe4-43c2-abe5-179c61644e82" xml:space="preserve">
          <source>This is very nice because now programmers can think mostly in terms of
"exposing parallelism" (that is, creating work items), rather than the
more subtle question of determining the right amount of parallelism
(which depends on the workload and the hardware on which the program is
run).</source>
          <target state="new">This is very nice because now programmers can think mostly in terms of
"exposing parallelism" (that is, creating work items), rather than the
more subtle question of determining the right amount of parallelism
(which depends on the workload and the hardware on which the program is
run).</target>
        </trans-unit>
        <trans-unit id="a9bc2886-19e4-4abf-b711-75804f4264dc" xml:space="preserve">
          <source>Summary and Resources</source>
          <target state="new">Summary and Resources</target>
        </trans-unit>
        <trans-unit id="b17094d3-ae4c-4b48-a419-f7adf858ed22" xml:space="preserve">
          <source>Phew!</source>
          <target state="new">Phew!</target>
        </trans-unit>
        <trans-unit id="ec82d98e-81c9-46ec-b6ae-173a58c2367f" xml:space="preserve">
          <source>The runtime does a lot!</source>
          <target state="new">The runtime does a lot!</target>
        </trans-unit>
        <trans-unit id="6f1027c4-1efe-42ef-896a-6ce76830521e" xml:space="preserve">
          <source>It has taken many pages just to describe
<bpt id="ce288d29-0a79-4da7-b107-e0bbdd1de086">&lt;em&gt;</bpt>some<ept id="ce288d29-0a79-4da7-b107-e0bbdd1de086">&lt;/em&gt;</ept> of the features of the runtime, without even starting to talk
about internal details.</source>
          <target state="new">It has taken many pages just to describe
<bpt id="ce288d29-0a79-4da7-b107-e0bbdd1de086">&lt;em&gt;</bpt>some<ept id="ce288d29-0a79-4da7-b107-e0bbdd1de086">&lt;/em&gt;</ept> of the features of the runtime, without even starting to talk
about internal details.</target>
        </trans-unit>
        <trans-unit id="26b0658a-5c08-4839-9920-40545c06fcb4" xml:space="preserve">
          <source>The hope is, however, that this introduction
will provide a useful framework for a deeper understanding of those
internal details.</source>
          <target state="new">The hope is, however, that this introduction
will provide a useful framework for a deeper understanding of those
internal details.</target>
        </trans-unit>
        <trans-unit id="fe40f10b-ee39-443d-8fa7-75e83c035ec4" xml:space="preserve">
          <source>The basic outline of this framework is:</source>
          <target state="new">The basic outline of this framework is:</target>
        </trans-unit>
        <trans-unit id="9ec2f856-5d8f-4383-8e8f-fcbf0b8a138b" xml:space="preserve">
          <source>The Runtime is a complete framework for supporting programming languages</source>
          <target state="new">The Runtime is a complete framework for supporting programming languages</target>
        </trans-unit>
        <trans-unit id="c81c6dca-9fb6-432d-ba2d-1df05b974208" xml:space="preserve">
          <source>The Runtime's goal is to make programming easy.</source>
          <target state="new">The Runtime's goal is to make programming easy.</target>
        </trans-unit>
        <trans-unit id="3b8eedeb-0d68-4ccc-a161-f76967c8038d" xml:space="preserve">
          <source>The Fundamental features of the runtime are:</source>
          <target state="new">The Fundamental features of the runtime are:</target>
        </trans-unit>
        <trans-unit id="731b6654-de1f-4547-bb27-49b4dc239cc1" xml:space="preserve">
          <source>Garbage Collection</source>
          <target state="new">Garbage Collection</target>
        </trans-unit>
        <trans-unit id="941d585f-b7e8-4e8b-bfa7-8e3638a2d276" xml:space="preserve">
          <source>Memory and Type Safety</source>
          <target state="new">Memory and Type Safety</target>
        </trans-unit>
        <trans-unit id="c685e267-2d38-4d8b-a1de-153dcea18b26" xml:space="preserve">
          <source>Support for High-Level Language Features</source>
          <target state="new">Support for High-Level Language Features</target>
        </trans-unit>
        <trans-unit id="ee39ba32-c52e-4696-a8b5-b68daaad12eb" xml:space="preserve">
          <source>Useful Links</source>
          <target state="new">Useful Links</target>
        </trans-unit>
        <trans-unit id="9e3dd5e9-c222-43c5-b136-007e29038585" xml:space="preserve">
          <source><bpt id="c25607d5-7d36-4fcd-a579-8fb362c6b463CapsExtId1">&lt;linkText&gt;</bpt>MSDN Entry for the CLR<ept id="c25607d5-7d36-4fcd-a579-8fb362c6b463CapsExtId1">&lt;/linkText&gt;</ept><bpt id="c25607d5-7d36-4fcd-a579-8fb362c6b463CapsExtId2">&lt;title&gt;</bpt><ept id="c25607d5-7d36-4fcd-a579-8fb362c6b463CapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="c25607d5-7d36-4fcd-a579-8fb362c6b463CapsExtId1">&lt;linkText&gt;</bpt>MSDN Entry for the CLR<ept id="c25607d5-7d36-4fcd-a579-8fb362c6b463CapsExtId1">&lt;/linkText&gt;</ept><bpt id="c25607d5-7d36-4fcd-a579-8fb362c6b463CapsExtId2">&lt;title&gt;</bpt><ept id="c25607d5-7d36-4fcd-a579-8fb362c6b463CapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="b64b2381-c9a2-4ae5-8d60-33f132016288" xml:space="preserve">
          <source><bpt id="91a61ed2-9498-4b8f-9e32-e326a6bf113aCapsExtId1">&lt;linkText&gt;</bpt>Wikipedia Entry for the CLR<ept id="91a61ed2-9498-4b8f-9e32-e326a6bf113aCapsExtId1">&lt;/linkText&gt;</ept><bpt id="91a61ed2-9498-4b8f-9e32-e326a6bf113aCapsExtId2">&lt;title&gt;</bpt><ept id="91a61ed2-9498-4b8f-9e32-e326a6bf113aCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="91a61ed2-9498-4b8f-9e32-e326a6bf113aCapsExtId1">&lt;linkText&gt;</bpt>Wikipedia Entry for the CLR<ept id="91a61ed2-9498-4b8f-9e32-e326a6bf113aCapsExtId1">&lt;/linkText&gt;</ept><bpt id="91a61ed2-9498-4b8f-9e32-e326a6bf113aCapsExtId2">&lt;title&gt;</bpt><ept id="91a61ed2-9498-4b8f-9e32-e326a6bf113aCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="2b68a1db-a3be-479d-9d9c-3cbe80fbf00f" xml:space="preserve">
          <source><bpt id="a2592099-a184-440a-9e27-39f9aa5b8c0cCapsExtId1">&lt;linkText&gt;</bpt>ECMA Standard for the Common Language Infrastructure CLI<ept id="a2592099-a184-440a-9e27-39f9aa5b8c0cCapsExtId1">&lt;/linkText&gt;</ept><bpt id="a2592099-a184-440a-9e27-39f9aa5b8c0cCapsExtId2">&lt;title&gt;</bpt><ept id="a2592099-a184-440a-9e27-39f9aa5b8c0cCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="a2592099-a184-440a-9e27-39f9aa5b8c0cCapsExtId1">&lt;linkText&gt;</bpt>ECMA Standard for the Common Language Infrastructure CLI<ept id="a2592099-a184-440a-9e27-39f9aa5b8c0cCapsExtId1">&lt;/linkText&gt;</ept><bpt id="a2592099-a184-440a-9e27-39f9aa5b8c0cCapsExtId2">&lt;title&gt;</bpt><ept id="a2592099-a184-440a-9e27-39f9aa5b8c0cCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="7dfd7e44-d3de-4f3c-b4cc-c4c1699e375a" xml:space="preserve">
          <source><bpt id="2d5fc421-a36d-49ba-9ba3-f853b24fe51aCapsExtId1">&lt;linkText&gt;</bpt>.NET Framework Design Guidelines<ept id="2d5fc421-a36d-49ba-9ba3-f853b24fe51aCapsExtId1">&lt;/linkText&gt;</ept><bpt id="2d5fc421-a36d-49ba-9ba3-f853b24fe51aCapsExtId2">&lt;title&gt;</bpt><ept id="2d5fc421-a36d-49ba-9ba3-f853b24fe51aCapsExtId2">&lt;/title&gt;</ept></source>
          <target state="new"><bpt id="2d5fc421-a36d-49ba-9ba3-f853b24fe51aCapsExtId1">&lt;linkText&gt;</bpt>.NET Framework Design Guidelines<ept id="2d5fc421-a36d-49ba-9ba3-f853b24fe51aCapsExtId1">&lt;/linkText&gt;</ept><bpt id="2d5fc421-a36d-49ba-9ba3-f853b24fe51aCapsExtId2">&lt;title&gt;</bpt><ept id="2d5fc421-a36d-49ba-9ba3-f853b24fe51aCapsExtId2">&lt;/title&gt;</ept></target>
        </trans-unit>
        <trans-unit id="1159fc7f-5a01-4cbd-989d-81dd28e23ef6" xml:space="preserve">
          <source>
  (function () {
    var articleId = fyre.conv.load.makeArticleId(null);
    fyre.conv.load({}, [{
      el: 'livefyre-comments',
      network: "livefyre.com",
      siteId: "377988",
      articleId: articleId,
      signed: false,
      collectionMeta: {
        articleId: articleId,
        url: fyre.conv.load.makeCollectionUrl(),
      }
    }], function() {});
  }());
</source>
          <target state="new">
  (function () {
    var articleId = fyre.conv.load.makeArticleId(null);
    fyre.conv.load({}, [{
      el: 'livefyre-comments',
      network: "livefyre.com",
      siteId: "377988",
      articleId: articleId,
      signed: false,
      collectionMeta: {
        articleId: articleId,
        url: fyre.conv.load.makeCollectionUrl(),
      }
    }], function() {});
  }());
</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>