<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\gaming\multisampling--multi-sample-anti-aliasing--in-windows-store-apps.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">7b240de9ab3c7b53877d38eb9097dde25b2a40be</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Multisampling in Universal Windows Platform (UWP) apps</source>
          <target>Multisampling in Universal Windows Platform (UWP) apps</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Learn how to use multisampling in Universal Windows Platform (UWP) apps built with Direct3D.</source>
          <target>Learn how to use multisampling in Universal Windows Platform (UWP) apps built with Direct3D.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Multisampling in Universal Windows Platform (UWP) apps</source>
          <target>Multisampling in Universal Windows Platform (UWP) apps</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Learn how to use multisampling in Universal Windows Platform (UWP) apps built with Direct3D.</source>
          <target>Learn how to use multisampling in Universal Windows Platform (UWP) apps built with Direct3D.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Multisampling, also known as multi-sample antialiasing, is a graphics technique used to reduce the appearance of aliased edges.</source>
          <target>Multisampling, also known as multi-sample antialiasing, is a graphics technique used to reduce the appearance of aliased edges.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>It works by drawing more pixels than are actually in the final render target, then averaging values to maintain the appearance of a "partial" edge in certain pixels.</source>
          <target>It works by drawing more pixels than are actually in the final render target, then averaging values to maintain the appearance of a "partial" edge in certain pixels.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/cc627092#Multisample)</data>
        </originalData>
        <segment state="initial">
          <source>For a detailed description of how multisampling actually works in Direct3D, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Multisample Anti-Aliasing Rasterization Rules</pc>.</source>
          <target>For a detailed description of how multisampling actually works in Direct3D, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Multisample Anti-Aliasing Rasterization Rules</pc>.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Multisampling and the flip model swap chain</source>
          <target>Multisampling and the flip model swap chain</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>UWP apps that use DirectX must use flip model swap chains.</source>
          <target>UWP apps that use DirectX must use flip model swap chains.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Flip model swap chains don't support multisampling directly, but multisampling can still be applied in a different way by rendering the scene to a multisampled render target view, and then resolving the multisampled render target to the back buffer before presenting.</source>
          <target>Flip model swap chains don't support multisampling directly, but multisampling can still be applied in a different way by rendering the scene to a multisampled render target view, and then resolving the multisampled render target to the back buffer before presenting.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>This article explains the steps required to add multisampling to your UWP app.</source>
          <target>This article explains the steps required to add multisampling to your UWP app.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>How to use multisampling</source>
          <target>How to use multisampling</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Direct3D feature levels guarantee support for specific, minimum sample count capabilities, and guarantee certain buffer formats will be available that support multisampling.</source>
          <target>Direct3D feature levels guarantee support for specific, minimum sample count capabilities, and guarantee certain buffer formats will be available that support multisampling.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Graphics devices often support a wider range of formats and sample counts than the minimum required.</source>
          <target>Graphics devices often support a wider range of formats and sample counts than the minimum required.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Multisampling support can be determined at run-time by checking feature support for multisampling with specific DXGI formats, and then checking the sample counts you can use with each supported format.</source>
          <target>Multisampling support can be determined at run-time by checking feature support for multisampling with specific DXGI formats, and then checking the sample counts you can use with each supported format.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476497)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CheckFeatureSupport</pc></pc> to find out which DXGI formats can be used with multisampling.</source>
          <target>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CheckFeatureSupport</pc></pc> to find out which DXGI formats can be used with multisampling.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Supply the render target formats your game can use.</source>
          <target>Supply the render target formats your game can use.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476134)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">\_</data>
          <data id="id8">\_</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">\_</data>
          <data id="id12">\_</data>
          <data id="id13">\_</data>
          <data id="id14">\_</data>
        </originalData>
        <segment state="initial">
          <source>Both the render target and resolve target must use the same format, so check for both <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11<ph dataRef="id5" id="ph1" />FORMAT<ph dataRef="id6" id="ph2" />SUPPORT<ph dataRef="id7" id="ph3" />MULTISAMPLE<ph dataRef="id8" id="ph4" />RENDERTARGET</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p3">D3D11<ph dataRef="id11" id="ph5" />FORMAT<ph dataRef="id12" id="ph6" />SUPPORT<ph dataRef="id13" id="ph7" />MULTISAMPLE<ph dataRef="id14" id="ph8" />RESOLVE</pc>.</source>
          <target>Both the render target and resolve target must use the same format, so check for both <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">D3D11<ph dataRef="id5" id="ph1" />FORMAT<ph dataRef="id6" id="ph2" />SUPPORT<ph dataRef="id7" id="ph3" />MULTISAMPLE<ph dataRef="id8" id="ph4" />RENDERTARGET</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p3">D3D11<ph dataRef="id11" id="ph5" />FORMAT<ph dataRef="id12" id="ph6" />SUPPORT<ph dataRef="id13" id="ph7" />MULTISAMPLE<ph dataRef="id14" id="ph8" />RESOLVE</pc>.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/desktop/ff471324#MultiSample_RenderTarget)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Feature level 9:  </pc> Although feature level 9 devices <pc dataRefEnd="id4" dataRefStart="id3" id="p2">guarantee support for multisampled render target formats</pc>, support is not guaranteed for multisample resolve targets.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Feature level 9:  </pc> Although feature level 9 devices <pc dataRefEnd="id4" dataRefStart="id3" id="p2">guarantee support for multisampled render target formats</pc>, support is not guaranteed for multisample resolve targets.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>So this check is necessary before trying to use the multisampling technique described in this topic.</source>
          <target>So this check is necessary before trying to use the multisampling technique described in this topic.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>The following code checks multisampling support for all the DXGI<ph dataRef="id1" id="ph1" />FORMAT values:</source>
          <target>The following code checks multisampling support for all the DXGI<ph dataRef="id1" id="ph1" />FORMAT values:</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476499)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>For each supported format, query for sample count support by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CheckMultisampleQualityLevels</pc></pc>.</source>
          <target>For each supported format, query for sample count support by calling <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device::CheckMultisampleQualityLevels</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>The following code checks sample size support for supported DXGI formats:</source>
          <target>The following code checks sample size support for supported DXGI formats:</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://msdn.microsoft.com/library/windows/desktop/dn280494)</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   Use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ID3D11Device2::CheckMultisampleQualityLevels1</pc></pc> instead if you need to check multisample support for tiled resource buffers.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>   Use <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><pc dataRefEnd="id6" dataRefStart="id5" id="p3">ID3D11Device2::CheckMultisampleQualityLevels1</pc></pc> instead if you need to check multisample support for tiled resource buffers.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Create a buffer and render target view with the desired sample count.</source>
          <target>Create a buffer and render target view with the desired sample count.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>Use the same DXGI<ph dataRef="id1" id="ph1" />FORMAT, width, and height as the swap chain, but specify a sample count greater than 1 and use a multisampled texture dimension (<pc dataRefEnd="id3" dataRefStart="id2" id="p1">D3D11<ph dataRef="id4" id="ph2" />RTV<ph dataRef="id5" id="ph3" />DIMENSION<ph dataRef="id6" id="ph4" />TEXTURE2DMS</pc> for example).</source>
          <target>Use the same DXGI<ph dataRef="id1" id="ph1" />FORMAT, width, and height as the swap chain, but specify a sample count greater than 1 and use a multisampled texture dimension (<pc dataRefEnd="id3" dataRefStart="id2" id="p1">D3D11<ph dataRef="id4" id="ph2" />RTV<ph dataRef="id5" id="ph3" />DIMENSION<ph dataRef="id6" id="ph4" />TEXTURE2DMS</pc> for example).</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>If necessary, you can re-create the swap chain with new settings that are optimal for multisampling.</source>
          <target>If necessary, you can re-create the swap chain with new settings that are optimal for multisampling.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>The following code creates a multisampled render target:</source>
          <target>The following code creates a multisampled render target:</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>The depth buffer must have the same width, height, sample count, and texture dimension to match the multisampled render target.</source>
          <target>The depth buffer must have the same width, height, sample count, and texture dimension to match the multisampled render target.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>The following code creates a multisampled depth buffer:</source>
          <target>The following code creates a multisampled depth buffer:</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Now is a good time to create the viewport, because the viewport width and height must also match the render target.</source>
          <target>Now is a good time to create the viewport, because the viewport width and height must also match the render target.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>The following code creates a viewport:</source>
          <target>The following code creates a viewport:</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Render each frame to the multisampled render target.</source>
          <target>Render each frame to the multisampled render target.</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476474)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>When rendering is complete, call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::ResolveSubresource</pc></pc> before presenting the frame.</source>
          <target>When rendering is complete, call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::ResolveSubresource</pc></pc> before presenting the frame.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>This instructs Direct3D to peform the multisampling operation, computing the value of each pixel for display and placing the result in the back buffer.</source>
          <target>This instructs Direct3D to peform the multisampling operation, computing the value of each pixel for display and placing the result in the back buffer.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>The back buffer then contains the final anti-aliased image and can be presented.</source>
          <target>The back buffer then contains the final anti-aliased image and can be presented.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>The following code resolves the subresource before presenting the frame:</source>
          <target>The following code resolves the subresource before presenting the frame:</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>