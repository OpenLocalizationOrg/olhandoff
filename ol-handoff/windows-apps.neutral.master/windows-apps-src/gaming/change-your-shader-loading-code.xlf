<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="zh-cn" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows-apps-src\gaming\change-your-shader-loading-code.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">bc13df5e7f2648897be31b5cda634d23ffae8b6b</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-781aacf</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Compare the OpenGL ES 2.0 shader pipeline to Direct3D</source>
          <target>Compare the OpenGL ES 2.0 shader pipeline to Direct3D</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Conceptually, the Direct3D 11 shader pipeline is very similar to the one in OpenGL ES 2.0.</source>
          <target>Conceptually, the Direct3D 11 shader pipeline is very similar to the one in OpenGL ES 2.0.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Compare the OpenGL ES 2.0 shader pipeline to Direct3D</source>
          <target>Compare the OpenGL ES 2.0 shader pipeline to Direct3D</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Updated for UWP apps on Windows 10.</source>
          <target>Updated for UWP apps on Windows 10.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=619132)</data>
        </originalData>
        <segment state="initial">
          <source>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></source>
          <target>For Windows 8.x articles, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">archive</pc></target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Important APIs</source>
          <target>Important APIs</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Input-Assembler Stage</source>
          <target>Input-Assembler Stage</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Vertex-Shader Stage</source>
          <target>Vertex-Shader Stage</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Pixel-Shader Stage</source>
          <target>Pixel-Shader Stage</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Conceptually, the Direct3D 11 shader pipeline is very similar to the one in OpenGL ES 2.0.</source>
          <target>Conceptually, the Direct3D 11 shader pipeline is very similar to the one in OpenGL ES 2.0.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>In terms of API design, however, the major components for creating and managing the shader stages are parts of two primary interfaces, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext1</pc></pc>.</source>
          <target>In terms of API design, however, the major components for creating and managing the shader stages are parts of two primary interfaces, <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext1</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>This topic attempts to map common OpenGL ES 2.0 shader pipeline API patterns to the Direct3D 11 equivalents in these interfaces.</source>
          <target>This topic attempts to map common OpenGL ES 2.0 shader pipeline API patterns to the Direct3D 11 equivalents in these interfaces.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Reviewing the Direct3D 11 shader pipeline</source>
          <target>Reviewing the Direct3D 11 shader pipeline</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404575)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source>The shader objects are created with methods on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1</pc></pc> interface, such as <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device1::CreateVertexShader</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ID3D11Device1::CreatePixelShader</pc></pc>.</source>
          <target>The shader objects are created with methods on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1</pc></pc> interface, such as <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device1::CreateVertexShader</pc></pc> and <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">ID3D11Device1::CreatePixelShader</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>The Direct3D 11 graphics pipeline is managed by instances of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc></pc> interface, and has the following stages:</source>
          <target>The Direct3D 11 graphics pipeline is managed by instances of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc></pc> interface, and has the following stages:</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb205116)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Input-Assembler Stage</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Input-Assembler Stage</pc>.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>The input-assembler stage supplies data (triangles, lines and points) to the pipeline.</source>
          <target>The input-assembler stage supplies data (triangles, lines and points) to the pipeline.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc>
            </pc> methods that support this stage are prefixed with "IA".</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc>
            </pc> methods that support this stage are prefixed with "IA".</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb205146#Vertex_Shader_Stage)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Vertex-Shader Stage</pc> - The vertex-shader stage processes vertices, typically performing operations such as transformations, skinning, and lighting.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Vertex-Shader Stage</pc> - The vertex-shader stage processes vertices, typically performing operations such as transformations, skinning, and lighting.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>A vertex shader always takes a single input vertex and produces a single output vertex.</source>
          <target>A vertex shader always takes a single input vertex and produces a single output vertex.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc>
            </pc> methods that support this stage are prefixed with "VS".</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc>
            </pc> methods that support this stage are prefixed with "VS".</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb205121)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stream-Output Stage</pc> - The stream-output stage streams primitive data from the pipeline to memory on its way to the rasterizer.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stream-Output Stage</pc> - The stream-output stage streams primitive data from the pipeline to memory on its way to the rasterizer.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Data can be streamed out and/or passed into the rasterizer.</source>
          <target>Data can be streamed out and/or passed into the rasterizer.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Data streamed out to memory can be recirculated back into the pipeline as input data or read-back from the CPU.</source>
          <target>Data streamed out to memory can be recirculated back into the pipeline as input data or read-back from the CPU.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc>
            </pc> methods that support this stage are prefixed with "SO".</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc>
            </pc> methods that support this stage are prefixed with "SO".</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb205125)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rasterizer Stage</pc> - The rasterizer clips primitives, prepares primitives for the pixel shader, and determines how to invoke pixel shaders.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rasterizer Stage</pc> - The rasterizer clips primitives, prepares primitives for the pixel shader, and determines how to invoke pixel shaders.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476472)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476110)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">\_</data>
          <data id="id10">\_</data>
          <data id="id11">\_</data>
        </originalData>
        <segment state="initial">
          <source>You can disable rasterization by telling the pipeline there is no pixel shader (set the pixel shader stage to NULL with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::PSSetShader</pc></pc>), and disabling depth and stencil testing (set DepthEnable and StencilEnable to FALSE in <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">D3D11<ph dataRef="id9" id="ph1" />DEPTH<ph dataRef="id10" id="ph2" />STENCIL<ph dataRef="id11" id="ph3" />DESC</pc></pc>).</source>
          <target>You can disable rasterization by telling the pipeline there is no pixel shader (set the pixel shader stage to NULL with <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::PSSetShader</pc></pc>), and disabling depth and stencil testing (set DepthEnable and StencilEnable to FALSE in <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">D3D11<ph dataRef="id9" id="ph1" />DEPTH<ph dataRef="id10" id="ph2" />STENCIL<ph dataRef="id11" id="ph3" />DESC</pc></pc>).</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>While disabled, rasterization-related pipeline counters will not update.</source>
          <target>While disabled, rasterization-related pipeline counters will not update.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb205146#Pixel_Shader_Stage)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pixel-Shader Stage</pc> - The pixel-shader stage receives interpolated data for a primitive and generates per-pixel data such as color.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pixel-Shader Stage</pc> - The pixel-shader stage receives interpolated data for a primitive and generates per-pixel data such as color.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc>
            </pc> methods that support this stage are prefixed with "PS".</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc>
            </pc> methods that support this stage are prefixed with "PS".</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb205120)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Output-Merger Stage</pc> - The output-merger stage combines various types of output data (pixel shader values, depth and stencil information) with the contents of the render target and depth/stencil buffers to generate the final pipeline result.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Output-Merger Stage</pc> - The output-merger stage combines various types of output data (pixel shader values, depth and stencil information) with the contents of the render target and depth/stencil buffers to generate the final pipeline result.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc>
            </pc> methods that support this stage are prefixed with "OM".</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc>
            </pc> methods that support this stage are prefixed with "OM".</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>(There are also stages for geometry shaders, hull shaders, tesselators, and domain shaders, but since they have no analogues in OpenGL ES 2.0, we won't discuss them here.) For a complete list of the methods for these stages, refer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext1</pc></pc> reference pages.</source>
          <target>(There are also stages for geometry shaders, hull shaders, tesselators, and domain shaders, but since they have no analogues in OpenGL ES 2.0, we won't discuss them here.) For a complete list of the methods for these stages, refer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext1</pc></pc> reference pages.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID3D11DeviceContext1</pc> extends <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext</pc> for Direct3D 11.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID3D11DeviceContext1</pc> extends <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext</pc> for Direct3D 11.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Creating a shader</source>
          <target>Creating a shader</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>In Direct3D, shader resources are not created before compiling and loading them; rather, the resource is created when the HLSLis loaded.</source>
          <target>In Direct3D, shader resources are not created before compiling and loading them; rather, the resource is created when the HLSLis loaded.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>Therefore, there is no directly analogous function to glCreateShader, which creates an initialized shader resource of a specific type (such as GL<ph dataRef="id1" id="ph1" />VERTEX<ph dataRef="id2" id="ph2" />SHADER or GL<ph dataRef="id3" id="ph3" />FRAGMENT<ph dataRef="id4" id="ph4" />SHADER).</source>
          <target>Therefore, there is no directly analogous function to glCreateShader, which creates an initialized shader resource of a specific type (such as GL<ph dataRef="id1" id="ph1" />VERTEX<ph dataRef="id2" id="ph2" />SHADER or GL<ph dataRef="id3" id="ph3" />FRAGMENT<ph dataRef="id4" id="ph4" />SHADER).</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>Rather, shaders are created after the HLSL is loaded with specific functions like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1::CreateVertexShader</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device1::CreatePixelShader</pc></pc>, and which take the type and the compiled HLSL as parameters.</source>
          <target>Rather, shaders are created after the HLSL is loaded with specific functions like <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1::CreateVertexShader</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device1::CreatePixelShader</pc></pc>, and which take the type and the compiled HLSL as parameters.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>OpenGL ES 2.0</source>
          <target>OpenGL ES 2.0</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Direct3D 11</source>
          <target>Direct3D 11</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>glCreateShader</source>
          <target>glCreateShader</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1::CreateVertexShader</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device1::CreatePixelShader</pc></pc> after successfully loading the compiled shader object, passing them the CSO as a buffer.</source>
          <target>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1::CreateVertexShader</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device1::CreatePixelShader</pc></pc> after successfully loading the compiled shader object, passing them the CSO as a buffer.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>Compiling a shader</source>
          <target>Compiling a shader</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Direct3D haders must be precompiled as Compiled Shader Object (.cso) files in Universal Windows Platform (UWP) apps and loaded using one of the Windows Runtime file APIs.</source>
          <target>Direct3D haders must be precompiled as Compiled Shader Object (.cso) files in Universal Windows Platform (UWP) apps and loaded using one of the Windows Runtime file APIs.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>(Desktop apps can compile the shaders from text files or string at run-time.) The CSO files are built from any .hlsl files that are part of your Microsoft Visual Studio project, and retain the same names, only with a .cso file extension.</source>
          <target>(Desktop apps can compile the shaders from text files or string at run-time.) The CSO files are built from any .hlsl files that are part of your Microsoft Visual Studio project, and retain the same names, only with a .cso file extension.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Ensure that they are included with your package when you ship!</source>
          <target>Ensure that they are included with your package when you ship!</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>OpenGL ES 2.0</source>
          <target>OpenGL ES 2.0</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Direct3D 11</source>
          <target>Direct3D 11</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>glCompileShader</source>
          <target>glCompileShader</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>N/A.</source>
          <target>N/A.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Compile the shaders to .cso files in Visual Studio and include them in your package.</source>
          <target>Compile the shaders to .cso files in Visual Studio and include them in your package.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Using glGetShaderiv for compile status</source>
          <target>Using glGetShaderiv for compile status</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>N/A.</source>
          <target>N/A.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>See the compilation output from Visual Studio's FX Compiler (FXC) if there are errors in compilation.</source>
          <target>See the compilation output from Visual Studio's FX Compiler (FXC) if there are errors in compilation.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>If compilation is successful, a corresponding CSO file is created.</source>
          <target>If compilation is successful, a corresponding CSO file is created.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Loading a shader</source>
          <target>Loading a shader</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>As noted in the section on creating a shader, Direct3D 11 creates the shader when the corresponding CSO file is loaded into a buffer and passed to one of the methods in the following table.</source>
          <target>As noted in the section on creating a shader, Direct3D 11 creates the shader when the corresponding CSO file is loaded into a buffer and passed to one of the methods in the following table.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>OpenGL ES 2.0</source>
          <target>OpenGL ES 2.0</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>Direct3D 11</source>
          <target>Direct3D 11</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>ShaderSource</source>
          <target>ShaderSource</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476524)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476513)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1::CreateVertexShader</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device1::CreatePixelShader</pc></pc> after successfully loading the compiled shader object.</source>
          <target>Call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11Device1::CreateVertexShader</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device1::CreatePixelShader</pc></pc> after successfully loading the compiled shader object.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Setting up the pipeline</source>
          <target>Setting up the pipeline</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>OpenGL ES 2.0 has the "shader program" object, which contains multiple shaders for execution.</source>
          <target>OpenGL ES 2.0 has the "shader program" object, which contains multiple shaders for execution.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>Individual shaders are attached to the shader program object.</source>
          <target>Individual shaders are attached to the shader program object.</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>However, in Direct3D 11, you work with the rendering context (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc></pc>) directly and create shaders on it.</source>
          <target>However, in Direct3D 11, you work with the rendering context (<pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc></pc>) directly and create shaders on it.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>OpenGL ES 2.0</source>
          <target>OpenGL ES 2.0</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>Direct3D 11</source>
          <target>Direct3D 11</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>glCreateProgram</source>
          <target>glCreateProgram</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>N/A.</source>
          <target>N/A.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>Direct3D 11 does not use the shader program object abstraction.</source>
          <target>Direct3D 11 does not use the shader program object abstraction.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>glLinkProgram</source>
          <target>glLinkProgram</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>N/A.</source>
          <target>N/A.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>Direct3D 11 does not use the shader program object abstraction.</source>
          <target>Direct3D 11 does not use the shader program object abstraction.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>glUseProgram</source>
          <target>glUseProgram</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>N/A.</source>
          <target>N/A.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>Direct3D 11 does not use the shader program object abstraction.</source>
          <target>Direct3D 11 does not use the shader program object abstraction.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>glGetProgramiv</source>
          <target>glGetProgramiv</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Use the reference you created to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc></pc>.</source>
          <target>Use the reference you created to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404598)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/dn280493)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">[</data>
          <data id="id10">](https://msdn.microsoft.com/library/windows/desktop/ff476082)</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source>Create an instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device1</pc></pc> with the static <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">D3D11CreateDevice</pc></pc> method.</source>
          <target>Create an instance of <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1</pc></pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11Device1</pc></pc> with the static <pc dataRefEnd="id10" dataRefStart="id9" id="p5"><pc dataRefEnd="id12" dataRefStart="id11" id="p6">D3D11CreateDevice</pc></pc> method.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>Setting the viewport(s)</source>
          <target>Setting the viewport(s)</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>Setting a viewport in Direct3D 11 is very similar to how you set a viewport in OpenGL ES 2.0.</source>
          <target>Setting a viewport in Direct3D 11 is very similar to how you set a viewport in OpenGL ES 2.0.</target>
        </segment>
      </unit>
      <unit id="182">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476480)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/jj151722)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">\_</data>
        </originalData>
        <segment state="initial">
          <source>In Direct3D 11, call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::RSSetViewports</pc></pc> with a configured <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CD3D11<ph dataRef="id9" id="ph1" />VIEWPORT</pc></pc>.</source>
          <target>In Direct3D 11, call <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext::RSSetViewports</pc></pc> with a configured <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">CD3D11<ph dataRef="id9" id="ph1" />VIEWPORT</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>Direct3D 11: Setting a viewport.</source>
          <target>Direct3D 11: Setting a viewport.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>OpenGL ES 2.0</source>
          <target>OpenGL ES 2.0</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>Direct3D 11</source>
          <target>Direct3D 11</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>glViewport</source>
          <target>glViewport</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/jj151722)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
          <data id="id6">[</data>
          <data id="id7">](https://msdn.microsoft.com/library/windows/desktop/ff476480)</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CD3D11<ph dataRef="id5" id="ph1" />VIEWPORT</pc>
            </pc>, <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">ID3D11DeviceContext::RSSetViewports</pc></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CD3D11<ph dataRef="id5" id="ph1" />VIEWPORT</pc>
            </pc>, <pc dataRefEnd="id7" dataRefStart="id6" id="p3"><pc dataRefEnd="id9" dataRefStart="id8" id="p4">ID3D11DeviceContext::RSSetViewports</pc></pc></target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>Configuring the vertex shaders</source>
          <target>Configuring the vertex shaders</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>Configuring a vertex shader in Direct3D 11 is done when the shader is loaded.</source>
          <target>Configuring a vertex shader in Direct3D 11 is done when the shader is loaded.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh446795)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Uniforms are passed as constant buffers using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1::VSSetConstantBuffers1</pc></pc>.</source>
          <target>Uniforms are passed as constant buffers using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1::VSSetConstantBuffers1</pc></pc>.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>OpenGL ES 2.0</source>
          <target>OpenGL ES 2.0</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>Direct3D 11</source>
          <target>Direct3D 11</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>glAttachShader</source>
          <target>glAttachShader</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>ID3D11Device1::CreateVertexShader</source>
          <target>ID3D11Device1::CreateVertexShader</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>glGetShaderiv, glGetShaderSource</source>
          <target>glGetShaderiv, glGetShaderSource</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>ID3D11DeviceContext1::VSGetShader</source>
          <target>ID3D11DeviceContext1::VSGetShader</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>glGetUniformfv, glGetUniformiv</source>
          <target>glGetUniformfv, glGetUniformiv</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh446793)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1::VSGetConstantBuffers1</pc>
            </pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1::VSGetConstantBuffers1</pc>
            </pc>.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>Configuring the pixel shaders</source>
          <target>Configuring the pixel shaders</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>Configuring a pixel shader in Direct3D 11 is done when the shader is loaded.</source>
          <target>Configuring a pixel shader in Direct3D 11 is done when the shader is loaded.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404649)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Uniforms are passed as constant buffers using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1::PSSetConstantBuffers1.</pc></pc></source>
          <target>Uniforms are passed as constant buffers using <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1::PSSetConstantBuffers1.</pc></pc></target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>OpenGL ES 2.0</source>
          <target>OpenGL ES 2.0</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>Direct3D 11</source>
          <target>Direct3D 11</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>glAttachShader</source>
          <target>glAttachShader</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>ID3D11Device1::CreatePixelShader</source>
          <target>ID3D11Device1::CreatePixelShader</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>glGetShaderiv, glGetShaderSource</source>
          <target>glGetShaderiv, glGetShaderSource</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>ID3D11DeviceContext1::PSGetShader</source>
          <target>ID3D11DeviceContext1::PSGetShader</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>glGetUniformfv, glGetUniformiv</source>
          <target>glGetUniformfv, glGetUniformiv</target>
        </segment>
      </unit>
      <unit id="209">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/hh404645)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1::PSGetConstantBuffers1</pc>
            </pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1::PSGetConstantBuffers1</pc>
            </pc>.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>Generating the final results</source>
          <target>Generating the final results</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>When the pipeline completes, you draw the results of the shader stages into the back buffer.</source>
          <target>When the pipeline completes, you draw the results of the shader stages into the back buffer.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>In Direct3D 11, just as it is with Open GL ES 2.0, this involves calling a draw command to output the results as a color map in the back buffer, and thensending that back buffer to the display.</source>
          <target>In Direct3D 11, just as it is with Open GL ES 2.0, this involves calling a draw command to output the results as a color map in the back buffer, and thensending that back buffer to the display.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>OpenGL ES 2.0</source>
          <target>OpenGL ES 2.0</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>Direct3D 11</source>
          <target>Direct3D 11</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>glDrawElements</source>
          <target>glDrawElements</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/ff476407)</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">[</data>
          <data id="id6">](https://msdn.microsoft.com/library/windows/desktop/ff476409)</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">\*</data>
          <data id="id10">[</data>
          <data id="id11">](https://msdn.microsoft.com/library/windows/desktop/ff476385)</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1::Draw</pc>
            </pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext1::DrawIndexed</pc></pc> (or other Draw<ph dataRef="id9" id="ph1" /> methods on <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">ID3D11DeviceContext1</pc></pc>).</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ID3D11DeviceContext1::Draw</pc>
            </pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3"><pc dataRefEnd="id8" dataRefStart="id7" id="p4">ID3D11DeviceContext1::DrawIndexed</pc></pc> (or other Draw<ph dataRef="id9" id="ph1" /> methods on <pc dataRefEnd="id11" dataRefStart="id10" id="p5"><pc dataRefEnd="id13" dataRefStart="id12" id="p6">ID3D11DeviceContext1</pc></pc>).</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>eglSwapBuffers</source>
          <target>eglSwapBuffers</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>IDXGISwapChain1::Present1</source>
          <target>IDXGISwapChain1::Present1</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source>Porting GLSL to HLSL</source>
          <target>Porting GLSL to HLSL</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>GLSL and HLSL are not very different beyond complex type support and syntax some overall syntax.</source>
          <target>GLSL and HLSL are not very different beyond complex type support and syntax some overall syntax.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>Many developers find it easiest to port between the two by aliasing common OpenGL ES 2.0 instructions and definitions to their HLSL equivalent.</source>
          <target>Many developers find it easiest to port between the two by aliasing common OpenGL ES 2.0 instructions and definitions to their HLSL equivalent.</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source>Note that Direct3D uses the Shader Model version to express the feature set of the HLSL supported by a graphics interface; OpenGL has a different version specification for HLSL.</source>
          <target>Note that Direct3D uses the Shader Model version to express the feature set of the HLSL supported by a graphics interface; OpenGL has a different version specification for HLSL.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>The following table attempts to give you some approximate idea of the shader language feature sets defined for Direct3D 11 and OpenGL ES 2.0 in the terms of the other's version.</source>
          <target>The following table attempts to give you some approximate idea of the shader language feature sets defined for Direct3D 11 and OpenGL ES 2.0 in the terms of the other's version.</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source>Shader language</source>
          <target>Shader language</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>GLSL feature version</source>
          <target>GLSL feature version</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source>Direct3D Shader Model</source>
          <target>Direct3D Shader Model</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>Direct3D 11 HLSL</source>
          <target>Direct3D 11 HLSL</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source>~4.30.</source>
          <target>~4.30.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>SM 5.0</source>
          <target>SM 5.0</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source>GLSL ES for OpenGL ES 2.0</source>
          <target>GLSL ES for OpenGL ES 2.0</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>1.40.</source>
          <target>1.40.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source>Older implementations of GLSL ES for OpenGL ES 2.0 may use 1.10 through 1.30.</source>
          <target>Older implementations of GLSL ES for OpenGL ES 2.0 may use 1.10 through 1.30.</target>
        </segment>
      </unit>
      <unit id="233">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>Check your original code with glGetString(GL<ph dataRef="id1" id="ph1" />SHADING<ph dataRef="id2" id="ph2" />LANGUAGE<ph dataRef="id3" id="ph3" />VERSION) or glGetString(SHADING<ph dataRef="id4" id="ph4" />LANGUAGE<ph dataRef="id5" id="ph5" />VERSION) to determine it.</source>
          <target>Check your original code with glGetString(GL<ph dataRef="id1" id="ph1" />SHADING<ph dataRef="id2" id="ph2" />LANGUAGE<ph dataRef="id3" id="ph3" />VERSION) or glGetString(SHADING<ph dataRef="id4" id="ph4" />LANGUAGE<ph dataRef="id5" id="ph5" />VERSION) to determine it.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source>~SM 2.0</source>
          <target>~SM 2.0</target>
        </segment>
      </unit>
      <unit id="235">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](glsl-to-hlsl-reference.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more details of differences between the two shader languages, as well as common syntax mappings, read the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GLSL-to-HLSL reference</pc>.</source>
          <target>For more details of differences between the two shader languages, as well as common syntax mappings, read the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GLSL-to-HLSL reference</pc>.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>Porting the OpenGL intrinsics to HLSL semantics</source>
          <target>Porting the OpenGL intrinsics to HLSL semantics</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>Direct3D 11 HLSL semantics are strings that, like a uniform or attribute name, are used to identify a value passed between the app and a shader program.</source>
          <target>Direct3D 11 HLSL semantics are strings that, like a uniform or attribute name, are used to identify a value passed between the app and a shader program.</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>While they can be any of a variety of possible strings, the best practice is to use a string like POSITION or COLOR that indicates the usage.</source>
          <target>While they can be any of a variety of possible strings, the best practice is to use a string like POSITION or COLOR that indicates the usage.</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source>You assign these semantics when you are constructing a constant buffer or buffer input layout.</source>
          <target>You assign these semantics when you are constructing a constant buffer or buffer input layout.</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source>You can also append a number between 0 and 7 to the semantic so that you use separate registers for similar values.</source>
          <target>You can also append a number between 0 and 7 to the semantic so that you use separate registers for similar values.</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source>For example: COLOR0, COLOR1, COLOR2...</source>
          <target>For example: COLOR0, COLOR1, COLOR2...</target>
        </segment>
      </unit>
      <unit id="242">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>Semantics that are prefixed with "SV<ph dataRef="id1" id="ph1" />" are system value semantics that are written to by your shader program; your app itself (running on the CPU) cannot modify them.</source>
          <target>Semantics that are prefixed with "SV<ph dataRef="id1" id="ph1" />" are system value semantics that are written to by your shader program; your app itself (running on the CPU) cannot modify them.</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source>Typically, these contain values that are inputs or outputs from another shader stage in the graphics pipeline, or are generated entirely by the GPU.</source>
          <target>Typically, these contain values that are inputs or outputs from another shader stage in the graphics pipeline, or are generated entirely by the GPU.</target>
        </segment>
      </unit>
      <unit id="244">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>Additionally, SV<ph dataRef="id1" id="ph1" /> semantics have different behaviors when they are used to specify input to or output from a shader stage.</source>
          <target>Additionally, SV<ph dataRef="id1" id="ph1" /> semantics have different behaviors when they are used to specify input to or output from a shader stage.</target>
        </segment>
      </unit>
      <unit id="245">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>For example, SV<ph dataRef="id1" id="ph1" />POSITION (output) contains the vertex data transformed during the vertex shader stage, and SV<ph dataRef="id2" id="ph2" />POSITION (input) contains the pixel position values interpolated during rasterization.</source>
          <target>For example, SV<ph dataRef="id1" id="ph1" />POSITION (output) contains the vertex data transformed during the vertex shader stage, and SV<ph dataRef="id2" id="ph2" />POSITION (input) contains the pixel position values interpolated during rasterization.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>Here are a few mappings for common OpenGL ES 2.0 shader instrinsics:</source>
          <target>Here are a few mappings for common OpenGL ES 2.0 shader instrinsics:</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>OpenGL system value</source>
          <target>OpenGL system value</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source>Use this HLSL Semantic</source>
          <target>Use this HLSL Semantic</target>
        </segment>
      </unit>
      <unit id="249">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>gl<ph dataRef="id1" id="ph1" />Position</source>
          <target>gl<ph dataRef="id1" id="ph1" />Position</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source>POSITION(n) for vertex buffer data.</source>
          <target>POSITION(n) for vertex buffer data.</target>
        </segment>
      </unit>
      <unit id="251">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>SV<ph dataRef="id1" id="ph1" />POSITION provides a pixel position to the pixel shader and cannot be written by your app.</source>
          <target>SV<ph dataRef="id1" id="ph1" />POSITION provides a pixel position to the pixel shader and cannot be written by your app.</target>
        </segment>
      </unit>
      <unit id="252">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>gl<ph dataRef="id1" id="ph1" />Normal</source>
          <target>gl<ph dataRef="id1" id="ph1" />Normal</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>NORMAL(n) for normal data provided by the vertex buffer.</source>
          <target>NORMAL(n) for normal data provided by the vertex buffer.</target>
        </segment>
      </unit>
      <unit id="254">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\[</data>
        </originalData>
        <segment state="initial">
          <source>gl<ph dataRef="id1" id="ph1" />TexCoord<ph dataRef="id2" id="ph2" />n</source>
          <target>gl<ph dataRef="id1" id="ph1" />TexCoord<ph dataRef="id2" id="ph2" />n</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source>TEXCOORD(n) for texture UV (ST in some OpenGL documentation) coordinate data supplied to a shader.</source>
          <target>TEXCOORD(n) for texture UV (ST in some OpenGL documentation) coordinate data supplied to a shader.</target>
        </segment>
      </unit>
      <unit id="256">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>gl<ph dataRef="id1" id="ph1" />FragColor</source>
          <target>gl<ph dataRef="id1" id="ph1" />FragColor</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source>COLOR(n) for RGBA color data supplied to a shader.</source>
          <target>COLOR(n) for RGBA color data supplied to a shader.</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source>Note that it is treated identically to coordinate data; the semantic simply helps you identify that it is color data.</source>
          <target>Note that it is treated identically to coordinate data; the semantic simply helps you identify that it is color data.</target>
        </segment>
      </unit>
      <unit id="259">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\[</data>
        </originalData>
        <segment state="initial">
          <source>gl<ph dataRef="id1" id="ph1" />FragData<ph dataRef="id2" id="ph2" />n</source>
          <target>gl<ph dataRef="id1" id="ph1" />FragData<ph dataRef="id2" id="ph2" />n</target>
        </segment>
      </unit>
      <unit id="260">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\[</data>
          <data id="id3">\]</data>
        </originalData>
        <segment state="initial">
          <source>SV<ph dataRef="id1" id="ph1" />Target<ph dataRef="id2" id="ph2" />n<ph dataRef="id3" id="ph3" /> for writing from a pixel shader to a target texture or other pixel buffer.</source>
          <target>SV<ph dataRef="id1" id="ph1" />Target<ph dataRef="id2" id="ph2" />n<ph dataRef="id3" id="ph3" /> for writing from a pixel shader to a target texture or other pixel buffer.</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source>The method by which you code for semantics is not the same as using intrinsics in OpenGL ES 2.0.</source>
          <target>The method by which you code for semantics is not the same as using intrinsics in OpenGL ES 2.0.</target>
        </segment>
      </unit>
      <unit id="262">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In OpenGL, you can access many of the intrinsics directly without any configuration or declaration; in Direct3D, you must declare a field in a specific constant buffer to use a particular semantic, or you declare it as the return value for a shader's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">main()</pc> method.</source>
          <target>In OpenGL, you can access many of the intrinsics directly without any configuration or declaration; in Direct3D, you must declare a field in a specific constant buffer to use a particular semantic, or you declare it as the return value for a shader's <pc dataRefEnd="id2" dataRefStart="id1" id="p1">main()</pc> method.</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source>Here's an example of a semantic used in a constant buffer definition:</source>
          <target>Here's an example of a semantic used in a constant buffer definition:</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source>This code defines a pair of simple constant buffers</source>
          <target>This code defines a pair of simple constant buffers</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source>And here's an example of a semantic used to define the value returned by a fragment shader:</source>
          <target>And here's an example of a semantic used to define the value returned by a fragment shader:</target>
        </segment>
      </unit>
      <unit id="266">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>In this case, SV<ph dataRef="id1" id="ph1" />TARGET is the location of the render target that the pixel color (defined as a vector with four float values) is written to when the shader completes execution.</source>
          <target>In this case, SV<ph dataRef="id1" id="ph1" />TARGET is the location of the render target that the pixel color (defined as a vector with four float values) is written to when the shader completes execution.</target>
        </segment>
      </unit>
      <unit id="267">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/bb509647)</data>
        </originalData>
        <segment state="initial">
          <source>For more details on the use of semantics with Direct3D, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HLSL Semantics</pc>.</source>
          <target>For more details on the use of semantics with Direct3D, read <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HLSL Semantics</pc>.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>